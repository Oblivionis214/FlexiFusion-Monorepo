[{"content": "Morpho Blue Whitepaper\nMathis Gontier Delaunay\nmathis@morpho.orgPaul Frambot\npaul@morpho.org\nQuentin Garchery\nquentin@morpho.orgMatthieu Lesbre\nmatthieu@morpho.org\nOctober 2023\nAbstract\nMorpho Blue is a noncustodial lending protocol implemented for the\nEthereum Virtual Machine. Morpho Blue offers a new trustless primi-\ntive with increased efficiency and flexibility compared to existing lending\nplatforms. It provides permissionless risk management and permissionless\nmarket creation with oracle agnostic pricing. It also enables higher collat-\neralization factors, improved interest rates, and lower gas consumption.\nThe protocol is designed to be a simple, immutable, and governance-\nminimized base layer that allows for a wide variety of other layers to be\nbuilt on top. Morpho Blue also offers a convenient developer experience\nwith a singleton implementation, callbacks, free flash loans, and account\nmanagement features.\n1 Introduction\n1.1 Motivation\nTraditionally, financial services rely on trusted institutions to process transac-\ntions and secure value. By allowing trustless code execution, blockchains and\nsmart contracts challenge this paradigm. Decentralized finance (DeFi) aims to\nmake financial services more open, efficient, and resilient than its traditional\nalternatives [9].\nTwo paths have emerged for building DeFi platforms: decentralized funds\nand protocols [8]. On the one hand, decentralized funds such as Compound\n[14] or Aave [18] are platforms similar to traditional funds, but they leverage\nonchain infrastructure and decentralized governance to function. While this\napproach offers a passive and liquid user experience, it has trust and scalability\nissues. For instance, decentralized funds rely on Decentralized Autonomous\nOrganizations (DAOs) and trusted contractors to manage the platform’s assets.\nThey accomplish this by monitoring numerous risk parameters [7] and upgrading\nlarge smart contracts. DAOs are also not best suited for operational scaling,\n1\nand they can often become a bottleneck as the protocol grows. Additionally,\ndue to their maintenance costs, these platforms necessitate fees from their users.\nOn the other hand, protocols such as Uniswap [2] are trustless and unopin-\nionated smart contracts performing financial operations. This path has demon-\nstrated remarkable resilience over the years. However, this primitive approach\ncomes with usability tradeoffs at the protocol level. For instance, profitable liq-\nuidity provision on UniswapV3 [3] may require active and sophisticated position\nmanagement.\nWhat we will present is in line with the vision that DeFi should be orga-\nnized in layers around trustless and open protocols, like the Internet. Onchain\nand offchain applications can be built on minimalist DeFi primitives to manage\npositions, handle compliance, or enhance usability for the user, for example. De-\npending on their needs, users can delegate some of their work to different layers.\nThis model allows them to benefit from the efficiency created by the network\neffect around the primitive while remaining fully usable. A good example of\nthis approach is UniswapX [4], which simplifies and optimizes the experience\nfor UniswapV4 [1] traders who may have difficulty identifying the appropriate\nswap routing and managing MEV protection.\nIn 2023, Morpho Optimizer [10] has become the third-largest lending plat-\nform on Ethereum, with $1 billion in deposited assets. This initial platform\nwas developed on top of Aave and Compound to enhance the efficiency of their\ninterest rate model. However, developing the most significant platform built on\ntop of decentralized lending platform helped us realize that they would never be\nsufficiently scalable, efficient, and resilient to reach the next level of adoption.\nAs stated in the initial whitepaper [10], Morpho must metamorphose to become\nfully autonomous and enhance the current state of DeFi lending.\n1.2 Introducing Morpho Blue\nThis paper introduces Morpho Blue, a new trustless and efficient lending proto-\ncol with permissionless market creation. Morpho Blue implements elementary,\nimmutable, and isolated lending markets. On a market, suppliers deposit the\nloan token into the smart contract. On the other side, borrowers provide the\ncollateral token to secure their loan whose Loan-To-Value ratio (LTV) can go\nup to the market’s Liquidation Loan-To-Value ratio (LLTV) . Above this limit,\nthe account will be eligible for liquidation. Assets are priced with the mar-\nket’s oracle . Borrowers pay lenders interest given by the market’s Interest Rate\nModel (IRM) . To create a market, one must specify: a loan token, a collateral\ntoken, an oracle, a LLTV and an IRM. Both LLTV and IRM are chosen from\ngovernance-defined collections.\nThe Morpho Governance cannot halt the operation of a market or modify\nits LLTV, IRM, and oracle. However, it has the ability to expand the range\nof LLTV and IRM options available for market creation. Additionally, in each\nmarket, the governance can enable a fee ranging from 0% to 25% of the total\namount of interests paid by borrowers.\n2\nIn the remainder of this whitepaper, we first describe how the protocol ex-\nternalizes risk management and how lenders can delegate this work to a permis-\nsionless risk management layer. The latter enables anyone to rebuild any user\nexperience with any risk profile on top of a primitive, which features permis-\nsionless market creation, oracle-agnostic pricing, and bad debt accounting.\nThen, we explain specifics of the design. Notably, the minimalist approach\nallows for full auditability of the protocol and unlocks new levels of efficiency\nfor interest rates, collateralization factors, and gas consumption.\nFinally, we detail how the codebase of Morpho Blue improves the expres-\nsiveness of integrations and power users by utilizing notable code patterns such\nas a singleton contract, callbacks, free flash loans, and account management.\n2 Externalized Risk Management\nRemoving the DAO risk management bottleneck is critical for DeFi lending to\nbecome more resilient and scalable. The current approach severely restricts the\nnumber of supported assets and confines users to a single risk-return profile[7].\nA primitive protocol removes these downsides, but it may imply a more com-\nplex user experience and fragmented liquidity. In this section, we first explain\nhow management layers can be rebuilt on top of Morpho Blue to re-aggregate\nliquidity and provide a passive user experience with diversified exposure for\nthose who prefer it. Then, we describe how Morpho Blue externalizes oracle\nrisk while still retaining the benefits provided by oracles. Finally, we outline\nhow Morpho Blue eliminates the risk of bank runs and can continue running\nindefinitely without requiring any built-in management, regardless of market\nconditions.\n2.1 Permissionless Risk Management\nMorpho Blue is designed to be the foundational layer of decentralized lending.\nIt is immutable, and the MORPHO governance cannot manage users’ funds (see\nsection 1.2).\nThe protocol is designed to leave the choices up to the users, notably by let-\nting anyone create markets with any loan asset, collateral asset, risk parameters,\nor oracle. For example, one could create the market DAI backed by WETH as\ncollateral with a LLTV of 90%, and using Chainlink[6] as the oracle.\nWhile this flexibility offers a broader diversity of use cases, lenders must\nactively select the market in which they want to provide liquidity. This can\nlead to liquidity fragmentation and introduce complexities in risk management,\nwhich may deter lenders with less knowledge. To solve this problem, Morpho\nBlue is designed to serve as a basic building block that allows for the addition\nof more layers of logic. These layers can enhance the core functionality by\nhandling risk management, or even compliance, and simplify the user experience\nfor passive lenders.\n3\nMorpho Blue lending markets can be assembled to reproduce a multi-asset\nlending pool. For example, a vault could accept WETH from passive lenders\nseeking a risk-adjusted and liquid experience, then have a risk expert allocate\ndeposits across various Morpho Blue markets where WETH is the loan asset.\nHere, the risk expert abstracts the complexities by selecting markets with ap-\npropriate collateral, LLTV, and oracles on behalf of users. In this case, WETH\nin the vault could be evenly allocated between stETH/WETH (97%, Chainlink,\nIRM) and cbETH/WETH (95%, Chainlink, IRM).\nThe example above illustrates how a Compound III ETH [13] experience can\nbe replicated on top of Morpho Blue. It is possible to recreate any lending pool\nwith any asset and any risk management method on this unique, trustless, and\nefficient primitive. As a result, it is also possible to build a vault similar to the\nAaveV3 WETH lending market.\nWith decentralized funds, when two platforms offer similar risks, their liquid-\nity is completely segregated. However, with Morpho Blue, users with different\nrisk profiles can share their liquidity on some common primitive markets. As\na result, markets will benefit from deeper liquidity, creating network effects for\nall participants. Additionally, risk management solutions can easily compete,\nleading to better and cheaper products for end users.\nIt is important to note that if the risk management of a platform built on top\nof Morpho Blue loses its users’ funds, for either bad management or a technical\nissue, it will not affect the security of the primitive.\n4\nThe following figure illustrates how Morpho Blue separates and modularizes\nrisk management by separating it from the lending protocol.\n2.2 Oracle-Agnostic Pricing\nFor a lending protocol to operate efficiently, it must have an accurate notion of\nprice. This price information is obtained by querying trading markets, whether\nthey are internal or external to the protocol.\nExternal price feeds, often called oracles, have various designs with different\naccuracy and security properties. For example, some oracles can provide fre-\nquent and accurate price updates, but they may be considered too centralized\nor manipulable to be at the core of a lending protocol.\nTo create more resilient lending primitives, some oracle-less protocols di-\nrectly incorporated the pricing mechanics at their core. However, by doing so,\nthe primitive has to handle both a trading and a lending mechanism simulta-\nneously. This brings additional complexity, increasing gas costs and limiting\nauditability and security.\nMorpho is dedicated exclusively to lending rather than trading. Its goal is\nto become the most open and efficient lending primitive while still operating in\na trustless manner. This is why the protocol has an oracle-agnostic approach\nrather than an oracle-less one.\nMorpho Blue has no oracle or trading mechanism built into the primitive.\nInstead, anyone can create a market by specifying an address that returns a\nprice for the loan and collateral assets. Some markets may feature Chainlink\nor Uniswap oracles, while others could hardcode the price or use an innovative\nmechanism similar to Ajna’s [16]. It is up to the users to decide which oracle\nthey agree to depend on by choosing the corresponding markets to interact with.\nLenders and borrowers could delegate this work to the permissionless risk man-\nagement layer (see section 2.1), should this choice be deemed too complicated.\nThis way, Morpho Blue remains simple, trustless, and unopinionated while\nensuring optimal efficiency for those who desire it.\n5\n2.3 Bad Debt Accounting\nIn this section, we note LTV the current Loan-To-Value ratio of the borrower.\nThis is the ratio of the value of the debt over the value of the borrower’s col-\nlateral. The Liquidation Incentive Factor denoted LIF is the factor defining\nthe bonus percentage given to the liquidator during a liquidation process. The\nhealth of a borrower’s position can be divided into three main categories.\n•IfLTV < LLTV , the position is healthy, and the borrower cannot be\nliquidated.\n•IfLLTV < LTV ≤1/LIF , a liquidator can repay part or all of the user’s\ndebt and seize part of its collateral.\n•If 1/LIF < LTV , a liquidator can seize all the collateral by repaying only\na share of the debt. There is no incentive for the liquidator or borrower\nto repay the remaining debt. The latter is commonly referred to as bad\ndebt.\nFor example, in a market with LLTV = 0.8 and LIF = 1.1 and a position\nwith $1000 as collateral and a $750 of debt cannot be liquidated. If its debt\ngrows to $850, then liquidators can repay all the debt and get back part of\nthe collateral. And if its debt grows to $950, then liquidators can take all the\ncollateral and repay only part of the debt, leaving bad debt on the market.\nThe impact of bad debt on lending platforms and the approach to handling\nit vary depending on the mechanism. For example, Aave and Compound do\nnot account for bad debt, meaning that the last lenders to withdraw from the\npool will bear the entire loss alone. To prevent losses, a lender would withdraw\nfrom the pool if they believe the bad debt is significant compared to the overall\nsize of the lending pool. As more lenders begin to withdraw their capital,\nthe proportion of bad debt increases, creating a stronger incentive for further\nwithdrawals. This results in a bank run on lending pools, which could lead to\nthe collapse of the entire platform.\nLending pools’ DAOs have implemented several measures to mitigate this\nexistential risk. These measures include compensating for bad debt through\ntheir fees or treasury, paying for insurance funds [19], or simply building a\ntrusted brand for the platform.\nWhile these mitigations may be suitable for a decentralized funds, managing\nprofits and losses on behalf of users is not an option for a protocol aiming to be\ntrustless and scalable. Morpho Blue takes a different approach by accounting\nfor the bad debt. When a liquidation occurs on Morpho Blue, if the borrower\nhas outstanding debt but no collateral, the losses are socialized proportionately\namong lenders, resulting in an instant loss for lenders. If for some reason liq-\nuidators don’t liquidate the position fully and thus do not account for bad debt,\nlenders can, if there is enough liquidity, temporarily withdraw their funds to ac-\ncount for the default without incurring any losses. As for future users, if there\nis unaccounted bad debt in the pool, they can account it before safely entering\n6\nthe market. As a result, Morpho Blue markets can continue running indefinitely\nin a trustless manner, regardless of market conditions.\n2.4 Uncapped Markets\nIn current lending pools, the governance can set supply caps, constraining the\ntotal amount of a given collateral that can be supplied. This is notably used to\ncontrol the exposure of lenders’ funds to each collateral in pools where there are\nmultiple ones. In addition, by ensuring that the size of the market stays below a\ncertain threshold, supply caps can, for example, be expected to guarantee there\nis enough liquidity on exchange markets for liquidations. The latter is far from\nbeing ideal, though. For example, an external market composed of the same\nassets can freely grow, thus challenging these liquidity assumptions and making\nthe guarantees of caps irrelevant.\nMorpho Blue has no cap mechanism because it fully externalizes risk man-\nagement. Instead, lenders are expected to achieve granular control over their\nexposure to different collateral by distributing their supplied volume across the\ndifferent Morpho Blue markets. As explained in section 2.1, this work can be\ndelegated to risk experts.\n3 Minimal Lending Markets\nIn the nascent stages of DeFi, liquidity was an indispensable component. With\nfew sophisticated actors, DeFi had to reinvent traditional finance mechanisms\nto make its markets usable. On the DEX side, constant function market makers\n(CFMMs) [2] were able to gather enough liquidity for emerging cryptocurrency\nmarkets by simplifying the market-making process to a “set and forget” design.\nOn the lending side, Compound and Aave gathered multiple markets in the\nsame pool, choosing common lending terms through the DAO and reinvesting\ncollateral, meaning that the collateral itself can be borrowed. Although effective\nin bootstrapping DeFi liquidity, this design was forced to make a trade-off:\nprioritizing ease of use over efficiency and scalability.\nDeFi is evolving. As the number and sophistication of actors increase, pro-\ntocols have evolved to allow greater expressiveness. This not only enhances\nefficiency [15] for the user but, somewhat paradoxically, can also result in more\nstreamlined logic and code.\n3.1 No Embedded Re-Hypothecation\nThe first constraint of multi-asset lending pools is the fact that the markets\nmust remain liquid at all times. Since collateral assets lent out may need to be\nliquidated, a consistent level of liquidity is required. Without it, it puts other\nmarkets at risk of bad debt. This means that the markets should not stay highly\nutilized for long periods of time. Concretely, it induces quite large spreads and\ninterest rates to spike at high utilization.\n7\nIn Morpho Blue, by default borrowers’ collateral is not lent out to other\nborrowers but rather stays fully liquid on Morpho Blue’s contract. As a result,\nthe market’s utilization can average higher, lowering the rate spread. Also, rates\ndo not need to spike at high utilizations, providing more stability to borrowers.\nAlthough, one can create markets with tokenized supply assets or a supply\nvault as collateral to do some re-hypothecation.\n3.2 Efficient LLTVs\nIn current multi-asset lending pools, there is typically one LLTV per collateral.\nIn other words, the LLTV doesn’t depend on the loan asset for a given collat-\neral. However, reasonable models [5][12] for assessing the LLTV associated with\na collateral asset also depend on the loan asset because one cares about the\nprice of one of them quoted in the other. Consequently, risk managers of such\nlending pools must compromise between risk on uncorrelated loan assets and\ninefficiency on correlated assets. Aave introduced in its v3 [11] efficiency and\nisolation modes, which offer partial solutions to this problem. Similarly, Euler\n[21] introduced the concept of borrow factor.\nMorpho Blue doesn’t face this issue because LLTVs are defined for a market\nwith one loan asset and one collateral asset. As a result, collateral ratios are\nimproved for borrowers, usually leading to more interest generated for lenders.\n3.3 Primitive Liquidations\nWhen a borrower’s LTV on a market exceeds the market’s LLTV, the borrower\ncan be liquidated. Anyone can perform a liquidation by repaying the account’s\ndebt and receiving the equivalent amount in collateral, along with an incentive\nfactor, defined by the Liquidation Incentive Factor (LIF).\nWhen establishing a liquidation incentive, there exists no definitive opti-\nmal solution. Rather, it is a fundamental trade-off between borrowers’ costs,\nliquidators’ incentives, and lenders’ safety. Current protocols have different ap-\nproaches to setting it. Aave and Compound have a fixed incentive per collateral\nset by governance, which tends to favor lenders. Euler [21] and Angle [20]\nhave a health-dependent Dutch auction mechanism, meaning that the liquida-\ntion incentive increases when the health of the position decreases. This favors\nborrowers and disfavors lenders by reducing the liquidatable amount and the\nabsolute incentive to liquidate above a certain health factor.\nRegarding the proportion of the debt that can be repaid by the liquidator, or\n“close factor”, there is a similar trade-off. Small close factors favor borrowers,\nand large ones favor lenders. Dynamic close factors, such as the ones allowing to\nliquidate only what is necessary to put the account back above water, reduce the\nimmediate incentive and thus favor borrowers. In addition to that, as discussed\nin [17], fixed close factors can be bypassed by performing successive liquidations.\nMorpho Blue opted for a static liquidation incentive factor (LIF) per market\nbecause borrowers can reduce their exposure to the liquidation penalty — for\nexample, by setting up an additional liquidation systems on top of Morpho Blue\n8\nthat are more favorable to them — while lenders can’t do anything to improve\non their guarantees. Its value depends on the LLTV of the market, according\nto the following formula:\nLIF = min( maxLIF,1\n1−cursor ×(1−LLTV ))\nWhere maxLIF = 1.15 and cursor = 0.3. This formula strikes a balance\nbetween providing enough incentive to the liquidator and ensuring there is a\nsufficient margin to liquidate the borrower without accruing any bad debt.\nWith the same rationale, Morpho Blue favors lenders by having no close\nfactor: when an account is liquidatable, its position can be fully repaid.\n3.4 Minimal Codebase\nMorpho Blue is an actual protocol. Hence, its contract is not upgradable, and\nthe code is immutable. It allows anyone to anticipate and understand all of the\nsmart contract’s behaviors in advance. In addition, it makes the protocol truly\ntrustless as you do not have to worry that the Morpho Governance can become\nmalicious. It is crucial to notice that Governance cannot manage any funds,\nalter any market beyond setting a protocol fee, or create new types of markets\nby enabling new LLTVs or IRMs (see section 1.2).\nThe code is intentionally minimalist, designed for auditability while staying\nflexible enough to allow expanding features on top of Morpho Blue. The imple-\nmentation is of around 650 source lines of code. Additionally, Morpho Blue’s\nsimplicity implies that it has less logic and a smaller storage footprint. This\nresults in lower gas fees for interacting with Morpho Blue.\n4 Enhanced Expressiveness\nMorpho Blue implements several convenient smart contract patterns and at-\ntributes, aiming to enhance the capabilities of developers and power users.\n4.1 Singleton\nMorpho Blue’s contract is a singleton, meaning all markets of a given chain\nlive in one smart contract. This pattern simplifies interactions and reduces\nthe gas consumption of platforms interacting with multiple markets of Morpho\nBlue, such as abstraction and delegation layers. It also concentrates liquidity\nfor Flash Loans, described in section 4.3.\n4.2 Callbacks\nIn the ‘supply‘, ‘supplyCollateral‘, ‘repay‘, and ‘liquidate‘ functions, which all\nperform a token transfer from the user to Morpho Blue, a callback to the user\ncan be performed before the tokens are sent in the execution. In the callback\n9\nfunction, one can do whatever they need to, including re-entering Morpho Blue.\nThis notably removes the dependency on external Flash Loans and significantly\nreduces gas costs to perform advanced operations.\n4.3 Free Flash Loans\nMorpho Blue’s singleton has a free flash loan function. Flash loans are loans that\ncan be taken without any collateral if they are repaid in the same transaction.\nThanks to its singleton architecture (see section 4.1), flash loans have access\nto the liquidity and collateral of all markets simultaneously. This is typically\nuseful in DeFi for liquidations, for opening and closing leveraged positions, and\nfor arbitrages.\n4.4 Account Management\nMorpho Blue has an authorization system that enables users to grant permis-\nsions on their position to any address. An authorized address can borrow on\nbehalf, withdraw on behalf, and withdraw collateral on behalf of the authorizer.\nAuthorization can be managed in two manners: via a classic function call or\nvia a message signature following the EIP-712 standard, similar to permit EIP-\n2612 for ERC20s. This feature allows notably for externally owned accounts to\nbatch their interactions with Morpho Blue by authorizing a bundler contract.\nIf needed, a more granular account management system can be implemented on\ntop.\nAcknowledgments\nThis whitepaper results from extensive collaboration among various companies,\nuniversities, and individual contributors. The authors would like to thank Paul-\nAdrien Nicole, Merlin Egalite, Romain Milon, Jean Grimal, Julien Thomas, and\nSimon Crotty from Morpho Labs, Morpho investors and advisors.\nDisclaimer\nThis paper is for general information purposes only. It does not constitute\ninvestment advice or a recommendation or solicitation to buy or sell any in-\nvestment and should not be used in the evaluation of the merits of making any\ninvestment decision. It should not be relied upon for accounting legal or tax ad-\nvice or investment recommendations. The opinions reflected herein are subject\nto change without being updated.\n10\nReferences\n[1] Hayden Adams, Moody Salem, Noah Zinsmeister, Sara Reynolds, Austin\nAdams, Will Pote, Mark Toda, Alice Henshaw, Emily Williams, and Dan\nRobinson. Uniswap v4 core [draft], 2023.\n[2] Hayden Adams, Noah Zinsmeister, and Dan Robinson. Uniswap v2 core,\n2020.\n[3] Hayden Adams, Noah Zinsmeister, Moody Salem, River Keefer, and Dan\nRobinson. Uniswap v3 core, 2021.\n[4] Hayden Adams, Noah Zinsmeister, Mark Toda, Emily Williams, Xin Wan,\nMatteo Leibowitz, Will Pote, Allen Lin, Eric Zhong, Zhiyuan Yang, Riley\nCampbell, Alex Karys, and Dan Robinson. Uniswapx, 2023.\n[5] Samuel N. Cohen, Marc Sabate-Vidales, Lukasz Szpruch, and Mathis Gon-\ntier Delaunay. The paradox of adversarial liquidation in decentralised lend-\ning, August 2023.\n[6] Steve Ellis, Ari Juels, and Sergey Nazarov. Chainlink, a decentralized oracle\nnetwork, September 2017.\n[7] Paul Frambot. It’s time to talk about defi’s risk management problems,\n2023.\n[8] Paul Frambot. The two paths ahead for defi: Decentralized brokers vs.\nprotocol, 2023.\n[9] Paul Frambot. What good can defi truly unlock?, 2023.\n[10] Paul Frambot, Mathis Gontier Delaunay, Vincent Danos, Adrien Husson,\nand Katia Babbar. Morpho optimizer whitepaper, 2023.\n[11] Emilio Frangela and Lasse Herskind. Aave v3 technical paper, January\n2022.\n[12] Chaos Labs. On aave’s e-mode classes and their risk parameters, March\n2023.\n[13] Robert Leshner. Compound iii is live, August 2022.\n[14] Robert Leshner and Geoffrey Hayes. Compound: The money market pro-\ntocol, February 2019.\n[15] J. Milionis, C. C. Moallemi, and T. Roughgarden. Complexity-approxi-\nmation trade-offs in exchange mechanisms: Amms vs. lobs. arXiv preprint\narXiv:2302.11652 , 2023.\n[16] Akash Patel, Ed Noepel, Gregory Di Prisco, George Niculae, Howard\nMalzberg, Ian Harvey, Joseph Quintilian, Matthew Cushman, and Michael\nHathaway. Ajna whitepaper, March 2023.\n11\n[17] K. Qin, L. Zhou, P. Gamito, P. Jovanovic, and A. Gervais. An empirical\nstudy of defi liquidations: Incentives, risks, and instabilities. In Proceed-\nings of the 21st ACM Internet Measurement Conference , pages 336–350,\nNovember 2021.\n[18] Aave Team. Aave protocol whitepaper, January 2020.\n[19] Aave Team. Aave safety module, 2023.\n[20] Angle Labs Core Team. Angle whitepaper, July 2021.\n[21] Euler Team. Euler white paper, 2021.\n12\n", "embedding": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "metadata": {"file_path": "/root/eth/docs/morpho-blue-whitepaper.pdf", "file_name": "morpho-blue-whitepaper.pdf", "file_size": 590959, "created_time": 1743213909.922349}}, {"content": "DeFi基础概念和术语\n\n1. 自动做市商（AMM）\n- 无需传统订单簿的去中心化交易机制\n- 使用数学公式自动计算资产价格\n- 常见实现包括Uniswap、Curve等\n\n2. 流动性挖矿\n- 向协议提供流动性获得奖励\n- 奖励通常以平台代币形式发放\n- 需要考虑无常损失风险\n\n3. 借贷协议\n- 用户可存入资产赚取利息\n- 超额抵押借出其他资产\n- 利率根据资金池使用率动态调整\n\n4. 合成资产\n- 通过智能合约创建的衍生品\n- 可以追踪任何资产的价格\n- 需要抵押物作为保证金\n\n5. 跨链桥\n- 在不同区块链间转移资产\n- 提供流动性以支持跨链操作\n- 需注意安全性和信任假设\n\n6. 收益聚合器\n- 自动优化收益策略\n- 在不同协议间转移资金\n- 降低用户操作复杂度\n\n7. 风险管理\n- 智能合约审计重要性\n- 抵押率和清算机制\n- 市场波动对策略影响", "embedding": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "metadata": {"file_path": "/root/eth/docs/defi_concepts.txt", "file_name": "defi_concepts.txt", "file_size": 918, "created_time": 1743219250.2200499}}]