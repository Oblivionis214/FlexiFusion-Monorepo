"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/index.ts
var lib_exports = {};
__export(lib_exports, {
  NotifiService: () => NotifiService
});
module.exports = __toCommonJS(lib_exports);

// lib/NotifiService.ts
var import_uuid = require("uuid");

// package.json
var version = "0.90.8";

// ../../node_modules/tslib/tslib.es6.js
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};

// ../../node_modules/graphql-tag/lib/index.js
var import_graphql = require("graphql");
var docCache = /* @__PURE__ */ new Map();
var fragmentSourceMap = /* @__PURE__ */ new Map();
var printFragmentWarnings = true;
var experimentalFragmentVariables = false;
function normalize(string) {
  return string.replace(/[\s,]+/g, " ").trim();
}
function cacheKeyFromLoc(loc) {
  return normalize(loc.source.body.substring(loc.start, loc.end));
}
function processFragments(ast) {
  var seenKeys = /* @__PURE__ */ new Set();
  var definitions = [];
  ast.definitions.forEach(function(fragmentDefinition) {
    if (fragmentDefinition.kind === "FragmentDefinition") {
      var fragmentName = fragmentDefinition.name.value;
      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
      var sourceKeySet = fragmentSourceMap.get(fragmentName);
      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
        if (printFragmentWarnings) {
          console.warn("Warning: fragment with name " + fragmentName + " already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
        }
      } else if (!sourceKeySet) {
        fragmentSourceMap.set(fragmentName, sourceKeySet = /* @__PURE__ */ new Set());
      }
      sourceKeySet.add(sourceKey);
      if (!seenKeys.has(sourceKey)) {
        seenKeys.add(sourceKey);
        definitions.push(fragmentDefinition);
      }
    } else {
      definitions.push(fragmentDefinition);
    }
  });
  return __assign(__assign({}, ast), { definitions });
}
function stripLoc(doc) {
  var workSet = new Set(doc.definitions);
  workSet.forEach(function(node) {
    if (node.loc)
      delete node.loc;
    Object.keys(node).forEach(function(key) {
      var value = node[key];
      if (value && typeof value === "object") {
        workSet.add(value);
      }
    });
  });
  var loc = doc.loc;
  if (loc) {
    delete loc.startToken;
    delete loc.endToken;
  }
  return doc;
}
function parseDocument(source) {
  var cacheKey = normalize(source);
  if (!docCache.has(cacheKey)) {
    var parsed = (0, import_graphql.parse)(source, {
      experimentalFragmentVariables,
      allowLegacyFragmentVariables: experimentalFragmentVariables
    });
    if (!parsed || parsed.kind !== "Document") {
      throw new Error("Not a valid GraphQL document.");
    }
    docCache.set(cacheKey, stripLoc(processFragments(parsed)));
  }
  return docCache.get(cacheKey);
}
function gql(literals) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (typeof literals === "string") {
    literals = [literals];
  }
  var result = literals[0];
  args.forEach(function(arg, i) {
    if (arg && arg.kind === "Document") {
      result += arg.loc.source.body;
    } else {
      result += arg;
    }
    result += literals[i + 1];
  });
  return parseDocument(result);
}
function resetCaches() {
  docCache.clear();
  fragmentSourceMap.clear();
}
function disableFragmentWarnings() {
  printFragmentWarnings = false;
}
function enableExperimentalFragmentVariables() {
  experimentalFragmentVariables = true;
}
function disableExperimentalFragmentVariables() {
  experimentalFragmentVariables = false;
}
var extras = {
  gql,
  resetCaches,
  disableFragmentWarnings,
  enableExperimentalFragmentVariables,
  disableExperimentalFragmentVariables
};
(function(gql_1) {
  gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
})(gql || (gql = {}));
gql["default"] = gql;
var lib_default = gql;

// lib/gql/generated.ts
var FilterFragmentFragmentDoc = lib_default`
    fragment FilterFragment on Filter {
  id
  name
  filterType
}
    `;
var SourceFragmentFragmentDoc = lib_default`
    fragment SourceFragment on Source {
  id
  name
  type
  blockchainAddress
  fusionEventTypeId
  applicableFilters {
    ...FilterFragment
  }
}
    ${FilterFragmentFragmentDoc}`;
var SourceGroupFragmentFragmentDoc = lib_default`
    fragment SourceGroupFragment on SourceGroup {
  id
  name
  sources {
    ...SourceFragment
  }
}
    ${SourceFragmentFragmentDoc}`;
var EmailTargetFragmentFragmentDoc = lib_default`
    fragment EmailTargetFragment on EmailTarget {
  emailAddress
  id
  isConfirmed
  name
}
    `;
var SmsTargetFragmentFragmentDoc = lib_default`
    fragment SmsTargetFragment on SmsTarget {
  id
  isConfirmed
  name
  phoneNumber
}
    `;
var TelegramTargetFragmentFragmentDoc = lib_default`
    fragment TelegramTargetFragment on TelegramTarget {
  id
  isConfirmed
  name
  telegramId
  confirmationUrl
}
    `;
var WebhookTargetFragmentFragmentDoc = lib_default`
    fragment WebhookTargetFragment on WebhookTarget {
  id
  url
  status
  format
  headers {
    key
    value
  }
  name
}
    `;
var DiscordTargetFragmentFragmentDoc = lib_default`
    fragment DiscordTargetFragment on DiscordTarget {
  id
  discordAccountId
  discriminator
  isConfirmed
  username
  name
  userStatus
  verificationLink
  discordServerInviteLink
}
    `;
var TargetGroupFragmentFragmentDoc = lib_default`
    fragment TargetGroupFragment on TargetGroup {
  id
  name
  emailTargets {
    ...EmailTargetFragment
  }
  smsTargets {
    ...SmsTargetFragment
  }
  telegramTargets {
    ...TelegramTargetFragment
  }
  webhookTargets {
    ...WebhookTargetFragment
  }
  discordTargets {
    ...DiscordTargetFragment
  }
}
    ${EmailTargetFragmentFragmentDoc}
${SmsTargetFragmentFragmentDoc}
${TelegramTargetFragmentFragmentDoc}
${WebhookTargetFragmentFragmentDoc}
${DiscordTargetFragmentFragmentDoc}`;
var AlertFragmentFragmentDoc = lib_default`
    fragment AlertFragment on Alert {
  id
  groupName
  name
  filterOptions
  filter {
    ...FilterFragment
  }
  sourceGroup {
    ...SourceGroupFragment
  }
  targetGroup {
    ...TargetGroupFragment
  }
}
    ${FilterFragmentFragmentDoc}
${SourceGroupFragmentFragmentDoc}
${TargetGroupFragmentFragmentDoc}`;
var ConnectedWalletFragmentFragmentDoc = lib_default`
    fragment ConnectedWalletFragment on ConnectedWallet {
  address
  walletBlockchain
}
    `;
var ConvMessagePageInfoFragmentDoc = lib_default`
    fragment ConvMessagePageInfo on PageInfo {
  hasNextPage
  endCursor
}
    `;
var ParticipantFragmentDoc = lib_default`
    fragment Participant on ConversationParticipant {
  conversationId
  conversationParticipantType
  profile {
    avatarData
    avatarDataType
    id
    preferredAddress
    preferredBlockchain
    preferredName
  }
  resolvedName
  userId
  walletAddress
  walletBlockchain
}
    `;
var ConversationMessageFragmentDoc = lib_default`
    fragment ConversationMessage on ConversationMessage {
  id
  userId
  conversationId
  createdDate
  updatedDate
  message
  conversationParticipant {
    ...Participant
  }
}
    ${ParticipantFragmentDoc}`;
var FusionNotificationHistoryEntryFragmentFragmentDoc = lib_default`
    fragment FusionNotificationHistoryEntryFragment on FusionNotificationHistoryEntry {
  __typename
  id
  createdDate
  read
  fusionEventVariables
  detail {
    __typename
    ... on AccountBalanceChangedEventDetails {
      walletBlockchain
      direction
      newValue
      previousValue
      tokenSymbol
      isWhaleWatch
    }
    ... on BroadcastMessageEventDetails {
      messageType: type
      subject
      message
      messageHtml
    }
    ... on DirectTenantMessageEventDetails {
      tenantName
      targetTemplatesJson
      templateVariablesJson
    }
    ... on NftCollectionsReportEventDetails {
      type
      providerName
      sourceLink
      collections {
        collectionId
        name
        imgUrl
        volume1Day
        volume1DayChange
      }
    }
    ... on ChatMessageReceivedEventDetails {
      senderName
      conversationId
      messageId
      senderId
      senderBlockchain
      senderName
      messageBody
    }
    ... on DAOProposalChangedEventDetails {
      tenantName
      proposalTitle: title
      description
      state
      daoUrl
      proposalUrl
    }
    ... on NftAuctionChangedEventDetails {
      auctionTitle: title
      auctionUrl
      walletBlockchain
      highBidAmount
      highBidSymbol
      imageUrl
    }
    ... on WalletsActivityReportEventDetails {
      providerName
      sourceLink
      walletActivityType: type
      wallets {
        address
        volume1Day
        maxPurchase1Day
        maxPurchaseName
        maxPurchaseImgUrl
        maxPurchaseTokenAddress
      }
    }
    ... on HealthValueOverThresholdEventDetails {
      name
      value
      threshold
      url
    }
    ... on GenericEventDetails {
      sourceName
      notificationTypeName
      genericMessage: message
      genericMessageHtml: messageHtml
      eventDetailsJson
      action {
        name
        url
      }
      icon
    }
  }
}
    `;
var NotificationHistoryEntryFragmentFragmentDoc = lib_default`
    fragment NotificationHistoryEntryFragment on NotificationHistoryEntry {
  __typename
  id
  createdDate
  eventId
  read
  sourceAddress
  category
  transactionSignature
  targets {
    type
    name
  }
  detail {
    __typename
    ... on AccountBalanceChangedEventDetails {
      walletBlockchain
      direction
      newValue
      previousValue
      tokenSymbol
      isWhaleWatch
    }
    ... on BroadcastMessageEventDetails {
      messageType: type
      subject
      message
      messageHtml
    }
    ... on DirectTenantMessageEventDetails {
      tenantName
      targetTemplatesJson
      templateVariablesJson
    }
    ... on NftCollectionsReportEventDetails {
      type
      providerName
      sourceLink
      collections {
        collectionId
        name
        imgUrl
        volume1Day
        volume1DayChange
      }
    }
    ... on ChatMessageReceivedEventDetails {
      senderName
      conversationId
      messageId
      senderId
      senderBlockchain
      senderName
      messageBody
    }
    ... on DAOProposalChangedEventDetails {
      tenantName
      proposalTitle: title
      description
      state
      daoUrl
      proposalUrl
    }
    ... on NftAuctionChangedEventDetails {
      auctionTitle: title
      auctionUrl
      walletBlockchain
      highBidAmount
      highBidSymbol
      imageUrl
    }
    ... on WalletsActivityReportEventDetails {
      providerName
      sourceLink
      walletActivityType: type
      wallets {
        address
        volume1Day
        maxPurchase1Day
        maxPurchaseName
        maxPurchaseImgUrl
        maxPurchaseTokenAddress
      }
    }
    ... on HealthValueOverThresholdEventDetails {
      name
      value
      threshold
      url
    }
    ... on GenericEventDetails {
      sourceName
      notificationTypeName
      genericMessage: message
      genericMessageHtml: messageHtml
      eventDetailsJson
      action {
        name
        url
      }
      icon
    }
  }
}
    `;
var PageInfoFragmentFragmentDoc = lib_default`
    fragment PageInfoFragment on PageInfo {
  hasNextPage
  endCursor
}
    `;
var TenantConfigFragmentFragmentDoc = lib_default`
    fragment TenantConfigFragment on TenantConfig {
  id
  type
  dataJson
}
    `;
var TenantUserAlertFragmentFragmentDoc = lib_default`
    fragment TenantUserAlertFragment on TenantUserAlert {
  id
  name
  groupName
  filterOptions
  filter {
    ...FilterFragment
  }
  sourceGroup {
    ...SourceGroupFragment
  }
  targetGroup {
    hasVerifiedFcm
    hasVerifiedSms
    hasVerifiedWeb3
    hasVerifiedEmails
    hasVerifiedWebhook
    hasVerifiedDiscord
    hasVerifiedTelegram
  }
}
    ${FilterFragmentFragmentDoc}
${SourceGroupFragmentFragmentDoc}`;
var TenantConnectedWalletFragmentFragmentDoc = lib_default`
    fragment TenantConnectedWalletFragment on TenantConnectedWallet {
  address
  walletBlockchain
}
    `;
var TenantUserFragmentFragmentDoc = lib_default`
    fragment TenantUserFragment on TenantUser {
  id
  alerts {
    ...TenantUserAlertFragment
  }
  connectedWallets {
    ...TenantConnectedWalletFragment
  }
}
    ${TenantUserAlertFragmentFragmentDoc}
${TenantConnectedWalletFragmentFragmentDoc}`;
var AuthorizationFragmentFragmentDoc = lib_default`
    fragment AuthorizationFragment on Authorization {
  token
  expiry
}
    `;
var UserFragmentFragmentDoc = lib_default`
    fragment UserFragment on User {
  email
  emailConfirmed
  authorization {
    ...AuthorizationFragment
  }
  roles
}
    ${AuthorizationFragmentFragmentDoc}`;
var UserTopicFragmentFragmentDoc = lib_default`
    fragment UserTopicFragment on UserTopic {
  name
  topicName
  targetCollections
  targetTemplate
}
    `;
var AddSourceToSourceGroupDocument = lib_default`
    mutation addSourceToSourceGroup($input: AddSourceToSourceGroupInput!) {
  addSourceToSourceGroup(addSourceToSourceGroupInput: $input) {
    ...SourceGroupFragment
  }
}
    ${SourceGroupFragmentFragmentDoc}`;
var BeginLogInByTransactionDocument = lib_default`
    mutation beginLogInByTransaction($walletAddress: String!, $walletBlockchain: WalletBlockchain!, $dappAddress: String!) {
  beginLogInByTransaction(
    beginLogInByTransactionInput: {walletAddress: $walletAddress, walletBlockchain: $walletBlockchain, dappAddress: $dappAddress}
  ) {
    nonce
  }
}
    `;
var BroadcastMessageDocument = lib_default`
    mutation broadcastMessage($idempotencyKey: String, $topicName: String!, $targetTemplates: [KeyValuePairOfTargetTypeAndStringInput!], $variables: [KeyValuePairOfStringAndStringInput!], $timestamp: Long!, $walletBlockchain: WalletBlockchain!, $signature: String!) {
  broadcastMessage(
    broadcastMessageInput: {idempotencyKey: $idempotencyKey, sourceAddress: $topicName, targetTemplates: $targetTemplates, variables: $variables, timestamp: $timestamp, walletBlockchain: $walletBlockchain}
    signature: $signature
  ) {
    id
  }
}
    `;
var CompleteLogInByTransactionDocument = lib_default`
    mutation completeLogInByTransaction($walletAddress: String!, $walletBlockchain: WalletBlockchain!, $dappAddress: String!, $randomUuid: String!, $transactionSignature: String!) {
  completeLogInByTransaction(
    completeLogInByTransactionInput: {walletAddress: $walletAddress, walletBlockchain: $walletBlockchain, dappAddress: $dappAddress, randomUuid: $randomUuid, transactionSignature: $transactionSignature}
  ) {
    ...UserFragment
  }
}
    ${UserFragmentFragmentDoc}`;
var ConnectWalletDocument = lib_default`
    mutation connectWallet($walletPublicKey: String!, $timestamp: Long!, $signature: String!, $walletBlockchain: WalletBlockchain!, $accountId: String, $connectWalletConflictResolutionTechnique: ConnectWalletConflictResolutionTechnique) {
  connectWallet(
    connectWalletInput: {walletPublicKey: $walletPublicKey, timestamp: $timestamp, walletBlockchain: $walletBlockchain, accountId: $accountId, connectWalletConflictResolutionTechnique: $connectWalletConflictResolutionTechnique}
    signature: $signature
  ) {
    ...ConnectedWalletFragment
  }
}
    ${ConnectedWalletFragmentFragmentDoc}`;
var CreateAlertDocument = lib_default`
    mutation createAlert($name: String!, $sourceGroupId: String!, $filterId: String!, $targetGroupId: String!, $filterOptions: String!, $groupName: String!) {
  createAlert(
    alertInput: {name: $name, sourceGroupId: $sourceGroupId, filterId: $filterId, targetGroupId: $targetGroupId, filterOptions: $filterOptions, groupName: $groupName}
  ) {
    ...AlertFragment
  }
}
    ${AlertFragmentFragmentDoc}`;
var CreateDirectPushAlertDocument = lib_default`
    mutation createDirectPushAlert($input: CreateDirectPushAlertInput!) {
  createDirectPushAlert(createDirectPushAlertInput: $input) {
    ...AlertFragment
  }
}
    ${AlertFragmentFragmentDoc}`;
var CreateDiscordTargetDocument = lib_default`
    mutation createDiscordTarget($name: String!, $value: String!) {
  createDiscordTarget(createTargetInput: {name: $name, value: $value}) {
    ...DiscordTargetFragment
  }
}
    ${DiscordTargetFragmentFragmentDoc}`;
var CreateEmailTargetDocument = lib_default`
    mutation createEmailTarget($name: String!, $value: String!) {
  createEmailTarget(createTargetInput: {name: $name, value: $value}) {
    ...EmailTargetFragment
  }
}
    ${EmailTargetFragmentFragmentDoc}`;
var CreateSmsTargetDocument = lib_default`
    mutation createSmsTarget($name: String!, $value: String!) {
  createSmsTarget(createTargetInput: {name: $name, value: $value}) {
    ...SmsTargetFragment
  }
}
    ${SmsTargetFragmentFragmentDoc}`;
var CreateSourceDocument = lib_default`
    mutation createSource($name: String, $blockchainAddress: String!, $type: SourceType!, $fusionEventTypeId: String) {
  createSource(
    createSourceInput: {name: $name, blockchainAddress: $blockchainAddress, type: $type, fusionEventTypeId: $fusionEventTypeId}
  ) {
    ...SourceFragment
  }
}
    ${SourceFragmentFragmentDoc}`;
var CreateSourceGroupDocument = lib_default`
    mutation createSourceGroup($name: String!, $sourceIds: [String!]!) {
  createSourceGroup(sourceGroupInput: {name: $name, sourceIds: $sourceIds}) {
    ...SourceGroupFragment
  }
}
    ${SourceGroupFragmentFragmentDoc}`;
var CreateSupportConversationDocument = lib_default`
    mutation createSupportConversation {
  createSupportConversation {
    id
    conversationType
    conversationGates {
      id
    }
    name
    createdDate
    participants {
      conversationParticipantType
      profile {
        id
        preferredAddress
        preferredName
        avatarData
        avatarDataType
      }
      resolvedName
    }
    backgroundImageUrl
  }
}
    `;
var CreateTargetGroupDocument = lib_default`
    mutation createTargetGroup($name: String!, $emailTargetIds: [String!]!, $smsTargetIds: [String!]!, $telegramTargetIds: [String!]!, $webhookTargetIds: [String!]!, $discordTargetIds: [String!]!) {
  createTargetGroup(
    targetGroupInput: {name: $name, emailTargetIds: $emailTargetIds, smsTargetIds: $smsTargetIds, telegramTargetIds: $telegramTargetIds, webhookTargetIds: $webhookTargetIds, discordTargetIds: $discordTargetIds}
  ) {
    ...TargetGroupFragment
  }
}
    ${TargetGroupFragmentFragmentDoc}`;
var CreateTelegramTargetDocument = lib_default`
    mutation createTelegramTarget($name: String!, $value: String!) {
  createTelegramTarget(createTargetInput: {name: $name, value: $value}) {
    ...TelegramTargetFragment
  }
}
    ${TelegramTargetFragmentFragmentDoc}`;
var CreateTenantUserDocument = lib_default`
    mutation createTenantUser($input: CreateTenantUserInput!) {
  createTenantUser(createTenantUserInput: $input) {
    ...TenantUserFragment
  }
}
    ${TenantUserFragmentFragmentDoc}`;
var CreateWebhookTargetDocument = lib_default`
    mutation createWebhookTarget($name: String!, $url: String!, $format: WebhookPayloadFormat!, $headers: [KeyValuePairOfStringAndStringInput!]!) {
  createWebhookTarget(
    createTargetInput: {name: $name, url: $url, format: $format, headers: $headers}
  ) {
    ...WebhookTargetFragment
  }
}
    ${WebhookTargetFragmentFragmentDoc}`;
var DeleteAlertDocument = lib_default`
    mutation deleteAlert($id: String!) {
  deleteAlert(alertId: $id) {
    id
  }
}
    `;
var DeleteDirectPushAlertDocument = lib_default`
    mutation deleteDirectPushAlert($input: DeleteDirectPushAlertInput!) {
  deleteDirectPushAlert(deleteDirectPushAlertInput: $input) {
    id
  }
}
    `;
var DeleteSourceGroupDocument = lib_default`
    mutation deleteSourceGroup($id: String!) {
  deleteSourceGroup(sourceGroupInput: {id: $id}) {
    id
  }
}
    `;
var DeleteTargetGroupDocument = lib_default`
    mutation deleteTargetGroup($id: String!) {
  deleteTargetGroup(targetGroupInput: {id: $id}) {
    id
  }
}
    `;
var DeleteUserAlertDocument = lib_default`
    mutation deleteUserAlert($alertId: String!) {
  deleteUserAlert(alertId: $alertId) {
    id
  }
}
    `;
var DeleteWebhookTargetDocument = lib_default`
    mutation deleteWebhookTarget($id: String!) {
  deleteWebhookTarget(deleteTargetInput: {id: $id}) {
    id
  }
}
    `;
var LogInFromDappDocument = lib_default`
    mutation logInFromDapp($walletBlockchain: WalletBlockchain!, $walletPublicKey: String!, $dappAddress: String!, $timestamp: Long!, $signature: String!, $accountId: String) {
  logInFromDapp(
    dappLogInInput: {walletBlockchain: $walletBlockchain, walletPublicKey: $walletPublicKey, dappAddress: $dappAddress, timestamp: $timestamp, accountId: $accountId}
    signature: $signature
  ) {
    ...UserFragment
  }
}
    ${UserFragmentFragmentDoc}`;
var LogInFromServiceDocument = lib_default`
    mutation logInFromService($input: ServiceLogInInput!) {
  logInFromService(serviceLogInInput: $input) {
    ...AuthorizationFragment
  }
}
    ${AuthorizationFragmentFragmentDoc}`;
var MarkFusionNotificationHistoryAsReadDocument = lib_default`
    mutation markFusionNotificationHistoryAsRead($ids: [String!]!, $beforeId: String, $readState: NotificationHistoryReadState) {
  markFusionNotificationHistoryAsRead(
    input: {ids: $ids, beforeId: $beforeId, readState: $readState}
  )
}
    `;
var PublishFusionMessageDocument = lib_default`
    mutation publishFusionMessage($eventTypeId: String!, $variablesJson: String!, $specificWallets: [KeyValuePairOfStringAndWalletBlockchainInput!]) {
  publishFusionMessage(
    publishFusionMessageInput: {eventTypeId: $eventTypeId, variablesJson: $variablesJson, specificWallets: $specificWallets}
  ) {
    eventUuid
  }
}
    `;
var RefreshAuthorizationDocument = lib_default`
    mutation refreshAuthorization {
  refreshAuthorization {
    ...AuthorizationFragment
  }
}
    ${AuthorizationFragmentFragmentDoc}`;
var RemoveSourceFromSourceGroupDocument = lib_default`
    mutation removeSourceFromSourceGroup($input: RemoveSourceFromSourceGroupInput!) {
  removeSourceFromSourceGroup(removeSourceFromSourceGroupInput: $input) {
    ...SourceGroupFragment
  }
}
    ${SourceGroupFragmentFragmentDoc}`;
var SendConversationMessageDocument = lib_default`
    mutation sendConversationMessage($sendConversationMessageInput: SendConversationMessageInput!) {
  sendConversationMessage(
    sendConversationMessageInput: $sendConversationMessageInput
  ) {
    ...ConversationMessage
  }
}
    ${ConversationMessageFragmentDoc}`;
var SendEmailTargetVerificationRequestDocument = lib_default`
    mutation sendEmailTargetVerificationRequest($targetId: String!) {
  sendEmailTargetVerificationRequest(
    sendTargetConfirmationRequestInput: {targetId: $targetId}
  ) {
    ...EmailTargetFragment
  }
}
    ${EmailTargetFragmentFragmentDoc}`;
var SendMessageDocument = lib_default`
    mutation sendMessage($input: SendMessageInput!) {
  sendMessage(sendMessageInput: $input)
}
    `;
var UpdateSourceGroupDocument = lib_default`
    mutation updateSourceGroup($id: String!, $name: String!, $sourceIds: [String!]!) {
  updateSourceGroup: createSourceGroup(
    sourceGroupInput: {id: $id, name: $name, sourceIds: $sourceIds}
  ) {
    ...SourceGroupFragment
  }
}
    ${SourceGroupFragmentFragmentDoc}`;
var UpdateTargetGroupDocument = lib_default`
    mutation updateTargetGroup($id: String!, $name: String!, $emailTargetIds: [String!]!, $smsTargetIds: [String!]!, $telegramTargetIds: [String!]!, $webhookTargetIds: [String!]!, $discordTargetIds: [String!]!) {
  updateTargetGroup: createTargetGroup(
    targetGroupInput: {id: $id, name: $name, emailTargetIds: $emailTargetIds, smsTargetIds: $smsTargetIds, telegramTargetIds: $telegramTargetIds, webhookTargetIds: $webhookTargetIds, discordTargetIds: $discordTargetIds}
  ) {
    ...TargetGroupFragment
  }
}
    ${TargetGroupFragmentFragmentDoc}`;
var UpdateUserSettingsDocument = lib_default`
    mutation updateUserSettings($input: UserSettingsInput!) {
  updateUserSettings(userSettings: $input) {
    detailedAlertHistoryEnabled
    userHasChatEnabled
    ftuStage
  }
}
    `;
var FetchDataDocument = lib_default`
    query fetchData {
  alert {
    ...AlertFragment
  }
  sourceGroup {
    ...SourceGroupFragment
  }
  connectedWallet {
    ...ConnectedWalletFragment
  }
  source {
    ...SourceFragment
  }
  targetGroup {
    ...TargetGroupFragment
  }
  emailTarget {
    ...EmailTargetFragment
  }
  smsTarget {
    ...SmsTargetFragment
  }
  telegramTarget {
    ...TelegramTargetFragment
  }
  discordTarget {
    ...DiscordTargetFragment
  }
  filter {
    ...FilterFragment
  }
}
    ${AlertFragmentFragmentDoc}
${SourceGroupFragmentFragmentDoc}
${ConnectedWalletFragmentFragmentDoc}
${SourceFragmentFragmentDoc}
${TargetGroupFragmentFragmentDoc}
${EmailTargetFragmentFragmentDoc}
${SmsTargetFragmentFragmentDoc}
${TelegramTargetFragmentFragmentDoc}
${DiscordTargetFragmentFragmentDoc}
${FilterFragmentFragmentDoc}`;
var FindTenantConfigDocument = lib_default`
    query findTenantConfig($input: FindTenantConfigInput!) {
  findTenantConfig(findTenantConfigInput: $input) {
    ...TenantConfigFragment
  }
}
    ${TenantConfigFragmentFragmentDoc}`;
var GetAlertsDocument = lib_default`
    query getAlerts {
  alert {
    ...AlertFragment
  }
}
    ${AlertFragmentFragmentDoc}`;
var GetConfigurationForDappDocument = lib_default`
    query getConfigurationForDapp($dappAddress: String!) {
  configurationForDapp(getConfigurationForDappInput: {dappAddress: $dappAddress}) {
    supportedSmsCountryCodes
    supportedTargetTypes
  }
}
    `;
var GetConnectedWalletsDocument = lib_default`
    query getConnectedWallets {
  connectedWallet {
    ...ConnectedWalletFragment
  }
}
    ${ConnectedWalletFragmentFragmentDoc}`;
var GetConversationMessagesDocument = lib_default`
    query getConversationMessages($getConversationMessagesInput: GetConversationMessagesInput!, $after: String, $first: Int) {
  conversationMessages(
    first: $first
    after: $after
    getConversationMessagesInput: $getConversationMessagesInput
  ) {
    nodes {
      ...ConversationMessage
    }
    pageInfo {
      ...ConvMessagePageInfo
    }
  }
}
    ${ConversationMessageFragmentDoc}
${ConvMessagePageInfoFragmentDoc}`;
var GetDiscordTargetsDocument = lib_default`
    query getDiscordTargets {
  discordTarget {
    ...DiscordTargetFragment
  }
}
    ${DiscordTargetFragmentFragmentDoc}`;
var GetEmailTargetsDocument = lib_default`
    query getEmailTargets {
  emailTarget {
    ...EmailTargetFragment
  }
}
    ${EmailTargetFragmentFragmentDoc}`;
var GetFiltersDocument = lib_default`
    query getFilters {
  filter {
    ...FilterFragment
  }
}
    ${FilterFragmentFragmentDoc}`;
var GetFusionNotificationHistoryDocument = lib_default`
    query getFusionNotificationHistory($after: String, $first: Int, $includeHidden: Boolean) {
  fusionNotificationHistory(
    after: $after
    first: $first
    includeHidden: $includeHidden
  ) {
    nodes {
      ...FusionNotificationHistoryEntryFragment
    }
    pageInfo {
      ...PageInfoFragment
    }
  }
}
    ${FusionNotificationHistoryEntryFragmentFragmentDoc}
${PageInfoFragmentFragmentDoc}`;
var GetNotificationHistoryDocument = lib_default`
    query getNotificationHistory($after: String, $first: Int) {
  notificationHistory(after: $after, first: $first) {
    nodes {
      ...NotificationHistoryEntryFragment
    }
    pageInfo {
      ...PageInfoFragment
    }
  }
}
    ${NotificationHistoryEntryFragmentFragmentDoc}
${PageInfoFragmentFragmentDoc}`;
var GetSmsTargetsDocument = lib_default`
    query getSmsTargets {
  smsTarget {
    ...SmsTargetFragment
  }
}
    ${SmsTargetFragmentFragmentDoc}`;
var GetSourceConnectionDocument = lib_default`
    query getSourceConnection($input: GetSourcesInput, $first: Int, $after: String) {
  sources(getSourcesInput: $input, first: $first, after: $after) {
    pageInfo {
      ...PageInfoFragment
    }
    nodes {
      ...SourceFragment
    }
  }
}
    ${PageInfoFragmentFragmentDoc}
${SourceFragmentFragmentDoc}`;
var GetSourceGroupsDocument = lib_default`
    query getSourceGroups {
  sourceGroup {
    ...SourceGroupFragment
  }
}
    ${SourceGroupFragmentFragmentDoc}`;
var GetSourcesDocument = lib_default`
    query getSources {
  source {
    ...SourceFragment
  }
}
    ${SourceFragmentFragmentDoc}`;
var GetTargetGroupsDocument = lib_default`
    query getTargetGroups {
  targetGroup {
    ...TargetGroupFragment
  }
}
    ${TargetGroupFragmentFragmentDoc}`;
var GetTelegramTargetsDocument = lib_default`
    query getTelegramTargets {
  telegramTarget {
    ...TelegramTargetFragment
  }
}
    ${TelegramTargetFragmentFragmentDoc}`;
var GetTenantConnectedWalletDocument = lib_default`
    query getTenantConnectedWallet($input: GetTenantConnectedWalletInput, $first: Int, $after: String) {
  tenantConnectedWallet(
    getTenantConnectedWalletInput: $input
    first: $first
    after: $after
  ) {
    pageInfo {
      ...PageInfoFragment
    }
    nodes {
      ...TenantConnectedWalletFragment
      user {
        ...TenantUserFragment
      }
    }
  }
}
    ${PageInfoFragmentFragmentDoc}
${TenantConnectedWalletFragmentFragmentDoc}
${TenantUserFragmentFragmentDoc}`;
var GetTenantUserDocument = lib_default`
    query getTenantUser($first: Int, $after: String) {
  tenantUser(first: $first, after: $after) {
    pageInfo {
      ...PageInfoFragment
    }
    nodes {
      ...TenantUserFragment
    }
  }
}
    ${PageInfoFragmentFragmentDoc}
${TenantUserFragmentFragmentDoc}`;
var GetTopicsDocument = lib_default`
    query getTopics {
  topics {
    nodes {
      ...UserTopicFragment
    }
  }
}
    ${UserTopicFragmentFragmentDoc}`;
var GetUnreadNotificationHistoryCountDocument = lib_default`
    query getUnreadNotificationHistoryCount {
  unreadNotificationHistoryCount {
    count
  }
}
    `;
var GetUserSettingsDocument = lib_default`
    query getUserSettings {
  userSettings {
    detailedAlertHistoryEnabled
    userHasChatEnabled
    ftuStage
  }
}
    `;
var GetWebhookTargetsDocument = lib_default`
    query getWebhookTargets {
  webhookTarget {
    ...WebhookTargetFragment
  }
}
    ${WebhookTargetFragmentFragmentDoc}`;
var defaultWrapper = (action, _operationName, _operationType) => action();
function getSdk(client, withWrapper = defaultWrapper) {
  return {
    addSourceToSourceGroup(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(AddSourceToSourceGroupDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "addSourceToSourceGroup", "mutation");
    },
    beginLogInByTransaction(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(BeginLogInByTransactionDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "beginLogInByTransaction", "mutation");
    },
    broadcastMessage(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(BroadcastMessageDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "broadcastMessage", "mutation");
    },
    completeLogInByTransaction(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CompleteLogInByTransactionDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "completeLogInByTransaction", "mutation");
    },
    connectWallet(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(ConnectWalletDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "connectWallet", "mutation");
    },
    createAlert(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateAlertDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createAlert", "mutation");
    },
    createDirectPushAlert(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateDirectPushAlertDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createDirectPushAlert", "mutation");
    },
    createDiscordTarget(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateDiscordTargetDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createDiscordTarget", "mutation");
    },
    createEmailTarget(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateEmailTargetDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createEmailTarget", "mutation");
    },
    createSmsTarget(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateSmsTargetDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createSmsTarget", "mutation");
    },
    createSource(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateSourceDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createSource", "mutation");
    },
    createSourceGroup(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateSourceGroupDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createSourceGroup", "mutation");
    },
    createSupportConversation(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateSupportConversationDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createSupportConversation", "mutation");
    },
    createTargetGroup(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateTargetGroupDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createTargetGroup", "mutation");
    },
    createTelegramTarget(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateTelegramTargetDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createTelegramTarget", "mutation");
    },
    createTenantUser(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateTenantUserDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createTenantUser", "mutation");
    },
    createWebhookTarget(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(CreateWebhookTargetDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "createWebhookTarget", "mutation");
    },
    deleteAlert(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(DeleteAlertDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "deleteAlert", "mutation");
    },
    deleteDirectPushAlert(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(DeleteDirectPushAlertDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "deleteDirectPushAlert", "mutation");
    },
    deleteSourceGroup(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(DeleteSourceGroupDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "deleteSourceGroup", "mutation");
    },
    deleteTargetGroup(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(DeleteTargetGroupDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "deleteTargetGroup", "mutation");
    },
    deleteUserAlert(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(DeleteUserAlertDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "deleteUserAlert", "mutation");
    },
    deleteWebhookTarget(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(DeleteWebhookTargetDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "deleteWebhookTarget", "mutation");
    },
    logInFromDapp(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(LogInFromDappDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "logInFromDapp", "mutation");
    },
    logInFromService(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(LogInFromServiceDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "logInFromService", "mutation");
    },
    markFusionNotificationHistoryAsRead(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(MarkFusionNotificationHistoryAsReadDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "markFusionNotificationHistoryAsRead", "mutation");
    },
    publishFusionMessage(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(PublishFusionMessageDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "publishFusionMessage", "mutation");
    },
    refreshAuthorization(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(RefreshAuthorizationDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "refreshAuthorization", "mutation");
    },
    removeSourceFromSourceGroup(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(RemoveSourceFromSourceGroupDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "removeSourceFromSourceGroup", "mutation");
    },
    sendConversationMessage(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(SendConversationMessageDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "sendConversationMessage", "mutation");
    },
    sendEmailTargetVerificationRequest(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(SendEmailTargetVerificationRequestDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "sendEmailTargetVerificationRequest", "mutation");
    },
    sendMessage(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(SendMessageDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "sendMessage", "mutation");
    },
    updateSourceGroup(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(UpdateSourceGroupDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "updateSourceGroup", "mutation");
    },
    updateTargetGroup(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(UpdateTargetGroupDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "updateTargetGroup", "mutation");
    },
    updateUserSettings(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(UpdateUserSettingsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "updateUserSettings", "mutation");
    },
    fetchData(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(FetchDataDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "fetchData", "query");
    },
    findTenantConfig(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(FindTenantConfigDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "findTenantConfig", "query");
    },
    getAlerts(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetAlertsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getAlerts", "query");
    },
    getConfigurationForDapp(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetConfigurationForDappDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getConfigurationForDapp", "query");
    },
    getConnectedWallets(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetConnectedWalletsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getConnectedWallets", "query");
    },
    getConversationMessages(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetConversationMessagesDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getConversationMessages", "query");
    },
    getDiscordTargets(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetDiscordTargetsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getDiscordTargets", "query");
    },
    getEmailTargets(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetEmailTargetsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getEmailTargets", "query");
    },
    getFilters(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetFiltersDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getFilters", "query");
    },
    getFusionNotificationHistory(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetFusionNotificationHistoryDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getFusionNotificationHistory", "query");
    },
    getNotificationHistory(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetNotificationHistoryDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getNotificationHistory", "query");
    },
    getSmsTargets(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetSmsTargetsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getSmsTargets", "query");
    },
    getSourceConnection(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetSourceConnectionDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getSourceConnection", "query");
    },
    getSourceGroups(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetSourceGroupsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getSourceGroups", "query");
    },
    getSources(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetSourcesDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getSources", "query");
    },
    getTargetGroups(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetTargetGroupsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getTargetGroups", "query");
    },
    getTelegramTargets(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetTelegramTargetsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getTelegramTargets", "query");
    },
    getTenantConnectedWallet(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetTenantConnectedWalletDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getTenantConnectedWallet", "query");
    },
    getTenantUser(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetTenantUserDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getTenantUser", "query");
    },
    getTopics(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetTopicsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getTopics", "query");
    },
    getUnreadNotificationHistoryCount(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetUnreadNotificationHistoryCountDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getUnreadNotificationHistoryCount", "query");
    },
    getUserSettings(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetUserSettingsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getUserSettings", "query");
    },
    getWebhookTargets(variables, requestHeaders) {
      return withWrapper((wrappedRequestHeaders) => client.request(GetWebhookTargetsDocument, variables, __spreadValues(__spreadValues({}, requestHeaders), wrappedRequestHeaders)), "getWebhookTargets", "query");
    }
  };
}

// lib/NotifiService.ts
var NotifiService = class {
  constructor(graphQLClient) {
    this._typedClient = getSdk(graphQLClient);
  }
  setJwt(jwt) {
    this._jwt = jwt;
  }
  async logOut() {
    this._jwt = void 0;
  }
  async addSourceToSourceGroup(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.addSourceToSourceGroup(variables, headers);
  }
  async beginLogInByTransaction(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.beginLogInByTransaction(variables, headers);
  }
  async broadcastMessage(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.broadcastMessage(variables, headers);
  }
  async completeLogInByTransaction(variables) {
    var _a, _b;
    const headers = this._requestHeaders();
    const result = await this._typedClient.completeLogInByTransaction(
      variables,
      headers
    );
    const token = (_b = (_a = result.completeLogInByTransaction) == null ? void 0 : _a.authorization) == null ? void 0 : _b.token;
    if (token !== void 0) {
      this._jwt = token;
    }
    return result;
  }
  async connectWallet(variables) {
    const headers = this._requestHeaders();
    return await this._typedClient.connectWallet(variables, headers);
  }
  async createAlert(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createAlert(variables, headers);
  }
  async createDirectPushAlert(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createDirectPushAlert(variables, headers);
  }
  async createEmailTarget(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createEmailTarget(variables, headers);
  }
  async createDiscordTarget(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createDiscordTarget(variables, headers);
  }
  async createSmsTarget(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createSmsTarget(variables, headers);
  }
  async createSource(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createSource(variables, headers);
  }
  async createSourceGroup(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createSourceGroup(variables, headers);
  }
  async createSupportConversation(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createSupportConversation(variables, headers);
  }
  async createTargetGroup(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createTargetGroup(variables, headers);
  }
  async createTenantUser(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createTenantUser(variables, headers);
  }
  async createWebhookTarget(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createWebhookTarget(variables, headers);
  }
  async createTelegramTarget(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.createTelegramTarget(variables, headers);
  }
  async deleteAlert(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.deleteAlert(variables, headers);
  }
  async DeleteDirectPushAlert(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.deleteDirectPushAlert(variables, headers);
  }
  async deleteUserAlert(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.deleteUserAlert(variables, headers);
  }
  async deleteSourceGroup(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.deleteSourceGroup(variables, headers);
  }
  async deleteTargetGroup(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.deleteTargetGroup(variables, headers);
  }
  async deleteWebhookTarget(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.deleteWebhookTarget(variables, headers);
  }
  async fetchData(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.fetchData(variables, headers);
  }
  async findTenantConfig(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.findTenantConfig(variables, headers);
  }
  async getAlerts(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getAlerts(variables, headers);
  }
  async getConfigurationForDapp(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getConfigurationForDapp(variables, headers);
  }
  async getConnectedWallets(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getConnectedWallets(variables, headers);
  }
  async getConversationMessages(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getConversationMessages(variables, headers);
  }
  async getEmailTargets(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getEmailTargets(variables, headers);
  }
  async getDiscordTargets(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getDiscordTargets(variables, headers);
  }
  async getFilters(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getFilters(variables, headers);
  }
  async getFusionNotificationHistory(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getFusionNotificationHistory(variables, headers);
  }
  /**
   * @deprecated Use getFusionNotificationHistory instead
   */
  async getNotificationHistory(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getNotificationHistory(variables, headers);
  }
  async getSmsTargets(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getSmsTargets(variables, headers);
  }
  async getSourceConnection(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getSourceConnection(variables, headers);
  }
  async getSourceGroups(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getSourceGroups(variables, headers);
  }
  async getSources(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getSources(variables, headers);
  }
  async getTargetGroups(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getTargetGroups(variables, headers);
  }
  async getTelegramTargets(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getTelegramTargets(variables, headers);
  }
  async getTenantConnectedWallets(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getTenantConnectedWallet(variables, headers);
  }
  async getTenantUser(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getTenantUser(variables, headers);
  }
  async getTopics(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getTopics(variables, headers);
  }
  async getUnreadNotificationHistoryCount(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getUnreadNotificationHistoryCount(
      variables,
      headers
    );
  }
  async getUserSettings(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getUserSettings(variables, headers);
  }
  async getWebhookTargets(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.getWebhookTargets(variables, headers);
  }
  async logInFromDapp(variables) {
    var _a, _b;
    const headers = this._requestHeaders();
    const result = await this._typedClient.logInFromDapp(variables, headers);
    const token = (_b = (_a = result.logInFromDapp) == null ? void 0 : _a.authorization) == null ? void 0 : _b.token;
    if (token !== void 0) {
      this._jwt = token;
    }
    return result;
  }
  async logInFromService(variables) {
    var _a;
    const headers = this._requestHeaders();
    const result = await this._typedClient.logInFromService(variables, headers);
    const token = (_a = result.logInFromService) == null ? void 0 : _a.token;
    if (token !== void 0) {
      this._jwt = token;
    }
    return result;
  }
  async markFusionNotificationHistoryAsRead(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.markFusionNotificationHistoryAsRead(
      variables,
      headers
    );
  }
  async updateUserSettings(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.updateUserSettings(variables, headers);
  }
  async refreshAuthorization(variables) {
    var _a;
    const headers = this._requestHeaders();
    const result = await this._typedClient.refreshAuthorization(
      variables,
      headers
    );
    const token = (_a = result.refreshAuthorization) == null ? void 0 : _a.token;
    if (token !== void 0) {
      this._jwt = token;
    }
    return result;
  }
  async removeSourceFromSourceGroup(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.removeSourceFromSourceGroup(variables, headers);
  }
  async sendConversationMessages(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.sendConversationMessage(variables, headers);
  }
  async sendEmailTargetVerificationRequest(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.sendEmailTargetVerificationRequest(
      variables,
      headers
    );
  }
  async sendMessage(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.sendMessage(variables, headers);
  }
  async updateSourceGroup(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.updateSourceGroup(variables, headers);
  }
  async updateTargetGroup(variables) {
    const headers = this._requestHeaders();
    return this._typedClient.updateTargetGroup(variables, headers);
  }
  _requestHeaders() {
    const requestId = (0, import_uuid.v4)();
    const headers = {
      "X-Request-Id": requestId,
      "X-Notifi-Client-Version": version
    };
    if (this._jwt !== void 0) {
      headers["Authorization"] = `Bearer ${this._jwt}`;
    }
    return headers;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NotifiService
});
