import * as graphql from 'graphql';
import { GraphQLClient } from 'graphql-request';
import { GraphQLClientRequestHeaders } from 'graphql-request/build/cjs/types';

declare type Maybe<T> = T | undefined;
declare type InputMaybe<T> = T | undefined;
declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
declare type MakeEmpty<T extends {
    [key: string]: unknown;
}, K extends keyof T> = {
    [_ in K]?: never;
};
declare type Incremental<T> = T | {
    [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
};
/** All built-in and custom scalars, mapped to their actual values */
declare type Scalars = {
    ID: {
        input: string;
        output: string;
    };
    String: {
        input: string;
        output: string;
    };
    Boolean: {
        input: boolean;
        output: boolean;
    };
    Int: {
        input: number;
        output: number;
    };
    Float: {
        input: number;
        output: number;
    };
    DateTime: {
        input: string;
        output: string;
    };
    Decimal: {
        input: number;
        output: number;
    };
    Long: {
        input: any;
        output: any;
    };
    TimeSpan: {
        input: any;
        output: any;
    };
};
declare type AccountBalanceChangeDirection = 'INCOMING' | 'OUTGOING';
declare type AccountBalanceChangeRow = {
    __typename?: 'AccountBalanceChangeRow';
    newValue: Scalars['Decimal']['output'];
    previousValue: Scalars['Decimal']['output'];
    tokenSymbol: Scalars['String']['output'];
};
declare type AccountBalanceChangedEventDetails = {
    __typename?: 'AccountBalanceChangedEventDetails';
    direction: AccountBalanceChangeDirection;
    explorerName: Scalars['String']['output'];
    explorerUrl: Scalars['String']['output'];
    isWhaleWatch: Scalars['Boolean']['output'];
    newValue: Scalars['Decimal']['output'];
    previousValue: Scalars['Decimal']['output'];
    tokenChanges: Array<AccountBalanceChangeRow>;
    tokenSymbol: Scalars['String']['output'];
    walletBlockchain: WalletBlockchain;
};
declare type ActivateFusionSourceInput = {
    /** The blockchain cursor value for the fusion source id. This is usually the starting block that the parser will run on. */
    cursorValue?: InputMaybe<Scalars['String']['input']>;
    /** Activate the fusion source with this id. */
    fusionSourceId: Scalars['String']['input'];
};
declare type ActivateFusionSourceResponse = {
    __typename?: 'ActivateFusionSourceResponse';
    /** Operation ID that will be set on success of queuing the operation. You can use this ID in the future to either poll for status or listen to updates from subscriptions */
    asyncOperationId?: Maybe<Scalars['String']['output']>;
    /**
     * The updated fusion source
     * @deprecated Do not use this anymore, as the operation is async and eventually consistent. Check for queued success by looking at AsyncOperationId, and then periodically poll or listen for async updates via subscriptions
     */
    fusionSource: FusionSourceWithCursor;
};
/** Object used to add a new bot */
declare type AddBotInput = {
    /** Bot credentials to be used when sending messages */
    botCredentials: Scalars['String']['input'];
    /** Type of bot to be added */
    botType: BotType;
    /** Unique name of the bot. This may also be used when users are shown the bot name such as in Telegram or Discord */
    name: Scalars['String']['input'];
};
/** Object used to add an email sender domain for a tenant */
declare type AddEmailSenderDomainInput = {
    /** Name of the domain that is being added */
    domainName: Scalars['String']['input'];
};
declare type AddFusionEventToFusionSourceInput = {
    /** Fusion event id to add to the fusion source */
    fusionEventId: Scalars['String']['input'];
    /** Fusion source id that the fusion event will be added to */
    fusionSourceId: Scalars['String']['input'];
};
declare type AddFusionEventToFusionSourceResponse = {
    __typename?: 'AddFusionEventToFusionSourceResponse';
    /** The updated fusion source after the fusion event has been added. */
    fusionSource: FusionSourceWithCursor;
};
/** Object used to create an FCM target. */
declare type AddOrUpdateMobileFcmTargetInput = {
    /** The Project number of the corresponding Firebase project. */
    appId: Scalars['String']['input'];
    /** An identifier unique to this device. */
    deviceId: Scalars['String']['input'];
    /** Optional friendly name to identity the device. */
    name?: InputMaybe<Scalars['String']['input']>;
    /** Optional array of TargetGroups to add this  FcmTarget to */
    targetGroupIds?: InputMaybe<Array<Scalars['String']['input']>>;
    /** The client platform. */
    targetPlatform: FcmTargetPlatform;
    /** The actual token from Firebase. */
    token: Scalars['String']['input'];
};
/** Add a Source to a SourceGroup. Id and AccountAddress/WalletBlockchain are mutually exclusive. If Id is set, other parameters will be ignored. Setting WalletAddress requires SourceType to be set */
declare type AddSourceToSourceGroupInput = {
    /** Fusion event type Id for fusion sources */
    fusionEventTypeId?: InputMaybe<Scalars['String']['input']>;
    /** Id of the SourceGroup object returned from CreateSourceGroup mutation or SourceGroup query */
    sourceGroupId: Scalars['String']['input'];
    /** Id of the Source object returned from CreateSource or Sources */
    sourceId?: InputMaybe<Scalars['String']['input']>;
    /** SourceType associated to WalletAddress */
    sourceType?: InputMaybe<SourceType>;
    /** For chains where public keys are rotatable and not tied to the lifetime of the account, use the accountId. Use public key for all other chains */
    walletAddress?: InputMaybe<Scalars['String']['input']>;
};
/** Notifi Alert */
declare type Alert = {
    __typename?: 'Alert';
    createdDate: Scalars['DateTime']['output'];
    filter: Filter;
    filterOptions: Scalars['String']['output'];
    groupName?: Maybe<Scalars['String']['output']>;
    id: Scalars['String']['output'];
    name?: Maybe<Scalars['String']['output']>;
    sourceGroup: SourceGroup;
    targetGroup: TargetGroup;
    updatedDate: Scalars['DateTime']['output'];
};
/** An event emitted when an alert is created in the tenant */
declare type AlertCreatedEvent = {
    __typename?: 'AlertCreatedEvent';
    alert?: Maybe<TenantUserAlert>;
    user?: Maybe<TenantUser>;
};
/** An event emitted when an alert is deleted in the tenant */
declare type AlertDeletedEvent = {
    __typename?: 'AlertDeletedEvent';
    alertId?: Maybe<Scalars['String']['output']>;
    user?: Maybe<TenantUser>;
};
declare type ApplyPolicy = 'AFTER_RESOLVER' | 'BEFORE_RESOLVER' | 'VALIDATION';
declare type ApprovalStatus = 'APPROVED' | 'PENDING';
/** Authorization */
declare type Authorization = {
    __typename?: 'Authorization';
    expiry: Scalars['DateTime']['output'];
    tenantInfo?: Maybe<CorsPolicy>;
    token: Scalars['String']['output'];
};
declare type AvatarDataType = 'STOCK_NOTIFI' | 'URL';
/** Contains the message to broadcast. */
declare type BatchBroadcastMessageInput = {
    /** Optional identifier used to dedupe messages for idempotency. If this is specified, messages sent after the first appearance of the value will be dropped. The initial request to queue this broadcast will still succeed. We recommend using UUID generators. */
    idempotencyKey?: InputMaybe<Scalars['String']['input']>;
    /** A dictionary of variables for each target destination. These values are used to render each target destiation. */
    targetDestinationVariables: Array<KeyValuePairOfTargetTypeAndDictionaryOfStringAndStringInput>;
    /** Topic name to publish to. Users that subscribed to this topic name, will receive the alert. */
    topicName: Scalars['String']['input'];
};
declare type BatchBroadcastMessageResult = {
    __typename?: 'BatchBroadcastMessageResult';
    /** Id of the message scheduled */
    id: Scalars['String']['output'];
};
/** Object used to setup a QR code for login */
declare type BeginLogInByQrCodeResult = {
    __typename?: 'BeginLogInByQRCodeResult';
    /** The nonce to use in the QR code. Code is invalid after 2 minutes */
    nonce: Scalars['String']['output'];
};
declare type BeginLogInByTransactionInput = {
    /** The dapp id for this tenant */
    dappAddress: Scalars['String']['input'];
    /** Address of wallet logging in with */
    walletAddress: Scalars['String']['input'];
    /** Blockchain of the wallet */
    walletBlockchain: WalletBlockchain;
};
declare type BeginLogInByTransactionResult = {
    __typename?: 'BeginLogInByTransactionResult';
    /** The nonce to use during public hash generation */
    nonce: Scalars['String']['output'];
};
declare type BlockchainType = 'ACALA' | 'APTOS' | 'ARBITRUM' | 'AVALANCHE' | 'BASE' | 'BINANCE' | 'ETHEREUM' | 'EVMOS' | 'INJECTIVE' | 'NEAR' | 'NIBIRU' | 'OFF_CHAIN' | 'OPTIMISM' | 'OSMOSIS' | 'POLYGON' | 'SOLANA' | 'SUI' | 'UNSPECIFIED' | 'ZKSYNC';
/** Bot */
declare type Bot = {
    __typename?: 'Bot';
    botType: BotType;
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    name: Scalars['String']['output'];
    status: BotStatus;
    updatedDate: Scalars['DateTime']['output'];
};
declare type BotStatus = 'ACTIVE' | 'ERROR' | 'PENDING' | 'UNSPECIFIED';
declare type BotType = 'DISCORD' | 'EMAIL' | 'FCM' | 'SMS' | 'TELEGRAM';
declare type BroadcastMessageEventDetails = {
    __typename?: 'BroadcastMessageEventDetails';
    message?: Maybe<Scalars['String']['output']>;
    messageHtml?: Maybe<Scalars['String']['output']>;
    sender?: Maybe<Scalars['String']['output']>;
    subject?: Maybe<Scalars['String']['output']>;
    type: Scalars['String']['output'];
};
/** Contains the message to broadcast. */
declare type BroadcastMessageInput = {
    /** Email payload for rendering custom html without a template. If provided, it will override all templates for email. */
    customHtmlPayload?: InputMaybe<CustomHtmlPayloadInput>;
    /** Optional identifier used to dedupe messages for idempotency. If this is specified, messages sent after the first appearance of the value will be dropped. The initial request to queue this broadcast will still succeed. We recommend using UUID generators. */
    idempotencyKey?: InputMaybe<Scalars['String']['input']>;
    /** Source address to publish from. This address should be connected to this user account that's publishing. */
    sourceAddress?: InputMaybe<Scalars['String']['input']>;
    /** Optionally specify the templates that should be used for each TargetType. */
    targetTemplates?: InputMaybe<Array<KeyValuePairOfTargetTypeAndStringInput>>;
    /** Timestamp in seconds since Unix epoch. January 1, 1970 (midnight UTC/GMT) */
    timestamp: Scalars['Long']['input'];
    /** Variables that recipients can use to filter on, along with templates used to expand/replace on. Default templates require 'subject' and 'body'. Custom templates will require their own variable sets. */
    variables?: InputMaybe<Array<KeyValuePairOfStringAndStringInput>>;
    /** Blockchain the SourceAddress is on. */
    walletBlockchain: WalletBlockchain;
};
declare type BroadcastMessageResult = {
    __typename?: 'BroadcastMessageResult';
    /** Id of the message scheduled */
    id?: Maybe<Scalars['String']['output']>;
};
declare type ChatMessageReceivedEventDetails = {
    __typename?: 'ChatMessageReceivedEventDetails';
    conversationId: Scalars['String']['output'];
    messageBody: Scalars['String']['output'];
    messageId: Scalars['String']['output'];
    senderBlockchain: WalletBlockchain;
    senderId: Scalars['String']['output'];
    senderName: Scalars['String']['output'];
};
/** Configuration values for Notifi. */
declare type ClientConfiguration = {
    __typename?: 'ClientConfiguration';
    /** The country codes supported for SMS, as ISO 3166-1 alpha-2 codes (two-letter codes) */
    supportedSmsCountryCodes?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    /** The supported target types */
    supportedTargetTypes?: Maybe<Array<TargetType>>;
};
declare type CommunityManagerPreviewInput = {
    /** Payload for rendering custom html without a template. If provided, it will override all templates. */
    customHtmlPayload?: InputMaybe<CustomHtmlPayloadInput>;
    /** The target format that the template will rendered */
    previewTarget: TemplateType;
    /** User topic name that the user owns */
    sourceAddress: Scalars['String']['input'];
    /** Timestamp in seconds since Unix epoch. January 1, 1970 (midnight UTC/GMT) */
    timestamp: Scalars['Long']['input'];
    /** Variables that recipients can use to filter on, along with templates used to expand/replace on. Default templates require 'subject' and 'body'. Custom templates will require their own variable sets. */
    variables: Array<KeyValuePairOfStringAndStringInput>;
    /** Must be Offchain for user topics */
    walletBlockchain: WalletBlockchain;
};
declare type CommunityManagerPreviewResult = {
    __typename?: 'CommunityManagerPreviewResult';
    /** Preview result. Most likely in the form of HTML */
    content: Scalars['String']['output'];
};
declare type CompleteLogInByQrCodeInput = {
    /** DappId of the tenant being accessed */
    dappId: Scalars['String']['input'];
    /** Nonce encoded in the QR code */
    nonce: Scalars['String']['input'];
};
declare type CompleteLogInByTransactionInput = {
    /** The dapp id for this tenant */
    dappAddress: Scalars['String']['input'];
    /** Random client generated UUID used in hash generation of nonce+uuid */
    randomUuid: Scalars['String']['input'];
    /** Timestamp in seconds since Unix epoch. Required for Aptos chain. This will be the timestamp on the transaction. */
    timestamp?: InputMaybe<Scalars['Long']['input']>;
    /** Transaction containing the Base64(SHA256(hash(nonce+uuid))) printed to 'Notifi Auth: <value>' */
    transactionSignature: Scalars['String']['input'];
    /** Address of wallet attempting to log in with */
    walletAddress: Scalars['String']['input'];
    /** Blockchain of the wallet */
    walletBlockchain: WalletBlockchain;
    /** Public key of wallet attempting to log in with. Required for Aptos chain. */
    walletPublicKey?: InputMaybe<Scalars['String']['input']>;
};
/** Describes how to deal with conflicts when connecting a wallet */
declare type ConnectWalletConflictResolutionTechnique = 
/** Continue if wallet is connected to another user account, but can be safely disconnected from the old user and moved. If this is the last wallet on the account, fail and report the error without making any changes */
'DISCONNECT'
/** Disconnects from the old user account even if it was the last wallet for that account. If this was the last wallet for the old account, then the account will be disabled and closed */
 | 'DISCONNECT_AND_CLOSE_OLD_ACCOUNT'
/** If there's any conflict, fail and report back the error without making any changes */
 | 'FAIL';
/** Object used to claim a wallet for the signed in account. */
declare type ConnectWalletInput = {
    /** Account ID if this chain supports it (required for Near and Aptos) */
    accountId?: InputMaybe<Scalars['String']['input']>;
    /** Describes how to deal with conflicts when connecting a wallet */
    connectWalletConflictResolutionTechnique?: InputMaybe<ConnectWalletConflictResolutionTechnique>;
    /** Timestamp in seconds since Unix epoch. January 1, 1970 (midnight UTC/GMT) */
    timestamp: Scalars['Long']['input'];
    /** Blockchain the wallet belongs to. */
    walletBlockchain: WalletBlockchain;
    /** User's wallet address. */
    walletPublicKey?: InputMaybe<Scalars['String']['input']>;
};
/** Notifi Connected Wallet */
declare type ConnectedWallet = {
    __typename?: 'ConnectedWallet';
    address?: Maybe<Scalars['String']['output']>;
    user?: Maybe<User>;
    walletBlockchain: WalletBlockchain;
};
/** Notifi Conversation object */
declare type Conversation = {
    __typename?: 'Conversation';
    backgroundImageUrl?: Maybe<Scalars['String']['output']>;
    conversationGates?: Maybe<Array<Maybe<ConversationGate>>>;
    conversationType: ConversationType;
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    lastConversationMessage?: Maybe<ConversationMessage>;
    name: Scalars['String']['output'];
    participants?: Maybe<Array<Maybe<ConversationParticipant>>>;
    updatedDate: Scalars['DateTime']['output'];
};
declare type ConversationGate = {
    __typename?: 'ConversationGate';
    conversationGateTokenType: ConversationGateTokenType;
    conversations?: Maybe<Array<Maybe<Conversation>>>;
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    minRequiredTokens: Scalars['Long']['output'];
    name: Scalars['String']['output'];
    participantCount: Scalars['Long']['output'];
    tokenAddress: Scalars['String']['output'];
    updatedDate: Scalars['DateTime']['output'];
    walletBlockchain: WalletBlockchain;
};
declare type ConversationGateTokenType = 'FUNGIBLE_TOKEN' | 'NFT_AUTHORITY' | 'NFT_COLLECTION' | 'NFT_COLLECTION_NAME_LTE3_DIGITS' | 'NFT_COLLECTION_NAME_LTE4_DIGITS' | 'NFT_CREATOR';
/** Notifi Conversation message object */
declare type ConversationMessage = {
    __typename?: 'ConversationMessage';
    conversationId: Scalars['String']['output'];
    conversationParticipant?: Maybe<ConversationParticipant>;
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    message: Scalars['String']['output'];
    updatedDate: Scalars['DateTime']['output'];
    userId: Scalars['String']['output'];
};
/** A connection to a list of items. */
declare type ConversationMessagesConnection = {
    __typename?: 'ConversationMessagesConnection';
    /** A list of edges. */
    edges?: Maybe<Array<ConversationMessagesEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<ConversationMessage>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type ConversationMessagesEdge = {
    __typename?: 'ConversationMessagesEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: ConversationMessage;
};
/** Notifi Conversation object */
declare type ConversationParticipant = {
    __typename?: 'ConversationParticipant';
    conversationId: Scalars['String']['output'];
    conversationParticipantType: ConversationParticipantType;
    profile: UserProfile;
    resolvedName?: Maybe<Scalars['String']['output']>;
    userId: Scalars['String']['output'];
    walletAddress: Scalars['String']['output'];
    walletBlockchain: WalletBlockchain;
};
/** Object used to add a participant to a conversation */
declare type ConversationParticipantInput = {
    /** Blockchain the wallet belongs to. */
    walletBlockchain: WalletBlockchain;
    /** User's wallet address. */
    walletPublicKey: Scalars['String']['input'];
};
declare type ConversationParticipantType = 'ADMIN' | 'BANNED' | 'MEMBER' | 'SUPPORT';
declare type ConversationType = 'CHANNEL' | 'GENERAL_PRIVATE' | 'GENERAL_PUBLIC' | 'SUPPORT';
/** A connection to a list of items. */
declare type ConversationsConnection = {
    __typename?: 'ConversationsConnection';
    /** A list of edges. */
    edges?: Maybe<Array<ConversationsEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<Conversation>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type ConversationsEdge = {
    __typename?: 'ConversationsEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: Conversation;
};
/** CorsPolicy for tenant */
declare type CorsPolicy = {
    __typename?: 'CorsPolicy';
    allowedDomains?: Maybe<Array<Maybe<CorsPolicyEntry>>>;
};
declare type CorsPolicyEntry = {
    __typename?: 'CorsPolicyEntry';
    originAddress: Scalars['String']['output'];
};
/** Object used to create an alert that listens to blockchain events. */
declare type CreateAlertInput = {
    /** Filter Id of generic or previously created Filter. */
    filterId?: InputMaybe<Scalars['String']['input']>;
    /** JSON object defining the options to use for Filter defined by FilterId */
    filterOptions?: InputMaybe<Scalars['String']['input']>;
    /** Name of group to attach this Alert to. */
    groupName?: InputMaybe<Scalars['String']['input']>;
    /** Friendly name that's displayed for the Alert. */
    name?: InputMaybe<Scalars['String']['input']>;
    /** SourceGroup Id from a previously created SourceGroup that the alert should watch. */
    sourceGroupId?: InputMaybe<Scalars['String']['input']>;
    /** TargetGroup Id from a previously created TargetGroup where messages should be sent. */
    targetGroupId?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to create a new conversation */
declare type CreateConversationInput = {
    participants: Array<ConversationParticipantInput>;
};
/** Object used to create an Alert used by a tenant owner to push messages directly to users. Use this from dapp services on behalf of Users */
declare type CreateDirectPushAlertInput = {
    emailAddresses?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
    /** JSON object defining the options to use for Filter defined by FilterId */
    filterOptions?: InputMaybe<Scalars['String']['input']>;
    phoneNumbers?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
    /** ID of the User obtained when calling CreateTenantUser */
    userId?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to create the tenant's discord bot configuration. */
declare type CreateDiscordBotConfigurationInput = {
    /** The tenant's Dicord client id from Discord's developer portal. Used for OAuth2 */
    discordClientId: Scalars['String']['input'];
    /** The tenant's Dicord client secret from Discord's developer portal. Used for OAuth2 */
    discordClientSecret: Scalars['String']['input'];
    /** The Discord server id in which the Discord bot resides */
    discordGuildId: Scalars['String']['input'];
    /** The invite link to join the tenant's Discord server. */
    discordServerInviteLink: Scalars['String']['input'];
    /** The redirect site for OAuth2. This url is configured in Discord's developer portal */
    redirectUrl: Scalars['String']['input'];
};
/** Object used to create an FCM target. */
declare type CreateFcmTargetInput = {
    /** The Project number of the corresponding Firebase project. */
    appId: Scalars['String']['input'];
    /** An identifier unique to this device. */
    deviceId: Scalars['String']['input'];
    /** Optional friendly name to identity the device. */
    name?: InputMaybe<Scalars['String']['input']>;
    /** Optional array of TargetGroups to add this  FcmTarget to */
    targetGroupIds?: InputMaybe<Array<Scalars['String']['input']>>;
    /** The client platform. */
    targetPlatform: FcmTargetPlatform;
    /** The actual token from Firebase. */
    token: Scalars['String']['input'];
};
declare type CreateFusionEventInput = {
    id?: InputMaybe<Scalars['String']['input']>;
    isCommunityManagerEvent?: InputMaybe<Scalars['Boolean']['input']>;
    metadataJson?: InputMaybe<Scalars['String']['input']>;
    name: Scalars['String']['input'];
};
declare type CreateFusionModuleInput = {
    /** Expected output schema in json */
    expectedMetadataOutputSchema?: InputMaybe<Scalars['String']['input']>;
    fusionEventTypeId: Scalars['String']['input'];
    id?: InputMaybe<Scalars['String']['input']>;
    moduleType: FusionModuleType;
    storageType: StorageType;
    validateMetadataOutput: Scalars['Boolean']['input'];
};
declare type CreateFusionModuleResponse = {
    __typename?: 'CreateFusionModuleResponse';
    fusionModule: FusionModuleData;
    fusionModulePutUrl: Scalars['String']['output'];
};
declare type CreateFusionSourceInput = {
    blockchainType: WalletBlockchain;
    /** Filter in json */
    filter: Scalars['String']['input'];
    fusionEventTypeIds: Array<Scalars['String']['input']>;
    id?: InputMaybe<Scalars['String']['input']>;
    maxScheduleIntervalInSeconds: Scalars['Int']['input'];
    name: Scalars['String']['input'];
};
declare type CreateFusionSourceResponse = {
    __typename?: 'CreateFusionSourceResponse';
    fusionSource: FusionSourceWithCursor;
    fusionSourcePutUrl: Scalars['String']['output'];
};
/** Object used to create a new user for the admin panel. */
declare type CreateOrUpdateUserInput = {
    /** Primary email address for account. This will be used for verification and password resets. */
    email: Scalars['String']['input'];
    /** List of roles to assign to the user */
    roles: Array<Scalars['String']['input']>;
};
/** Object used to create a source that can be used on alerts to listen for blockchain events. */
declare type CreateSourceInput = {
    /** Account address on blockchain. */
    blockchainAddress?: InputMaybe<Scalars['String']['input']>;
    /** Fusion event type Id for fusion sources */
    fusionEventTypeId?: InputMaybe<Scalars['String']['input']>;
    /** Friendly name for this Source. */
    name?: InputMaybe<Scalars['String']['input']>;
    /** Type of the BlockAddress being referenced. Can be SolanaWallet, EthereumWallet, TerraWallet, etc. */
    type: SourceType;
};
/** Object used to create individual targets. */
declare type CreateTargetInput = {
    /** Optional friendly name to identity the email address. */
    name?: InputMaybe<Scalars['String']['input']>;
    /** Target value to be used. For SMS it would be the phone number. For email it would be the email address. For Telegram, the Telegram id. Fore Discord, the value will be empty. */
    value?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to create a tenant config. */
declare type CreateTenantConfigInput = {
    /** JSON object defining the payload to store */
    data: Scalars['String']['input'];
    /** Id of the Tenant Config. */
    id?: InputMaybe<Scalars['String']['input']>;
    /** The type of config to create */
    type: TenantConfigType;
};
/** Object used to create a new tenant */
declare type CreateTenantInput = {
    /** Captcha answer */
    captchaResponse: Scalars['String']['input'];
    /** DappId that uniquely identifies this tenant. Must be >= 5 and <= 20 characters, only contain lowercase alpha-numeric, and up to a single '.' not preceeding or trailing */
    dappId?: InputMaybe<Scalars['String']['input']>;
    /** Primary email address for tenant. This will be used for verification, updates and contact */
    email: Scalars['String']['input'];
    /** Password used for account. Must be at least 10 characters with at least 1 capital, 1 lower, 1 numeric and one symbol */
    password: Scalars['String']['input'];
    /** Tenant name */
    tenantName: Scalars['String']['input'];
};
/** Object used to create a new User from a tenant's off-chain service. */
declare type CreateTenantUserInput = {
    /** Blockchain the wallet belongs to. */
    walletBlockchain: WalletBlockchain;
    /** User's wallet address. */
    walletPublicKey?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to create a webhook target. */
declare type CreateWeb3TargetInput = {
    /** Account ID or address. Use public key unless on a chain with accounts that can rotate keys, at which point use accountId */
    accountId: Scalars['String']['input'];
    /** Optional friendly name to identity the webhook. If specifying one, it must be unique for this type */
    name?: InputMaybe<Scalars['String']['input']>;
    /** Web3 protocol to use. The AccountId must already be initialized to receive messages on that protocol */
    protocol: Web3TargetProtocol;
    /** Blockchain of the accountId */
    walletBlockchain: WalletBlockchain;
};
/** Object used to create a webhook target. */
declare type CreateWebhookTargetInput = {
    /** The format of the payload sent to the Url */
    format: WebhookPayloadFormat;
    /** HTTP headers to add to the webhook requests */
    headers?: InputMaybe<Array<KeyValuePairOfStringAndStringInput>>;
    /** Optional friendly name to identity the webhook. */
    name?: InputMaybe<Scalars['String']['input']>;
    /** The Url to POST updates to. */
    url: Scalars['String']['input'];
};
declare type CursorEntry = {
    __typename?: 'CursorEntry';
    contextId?: Maybe<Scalars['String']['output']>;
    cursorValue: Scalars['String']['output'];
    lastModifiedTimestamp: Scalars['DateTime']['output'];
    processingState: Array<KeyValuePairOfStringAndString>;
    sourceState: FusionSourceState;
};
declare type CustomHtmlPayloadInput = {
    htmlMessage: Scalars['String']['input'];
    unstyledMessage?: InputMaybe<Scalars['String']['input']>;
};
/** CustomPluginStorage */
declare type CustomPluginStorageEntity = {
    __typename?: 'CustomPluginStorageEntity';
    createdDate: Scalars['DateTime']['output'];
    key?: Maybe<Scalars['String']['output']>;
    tenantId?: Maybe<Scalars['String']['output']>;
    updatedDate: Scalars['DateTime']['output'];
    value?: Maybe<Scalars['String']['output']>;
    version: Scalars['Long']['output'];
};
declare type DaoProposalChangedEventDetails = {
    __typename?: 'DAOProposalChangedEventDetails';
    daoUrl?: Maybe<Scalars['String']['output']>;
    description: Scalars['String']['output'];
    proposalUrl?: Maybe<Scalars['String']['output']>;
    state?: Maybe<Scalars['String']['output']>;
    tenantName: Scalars['String']['output'];
    title?: Maybe<Scalars['String']['output']>;
};
declare type DAppSubscription = {
    __typename?: 'DAppSubscription';
    dAppName: Scalars['String']['output'];
    id: Scalars['String']['output'];
    link?: Maybe<Scalars['String']['output']>;
    name: Scalars['String']['output'];
    targetGroup: TargetGroup;
};
/** Object used by Dapps to allow their members to log in to Notifi. */
declare type DappLogInInput = {
    /** Account ID if this chain supports it (required for Near and Aptos) */
    accountId?: InputMaybe<Scalars['String']['input']>;
    /** Dapp address/id */
    dappAddress?: InputMaybe<Scalars['String']['input']>;
    /** Timestamp in seconds since Unix epoch. January 1, 1970 (midnight UTC/GMT) */
    timestamp: Scalars['Long']['input'];
    /** WalletPublicKey chain */
    walletBlockchain?: InputMaybe<WalletBlockchain>;
    /** Dapp member's wallet public key */
    walletPublicKey?: InputMaybe<Scalars['String']['input']>;
};
declare type DeactivateFusionSourceInput = {
    /** Deactivate the fusion source with this id. */
    fusionSourceId: Scalars['String']['input'];
};
declare type DeactivateFusionSourceResponse = {
    __typename?: 'DeactivateFusionSourceResponse';
    /** Operation ID that will be set on success of queuing the operation. You can use this ID in the future to either poll for status or listen to updates from subscriptions */
    asyncOperationId?: Maybe<Scalars['String']['output']>;
    /**
     * The updated fusion source
     * @deprecated Do not use this anymore, as the operation is async and eventually consistent. Check for queued success by looking at AsyncOperationId, and then periodically poll or listen for async updates via subscriptions
     */
    fusionSource: FusionSourceWithCursor;
};
/** Object used to delete an Alert used by a tenant owner to push messages directly to users. Use this from dapp services on behalf of Users */
declare type DeleteDirectPushAlertInput = {
    /** ID of the Alert obtained when calling CreateDirectPushAlert */
    alertId?: InputMaybe<Scalars['String']['input']>;
};
declare type DeleteFusionSourceInput = {
    fusionSourceId: Scalars['String']['input'];
};
declare type DeleteFusionSourceResponse = {
    __typename?: 'DeleteFusionSourceResponse';
    success: Scalars['Boolean']['output'];
};
/** Object used to delete individual targets. */
declare type DeleteTargetInput = {
    /** Id of the target requesting to be deleted. */
    id?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to delete a tenant config. */
declare type DeleteTenantConfigInput = {
    /** Id of the Tenant Config. */
    id: Scalars['String']['input'];
    /** The type of config to delete */
    type: TenantConfigType;
};
declare type DirectTenantMessageEventDetails = {
    __typename?: 'DirectTenantMessageEventDetails';
    targetTemplatesJson?: Maybe<Scalars['String']['output']>;
    templateVariablesJson?: Maybe<Scalars['String']['output']>;
    tenantName: Scalars['String']['output'];
};
/** Object used to disconnect a wallet for the signed in account. */
declare type DisconnectWalletInput = {
    /** Blockchain the wallet belongs to. */
    walletBlockchain: WalletBlockchain;
    /** User's wallet address. */
    walletPublicKey?: InputMaybe<Scalars['String']['input']>;
};
/** DiscordBotConfiguration */
declare type DiscordBotConfiguration = {
    __typename?: 'DiscordBotConfiguration';
    discordClientId?: Maybe<Scalars['String']['output']>;
    discordGuildId?: Maybe<Scalars['String']['output']>;
    discordServerInviteLink?: Maybe<Scalars['String']['output']>;
    redirectUrl?: Maybe<Scalars['String']['output']>;
};
/** Discord Target */
declare type DiscordTarget = {
    __typename?: 'DiscordTarget';
    createdDate: Scalars['DateTime']['output'];
    discordAccountId?: Maybe<Scalars['String']['output']>;
    discordServerInviteLink?: Maybe<Scalars['String']['output']>;
    discriminator?: Maybe<Scalars['String']['output']>;
    id: Scalars['String']['output'];
    isConfirmed: Scalars['Boolean']['output'];
    name?: Maybe<Scalars['String']['output']>;
    updatedDate: Scalars['DateTime']['output'];
    userStatus: DiscordTargetStatus;
    username?: Maybe<Scalars['String']['output']>;
    verificationLink?: Maybe<Scalars['String']['output']>;
};
declare type DiscordTargetStatus = 'COMPLETE' | 'DISCORD_SERVER_NOT_JOINED' | 'UNVERIFIED';
/** Email setting defaults for the tenant */
declare type EmailSenderDefaults = {
    __typename?: 'EmailSenderDefaults';
    allowedDomains?: Maybe<Array<Maybe<CorsPolicyEntry>>>;
    defaultEmailSenderDisplayName?: Maybe<Scalars['String']['output']>;
    /** @deprecated Use defaultEmailSenderDomainId */
    defaultEmailSenderDomain?: Maybe<EmailSenderDomain>;
    defaultEmailSenderDomainId?: Maybe<Scalars['String']['output']>;
    defaultEmailSenderName?: Maybe<Scalars['String']['output']>;
};
/** Custom email domain that can be used to send email from */
declare type EmailSenderDomain = {
    __typename?: 'EmailSenderDomain';
    /** Create a CNAME for each of these tokens */
    dkimTokens?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    /** @deprecated Use DKIM instead */
    dnsVerificationToken?: Maybe<Scalars['String']['output']>;
    domain?: Maybe<Scalars['String']['output']>;
    id?: Maybe<Scalars['String']['output']>;
    verificationStatus: EmailSenderDomainStatus;
};
declare type EmailSenderDomainStatus = 'ERROR' | 'PENDING' | 'UNSPECIFIED' | 'VERIFIED';
declare type EmailTarget = {
    __typename?: 'EmailTarget';
    createdDate: Scalars['DateTime']['output'];
    emailAddress?: Maybe<Scalars['String']['output']>;
    id: Scalars['String']['output'];
    isConfirmed: Scalars['Boolean']['output'];
    name?: Maybe<Scalars['String']['output']>;
    updatedDate: Scalars['DateTime']['output'];
};
/** Object used to enable or disable FCM targets for a specific device */
declare type EnableOrDisableMobileFcmTargetsInput = {
    /** An identifier unique to this device. */
    deviceId: Scalars['String']['input'];
    /** Enable or disable Inbox mobile FCM targets for this device */
    inboxEnabled?: InputMaybe<Scalars['Boolean']['input']>;
    /** Enable or disable xMS mobile FCM targets for this device */
    xmsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
};
/** Object used to enqueue a new offchain event */
declare type EnqueueOffChainEventInput = {
    /** The bucket in which the event should be stored */
    bucketName: Scalars['String']['input'];
    /** The data that should be placed into the queue */
    offChainEvent: Scalars['String']['input'];
};
/** Response object from queueing an offchain event */
declare type EnqueueOffChainEventResult = {
    __typename?: 'EnqueueOffChainEventResult';
    /** The bucket in which the event should be stored */
    bucketName: Scalars['String']['output'];
};
/** A connection to a list of items. */
declare type EphemeralStorageConnection = {
    __typename?: 'EphemeralStorageConnection';
    /** A list of edges. */
    edges?: Maybe<Array<EphemeralStorageEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<EphemeralStorageEntry>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type EphemeralStorageEdge = {
    __typename?: 'EphemeralStorageEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: EphemeralStorageEntry;
};
/** Ephemeral storage entry used by the Fusion system */
declare type EphemeralStorageEntry = {
    __typename?: 'EphemeralStorageEntry';
    /** Key of the entry */
    key?: Maybe<Scalars['String']['output']>;
    /** Value of the entry */
    value?: Maybe<Scalars['String']['output']>;
};
/** Represents an individual ephemeral storage entry to be created/updated */
declare type EphemeralStorageEntryInput = {
    /** Key of the entry to update */
    key: Scalars['String']['input'];
    /** Value to update the entry to. Null values will cause the entry to be deleted */
    value?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to query ephemeral storage used by the Fusion system */
declare type EphemeralStorageQueryInput = {
    /** Keys of the entries to be returned. Max of 50 per query */
    keys?: InputMaybe<Array<Scalars['String']['input']>>;
};
declare type EventDetails = AccountBalanceChangedEventDetails | BroadcastMessageEventDetails | ChatMessageReceivedEventDetails | DaoProposalChangedEventDetails | DirectTenantMessageEventDetails | GenericEventDetails | HealthValueOverThresholdEventDetails | NftAuctionChangedEventDetails | NftCollectionsReportEventDetails | WalletsActivityReportEventDetails;
declare type FcmTarget = {
    __typename?: 'FcmTarget';
    appId?: Maybe<Scalars['String']['output']>;
    createdDate: Scalars['DateTime']['output'];
    deviceId?: Maybe<Scalars['String']['output']>;
    id: Scalars['String']['output'];
    isConfirmed: Scalars['Boolean']['output'];
    name?: Maybe<Scalars['String']['output']>;
    targetPlatform: FcmTargetPlatform;
    token?: Maybe<Scalars['String']['output']>;
    updatedDate: Scalars['DateTime']['output'];
};
declare type FcmTargetPlatform = 'ANDROID' | 'I_OS';
/** Notifi Filter */
declare type Filter = {
    __typename?: 'Filter';
    createdDate: Scalars['DateTime']['output'];
    filterType: FilterType;
    id: Scalars['String']['output'];
    name?: Maybe<Scalars['String']['output']>;
    updatedDate: Scalars['DateTime']['output'];
};
declare type FilterType = 'ASSET_BUYER_EVENTS' | 'ASSET_CATALOG_EVENTS' | 'ASSET_SELLER_EVENTS' | 'BALANCE' | 'BENQI_LENDING_HEALTH_EVENTS' | 'BROADCAST_MESSAGES' | 'COIN_PRICE_CHANGE_EVENTS' | 'DAO_PROPOSAL_EVENTS' | 'DELTA_PRIME_BORROW_RATE_EVENTS' | 'DELTA_PRIME_LENDING_HEALTH_EVENTS' | 'DELTA_PRIME_SUPPLY_RATE_EVENTS' | 'DEPOSITS' | 'DE_FI_YIELD_STRATEGIES' | 'DIRECT_TENANT_MESSAGES' | 'FUSION_SOURCE' | 'LIQUIDATIONS' | 'LIQUIDITY_POOL_PRICE_CHANGES' | 'MULTI_SIG_SAFE_EVENTS' | 'NFT_AUCTIONS' | 'NFT_BACKED_LOANS' | 'NOTIFI_CHAT_MESSAGES' | 'REALM_DAO_PROPOSAL_STATES' | 'STAKING_CONFIRMATION_EVENTS' | 'STAKING_REMINDER_EVENTS' | 'TRIBECA_DAO_PROPOSAL_STATES' | 'VALUE_THRESHOLD' | 'WEB3_CHAT_MESSAGES' | 'WITHDRAWALS';
/** Object used to find tenant configs. */
declare type FindTenantConfigInput = {
    /** The ID of the config to find */
    id: Scalars['String']['input'];
    /** The tenant identifier */
    tenant: Scalars['String']['input'];
    /** The type of config to query */
    type: TenantConfigType;
};
/** Contains the message to broadcast. */
declare type FusionBroadcastMessageInput = {
    /** Topic's fusion event id. Users that subscribed to this topic id, will receive the alert. */
    fusionTopicEventId: Scalars['String']['input'];
    /** Optional identifier used to dedupe messages for idempotency. If this is specified, messages sent after the first appearance of the value will be dropped. The initial request to queue this broadcast will still succeed. We recommend using UUID generators. */
    idempotencyKey?: InputMaybe<Scalars['String']['input']>;
    /** The specific wallets to target, if any */
    specificWallets?: InputMaybe<Array<KeyValuePairOfStringAndWalletBlockchainInput>>;
    /** A dictionary of variables for each target destination. These values are used to render each target destiation. */
    targetDestinationVariables: Array<KeyValuePairOfTargetTypeAndDictionaryOfStringAndStringInput>;
};
declare type FusionBroadcastMessageResult = {
    __typename?: 'FusionBroadcastMessageResult';
    /** Id of the message scheduled */
    id: Scalars['String']['output'];
};
declare type FusionCommunityManagerPreviewInput = {
    /** The target format that the template will rendered */
    previewTarget: TemplateType;
    /** Template id for rendering. Id will be the topic's fusion event id for most cases. */
    targetTemplateId: Scalars['String']['input'];
    /** Variables that recipients can use to filter on, along with templates used to expand/replace on. Default templates require 'subject' and 'body'. Custom templates will require their own variable sets. */
    variables: Array<KeyValuePairOfStringAndStringInput>;
};
declare type FusionCommunityManagerPreviewResult = {
    __typename?: 'FusionCommunityManagerPreviewResult';
    /** Preview result. Most likely in the form of HTML */
    content: Scalars['String']['output'];
};
declare type FusionEventCategory = 'COMMUNITY_MANAGER' | 'GENERAL' | 'TENANT_ADMIN' | 'TENANT_DEVELOPER' | 'TENANT_MARKETER' | 'UNSPECIFIED';
declare type FusionEventData = {
    __typename?: 'FusionEventData';
    archivedDate?: Maybe<Scalars['DateTime']['output']>;
    createdDate: Scalars['DateTime']['output'];
    fusionEventCategory: FusionEventCategory;
    fusionModules: Array<FusionModuleData>;
    fusionSource?: Maybe<FusionSourceWithCursor>;
    id: Scalars['String']['output'];
    metadata: Scalars['String']['output'];
    name: Scalars['String']['output'];
    tenantId: Scalars['String']['output'];
    updatedDate: Scalars['DateTime']['output'];
};
declare type FusionEventRequiredParserVariables = {
    __typename?: 'FusionEventRequiredParserVariables';
    fusionEventId: Scalars['String']['output'];
    requiredVariables: Array<RequiredVariable>;
};
/** A connection to a list of items. */
declare type FusionEventsConnection = {
    __typename?: 'FusionEventsConnection';
    /** A list of edges. */
    edges?: Maybe<Array<FusionEventsEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<FusionEventData>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type FusionEventsEdge = {
    __typename?: 'FusionEventsEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: FusionEventData;
};
declare type FusionExecutionDetails = GetFusionModuleExecutionDetailsResult | GetFusionSourceExecutionDetailsResult;
declare type FusionExecutionLogDataType = 'CLEAR_TEXT_DATA_URL' | 'UNKNOWN';
/** A connection to a list of items. */
declare type FusionExecutionLogsConnection = {
    __typename?: 'FusionExecutionLogsConnection';
    /** A list of edges. */
    edges?: Maybe<Array<FusionExecutionLogsEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<FusionExecutionDetails>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type FusionExecutionLogsEdge = {
    __typename?: 'FusionExecutionLogsEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: FusionExecutionDetails;
};
declare type FusionExecutionStatus = 'FAILED' | 'PROCESSING' | 'SUCCEEDED';
declare type FusionExecutionType = 
/** Return all execution types */
'ALL'
/** Return Fusion Alert Filter executions */
 | 'FUSION_ALERT_FILTER'
/** Return Fusion Source Filter executions */
 | 'FUSION_SOURCE_FILTER'
/** Return Fusion Source Parser executions */
 | 'FUSION_SOURCE_PARSER';
declare type FusionModuleData = {
    __typename?: 'FusionModuleData';
    active: Scalars['Boolean']['output'];
    archivedDate?: Maybe<Scalars['DateTime']['output']>;
    createdDate: Scalars['DateTime']['output'];
    expectedMetadataOutputSchema: Scalars['String']['output'];
    fusionEventId: Scalars['String']['output'];
    id: Scalars['String']['output'];
    moduleType: FusionModuleType;
    storageType: StorageType;
    tenantId: Scalars['String']['output'];
    validateMetadataOutput: Scalars['Boolean']['output'];
};
declare type FusionModuleType = 'ALERT_FILTER' | 'SOURCE_FILTER' | 'UNKNOWN';
/** A connection to a list of items. */
declare type FusionNotificationHistoryConnection = {
    __typename?: 'FusionNotificationHistoryConnection';
    /** A list of edges. */
    edges?: Maybe<Array<FusionNotificationHistoryEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<FusionNotificationHistoryEntry>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type FusionNotificationHistoryEdge = {
    __typename?: 'FusionNotificationHistoryEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: FusionNotificationHistoryEntry;
};
declare type FusionNotificationHistoryEntry = {
    __typename?: 'FusionNotificationHistoryEntry';
    createdDate: Scalars['DateTime']['output'];
    detail?: Maybe<EventDetails>;
    fusionEventVariables: Scalars['String']['output'];
    id: Scalars['String']['output'];
    read: Scalars['Boolean']['output'];
};
declare type FusionSourceState = 'ACTIVE' | 'ERROR' | 'INACTIVE' | 'PROCESSING' | 'UNKNOWN';
declare type FusionSourceWithCursor = {
    __typename?: 'FusionSourceWithCursor';
    active: Scalars['Boolean']['output'];
    archivedDate?: Maybe<Scalars['DateTime']['output']>;
    blockchainSource: WalletBlockchain;
    createdDate: Scalars['DateTime']['output'];
    cursor?: Maybe<CursorEntry>;
    filter: Scalars['String']['output'];
    fusionEventTypeIds?: Maybe<Array<Scalars['String']['output']>>;
    id: Scalars['String']['output'];
    maxScheduleInterval: Scalars['TimeSpan']['output'];
    name: Scalars['String']['output'];
    storageType: StorageType;
    tenantId: Scalars['String']['output'];
    updatedDate: Scalars['DateTime']['output'];
};
/** A connection to a list of items. */
declare type FusionSourcesConnection = {
    __typename?: 'FusionSourcesConnection';
    /** A list of edges. */
    edges?: Maybe<Array<FusionSourcesEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<FusionSourceWithCursor>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type FusionSourcesEdge = {
    __typename?: 'FusionSourcesEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: FusionSourceWithCursor;
};
declare type GenericEventAction = {
    __typename?: 'GenericEventAction';
    name: Scalars['String']['output'];
    url: Scalars['String']['output'];
};
declare type GenericEventDetails = {
    __typename?: 'GenericEventDetails';
    action?: Maybe<GenericEventAction>;
    eventDetailsJson?: Maybe<Scalars['String']['output']>;
    icon: GenericEventIconHint;
    message: Scalars['String']['output'];
    messageHtml?: Maybe<Scalars['String']['output']>;
    notificationTypeName: Scalars['String']['output'];
    sourceName: Scalars['String']['output'];
};
declare type GenericEventIconHint = 'CHART' | 'CHECKMARK' | 'CLOCK' | 'DAO' | 'DOWN_ARROW' | 'FLAG' | 'GRAPH' | 'INFO' | 'MEGAPHONE' | 'PERCENT' | 'STAR' | 'SWAP' | 'UP_ARROW' | 'URGENT' | 'WATCH';
/** Object used to query all Alerts or an individual. */
declare type GetAlertInput = {
    /** Id of the Alert to return. */
    id?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to query bots by bot type */
declare type GetBotsByTypeInput = {
    /** Bot type of Bot entity */
    botType: BotType;
};
/** Object used to specify the dapp address to be queried. */
declare type GetConfigurationForDappInput = {
    dappAddress?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to query TargetGroups. */
declare type GetConnectedWalletsInput = {
    /** Blockchain the wallet address belongs to. */
    connectedWalletBlockchain?: InputMaybe<WalletBlockchain>;
};
/** Parameters for getting a specific conversation */
declare type GetConversationInput = {
    conversationId: Scalars['String']['input'];
};
/** Object used to query messages for a conversation */
declare type GetConversationMessagesInput = {
    conversationId: Scalars['String']['input'];
};
/** Object used to query all Filters or an individual. */
declare type GetFilterInput = {
    id?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to query Fusion executions for this tenant */
declare type GetFusionExecutionLogsInput = {
    /** Optional parameter to specify which status of executions to return */
    fusionExecutionStatus?: InputMaybe<FusionExecutionStatus>;
    /** Optional parameter to specify which types of executions to return */
    fusionExecutionType?: InputMaybe<FusionExecutionType>;
    /** Optional parameter to specify which FusionSourceId or FusionModuleId to return executions for */
    fusionSourceOrModuleId?: InputMaybe<Scalars['String']['input']>;
};
declare type GetFusionModuleExecutionDetailsResult = {
    __typename?: 'GetFusionModuleExecutionDetailsResult';
    executionTimestamp: Scalars['DateTime']['output'];
    fusionModuleId: Scalars['String']['output'];
    fusionModuleType: FusionModuleType;
    logData: Scalars['String']['output'];
    logDataType: FusionExecutionLogDataType;
    originatingFusionSourceId: Scalars['String']['output'];
    status: FusionExecutionStatus;
};
declare type GetFusionModulePutUrlResponse = {
    __typename?: 'GetFusionModulePutUrlResponse';
    fusionModulePutUrl: Scalars['String']['output'];
    success: Scalars['Boolean']['output'];
};
/** Object to query the params needed for setting up a developer environment to build a Fusion Source parser */
declare type GetFusionSourceDevParamsInput = {
    /** FusionSource ID of the params */
    id: Scalars['String']['input'];
};
declare type GetFusionSourceDevParamsResponse = {
    __typename?: 'GetFusionSourceDevParamsResponse';
    /** Filter that when compared against a block and its tx's, will conditionally trigger this FusionSource to execute */
    blockFilter?: Maybe<Scalars['String']['output']>;
    /** Blockchain this parser is meant for */
    blockchain: BlockchainType;
    /** Optional variables that if provided, are required by the FusionSource to have returned in the output metadata in a top-level object named 'requiredParserVariables' */
    requiredParserVariablesPerEvent?: Maybe<Array<Maybe<FusionEventRequiredParserVariables>>>;
};
declare type GetFusionSourceExecutionDetailsResult = {
    __typename?: 'GetFusionSourceExecutionDetailsResult';
    cursorId: Scalars['String']['output'];
    executionTimestamp: Scalars['DateTime']['output'];
    fusionSourceId: Scalars['String']['output'];
    logData: Scalars['String']['output'];
    logDataType: FusionExecutionLogDataType;
    status: FusionExecutionStatus;
};
declare type GetFusionSourcePutUrlResponse = {
    __typename?: 'GetFusionSourcePutUrlResponse';
    fusionParserPutUrl: Scalars['String']['output'];
    success: Scalars['Boolean']['output'];
};
declare type GetFusionSourceStateInput = {
    fusionSourceId: Scalars['String']['input'];
};
/** Object used to query jabber messages for a thread */
declare type GetJabberMessagesInput = {
    threadId: Scalars['String']['input'];
};
declare type GetMessageDeliveryStatisticsResult = {
    __typename?: 'GetMessageDeliveryStatisticsResult';
    messagesByAttributes: MessageStats;
    messagesByTarget: MessageStats;
};
/** Object used to query the public topics */
declare type GetPublicTopicsInput = {
    /** Collections to use for filtering relevant topics */
    collectionName: Scalars['String']['input'];
};
/** Object used to query previous public UserTopic posts */
declare type GetPublicUserTopicPostInput = {
    /** Topic name to get previous posts for */
    topicName: Scalars['String']['input'];
};
/** Object used to query SourceGroups. */
declare type GetSourceGroupInput = {
    id?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to query Sources. Optional fields are mutually exclusive. */
declare type GetSourceInput = {
    /** Wallet address to query specific DAO Sources for. Memberships to DAOs will be verified and populated for connected wallet. */
    connectedWalletAddress?: InputMaybe<Scalars['String']['input']>;
    /** Blockchain the wallet address belongs to. */
    connectedWalletBlockchain?: InputMaybe<WalletBlockchain>;
    /** ID of the Source to be queried. */
    id?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to query Sources */
declare type GetSourcesInput = {
    /** IDs of the Sources to be queried. */
    ids?: InputMaybe<Array<Scalars['String']['input']>>;
    /** ID of the SourceGroup to be used. */
    sourceGroupId?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to specify the dapp address to be queried. */
declare type GetSupportedTargetTypesForDappInput = {
    dappAddress?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to query TargetGroups. */
declare type GetTargetGroupInput = {
    id?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to query Targets. */
declare type GetTargetInput = {
    id?: InputMaybe<Scalars['String']['input']>;
};
declare type GetTemplateDataInput = {
    templateName: Scalars['String']['input'];
    type: TemplateType;
};
declare type GetTemplateResponse = {
    __typename?: 'GetTemplateResponse';
    template?: Maybe<Template>;
};
declare type GetTenantAvailableReportsResult = {
    __typename?: 'GetTenantAvailableReportsResult';
    reports: Array<Scalars['String']['output']>;
};
/** Object used to query tenant configs. */
declare type GetTenantConfigInput = {
    /** The type of config to query */
    type: TenantConfigType;
};
/** Object used to query ConnectedWallets that belong to a Tenant's Users. This can only be used from a service caller. */
declare type GetTenantConnectedWalletInput = {
    userWallets?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
    userWalletsBlockchain: WalletBlockchain;
};
declare type GetTenantDeliveryReportRequestInput = {
    monthYears: Array<Scalars['String']['input']>;
};
declare type GetTenantDeliveryReportResult = {
    __typename?: 'GetTenantDeliveryReportResult';
    preSignedUrls: Array<KeyValuePairOfStringAndString>;
};
declare type GetTotalMessagesPerMonthByTenantResult = {
    __typename?: 'GetTotalMessagesPerMonthByTenantResult';
    messagesPerMonth: Array<KeyValuePairOfStringAndInt32>;
};
declare type GetUnreadNotificationHistoryCountResponse = {
    __typename?: 'GetUnreadNotificationHistoryCountResponse';
    count: Scalars['Int']['output'];
};
/** Object used to query an individual user profile */
declare type GetUserProfileInput = {
    /** UserId of the profile to query */
    id: Scalars['String']['input'];
};
declare type GetUsersByTopicResult = {
    __typename?: 'GetUsersByTopicResult';
    usersByTopic: Array<KeyValuePairOfStringAndInt32>;
};
declare type HealthValueOverThresholdEventDetails = {
    __typename?: 'HealthValueOverThresholdEventDetails';
    name: Scalars['String']['output'];
    threshold: Scalars['String']['output'];
    url: Scalars['String']['output'];
    value: Scalars['String']['output'];
};
/** A connection to a list of items. */
declare type JabberMessagesConnection = {
    __typename?: 'JabberMessagesConnection';
    /** A list of edges. */
    edges?: Maybe<Array<JabberMessagesEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<Maybe<JabberV1Message>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type JabberMessagesEdge = {
    __typename?: 'JabberMessagesEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node?: Maybe<JabberV1Message>;
};
/** A connection to a list of items. */
declare type JabberThreadsConnection = {
    __typename?: 'JabberThreadsConnection';
    /** A list of edges. */
    edges?: Maybe<Array<JabberThreadsEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<JabberV1Thread>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type JabberThreadsEdge = {
    __typename?: 'JabberThreadsEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: JabberV1Thread;
};
declare type JabberV1Message = {
    __typename?: 'JabberV1Message';
    id: Scalars['String']['output'];
    isEncrypted: Scalars['Boolean']['output'];
    message?: Maybe<Scalars['String']['output']>;
    messageBase64: Scalars['String']['output'];
    senderWalletAddress: Scalars['String']['output'];
    senderWalletBlockchain: WalletBlockchain;
    threadId: Scalars['String']['output'];
    timestamp?: Maybe<Scalars['DateTime']['output']>;
};
/** A Jabber chat participant */
declare type JabberV1Participant = {
    __typename?: 'JabberV1Participant';
    notifiProfile?: Maybe<UserProfile>;
    resolvedName?: Maybe<Scalars['String']['output']>;
    solPerMessage?: Maybe<Scalars['Float']['output']>;
    walletAddress: Scalars['String']['output'];
    walletBlockchain: WalletBlockchain;
};
/** A Jabber Conversation object */
declare type JabberV1Thread = {
    __typename?: 'JabberV1Thread';
    id: Scalars['String']['output'];
    lastConversationMessage?: Maybe<JabberV1Message>;
    participants: Array<JabberV1Participant>;
};
declare type KeyValuePairOfStringAndInt32 = {
    __typename?: 'KeyValuePairOfStringAndInt32';
    key: Scalars['String']['output'];
    value: Scalars['Int']['output'];
};
declare type KeyValuePairOfStringAndMessageDetails = {
    __typename?: 'KeyValuePairOfStringAndMessageDetails';
    key: Scalars['String']['output'];
    value: MessageDetails;
};
declare type KeyValuePairOfStringAndString = {
    __typename?: 'KeyValuePairOfStringAndString';
    key: Scalars['String']['output'];
    value: Scalars['String']['output'];
};
declare type KeyValuePairOfStringAndStringInput = {
    key: Scalars['String']['input'];
    value: Scalars['String']['input'];
};
declare type KeyValuePairOfStringAndWalletBlockchainInput = {
    key: Scalars['String']['input'];
    value: WalletBlockchain;
};
declare type KeyValuePairOfTargetTypeAndDictionaryOfStringAndStringInput = {
    key: TargetType;
    value: Array<KeyValuePairOfStringAndStringInput>;
};
declare type KeyValuePairOfTargetTypeAndStringInput = {
    key: TargetType;
    value: Scalars['String']['input'];
};
/** Object used to allow a user to leave conversation */
declare type LeaveConversationInput = {
    /** Conversation id */
    conversationId: Scalars['String']['input'];
};
declare type ListTemplatesInput = {
    templateName: Scalars['String']['input'];
};
declare type ListTemplatesResponse = {
    __typename?: 'ListTemplatesResponse';
    templates: Array<Template>;
};
/** Object used to create a new account */
declare type LogInByEmailAddressInput = {
    /** Email address */
    emailAddress: Scalars['String']['input'];
    /** Account password */
    password: Scalars['String']['input'];
};
/** Describes the issuer of the OAuth token being used */
declare type LogInByOAuthInput = {
    dappId: Scalars['String']['input'];
    oAuthIssuer: OAuthIssuer;
    token: Scalars['String']['input'];
};
declare type MarkFusionNotificationHistoryAsReadInput = {
    /** Marks the given notification id and all the notifications that came before the id as read */
    beforeId?: InputMaybe<Scalars['String']['input']>;
    /** List of ids to mark as read, leave as empty if using markNotificationAsReadBeforeId */
    ids: Array<Scalars['String']['input']>;
    readState?: InputMaybe<NotificationHistoryReadState>;
};
declare type MarkNotificationsAsReadInput = {
    /** List of Ids to update, at least 1 must be specified */
    ids: Array<Scalars['String']['input']>;
};
declare type MessageDetails = {
    __typename?: 'MessageDetails';
    messages: Scalars['Int']['output'];
    users: Scalars['Int']['output'];
};
declare type MessageStats = {
    __typename?: 'MessageStats';
    stats?: Maybe<Array<KeyValuePairOfStringAndMessageDetails>>;
};
declare type MessageType = 'DIRECT_TENANT_MESSAGE' | 'RAW_MESSAGE' | 'SIMPLE_HEALTH_THRESHOLD';
declare type MobilePushSettings = {
    __typename?: 'MobilePushSettings';
    inboxEnabled: Scalars['Boolean']['output'];
    xmsEnabled: Scalars['Boolean']['output'];
};
/** Input for retrieving device specific mobile push options */
declare type MobilePushSettingsInput = {
    /** Device ID */
    deviceId: Scalars['String']['input'];
};
declare type NftAuctionChangedEventDetails = {
    __typename?: 'NftAuctionChangedEventDetails';
    auctionUrl?: Maybe<Scalars['String']['output']>;
    highBidAmount: Scalars['Float']['output'];
    highBidSymbol?: Maybe<Scalars['String']['output']>;
    imageUrl?: Maybe<Scalars['String']['output']>;
    tenantName?: Maybe<Scalars['String']['output']>;
    title: Scalars['String']['output'];
    walletBlockchain: WalletBlockchain;
};
declare type NftCollectionStats = {
    __typename?: 'NftCollectionStats';
    collectionId: Scalars['String']['output'];
    imgUrl?: Maybe<Scalars['String']['output']>;
    name: Scalars['String']['output'];
    volume1Day?: Maybe<Scalars['String']['output']>;
    volume1DayChange?: Maybe<Scalars['String']['output']>;
};
declare type NftCollectionsReportEventDetails = {
    __typename?: 'NftCollectionsReportEventDetails';
    collections: Array<NftCollectionStats>;
    providerName: Scalars['String']['output'];
    sourceLink: Scalars['String']['output'];
    type: NftCollectionsReportType;
};
declare type NftCollectionsReportType = 'HOT' | 'MOST_TRADED';
declare type NotifiMutation = {
    __typename?: 'NotifiMutation';
    activateFusionModule: Scalars['Boolean']['output'];
    activateFusionSource: ActivateFusionSourceResponse;
    addBot: Bot;
    /** Add a custom sender domain that can be used for emails sent by this tenant custom_default@customdomain.com */
    addEmailSenderDomain?: Maybe<EmailSenderDomain>;
    addFusionEventToFusionSource: AddFusionEventToFusionSourceResponse;
    /** Add or update a mobile FcmTarget. This will add the FcmTarget to all TargetGroups */
    addOrUpdateMobileFcmTarget: FcmTarget;
    /** Add a source to a SourceGroup */
    addSourceToSourceGroup: SourceGroup;
    /** Allows a user to publish a message from a Source that they own for multiple destinations. */
    batchBroadcastMessage?: Maybe<BatchBroadcastMessageResult>;
    /** Mutation that allows users to begin flow for logging in via a QR code */
    beginLogInByQRCode: BeginLogInByQrCodeResult;
    /** Mutation to begin login flow via signed transaction */
    beginLogInByTransaction: BeginLogInByTransactionResult;
    /** Allows a user to publish a message from a Source that they own. */
    broadcastMessage?: Maybe<BroadcastMessageResult>;
    completeLogInByQRCode?: Maybe<User>;
    /** Mutation to complete login flow via signed transaction */
    completeLogInByTransaction?: Maybe<User>;
    /** Confirm email with token. */
    confirmEmail: Scalars['Boolean']['output'];
    /** Claim a wallet that belongs to this account. If another account was associated to this wallet, it will be removed. */
    connectWallet?: Maybe<ConnectedWallet>;
    /**
     * Mutation to create a new user or direct access account.
     * @deprecated This functionality is being removed for individual users
     */
    create?: Maybe<User>;
    /** Create a new Alert to watch for blockchain account changes. */
    createAlert?: Maybe<Alert>;
    /**
     * Create a new conversation
     * @deprecated It deprecated
     */
    createConversation: Conversation;
    /** Mutation to create a new Direct Push Alert for a User that's part of a this Tenant. */
    createDirectPushAlert?: Maybe<Alert>;
    createDiscordBotConfiguration: DiscordBotConfiguration;
    /** Create a DiscordTarget. */
    createDiscordTarget: DiscordTarget;
    /** Create an EmailTarget pointing to a destination that future Alerts can use to send messages to. */
    createEmailTarget?: Maybe<EmailTarget>;
    /** Create an Fcm pointing to a destination that future Alerts can use to send messages to. */
    createFcmTarget?: Maybe<FcmTarget>;
    createFusionEvent: FusionEventData;
    createFusionModule: CreateFusionModuleResponse;
    createFusionSource: CreateFusionSourceResponse;
    /** Mutation to create or update a user for the admin panel. */
    createOrUpdateUser?: Maybe<User>;
    /** Create an SmsTarget pointing to a destination that future Alerts can use to send messages to. */
    createSmsTarget?: Maybe<SmsTarget>;
    /** Create a Source pointing to a blockchain address that should be used for future Alerts. */
    createSource?: Maybe<Source>;
    /** Create a SourceGroup pointing to one or more Sources. */
    createSourceGroup?: Maybe<SourceGroup>;
    /**
     * Create or get the support conversation for this user
     * @deprecated It deprecated
     */
    createSupportConversation: Conversation;
    /** Create a TargetGroup pointing to one or more Targets that should be used for future Alerts. */
    createTargetGroup?: Maybe<TargetGroup>;
    /** Create an TelegramTarget pointing to a destination that future Alerts can use to send messages to. */
    createTelegramTarget?: Maybe<TelegramTarget>;
    /** Mutation to create a new tenant. Returned User is the tenant admin, associated with the provided email. Only 1 tenant can be assigned to an email */
    createTenant?: Maybe<User>;
    /** Create or update a tenant config */
    createTenantConfig: TenantConfig;
    /** Mutation to create a new User from a dapp off-chain service. */
    createTenantUser?: Maybe<TenantUser>;
    /** Create a Web3Target pointing to a destination that future Alerts can use to send messages to. */
    createWeb3Target?: Maybe<Web3Target>;
    /** Create a WebhookTarget pointing to a destination that future Alerts can use to send messages to. */
    createWebhookTarget?: Maybe<WebhookTarget>;
    deactivateFusionSource: DeactivateFusionSourceResponse;
    /** Delete the Alert. */
    deleteAlert?: Maybe<Alert>;
    /** Delete DApp subscription by ID. */
    deleteDAppSubscription?: Maybe<DAppSubscription>;
    /** Mutation to create a new Direct Push Alert for a User that's part of a this Tenant. */
    deleteDirectPushAlert?: Maybe<Alert>;
    deleteDiscordBotConfiguration?: Maybe<DiscordBotConfiguration>;
    /** Delete a DiscordTarget. */
    deleteDiscordTarget: DiscordTarget;
    /** Delete an EmailTarget. */
    deleteEmailTarget?: Maybe<EmailTarget>;
    /** Delete an FcmTarget. */
    deleteFcmTarget?: Maybe<FcmTarget>;
    deleteFusionEvent: Scalars['Boolean']['output'];
    deleteFusionModule: Scalars['Boolean']['output'];
    deleteFusionSource: DeleteFusionSourceResponse;
    /** Delete an SmsTarget. */
    deleteSmsTarget?: Maybe<SmsTarget>;
    /** Delete the Source. */
    deleteSource?: Maybe<Source>;
    /** Delete a SourceGroup. */
    deleteSourceGroup?: Maybe<SourceGroup>;
    /** Delete a TargetGroup. */
    deleteTargetGroup?: Maybe<TargetGroup>;
    /** Delete a TelegramTarget. */
    deleteTelegramTarget?: Maybe<TelegramTarget>;
    /** Delete a tenant config */
    deleteTenantConfig: TenantConfig;
    /** Delete an alert on behalf of a user that belongs to the tenant. */
    deleteUserAlert?: Maybe<Alert>;
    /** Delete a Web3Target */
    deleteWeb3Target?: Maybe<Web3Target>;
    /** Delete a WebhookTarget. */
    deleteWebhookTarget?: Maybe<WebhookTarget>;
    /** Disconnect a wallet that belongs to this account. If this the last wallet on an account with no recovery email to sign in with, this will fail. */
    disconnectWallet?: Maybe<ConnectedWallet>;
    /** Disable or enable mobile FcmTargets for a particular device */
    enableOrDisableMobileFcmTargets: Array<FcmTarget>;
    /** @deprecated Use publishFusionMessage endpoint on dpapi.notifi.network endpoint instead. See docs for more details. */
    enqueueOffChainEvent: EnqueueOffChainEventResult;
    /**
     * Allows a user to publish a message to a fusion event topic for multiple destinations.
     * @deprecated Use dpapi endpoint instead
     */
    fusionBroadcastMessage: FusionBroadcastMessageResult;
    /** Sends an email to confirm a newly created account. */
    generateEmailConfirmationToken: Scalars['Boolean']['output'];
    /**
     * Create a new conversation
     * @deprecated It deprecated
     */
    leaveConversation: Conversation;
    /**
     * Mutation to log in.
     * @deprecated Please use LogInByEmailAddress
     */
    logIn?: Maybe<User>;
    /** Mutation to log in by email address */
    logInByEmailAddress?: Maybe<User>;
    logInByOAuth?: Maybe<User>;
    /** Mutation that allows DAOs to log in via user wallet. */
    logInFromDapp?: Maybe<User>;
    /** Mutation to allow a service to log in. This is used to call other APIs on the tenant with elevated permissions. Note, this login can't be used for non service related APIs. */
    logInFromService?: Maybe<Authorization>;
    /** Mutation to log out. */
    logOut: Scalars['Boolean']['output'];
    /** Mark given notifications as read by the current user. */
    markFusionNotificationHistoryAsRead: Array<Scalars['String']['output']>;
    /** Mark given notifications as read by the current user. */
    markNotificationsAsRead?: Maybe<Array<NotificationHistoryEntry>>;
    /** @deprecated Use dpapi endpoint instead */
    publishFusionMessage: PublishFusionMessageResult;
    /** Use this API to get a refreshed JWT to prevent expiry. */
    refreshAuthorization?: Maybe<Authorization>;
    removeBot: Bot;
    /** Remove a custom sender domain */
    removeEmailSenderDomain?: Maybe<EmailSenderDomain>;
    removeFusionEventFromFusionSource: RemoveFusionEventFromFusionSourceResponse;
    /** Remove a source from a SourceGroup */
    removeSourceFromSourceGroup: SourceGroup;
    /** Mutation to remove a user from the admin panel. */
    removeTenantUserRoles?: Maybe<User>;
    /** Sets a new password for account owned by email if 2FA code is correct. */
    resetPassword: Scalars['Boolean']['output'];
    /**
     * Send a message to a conversation
     * @deprecated It deprecated
     */
    sendConversationMessage: ConversationMessage;
    /** Send Target confirmation. Currently only EmailTarget is supported. */
    sendEmailTargetVerificationRequest?: Maybe<EmailTarget>;
    /** Directly send a message to a particular wallet address. The message will be sent to any destinations the wallet owner has setup. */
    sendMessage: Scalars['Boolean']['output'];
    /** Sends a password reset email with a 2FA code embedded in the link. */
    sendResetPasswordEmail: Scalars['Boolean']['output'];
    /** Unsubscribe from an alert for a single target type */
    unsubscribe: UnsubscribeResult;
    updateBot: Bot;
    /** Update the CORS policy for this tenant that any users calls from this dapp will be applied to */
    updateCorsPolicy?: Maybe<CorsPolicy>;
    /** Update the default display name that will be used for emails sent by this tenant Custom Default <custom_default>@mailer.notifi.network */
    updateDefaultEmailSenderDisplayName?: Maybe<EmailSenderDefaults>;
    /** Update the default sender domain that will be used for emails sent by this tenant custom_default@customdomain.com */
    updateDefaultEmailSenderDomain?: Maybe<EmailSenderDefaults>;
    /** Update the default sender name that will be used for emails sent by this tenant custom_default@mailer.notifi.network */
    updateDefaultEmailSenderName?: Maybe<EmailSenderDefaults>;
    updateDiscordBotConfiguration: DiscordBotConfiguration;
    /** Update tenant's ephemeral storage used by the Fusion system */
    updateEphemeralStorage: UpdateEphemeralStorageResult;
    updateFusionEvent: FusionEventData;
    updateFusionSource: UpdateFusionSourceResponse;
    /** Update tenant's persistent storage used by the Fusion system */
    updatePersistentStorage: UpdatePersistentStorageResult;
    /** Mutation to update current user profile. */
    updateUserProfile?: Maybe<UserProfile>;
    /** Mutation to update current user settings. */
    updateUserSettings?: Maybe<UserSettings>;
    uploadTemplate: Scalars['Boolean']['output'];
    /** Verify a DiscordTarget. */
    verifyDiscordTarget: DiscordTarget;
    /** Verify EmailTarget for a user. */
    verifyTarget?: Maybe<EmailTarget>;
};
declare type NotifiMutationActivateFusionModuleArgs = {
    fusionModuleId: Scalars['String']['input'];
};
declare type NotifiMutationActivateFusionSourceArgs = {
    input: ActivateFusionSourceInput;
};
declare type NotifiMutationAddBotArgs = {
    addBotInput: AddBotInput;
};
declare type NotifiMutationAddEmailSenderDomainArgs = {
    addEmailSenderDomainInput: AddEmailSenderDomainInput;
};
declare type NotifiMutationAddFusionEventToFusionSourceArgs = {
    input: AddFusionEventToFusionSourceInput;
};
declare type NotifiMutationAddOrUpdateMobileFcmTargetArgs = {
    addOrUpdateMobileFcmTargetInput: AddOrUpdateMobileFcmTargetInput;
};
declare type NotifiMutationAddSourceToSourceGroupArgs = {
    addSourceToSourceGroupInput: AddSourceToSourceGroupInput;
};
declare type NotifiMutationBatchBroadcastMessageArgs = {
    broadcastMessageInput?: InputMaybe<BatchBroadcastMessageInput>;
};
declare type NotifiMutationBeginLogInByTransactionArgs = {
    beginLogInByTransactionInput: BeginLogInByTransactionInput;
};
declare type NotifiMutationBroadcastMessageArgs = {
    broadcastMessageInput?: InputMaybe<BroadcastMessageInput>;
    signature?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationCompleteLogInByQrCodeArgs = {
    completeLogInByQRCodeInput: CompleteLogInByQrCodeInput;
};
declare type NotifiMutationCompleteLogInByTransactionArgs = {
    completeLogInByTransactionInput: CompleteLogInByTransactionInput;
};
declare type NotifiMutationConfirmEmailArgs = {
    email?: InputMaybe<Scalars['String']['input']>;
    token?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationConnectWalletArgs = {
    connectWalletInput?: InputMaybe<ConnectWalletInput>;
    signature?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationCreateArgs = {
    user?: InputMaybe<UserInput>;
};
declare type NotifiMutationCreateAlertArgs = {
    alertInput?: InputMaybe<CreateAlertInput>;
};
declare type NotifiMutationCreateConversationArgs = {
    createConversationInput: CreateConversationInput;
};
declare type NotifiMutationCreateDirectPushAlertArgs = {
    createDirectPushAlertInput?: InputMaybe<CreateDirectPushAlertInput>;
};
declare type NotifiMutationCreateDiscordBotConfigurationArgs = {
    createDiscordBotConfigurationInput: CreateDiscordBotConfigurationInput;
};
declare type NotifiMutationCreateDiscordTargetArgs = {
    createTargetInput?: InputMaybe<CreateTargetInput>;
};
declare type NotifiMutationCreateEmailTargetArgs = {
    createTargetInput?: InputMaybe<CreateTargetInput>;
};
declare type NotifiMutationCreateFcmTargetArgs = {
    createFcmTargetInput: CreateFcmTargetInput;
};
declare type NotifiMutationCreateFusionEventArgs = {
    input: CreateFusionEventInput;
};
declare type NotifiMutationCreateFusionModuleArgs = {
    input: CreateFusionModuleInput;
};
declare type NotifiMutationCreateFusionSourceArgs = {
    input: CreateFusionSourceInput;
};
declare type NotifiMutationCreateOrUpdateUserArgs = {
    createOrUpdateUserInput: CreateOrUpdateUserInput;
};
declare type NotifiMutationCreateSmsTargetArgs = {
    createTargetInput?: InputMaybe<CreateTargetInput>;
};
declare type NotifiMutationCreateSourceArgs = {
    createSourceInput?: InputMaybe<CreateSourceInput>;
};
declare type NotifiMutationCreateSourceGroupArgs = {
    sourceGroupInput?: InputMaybe<SourceGroupInput>;
};
declare type NotifiMutationCreateTargetGroupArgs = {
    targetGroupInput?: InputMaybe<TargetGroupInput>;
};
declare type NotifiMutationCreateTelegramTargetArgs = {
    createTargetInput?: InputMaybe<CreateTargetInput>;
};
declare type NotifiMutationCreateTenantArgs = {
    createTenantInput: CreateTenantInput;
};
declare type NotifiMutationCreateTenantConfigArgs = {
    createTenantConfigInput: CreateTenantConfigInput;
};
declare type NotifiMutationCreateTenantUserArgs = {
    createTenantUserInput?: InputMaybe<CreateTenantUserInput>;
};
declare type NotifiMutationCreateWeb3TargetArgs = {
    createWeb3TargetInput: CreateWeb3TargetInput;
};
declare type NotifiMutationCreateWebhookTargetArgs = {
    createTargetInput: CreateWebhookTargetInput;
};
declare type NotifiMutationDeactivateFusionSourceArgs = {
    input: DeactivateFusionSourceInput;
};
declare type NotifiMutationDeleteAlertArgs = {
    alertId?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationDeleteDAppSubscriptionArgs = {
    subscriptionId: Scalars['String']['input'];
};
declare type NotifiMutationDeleteDirectPushAlertArgs = {
    deleteDirectPushAlertInput?: InputMaybe<DeleteDirectPushAlertInput>;
};
declare type NotifiMutationDeleteDiscordTargetArgs = {
    deleteTargetInput?: InputMaybe<DeleteTargetInput>;
};
declare type NotifiMutationDeleteEmailTargetArgs = {
    deleteTargetInput?: InputMaybe<DeleteTargetInput>;
};
declare type NotifiMutationDeleteFcmTargetArgs = {
    deleteTargetInput?: InputMaybe<DeleteTargetInput>;
};
declare type NotifiMutationDeleteFusionEventArgs = {
    fusionEventId: Scalars['String']['input'];
};
declare type NotifiMutationDeleteFusionModuleArgs = {
    fusionModuleId: Scalars['String']['input'];
};
declare type NotifiMutationDeleteFusionSourceArgs = {
    input: DeleteFusionSourceInput;
};
declare type NotifiMutationDeleteSmsTargetArgs = {
    deleteTargetInput?: InputMaybe<DeleteTargetInput>;
};
declare type NotifiMutationDeleteSourceArgs = {
    sourceId?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationDeleteSourceGroupArgs = {
    sourceGroupInput?: InputMaybe<SourceGroupInput>;
};
declare type NotifiMutationDeleteTargetGroupArgs = {
    targetGroupInput?: InputMaybe<TargetGroupInput>;
};
declare type NotifiMutationDeleteTelegramTargetArgs = {
    deleteTargetInput?: InputMaybe<DeleteTargetInput>;
};
declare type NotifiMutationDeleteTenantConfigArgs = {
    deleteTenantConfigInput: DeleteTenantConfigInput;
};
declare type NotifiMutationDeleteUserAlertArgs = {
    alertId?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationDeleteWeb3TargetArgs = {
    deleteTargetInput: DeleteTargetInput;
};
declare type NotifiMutationDeleteWebhookTargetArgs = {
    deleteTargetInput: DeleteTargetInput;
};
declare type NotifiMutationDisconnectWalletArgs = {
    disconnectWalletInput?: InputMaybe<DisconnectWalletInput>;
};
declare type NotifiMutationEnableOrDisableMobileFcmTargetsArgs = {
    enableOrDisableMobileFcmTargetsInput: EnableOrDisableMobileFcmTargetsInput;
};
declare type NotifiMutationEnqueueOffChainEventArgs = {
    enqueueOffChainEventInput: EnqueueOffChainEventInput;
};
declare type NotifiMutationFusionBroadcastMessageArgs = {
    fusionBroadcastMessageInput: FusionBroadcastMessageInput;
};
declare type NotifiMutationGenerateEmailConfirmationTokenArgs = {
    email?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationLeaveConversationArgs = {
    leaveConversationInput: LeaveConversationInput;
};
declare type NotifiMutationLogInArgs = {
    email?: InputMaybe<Scalars['String']['input']>;
    password?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationLogInByEmailAddressArgs = {
    logInByEmailAddressInput: LogInByEmailAddressInput;
};
declare type NotifiMutationLogInByOAuthArgs = {
    logInByOAuthInput: LogInByOAuthInput;
};
declare type NotifiMutationLogInFromDappArgs = {
    dappLogInInput?: InputMaybe<DappLogInInput>;
    signature?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationLogInFromServiceArgs = {
    serviceLogInInput?: InputMaybe<ServiceLogInInput>;
};
declare type NotifiMutationMarkFusionNotificationHistoryAsReadArgs = {
    input: MarkFusionNotificationHistoryAsReadInput;
};
declare type NotifiMutationMarkNotificationsAsReadArgs = {
    input: MarkNotificationsAsReadInput;
};
declare type NotifiMutationPublishFusionMessageArgs = {
    publishFusionMessageInput: PublishFusionMessageInput;
};
declare type NotifiMutationRemoveBotArgs = {
    removeBotInput: RemoveBotInput;
};
declare type NotifiMutationRemoveEmailSenderDomainArgs = {
    removeEmailSenderDomainInput: RemoveEmailSenderDomainInput;
};
declare type NotifiMutationRemoveFusionEventFromFusionSourceArgs = {
    input: RemoveFusionEventFromFusionSourceInput;
};
declare type NotifiMutationRemoveSourceFromSourceGroupArgs = {
    removeSourceFromSourceGroupInput: RemoveSourceFromSourceGroupInput;
};
declare type NotifiMutationRemoveTenantUserRolesArgs = {
    removeTenantUserRolesInput: RemoveTenantUserRolesInput;
};
declare type NotifiMutationResetPasswordArgs = {
    email?: InputMaybe<Scalars['String']['input']>;
    password?: InputMaybe<Scalars['String']['input']>;
    tfaCode?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationSendConversationMessageArgs = {
    sendConversationMessageInput: SendConversationMessageInput;
};
declare type NotifiMutationSendEmailTargetVerificationRequestArgs = {
    sendTargetConfirmationRequestInput?: InputMaybe<SendTargetConfirmationRequestInput>;
};
declare type NotifiMutationSendMessageArgs = {
    sendMessageInput?: InputMaybe<SendMessageInput>;
};
declare type NotifiMutationSendResetPasswordEmailArgs = {
    email?: InputMaybe<Scalars['String']['input']>;
};
declare type NotifiMutationUnsubscribeArgs = {
    unsubscribeInputType: UnsubscribeInputTypeInput;
};
declare type NotifiMutationUpdateBotArgs = {
    updateBotInput: UpdateBotInput;
};
declare type NotifiMutationUpdateCorsPolicyArgs = {
    updateCorsPolicyInput: UpdateCorsPolicyInput;
};
declare type NotifiMutationUpdateDefaultEmailSenderDisplayNameArgs = {
    updateDefaultEmailSenderDisplayNameInput: UpdateDefaultEmailSenderDisplayNameInput;
};
declare type NotifiMutationUpdateDefaultEmailSenderDomainArgs = {
    updateDefaultEmailSenderDomainInput: UpdateDefaultEmailSenderDomainInput;
};
declare type NotifiMutationUpdateDefaultEmailSenderNameArgs = {
    updateDefaultEmailSenderNameInput: UpdateDefaultEmailSenderNameInput;
};
declare type NotifiMutationUpdateDiscordBotConfigurationArgs = {
    updateDiscordBotConfigurationInput: UpdateDiscordBotConfigurationInput;
};
declare type NotifiMutationUpdateEphemeralStorageArgs = {
    updateEphemeralStorageInput: UpdateEphemeralStorageInput;
};
declare type NotifiMutationUpdateFusionEventArgs = {
    input: UpdateFusionEventInput;
};
declare type NotifiMutationUpdateFusionSourceArgs = {
    input: UpdateFusionSourceInput;
};
declare type NotifiMutationUpdatePersistentStorageArgs = {
    updatePersistentStorageInput: UpdatePersistentStorageInput;
};
declare type NotifiMutationUpdateUserProfileArgs = {
    userProfileInput: UserProfileInput;
};
declare type NotifiMutationUpdateUserSettingsArgs = {
    userSettings: UserSettingsInput;
};
declare type NotifiMutationUploadTemplateArgs = {
    template: Scalars['String']['input'];
    templateName: Scalars['String']['input'];
    type: TemplateType;
};
declare type NotifiMutationVerifyDiscordTargetArgs = {
    verifyDiscordTargetInput: VerifyDiscordTargetInput;
};
declare type NotifiMutationVerifyTargetArgs = {
    verifyTargetInput?: InputMaybe<VerifyTargetInput>;
};
declare type NotifiQuery = {
    __typename?: 'NotifiQuery';
    /** Query for Alerts. */
    alert?: Maybe<Array<Maybe<Alert>>>;
    /** Get all email senders available for this tenant */
    allEmailSenders: Array<Maybe<EmailSenderDomain>>;
    /** Get bots by type */
    botsByType: Array<Bot>;
    /** Get the configuration for a dapp */
    configurationForDapp?: Maybe<ClientConfiguration>;
    /** Query for ConnectedWallets. */
    connectedWallet?: Maybe<Array<Maybe<ConnectedWallet>>>;
    /**
     * Get a specific conversation
     * @deprecated It deprecated
     */
    conversation: Conversation;
    /**
     * Get messages for a conversation
     * @deprecated It deprecated
     */
    conversationMessages?: Maybe<ConversationMessagesConnection>;
    /**
     * Get conversations a user is part of
     * @deprecated It deprecated
     */
    conversations?: Maybe<ConversationsConnection>;
    /** DApps subscriptions for all tenants */
    dAppsSubscriptions?: Maybe<Array<DAppSubscription>>;
    /** Query for DiscordTargets. */
    discordTarget?: Maybe<Array<DiscordTarget>>;
    /** Get email sender defaults */
    emailSenderDefaults?: Maybe<EmailSenderDefaults>;
    /** Query for EmailTargets. */
    emailTarget?: Maybe<Array<Maybe<EmailTarget>>>;
    /** Get ephemeral storage entries used by the Fusion parsers and filters. This should only be used to query explicit keys. Wildcards are not allowed */
    ephemeralStorage?: Maybe<EphemeralStorageConnection>;
    /** Query for FcmTargets. */
    fcmTargets?: Maybe<Array<Maybe<FcmTarget>>>;
    /** Query for Filters. */
    filter?: Maybe<Array<Maybe<Filter>>>;
    /** Fetch a specific tenant config */
    findTenantConfig: TenantConfig;
    fusionEvents?: Maybe<FusionEventsConnection>;
    fusionExecutionLogs?: Maybe<FusionExecutionLogsConnection>;
    fusionModulePutUrl: GetFusionModulePutUrlResponse;
    /** Get users fusion notification history */
    fusionNotificationHistory?: Maybe<FusionNotificationHistoryConnection>;
    /** Allows a community manager to preview content for a given target and template */
    fusionPreviewCommunityManagerContent: FusionCommunityManagerPreviewResult;
    fusionSourceDevParams: GetFusionSourceDevParamsResponse;
    fusionSourcePutUrl: GetFusionSourcePutUrlResponse;
    fusionSourceState: FusionSourceWithCursor;
    fusionSources?: Maybe<FusionSourcesConnection>;
    /**
     * Get jabber messages for a thread
     * @deprecated It deprecated
     */
    jabberMessages?: Maybe<JabberMessagesConnection>;
    /**
     * Get jabber threads a user is part of
     * @deprecated It deprecated
     */
    jabberThreads?: Maybe<JabberThreadsConnection>;
    listTemplates: ListTemplatesResponse;
    /** Query for the count of messages delivered per target type across this tenant */
    messageDeliveryStatistics: GetMessageDeliveryStatisticsResult;
    /** Fetch a specific tenant config */
    mobilePushSettings: MobilePushSettings;
    /** Get notification by id, returns null if the notification is not found */
    notificationById?: Maybe<NotificationHistoryEntry>;
    /** Get users notification history */
    notificationHistory?: Maybe<NotificationHistoryConnection>;
    /** Get persistent storage entries used by the Fusion parsers and filters */
    persistentStorage?: Maybe<PersistentStorageConnection>;
    /** Allows a community manager to preview content for a UserTopic that they own. */
    previewCommunityManagerContent: CommunityManagerPreviewResult;
    /** Get public topics to subscribe */
    publicTopics?: Maybe<PublicTopicsConnection>;
    /** Get public posts to topics */
    publicUserTopicPost?: Maybe<PublicUserTopicPostConnection>;
    /** Resolve name for SNS */
    resolveSNSFromAddress?: Maybe<Scalars['String']['output']>;
    /** Get Service Identifier associated with a Tenant */
    serviceIdentifier: ServiceIdentifier;
    settings?: Maybe<UserSettings>;
    /** Query for SmsTargets. */
    smsTarget?: Maybe<Array<Maybe<SmsTarget>>>;
    /** Query for Sources. */
    source?: Maybe<Array<Maybe<Source>>>;
    /** Query for Source Groups. */
    sourceGroup?: Maybe<Array<Maybe<SourceGroup>>>;
    /** Query for Sources */
    sources?: Maybe<SourcesConnection>;
    /** Get the supported target types for the calling user (email/sms/telegram/etc) */
    supportedTargetTypes?: Maybe<Array<TargetType>>;
    /** Get the supported target types for a dapp (email/sms/telegram/etc) */
    supportedTargetTypesForDapp?: Maybe<Array<TargetType>>;
    /** Query for TargetGroups. */
    targetGroup?: Maybe<Array<Maybe<TargetGroup>>>;
    /** Query for TelegramTargets. */
    telegramTarget?: Maybe<Array<Maybe<TelegramTarget>>>;
    templateData: GetTemplateResponse;
    /** Get tenant's approval status */
    tenantApprovalStatus: ApprovalStatus;
    /** Query for the count of messages delivered per target type across this tenant */
    tenantAvailableReports: GetTenantAvailableReportsResult;
    /** Get tenant configs */
    tenantConfigs?: Maybe<TenantConfigsConnection>;
    /** Get connected wallets for this tenant. */
    tenantConnectedWallet?: Maybe<TenantConnectedWalletConnection>;
    /** Query for the monthly message delivery report for a tenant */
    tenantDeliveryReport: GetTenantDeliveryReportResult;
    tenantDiscordBotConfiguration?: Maybe<DiscordBotConfiguration>;
    /** Get a tenant's feature flag */
    tenantFeatureFlag: TenantFeatureFlag;
    /**
     * Get users for this tenant.
     * @deprecated Please use TenantUsers
     */
    tenantUser?: Maybe<TenantUserConnection>;
    /** Get users for this tenant. */
    tenantUsers?: Maybe<TenantUsersConnection>;
    /** Get the topics to broadcast */
    topics?: Maybe<TopicsConnection>;
    /** Query for the count of messages delivered per month for this tenant */
    totalMessagesPerMonthByTenant: GetTotalMessagesPerMonthByTenantResult;
    /** Get users unread notification history count */
    unreadNotificationHistoryCount: GetUnreadNotificationHistoryCountResponse;
    /** User feature flags */
    userFeatureFlags?: Maybe<UserFeatureFlags>;
    /** User profile. Omit GetUserProfileInput to retrieve caller's profile */
    userProfile?: Maybe<UserProfile>;
    /** User settings */
    userSettings?: Maybe<UserSettings>;
    /** Query for the count of users per topic across this tenant */
    usersByTopic: GetUsersByTopicResult;
    /** Query for WebhookTargets. */
    webhookTarget?: Maybe<Array<WebhookTarget>>;
};
declare type NotifiQueryAlertArgs = {
    getAlertInput?: InputMaybe<GetAlertInput>;
};
declare type NotifiQueryBotsByTypeArgs = {
    getBotsByTypeInput: GetBotsByTypeInput;
};
declare type NotifiQueryConfigurationForDappArgs = {
    getConfigurationForDappInput?: InputMaybe<GetConfigurationForDappInput>;
};
declare type NotifiQueryConnectedWalletArgs = {
    getConnectedWalletsInput?: InputMaybe<GetConnectedWalletsInput>;
};
declare type NotifiQueryConversationArgs = {
    getConversationInput: GetConversationInput;
};
declare type NotifiQueryConversationMessagesArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    getConversationMessagesInput: GetConversationMessagesInput;
};
declare type NotifiQueryConversationsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
};
declare type NotifiQueryDiscordTargetArgs = {
    getTargetInput?: InputMaybe<GetTargetInput>;
};
declare type NotifiQueryEmailTargetArgs = {
    getTargetInput?: InputMaybe<GetTargetInput>;
};
declare type NotifiQueryEphemeralStorageArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    ephemeralStorageQueryInput?: InputMaybe<EphemeralStorageQueryInput>;
    first?: InputMaybe<Scalars['Int']['input']>;
};
declare type NotifiQueryFcmTargetsArgs = {
    getTargetInput?: InputMaybe<GetTargetInput>;
};
declare type NotifiQueryFilterArgs = {
    getFilterInput?: InputMaybe<GetFilterInput>;
};
declare type NotifiQueryFindTenantConfigArgs = {
    findTenantConfigInput: FindTenantConfigInput;
};
declare type NotifiQueryFusionEventsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    fusionEventCategory?: InputMaybe<FusionEventCategory>;
};
declare type NotifiQueryFusionExecutionLogsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    getFusionExecutionLogsInput?: InputMaybe<GetFusionExecutionLogsInput>;
};
declare type NotifiQueryFusionModulePutUrlArgs = {
    fusionSourceId: Scalars['String']['input'];
    type: FusionModuleType;
};
declare type NotifiQueryFusionNotificationHistoryArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    includeHidden?: InputMaybe<Scalars['Boolean']['input']>;
};
declare type NotifiQueryFusionPreviewCommunityManagerContentArgs = {
    fusionCommunityManagerPreviewInput: FusionCommunityManagerPreviewInput;
};
declare type NotifiQueryFusionSourceDevParamsArgs = {
    getFusionSourceDevParamsInput: GetFusionSourceDevParamsInput;
};
declare type NotifiQueryFusionSourcePutUrlArgs = {
    fusionSourceId: Scalars['String']['input'];
};
declare type NotifiQueryFusionSourceStateArgs = {
    input: GetFusionSourceStateInput;
};
declare type NotifiQueryFusionSourcesArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
};
declare type NotifiQueryJabberMessagesArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    getJabberMessagesInput: GetJabberMessagesInput;
};
declare type NotifiQueryJabberThreadsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
};
declare type NotifiQueryListTemplatesArgs = {
    input: ListTemplatesInput;
};
declare type NotifiQueryMobilePushSettingsArgs = {
    mobilePushSettingsInput: MobilePushSettingsInput;
};
declare type NotifiQueryNotificationByIdArgs = {
    id: Scalars['String']['input'];
};
declare type NotifiQueryNotificationHistoryArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    filter?: InputMaybe<NotificationHistoryFilterInput>;
    first?: InputMaybe<Scalars['Int']['input']>;
};
declare type NotifiQueryPersistentStorageArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    persistentStorageQueryInput?: InputMaybe<PersistentStorageQueryInput>;
};
declare type NotifiQueryPreviewCommunityManagerContentArgs = {
    communityManagerPreviewInput: CommunityManagerPreviewInput;
};
declare type NotifiQueryPublicTopicsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    input?: InputMaybe<GetPublicTopicsInput>;
};
declare type NotifiQueryPublicUserTopicPostArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    getPublicUserTopicPostInput: GetPublicUserTopicPostInput;
};
declare type NotifiQueryResolveSnsFromAddressArgs = {
    address: Scalars['String']['input'];
};
declare type NotifiQuerySmsTargetArgs = {
    getTargetInput?: InputMaybe<GetTargetInput>;
};
declare type NotifiQuerySourceArgs = {
    getSourceInput?: InputMaybe<GetSourceInput>;
};
declare type NotifiQuerySourceGroupArgs = {
    getSourceGroupInput?: InputMaybe<GetSourceGroupInput>;
};
declare type NotifiQuerySourcesArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    getSourcesInput?: InputMaybe<GetSourcesInput>;
};
declare type NotifiQuerySupportedTargetTypesForDappArgs = {
    getSupportedTargetTypesForDappInput?: InputMaybe<GetSupportedTargetTypesForDappInput>;
};
declare type NotifiQueryTargetGroupArgs = {
    getTargetGroupInput?: InputMaybe<GetTargetGroupInput>;
};
declare type NotifiQueryTelegramTargetArgs = {
    getTargetInput?: InputMaybe<GetTargetInput>;
};
declare type NotifiQueryTemplateDataArgs = {
    input: GetTemplateDataInput;
};
declare type NotifiQueryTenantConfigsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    getTenantConfigInput: GetTenantConfigInput;
};
declare type NotifiQueryTenantConnectedWalletArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    getTenantConnectedWalletInput?: InputMaybe<GetTenantConnectedWalletInput>;
};
declare type NotifiQueryTenantDeliveryReportArgs = {
    input: GetTenantDeliveryReportRequestInput;
};
declare type NotifiQueryTenantFeatureFlagArgs = {
    input: TenantFeatureFlagInput;
};
declare type NotifiQueryTenantUserArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    tenantUsersInput?: InputMaybe<TenantUsersInput>;
};
declare type NotifiQueryTenantUsersArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    tenantUsersInput?: InputMaybe<TenantUsersInput>;
};
declare type NotifiQueryTopicsArgs = {
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
};
declare type NotifiQueryUserProfileArgs = {
    getUserProfileInput?: InputMaybe<GetUserProfileInput>;
};
declare type NotifiQueryWebhookTargetArgs = {
    getTargetInput?: InputMaybe<GetTargetInput>;
};
declare type NotifiSubscription = {
    __typename?: 'NotifiSubscription';
    messageReceived: ConversationMessage;
    tenantEntityChanged: TenantEntityChangeEvent;
};
declare type NotificationCategory = 'BALANCE_CHANGE' | 'CHAT' | 'COIN_PRICE_CHANGE' | 'CREATOR_MESSAGE' | 'DAO_PROPOSAL' | 'NFT_AUCTION';
/** A connection to a list of items. */
declare type NotificationHistoryConnection = {
    __typename?: 'NotificationHistoryConnection';
    /** A list of edges. */
    edges?: Maybe<Array<NotificationHistoryEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<NotificationHistoryEntry>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type NotificationHistoryEdge = {
    __typename?: 'NotificationHistoryEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: NotificationHistoryEntry;
};
declare type NotificationHistoryEntry = {
    __typename?: 'NotificationHistoryEntry';
    alertId: Scalars['String']['output'];
    category?: Maybe<NotificationCategory>;
    createdDate: Scalars['DateTime']['output'];
    detail?: Maybe<EventDetails>;
    eventId: Scalars['String']['output'];
    id: Scalars['String']['output'];
    read: Scalars['Boolean']['output'];
    sourceAddress?: Maybe<Scalars['String']['output']>;
    targets: Array<NotificationTarget>;
    transactionSignature?: Maybe<Scalars['String']['output']>;
};
declare type NotificationHistoryFilterInput = {
    categories?: InputMaybe<Array<NotificationCategory>>;
};
declare type NotificationHistoryReadState = 'HIDDEN' | 'NONE' | 'READ';
declare type NotificationTarget = {
    __typename?: 'NotificationTarget';
    name?: Maybe<Scalars['String']['output']>;
    type: TargetType;
};
declare type OAuthIssuer = 'UNSTOPPABLE_DOMAINS';
/** Information about pagination in a connection. */
declare type PageInfo = {
    __typename?: 'PageInfo';
    /** When paginating forwards, the cursor to continue. */
    endCursor?: Maybe<Scalars['String']['output']>;
    /** Indicates whether more edges exist following the set defined by the clients arguments. */
    hasNextPage: Scalars['Boolean']['output'];
    /** Indicates whether more edges exist prior the set defined by the clients arguments. */
    hasPreviousPage: Scalars['Boolean']['output'];
    /** When paginating backwards, the cursor to continue. */
    startCursor?: Maybe<Scalars['String']['output']>;
};
/** A connection to a list of items. */
declare type PersistentStorageConnection = {
    __typename?: 'PersistentStorageConnection';
    /** A list of edges. */
    edges?: Maybe<Array<PersistentStorageEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<PersistentStorageEntry>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type PersistentStorageEdge = {
    __typename?: 'PersistentStorageEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: PersistentStorageEntry;
};
/** Persistent storage entry used by the Fusion system */
declare type PersistentStorageEntry = {
    __typename?: 'PersistentStorageEntry';
    /** Date the entry was created */
    createdDate?: Maybe<Timestamp>;
    /** Key of the entry */
    key?: Maybe<Scalars['String']['output']>;
    /** Date the entry was last updated */
    updatedDate?: Maybe<Timestamp>;
    /** Value of the entry */
    value?: Maybe<Scalars['String']['output']>;
    /** Version of the entry */
    version?: Maybe<Scalars['Long']['output']>;
};
declare type PersistentStorageEntryInput = {
    /** Key of the entry to update */
    key: Scalars['String']['input'];
    /** Value to update the entry to. Null values will cause the entry to be deleted */
    value?: InputMaybe<Scalars['String']['input']>;
    /** Optional version of the entry to set. If provided, a write will only succeed if the version is greater than the current stored version. If omitted, the current version is overwritten */
    version?: InputMaybe<Scalars['Long']['input']>;
};
/** Object used to query persistent storage used by the Fusion system */
declare type PersistentStorageQueryInput = {
    /** Keys of the entries to be returned. Max of 50 per query */
    keys?: InputMaybe<Array<Scalars['String']['input']>>;
};
/** A connection to a list of items. */
declare type PublicTopicsConnection = {
    __typename?: 'PublicTopicsConnection';
    /** A list of edges. */
    edges?: Maybe<Array<PublicTopicsEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<SubscribeableTopic>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type PublicTopicsEdge = {
    __typename?: 'PublicTopicsEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: SubscribeableTopic;
};
/** Notifi Public UserTopic Post */
declare type PublicUserTopicPost = {
    __typename?: 'PublicUserTopicPost';
    createdDate: Scalars['DateTime']['output'];
    id?: Maybe<Scalars['String']['output']>;
    topicName: Scalars['String']['output'];
    variables: Array<KeyValuePairOfStringAndString>;
};
/** A connection to a list of items. */
declare type PublicUserTopicPostConnection = {
    __typename?: 'PublicUserTopicPostConnection';
    /** A list of edges. */
    edges?: Maybe<Array<PublicUserTopicPostEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<Maybe<PublicUserTopicPost>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type PublicUserTopicPostEdge = {
    __typename?: 'PublicUserTopicPostEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node?: Maybe<PublicUserTopicPost>;
};
declare type PublishFusionMessageInput = {
    /** The event type ID */
    eventTypeId: Scalars['String']['input'];
    /** The specific wallets to target, if any */
    specificWallets?: InputMaybe<Array<KeyValuePairOfStringAndWalletBlockchainInput>>;
    /** The variables to send, in json. Must be an object */
    variablesJson: Scalars['String']['input'];
};
declare type PublishFusionMessageResult = {
    __typename?: 'PublishFusionMessageResult';
    /** The uuid of the enqueued event */
    eventUuid: Scalars['String']['output'];
};
/** Object used to remove an existing bot */
declare type RemoveBotInput = {
    /** Id of the bot to remove */
    id: Scalars['String']['input'];
};
/** Object used to remove an email sender domain for a tenant */
declare type RemoveEmailSenderDomainInput = {
    /** Id of the domain that is being removed. If it was the default, no default will be set after removal */
    domainNameId: Scalars['String']['input'];
};
declare type RemoveFusionEventFromFusionSourceInput = {
    /** The fusion event id to remove from the fusion source id */
    fusionEventId: Scalars['String']['input'];
};
declare type RemoveFusionEventFromFusionSourceResponse = {
    __typename?: 'RemoveFusionEventFromFusionSourceResponse';
    /** The updated fusion source after the fusion event has been removed. */
    fusionSource: FusionSourceWithCursor;
};
/** Remove a Source from a SourceGroup. Id and AccountAddress/WalletBlockchain are mutually exclusive. If SourceId is set, other parameters will be ignored. Setting WalletAddress requires SourceType to be set */
declare type RemoveSourceFromSourceGroupInput = {
    /** Id of the SourceGroup object returned from CreateSourceGroup mutation or SourceGroup query */
    sourceGroupId: Scalars['String']['input'];
    /** Id of the Source object returned from CreateSource or Sources */
    sourceId?: InputMaybe<Scalars['String']['input']>;
    /** SourceType associated to WalletAddress */
    sourceType?: InputMaybe<SourceType>;
    /** For chains where public keys are rotatable and not tied to the lifetime of the account, use the accountId. Use public key for all other chains */
    walletAddress?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to delete a user from the admin panel. */
declare type RemoveTenantUserRolesInput = {
    /** Primary email address for account. */
    email: Scalars['String']['input'];
    /** List of roles to remove from the user */
    roles: Array<Scalars['String']['input']>;
};
declare type RequiredParserVariableType = 
/** Base58 wallets (Solana, Bitcoin) */
'BASE58_WALLET'
/** Bech32 wallet (any prefix) */
 | 'BECH32_WALLET'
/** EVM wallet */
 | 'EVM_WALLET'
/** Decimal value that can fit in a double precision float */
 | 'FLOAT'
/** Hexidecimal starting with 0x */
 | 'HEX'
/** Integer value that can fit in a signed 64bit integer */
 | 'INTEGER'
/** Any string */
 | 'STRING' | 'UNSPECIFIED';
declare type RequiredVariable = {
    __typename?: 'RequiredVariable';
    variableDescription: Scalars['String']['output'];
    variableName: Scalars['String']['output'];
    variableType: RequiredParserVariableType;
};
/** Object used to query the public topics */
declare type SendConversationMessageInput = {
    /** Conversation identifier */
    conversationId: Scalars['String']['input'];
    /** Individual message of a conversation */
    message: Scalars['String']['input'];
};
/** Describes a message to be sent directly to a user. */
declare type SendMessageInput = {
    /** Message data to be sent. All but RawMessage require a JSON formatted object. See individual MessageTypes for requirements. Inlcude JSON members that your template requires. */
    message?: InputMaybe<Scalars['String']['input']>;
    /** The key of the message. Multiple calls with the same key will be deduplicated. */
    messageKey?: InputMaybe<Scalars['String']['input']>;
    /** Describes the message type of Message. RawMessage is a passthrough. SimpleHealthThreshold requires a single member, 'value', in range of [0, 100]. Include any other members required for your template. */
    messageType: MessageType;
    /** Blockchain the wallet belongs to. */
    walletBlockchain: WalletBlockchain;
    /** Target wallet address. */
    walletPublicKey?: InputMaybe<Scalars['String']['input']>;
};
/** Describes the Target to send a confirmation request for */
declare type SendTargetConfirmationRequestInput = {
    /** ID of the Target. Currently only EmailTargets are supported */
    targetId?: InputMaybe<Scalars['String']['input']>;
};
declare type ServiceIdentifier = {
    __typename?: 'ServiceIdentifier';
    id: Scalars['String']['output'];
    secret?: Maybe<Scalars['String']['output']>;
    user?: Maybe<User>;
    userId?: Maybe<Scalars['String']['output']>;
};
/** Input for service authentication using a SID/Secret pair */
declare type ServiceLogInInput = {
    /** Secret for service auth params */
    secret?: InputMaybe<Scalars['String']['input']>;
    /** SID for service auth params */
    sid?: InputMaybe<Scalars['String']['input']>;
};
declare type SmsTarget = {
    __typename?: 'SmsTarget';
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    isConfirmed: Scalars['Boolean']['output'];
    name?: Maybe<Scalars['String']['output']>;
    phoneNumber?: Maybe<Scalars['String']['output']>;
    updatedDate: Scalars['DateTime']['output'];
};
/** Notifi Source */
declare type Source = {
    __typename?: 'Source';
    activeAlertCount: Scalars['Long']['output'];
    applicableFilters?: Maybe<Array<Maybe<Filter>>>;
    blockchainAddress: Scalars['String']['output'];
    createdDate: Scalars['DateTime']['output'];
    fusionEventTypeId?: Maybe<Scalars['String']['output']>;
    id: Scalars['String']['output'];
    name?: Maybe<Scalars['String']['output']>;
    type: SourceType;
    updatedDate: Scalars['DateTime']['output'];
};
declare type SourceGroup = {
    __typename?: 'SourceGroup';
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    name?: Maybe<Scalars['String']['output']>;
    sources?: Maybe<Array<Maybe<Source>>>;
    updatedDate: Scalars['DateTime']['output'];
};
/** Object used to create or bulk update a SourceGroup. Use AddSourceToSourceGroup or RemoveSourceFromSourceGroup for individual source updates */
declare type SourceGroupInput = {
    /** Id of the SourceGroup */
    id?: InputMaybe<Scalars['String']['input']>;
    /** Friendly name of SourceGroup */
    name?: InputMaybe<Scalars['String']['input']>;
    /** Ids from previously created Sources */
    sourceIds?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};
declare type SourceType = 'ACALA_WALLET' | 'APTOS_WALLET' | 'ARBITRUM_WALLET' | 'AVALANCHE_WALLET' | 'BASE_WALLET' | 'BENQI' | 'BINANCE_WALLET' | 'BONFIDA_NAME_AUCTIONING' | 'BONFIDA_NAME_OFFERS' | 'BROADCAST' | 'COIN_PRICE_CHANGES' | 'DELTA_PRIME' | 'DELTA_PRIME_LENDING_RATES' | 'DIRECT_PUSH' | 'ETHEREUM_WALLET' | 'FUSION_SOURCE' | 'HAWK_SIGHT' | 'HEDGE_PROTOCOL' | 'METAPLEX_AUCTION_HOUSE' | 'NOTIFI_CHAT' | 'OPTIMISM_WALLET' | 'ORCA' | 'POLYGON_WALLET' | 'PORT_FINANCE' | 'REALM_PROPOSALS' | 'SHARKY_PROTOCOL' | 'SNAPSHOT' | 'SOLANA_BONFIDA_AUCTION' | 'SOLANA_JABBER_V1' | 'SOLANA_METAPLEX_AUCTION' | 'SOLANA_SNOWFLAKE' | 'SOLANA_WALLET' | 'SUI_WALLET' | 'TERRA_WALLET' | 'TOPAZ' | 'TRIBECA_PROPOSALS' | 'XMTP' | 'ZKSYNC' | 'ZKSYNC_WALLET';
/** A connection to a list of items. */
declare type SourcesConnection = {
    __typename?: 'SourcesConnection';
    /** A list of edges. */
    edges?: Maybe<Array<SourcesEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<Source>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type SourcesEdge = {
    __typename?: 'SourcesEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: Source;
};
declare type StorageType = 'INTERNAL_BLOB' | 'INTERNAL_CACHE' | 'INTERNAL_DB' | 'UNSPECIFIED';
/** A public topic that can be subscribed. */
declare type SubscribeableTopic = {
    __typename?: 'SubscribeableTopic';
    /** The user-friendly name of this topic */
    displayName?: Maybe<Scalars['String']['output']>;
    /** The topic identifier */
    topicName?: Maybe<Scalars['String']['output']>;
};
/** Notifi TargetGroup */
declare type TargetGroup = {
    __typename?: 'TargetGroup';
    createdDate: Scalars['DateTime']['output'];
    discordTargets?: Maybe<Array<Maybe<DiscordTarget>>>;
    emailTargets?: Maybe<Array<Maybe<EmailTarget>>>;
    fcmTargets?: Maybe<Array<Maybe<FcmTarget>>>;
    id: Scalars['String']['output'];
    name?: Maybe<Scalars['String']['output']>;
    smsTargets?: Maybe<Array<Maybe<SmsTarget>>>;
    telegramTargets?: Maybe<Array<Maybe<TelegramTarget>>>;
    updatedDate: Scalars['DateTime']['output'];
    web3Targets?: Maybe<Array<Maybe<Web3Target>>>;
    webhookTargets?: Maybe<Array<Maybe<WebhookTarget>>>;
};
/** Object used to create or update a TargetGroup. */
declare type TargetGroupInput = {
    /** Ids from previously created DiscordTargets. */
    discordTargetIds?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
    /** Ids from previously created EmailTargets. */
    emailTargetIds?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
    /** Ids from previously created FcmTargets. */
    fcmTargetIds?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
    /** Id of the TargetGroup. */
    id?: InputMaybe<Scalars['String']['input']>;
    /** Friendly name of TargetGroup. */
    name?: InputMaybe<Scalars['String']['input']>;
    /** Ids from previously created SmsTargets. */
    smsTargetIds?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
    /** Ids from previously created TelegramTargets. */
    telegramTargetIds?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
    /** Ids from previously created WebhookTargets. */
    webhookTargetIds?: InputMaybe<Array<Scalars['String']['input']>>;
};
declare type TargetType = 'DISCORD' | 'EMAIL' | 'FCM' | 'PLATFORM' | 'SMS' | 'TELEGRAM' | 'WEB3' | 'WEBHOOK';
declare type TelegramTarget = {
    __typename?: 'TelegramTarget';
    /** Used to confirm the Telegram chat. User must click url and start bot. */
    confirmationUrl?: Maybe<Scalars['String']['output']>;
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    isConfirmed: Scalars['Boolean']['output'];
    name?: Maybe<Scalars['String']['output']>;
    telegramId: Scalars['String']['output'];
    updatedDate: Scalars['DateTime']['output'];
};
declare type Template = {
    __typename?: 'Template';
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    message: Scalars['String']['output'];
    templateName: Scalars['String']['output'];
    templateType: TemplateType;
    tenantId: Scalars['String']['output'];
    updatedDate: Scalars['DateTime']['output'];
};
declare type TemplateType = 'DISCORD' | 'EMAIL' | 'EMAIL_SUBJECT' | 'EVENT_DETAIL_BODY' | 'EVENT_DETAIL_TITLE' | 'FCM' | 'FCM_SUBJECT' | 'SMS' | 'TELEGRAM' | 'WEB3' | 'WEBHOOK';
/** Notifi tenant information */
declare type Tenant = {
    __typename?: 'Tenant';
    dappId: Scalars['String']['output'];
    name: Scalars['String']['output'];
};
declare type TenantConfig = {
    __typename?: 'TenantConfig';
    createdDate: Scalars['DateTime']['output'];
    /** The JSON payload associated with the config */
    dataJson?: Maybe<Scalars['String']['output']>;
    id?: Maybe<Scalars['String']['output']>;
    type: TenantConfigType;
    updatedDate: Scalars['DateTime']['output'];
};
declare type TenantConfigType = 'INTERCOM_CARD' | 'SUBSCRIPTION_CARD';
/** A connection to a list of items. */
declare type TenantConfigsConnection = {
    __typename?: 'TenantConfigsConnection';
    /** A list of edges. */
    edges?: Maybe<Array<TenantConfigsEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<TenantConfig>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type TenantConfigsEdge = {
    __typename?: 'TenantConfigsEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: TenantConfig;
};
/** Notifi Tenant Connected Wallet */
declare type TenantConnectedWallet = {
    __typename?: 'TenantConnectedWallet';
    address?: Maybe<Scalars['String']['output']>;
    user?: Maybe<TenantUser>;
    walletBlockchain: WalletBlockchain;
};
/** A connection to a list of items. */
declare type TenantConnectedWalletConnection = {
    __typename?: 'TenantConnectedWalletConnection';
    /** A list of edges. */
    edges?: Maybe<Array<TenantConnectedWalletEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<Maybe<TenantConnectedWallet>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type TenantConnectedWalletEdge = {
    __typename?: 'TenantConnectedWalletEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node?: Maybe<TenantConnectedWallet>;
};
declare type TenantEntityChangeEvent = AlertCreatedEvent | AlertDeletedEvent | UserCreatedEvent;
declare type TenantFeatureFlag = {
    __typename?: 'TenantFeatureFlag';
    /** Tenant feature flag name. */
    name: Scalars['String']['output'];
    /** Tenant feature flag value. Value can be a string or a json string. */
    value: Scalars['String']['output'];
};
declare type TenantFeatureFlagInput = {
    /** Query will fetch the feature flag value for the given name. */
    tenantFeatureFlagName: Scalars['String']['input'];
};
/** Notifi Tenant Target Group */
declare type TenantTargetGroup = {
    __typename?: 'TenantTargetGroup';
    hasVerifiedDiscord: Scalars['Boolean']['output'];
    hasVerifiedEmails: Scalars['Boolean']['output'];
    hasVerifiedFcm: Scalars['Boolean']['output'];
    hasVerifiedSms: Scalars['Boolean']['output'];
    hasVerifiedTelegram: Scalars['Boolean']['output'];
    hasVerifiedWeb3: Scalars['Boolean']['output'];
    hasVerifiedWebhook: Scalars['Boolean']['output'];
    id: Scalars['String']['output'];
    name?: Maybe<Scalars['String']['output']>;
};
/** Notifi Tenant User */
declare type TenantUser = {
    __typename?: 'TenantUser';
    alerts?: Maybe<Array<Maybe<TenantUserAlert>>>;
    connectedWallets?: Maybe<Array<Maybe<TenantConnectedWallet>>>;
    email?: Maybe<Scalars['String']['output']>;
    id: Scalars['String']['output'];
    roles?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    userName?: Maybe<Scalars['String']['output']>;
};
/** Notifi Tenant User Alert */
declare type TenantUserAlert = {
    __typename?: 'TenantUserAlert';
    filter: Filter;
    filterOptions: Scalars['String']['output'];
    groupName?: Maybe<Scalars['String']['output']>;
    id: Scalars['String']['output'];
    name?: Maybe<Scalars['String']['output']>;
    sourceGroup: SourceGroup;
    targetGroup?: Maybe<TenantTargetGroup>;
    user?: Maybe<TenantUser>;
};
/** A connection to a list of items. */
declare type TenantUserConnection = {
    __typename?: 'TenantUserConnection';
    /** A list of edges. */
    edges?: Maybe<Array<TenantUserEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<Maybe<TenantUser>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type TenantUserEdge = {
    __typename?: 'TenantUserEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node?: Maybe<TenantUser>;
};
/** A connection to a list of items. */
declare type TenantUsersConnection = {
    __typename?: 'TenantUsersConnection';
    /** A list of edges. */
    edges?: Maybe<Array<TenantUsersEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<Maybe<TenantUser>>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type TenantUsersEdge = {
    __typename?: 'TenantUsersEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node?: Maybe<TenantUser>;
};
/** Object used to query TenantUsers. */
declare type TenantUsersInput = {
    /** Filter roles for admin panel */
    filterRoles?: InputMaybe<Array<Scalars['String']['input']>>;
};
declare type Timestamp = {
    __typename?: 'Timestamp';
    calculateSize: Scalars['Int']['output'];
    clone?: Maybe<Timestamp>;
    nanos: Scalars['Int']['output'];
    seconds: Scalars['Long']['output'];
    toDateTime: Scalars['DateTime']['output'];
    toDateTimeOffset: Scalars['DateTime']['output'];
    toDiagnosticString?: Maybe<Scalars['String']['output']>;
};
/** A connection to a list of items. */
declare type TopicsConnection = {
    __typename?: 'TopicsConnection';
    /** A list of edges. */
    edges?: Maybe<Array<TopicsEdge>>;
    /** A flattened list of the nodes. */
    nodes?: Maybe<Array<UserTopic>>;
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
};
/** An edge in a connection. */
declare type TopicsEdge = {
    __typename?: 'TopicsEdge';
    /** A cursor for use in pagination. */
    cursor: Scalars['String']['output'];
    /** The item at the end of the edge. */
    node: UserTopic;
};
declare type UnsubscribeInputTypeInput = {
    token: Scalars['String']['input'];
};
/** A response from unsubscribing a target. */
declare type UnsubscribeResult = {
    __typename?: 'UnsubscribeResult';
    targetValue: Scalars['String']['output'];
    tenantName: Scalars['String']['output'];
};
/** Object used to update an existing bot */
declare type UpdateBotInput = {
    /** Bot credentials to be used when sending messages */
    botCredentials?: InputMaybe<Scalars['String']['input']>;
    /** Existing bot id */
    id: Scalars['String']['input'];
    /** Unique name of the bot. This may also be used when users are shown the bot name such as in Telegram or Discord */
    name?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to update the CORS policy for a tenant */
declare type UpdateCorsPolicyInput = {
    /** Non-wildcard domains that are allowed to be used for CORS validation */
    allowedDomains: Array<Scalars['String']['input']>;
};
/** Object used to update the default email sender name for a tenant */
declare type UpdateDefaultEmailSenderDisplayNameInput = {
    /** Default sender display name to use. Omit to remove */
    defaultDisplayName?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to update the default email sender domain for a tenant */
declare type UpdateDefaultEmailSenderDomainInput = {
    /** Id of the default sender domain to use. Omit to remove */
    defaultDomainId?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to update the default email sender name for a tenant */
declare type UpdateDefaultEmailSenderNameInput = {
    /** Default sender name to use. Omit to remove */
    defaultName?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to update the tenant's discord bot configuration. */
declare type UpdateDiscordBotConfigurationInput = {
    /** The Discord server id in which the Discord bot resides */
    discordGuildId: Scalars['String']['input'];
    /** The invite link to join the tenant's Discord server. */
    discordServerInviteLink: Scalars['String']['input'];
    /** The redirect site for OAuth2. This url is configured in Discord's developer portal */
    redirectUrl: Scalars['String']['input'];
};
/** Object used to upsert values in ephemeral storage */
declare type UpdateEphemeralStorageInput = {
    /** Entries to update the persistent storage with */
    entries: Array<EphemeralStorageEntryInput>;
};
/** Result from UpdateEphemeralStorageResult mutation */
declare type UpdateEphemeralStorageResult = {
    __typename?: 'UpdateEphemeralStorageResult';
    /** Entries that were updated */
    entries?: Maybe<Array<Maybe<EphemeralStorageEntry>>>;
};
declare type UpdateFusionEventInput = {
    fusionEventId: Scalars['String']['input'];
    metadataJson?: InputMaybe<Scalars['String']['input']>;
    name: Scalars['String']['input'];
};
declare type UpdateFusionSourceInput = {
    /** The blockchain cursor value for the fusion source id. This is usually the starting block that the parser will run on. */
    cursorValue?: InputMaybe<Scalars['String']['input']>;
    /** Filter in json */
    filter?: InputMaybe<Scalars['String']['input']>;
    /** Update the fusion source with this id. */
    fusionSourceId: Scalars['String']['input'];
    name?: InputMaybe<Scalars['String']['input']>;
    sourceState?: InputMaybe<FusionSourceState>;
};
declare type UpdateFusionSourceResponse = {
    __typename?: 'UpdateFusionSourceResponse';
    /** Operation ID that will be set on success of queuing the operation. You can use this ID in the future to either poll for status or listen to updates from subscriptions */
    asyncOperationId?: Maybe<Scalars['String']['output']>;
    /**
     * The updated fusion source
     * @deprecated Do not use this anymore, as the operation is async and eventually consistent. Check for queued success by looking at AsyncOperationId, and then periodically poll or listen for async updates via subscriptions
     */
    fusionSource: FusionSourceWithCursor;
};
/** Object used to upsert values in persistent storage */
declare type UpdatePersistentStorageInput = {
    /** Entries to update the persistent storage with */
    entries: Array<PersistentStorageEntryInput>;
};
/** Result from UpdatePersistentStorageResult mutation */
declare type UpdatePersistentStorageResult = {
    __typename?: 'UpdatePersistentStorageResult';
    /** Entries that were updated */
    entries?: Maybe<Array<Maybe<PersistentStorageEntry>>>;
};
/** Notifi User */
declare type User = {
    __typename?: 'User';
    alerts?: Maybe<Array<Maybe<Alert>>>;
    authorization?: Maybe<Authorization>;
    email?: Maybe<Scalars['String']['output']>;
    emailConfirmed: Scalars['Boolean']['output'];
    id: Scalars['String']['output'];
    profile: UserProfile;
    roles?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
    settings: UserSettings;
};
/** An event emitted when a user is created in the tenant */
declare type UserCreatedEvent = {
    __typename?: 'UserCreatedEvent';
    user?: Maybe<TenantUser>;
};
declare type UserFeatureFlags = {
    __typename?: 'UserFeatureFlags';
    chatEnabled?: Maybe<Scalars['Boolean']['output']>;
};
/** Object used to login/create an account. */
declare type UserInput = {
    /** Primary email address for account. This will be used for verification and password resets. */
    email?: InputMaybe<Scalars['String']['input']>;
    /** Password used for account. Must be at least 10 characters with at least 1 capital, 1 lower, 1 numeric and one symbol. */
    password?: InputMaybe<Scalars['String']['input']>;
};
/** Notifi user profile */
declare type UserProfile = {
    __typename?: 'UserProfile';
    avatarData?: Maybe<Scalars['String']['output']>;
    avatarDataType: AvatarDataType;
    id: Scalars['String']['output'];
    preferredAddress?: Maybe<Scalars['String']['output']>;
    preferredBlockchain: WalletBlockchain;
    preferredName?: Maybe<Scalars['String']['output']>;
    tenantInfo?: Maybe<Tenant>;
};
/** Object used to update a user's profile. Only specified fields will be updated */
declare type UserProfileInput = {
    /** Avatar data specifying the url or notifi stock avatar to use. Requires AvatarDataType */
    avatarData?: InputMaybe<Scalars['String']['input']>;
    /** Avatar data type used to interpret the AvatarData. Requires AvatarData */
    avatarDataType?: InputMaybe<AvatarDataType>;
    /** The Preferred address to use. Requires PreferredBlockchain */
    preferredAddress?: InputMaybe<Scalars['String']['input']>;
    /** The Preferred blockchain to use. Requires PreferredAddress */
    preferredBlockchain?: InputMaybe<WalletBlockchain>;
};
/** User Settings */
declare type UserSettings = {
    __typename?: 'UserSettings';
    detailedAlertHistoryEnabled: Scalars['Boolean']['output'];
    ftuStage?: Maybe<Scalars['Int']['output']>;
    userHasChatEnabled: Scalars['Boolean']['output'];
};
/** Object used to update user settings. Only specified fields will be updated */
declare type UserSettingsInput = {
    /** Allow Notifi to store details as part of alert history */
    detailedAlertHistoryEnabled?: InputMaybe<Scalars['Boolean']['input']>;
    /** The FTU stage to set */
    ftuStage?: InputMaybe<Scalars['Int']['input']>;
    /** Enable the chat on the UI */
    userHasChatEnabled?: InputMaybe<Scalars['Boolean']['input']>;
};
declare type UserTopic = {
    __typename?: 'UserTopic';
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    name?: Maybe<Scalars['String']['output']>;
    targetCollections?: Maybe<Array<Scalars['String']['output']>>;
    targetTemplate?: Maybe<Scalars['String']['output']>;
    topicName: Scalars['String']['output'];
    updatedDate: Scalars['DateTime']['output'];
};
/** Object used to verify a new Discord target. */
declare type VerifyDiscordTargetInput = {
    /** Code from OAuth2 */
    code: Scalars['String']['input'];
    /** Discord target id */
    discordTargetId: Scalars['String']['input'];
    /** Redirected Uri */
    redirectUri: Scalars['String']['input'];
    /** Token value sent in verification message. */
    token?: InputMaybe<Scalars['String']['input']>;
};
/** Object used to verify a new Target. */
declare type VerifyTargetInput = {
    /** Token value sent in verification message. */
    token?: InputMaybe<Scalars['String']['input']>;
};
declare type WalletBlockchain = 'ACALA' | 'APTOS' | 'ARBITRUM' | 'AVALANCHE' | 'BASE' | 'BINANCE' | 'ETHEREUM' | 'EVMOS' | 'INJECTIVE' | 'NEAR' | 'NIBIRU' | 'OFF_CHAIN' | 'OPTIMISM' | 'OSMOSIS' | 'POLYGON' | 'SOLANA' | 'SUI' | 'ZKSYNC';
declare type WalletsActivityReportEventDetails = {
    __typename?: 'WalletsActivityReportEventDetails';
    providerName: Scalars['String']['output'];
    sourceLink: Scalars['String']['output'];
    type: WalletsActivityReportType;
    wallets: Array<WalletsActivityReportWallet>;
};
declare type WalletsActivityReportType = 'MOST_ACTIVE';
declare type WalletsActivityReportWallet = {
    __typename?: 'WalletsActivityReportWallet';
    address: Scalars['String']['output'];
    maxPurchase1Day?: Maybe<Scalars['String']['output']>;
    maxPurchaseImgUrl?: Maybe<Scalars['String']['output']>;
    maxPurchaseName?: Maybe<Scalars['String']['output']>;
    maxPurchaseTokenAddress?: Maybe<Scalars['String']['output']>;
    volume1Day: Scalars['String']['output'];
};
declare type Web3Target = {
    __typename?: 'Web3Target';
    accountId?: Maybe<Scalars['String']['output']>;
    createdDate: Scalars['DateTime']['output'];
    id: Scalars['String']['output'];
    isConfirmed: Scalars['Boolean']['output'];
    name?: Maybe<Scalars['String']['output']>;
    targetProtocol: Web3TargetProtocol;
    updatedDate: Scalars['DateTime']['output'];
    walletBlockchain: WalletBlockchain;
};
declare type Web3TargetProtocol = 'XMTP';
declare type WebhookPayloadFormat = 'BROWSER_PUSH_CHROME' | 'BROWSER_PUSH_MOZILLA' | 'BROWSER_PUSH_NOTIFI' | 'PAGER_DUTY' | 'RAW';
declare type WebhookStatus = 'ERROR' | 'OK' | 'RATE_LIMITED' | 'UNCONFIRMED';
declare type WebhookTarget = {
    __typename?: 'WebhookTarget';
    createdDate: Scalars['DateTime']['output'];
    format: WebhookPayloadFormat;
    headers?: Maybe<Array<KeyValuePairOfStringAndString>>;
    id: Scalars['String']['output'];
    name?: Maybe<Scalars['String']['output']>;
    status: WebhookStatus;
    updatedDate: Scalars['DateTime']['output'];
    url: Scalars['String']['output'];
};
declare type AlertFragmentFragment = {
    __typename?: 'Alert';
    id: string;
    groupName?: string | undefined;
    name?: string | undefined;
    filterOptions: string;
    filter: {
        __typename?: 'Filter';
        id: string;
        name?: string | undefined;
        filterType: FilterType;
    };
    sourceGroup: {
        __typename?: 'SourceGroup';
        id: string;
        name?: string | undefined;
        sources?: Array<{
            __typename?: 'Source';
            id: string;
            name?: string | undefined;
            type: SourceType;
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: Array<{
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            } | undefined> | undefined;
        } | undefined> | undefined;
    };
    targetGroup: {
        __typename?: 'TargetGroup';
        id: string;
        name?: string | undefined;
        emailTargets?: Array<{
            __typename?: 'EmailTarget';
            emailAddress?: string | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
        } | undefined> | undefined;
        smsTargets?: Array<{
            __typename?: 'SmsTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            phoneNumber?: string | undefined;
        } | undefined> | undefined;
        telegramTargets?: Array<{
            __typename?: 'TelegramTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            telegramId: string;
            confirmationUrl?: string | undefined;
        } | undefined> | undefined;
        webhookTargets?: Array<{
            __typename?: 'WebhookTarget';
            id: string;
            url: string;
            status: WebhookStatus;
            format: WebhookPayloadFormat;
            name?: string | undefined;
            headers?: Array<{
                __typename?: 'KeyValuePairOfStringAndString';
                key: string;
                value: string;
            }> | undefined;
        } | undefined> | undefined;
        discordTargets?: Array<{
            __typename?: 'DiscordTarget';
            id: string;
            discordAccountId?: string | undefined;
            discriminator?: string | undefined;
            isConfirmed: boolean;
            username?: string | undefined;
            name?: string | undefined;
            userStatus: DiscordTargetStatus;
            verificationLink?: string | undefined;
            discordServerInviteLink?: string | undefined;
        } | undefined> | undefined;
    };
};
declare type AuthorizationFragmentFragment = {
    __typename?: 'Authorization';
    token: string;
    expiry: string;
};
declare type ConnectedWalletFragmentFragment = {
    __typename?: 'ConnectedWallet';
    address?: string | undefined;
    walletBlockchain: WalletBlockchain;
};
declare type ConvMessagePageInfoFragment = {
    __typename?: 'PageInfo';
    hasNextPage: boolean;
    endCursor?: string | undefined;
};
declare type ConversationMessageFragment = {
    __typename?: 'ConversationMessage';
    id: string;
    userId: string;
    conversationId: string;
    createdDate: string;
    updatedDate: string;
    message: string;
    conversationParticipant?: {
        __typename?: 'ConversationParticipant';
        conversationId: string;
        conversationParticipantType: ConversationParticipantType;
        resolvedName?: string | undefined;
        userId: string;
        walletAddress: string;
        walletBlockchain: WalletBlockchain;
        profile: {
            __typename?: 'UserProfile';
            avatarData?: string | undefined;
            avatarDataType: AvatarDataType;
            id: string;
            preferredAddress?: string | undefined;
            preferredBlockchain: WalletBlockchain;
            preferredName?: string | undefined;
        };
    } | undefined;
};
declare type DiscordTargetFragmentFragment = {
    __typename?: 'DiscordTarget';
    id: string;
    discordAccountId?: string | undefined;
    discriminator?: string | undefined;
    isConfirmed: boolean;
    username?: string | undefined;
    name?: string | undefined;
    userStatus: DiscordTargetStatus;
    verificationLink?: string | undefined;
    discordServerInviteLink?: string | undefined;
};
declare type EmailTargetFragmentFragment = {
    __typename?: 'EmailTarget';
    emailAddress?: string | undefined;
    id: string;
    isConfirmed: boolean;
    name?: string | undefined;
};
declare type FilterFragmentFragment = {
    __typename?: 'Filter';
    id: string;
    name?: string | undefined;
    filterType: FilterType;
};
declare type FusionNotificationHistoryEntryFragmentFragment = {
    __typename: 'FusionNotificationHistoryEntry';
    id: string;
    createdDate: string;
    read: boolean;
    fusionEventVariables: string;
    detail?: {
        __typename: 'AccountBalanceChangedEventDetails';
        walletBlockchain: WalletBlockchain;
        direction: AccountBalanceChangeDirection;
        newValue: number;
        previousValue: number;
        tokenSymbol: string;
        isWhaleWatch: boolean;
    } | {
        __typename: 'BroadcastMessageEventDetails';
        subject?: string | undefined;
        message?: string | undefined;
        messageHtml?: string | undefined;
        messageType: string;
    } | {
        __typename: 'ChatMessageReceivedEventDetails';
        senderName: string;
        conversationId: string;
        messageId: string;
        senderId: string;
        senderBlockchain: WalletBlockchain;
        messageBody: string;
    } | {
        __typename: 'DAOProposalChangedEventDetails';
        tenantName: string;
        description: string;
        state?: string | undefined;
        daoUrl?: string | undefined;
        proposalUrl?: string | undefined;
        proposalTitle?: string | undefined;
    } | {
        __typename: 'DirectTenantMessageEventDetails';
        tenantName: string;
        targetTemplatesJson?: string | undefined;
        templateVariablesJson?: string | undefined;
    } | {
        __typename: 'GenericEventDetails';
        sourceName: string;
        notificationTypeName: string;
        eventDetailsJson?: string | undefined;
        icon: GenericEventIconHint;
        genericMessage: string;
        genericMessageHtml?: string | undefined;
        action?: {
            __typename?: 'GenericEventAction';
            name: string;
            url: string;
        } | undefined;
    } | {
        __typename: 'HealthValueOverThresholdEventDetails';
        name: string;
        value: string;
        threshold: string;
        url: string;
    } | {
        __typename: 'NftAuctionChangedEventDetails';
        auctionUrl?: string | undefined;
        walletBlockchain: WalletBlockchain;
        highBidAmount: number;
        highBidSymbol?: string | undefined;
        imageUrl?: string | undefined;
        auctionTitle: string;
    } | {
        __typename: 'NftCollectionsReportEventDetails';
        type: NftCollectionsReportType;
        providerName: string;
        sourceLink: string;
        collections: Array<{
            __typename?: 'NftCollectionStats';
            collectionId: string;
            name: string;
            imgUrl?: string | undefined;
            volume1Day?: string | undefined;
            volume1DayChange?: string | undefined;
        }>;
    } | {
        __typename: 'WalletsActivityReportEventDetails';
        providerName: string;
        sourceLink: string;
        walletActivityType: WalletsActivityReportType;
        wallets: Array<{
            __typename?: 'WalletsActivityReportWallet';
            address: string;
            volume1Day: string;
            maxPurchase1Day?: string | undefined;
            maxPurchaseName?: string | undefined;
            maxPurchaseImgUrl?: string | undefined;
            maxPurchaseTokenAddress?: string | undefined;
        }>;
    } | undefined;
};
declare type NotificationHistoryEntryFragmentFragment = {
    __typename: 'NotificationHistoryEntry';
    id: string;
    createdDate: string;
    eventId: string;
    read: boolean;
    sourceAddress?: string | undefined;
    category?: NotificationCategory | undefined;
    transactionSignature?: string | undefined;
    targets: Array<{
        __typename?: 'NotificationTarget';
        type: TargetType;
        name?: string | undefined;
    }>;
    detail?: {
        __typename: 'AccountBalanceChangedEventDetails';
        walletBlockchain: WalletBlockchain;
        direction: AccountBalanceChangeDirection;
        newValue: number;
        previousValue: number;
        tokenSymbol: string;
        isWhaleWatch: boolean;
    } | {
        __typename: 'BroadcastMessageEventDetails';
        subject?: string | undefined;
        message?: string | undefined;
        messageHtml?: string | undefined;
        messageType: string;
    } | {
        __typename: 'ChatMessageReceivedEventDetails';
        senderName: string;
        conversationId: string;
        messageId: string;
        senderId: string;
        senderBlockchain: WalletBlockchain;
        messageBody: string;
    } | {
        __typename: 'DAOProposalChangedEventDetails';
        tenantName: string;
        description: string;
        state?: string | undefined;
        daoUrl?: string | undefined;
        proposalUrl?: string | undefined;
        proposalTitle?: string | undefined;
    } | {
        __typename: 'DirectTenantMessageEventDetails';
        tenantName: string;
        targetTemplatesJson?: string | undefined;
        templateVariablesJson?: string | undefined;
    } | {
        __typename: 'GenericEventDetails';
        sourceName: string;
        notificationTypeName: string;
        eventDetailsJson?: string | undefined;
        icon: GenericEventIconHint;
        genericMessage: string;
        genericMessageHtml?: string | undefined;
        action?: {
            __typename?: 'GenericEventAction';
            name: string;
            url: string;
        } | undefined;
    } | {
        __typename: 'HealthValueOverThresholdEventDetails';
        name: string;
        value: string;
        threshold: string;
        url: string;
    } | {
        __typename: 'NftAuctionChangedEventDetails';
        auctionUrl?: string | undefined;
        walletBlockchain: WalletBlockchain;
        highBidAmount: number;
        highBidSymbol?: string | undefined;
        imageUrl?: string | undefined;
        auctionTitle: string;
    } | {
        __typename: 'NftCollectionsReportEventDetails';
        type: NftCollectionsReportType;
        providerName: string;
        sourceLink: string;
        collections: Array<{
            __typename?: 'NftCollectionStats';
            collectionId: string;
            name: string;
            imgUrl?: string | undefined;
            volume1Day?: string | undefined;
            volume1DayChange?: string | undefined;
        }>;
    } | {
        __typename: 'WalletsActivityReportEventDetails';
        providerName: string;
        sourceLink: string;
        walletActivityType: WalletsActivityReportType;
        wallets: Array<{
            __typename?: 'WalletsActivityReportWallet';
            address: string;
            volume1Day: string;
            maxPurchase1Day?: string | undefined;
            maxPurchaseName?: string | undefined;
            maxPurchaseImgUrl?: string | undefined;
            maxPurchaseTokenAddress?: string | undefined;
        }>;
    } | undefined;
};
declare type PageInfoFragmentFragment = {
    __typename?: 'PageInfo';
    hasNextPage: boolean;
    endCursor?: string | undefined;
};
declare type ParticipantFragment = {
    __typename?: 'ConversationParticipant';
    conversationId: string;
    conversationParticipantType: ConversationParticipantType;
    resolvedName?: string | undefined;
    userId: string;
    walletAddress: string;
    walletBlockchain: WalletBlockchain;
    profile: {
        __typename?: 'UserProfile';
        avatarData?: string | undefined;
        avatarDataType: AvatarDataType;
        id: string;
        preferredAddress?: string | undefined;
        preferredBlockchain: WalletBlockchain;
        preferredName?: string | undefined;
    };
};
declare type SmsTargetFragmentFragment = {
    __typename?: 'SmsTarget';
    id: string;
    isConfirmed: boolean;
    name?: string | undefined;
    phoneNumber?: string | undefined;
};
declare type SourceFragmentFragment = {
    __typename?: 'Source';
    id: string;
    name?: string | undefined;
    type: SourceType;
    blockchainAddress: string;
    fusionEventTypeId?: string | undefined;
    applicableFilters?: Array<{
        __typename?: 'Filter';
        id: string;
        name?: string | undefined;
        filterType: FilterType;
    } | undefined> | undefined;
};
declare type SourceGroupFragmentFragment = {
    __typename?: 'SourceGroup';
    id: string;
    name?: string | undefined;
    sources?: Array<{
        __typename?: 'Source';
        id: string;
        name?: string | undefined;
        type: SourceType;
        blockchainAddress: string;
        fusionEventTypeId?: string | undefined;
        applicableFilters?: Array<{
            __typename?: 'Filter';
            id: string;
            name?: string | undefined;
            filterType: FilterType;
        } | undefined> | undefined;
    } | undefined> | undefined;
};
declare type TargetGroupFragmentFragment = {
    __typename?: 'TargetGroup';
    id: string;
    name?: string | undefined;
    emailTargets?: Array<{
        __typename?: 'EmailTarget';
        emailAddress?: string | undefined;
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
    } | undefined> | undefined;
    smsTargets?: Array<{
        __typename?: 'SmsTarget';
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        phoneNumber?: string | undefined;
    } | undefined> | undefined;
    telegramTargets?: Array<{
        __typename?: 'TelegramTarget';
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        telegramId: string;
        confirmationUrl?: string | undefined;
    } | undefined> | undefined;
    webhookTargets?: Array<{
        __typename?: 'WebhookTarget';
        id: string;
        url: string;
        status: WebhookStatus;
        format: WebhookPayloadFormat;
        name?: string | undefined;
        headers?: Array<{
            __typename?: 'KeyValuePairOfStringAndString';
            key: string;
            value: string;
        }> | undefined;
    } | undefined> | undefined;
    discordTargets?: Array<{
        __typename?: 'DiscordTarget';
        id: string;
        discordAccountId?: string | undefined;
        discriminator?: string | undefined;
        isConfirmed: boolean;
        username?: string | undefined;
        name?: string | undefined;
        userStatus: DiscordTargetStatus;
        verificationLink?: string | undefined;
        discordServerInviteLink?: string | undefined;
    } | undefined> | undefined;
};
declare type TelegramTargetFragmentFragment = {
    __typename?: 'TelegramTarget';
    id: string;
    isConfirmed: boolean;
    name?: string | undefined;
    telegramId: string;
    confirmationUrl?: string | undefined;
};
declare type TenantConfigFragmentFragment = {
    __typename?: 'TenantConfig';
    id?: string | undefined;
    type: TenantConfigType;
    dataJson?: string | undefined;
};
declare type TenantConnectedWalletFragmentFragment = {
    __typename?: 'TenantConnectedWallet';
    address?: string | undefined;
    walletBlockchain: WalletBlockchain;
};
declare type TenantUserAlertFragmentFragment = {
    __typename?: 'TenantUserAlert';
    id: string;
    name?: string | undefined;
    groupName?: string | undefined;
    filterOptions: string;
    filter: {
        __typename?: 'Filter';
        id: string;
        name?: string | undefined;
        filterType: FilterType;
    };
    sourceGroup: {
        __typename?: 'SourceGroup';
        id: string;
        name?: string | undefined;
        sources?: Array<{
            __typename?: 'Source';
            id: string;
            name?: string | undefined;
            type: SourceType;
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: Array<{
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            } | undefined> | undefined;
        } | undefined> | undefined;
    };
    targetGroup?: {
        __typename?: 'TenantTargetGroup';
        hasVerifiedFcm: boolean;
        hasVerifiedSms: boolean;
        hasVerifiedWeb3: boolean;
        hasVerifiedEmails: boolean;
        hasVerifiedWebhook: boolean;
        hasVerifiedDiscord: boolean;
        hasVerifiedTelegram: boolean;
    } | undefined;
};
declare type TenantUserFragmentFragment = {
    __typename?: 'TenantUser';
    id: string;
    alerts?: Array<{
        __typename?: 'TenantUserAlert';
        id: string;
        name?: string | undefined;
        groupName?: string | undefined;
        filterOptions: string;
        filter: {
            __typename?: 'Filter';
            id: string;
            name?: string | undefined;
            filterType: FilterType;
        };
        sourceGroup: {
            __typename?: 'SourceGroup';
            id: string;
            name?: string | undefined;
            sources?: Array<{
                __typename?: 'Source';
                id: string;
                name?: string | undefined;
                type: SourceType;
                blockchainAddress: string;
                fusionEventTypeId?: string | undefined;
                applicableFilters?: Array<{
                    __typename?: 'Filter';
                    id: string;
                    name?: string | undefined;
                    filterType: FilterType;
                } | undefined> | undefined;
            } | undefined> | undefined;
        };
        targetGroup?: {
            __typename?: 'TenantTargetGroup';
            hasVerifiedFcm: boolean;
            hasVerifiedSms: boolean;
            hasVerifiedWeb3: boolean;
            hasVerifiedEmails: boolean;
            hasVerifiedWebhook: boolean;
            hasVerifiedDiscord: boolean;
            hasVerifiedTelegram: boolean;
        } | undefined;
    } | undefined> | undefined;
    connectedWallets?: Array<{
        __typename?: 'TenantConnectedWallet';
        address?: string | undefined;
        walletBlockchain: WalletBlockchain;
    } | undefined> | undefined;
};
declare type UserFragmentFragment = {
    __typename?: 'User';
    email?: string | undefined;
    emailConfirmed: boolean;
    roles?: Array<string | undefined> | undefined;
    authorization?: {
        __typename?: 'Authorization';
        token: string;
        expiry: string;
    } | undefined;
};
declare type UserTopicFragmentFragment = {
    __typename?: 'UserTopic';
    name?: string | undefined;
    topicName: string;
    targetCollections?: Array<string> | undefined;
    targetTemplate?: string | undefined;
};
declare type WebhookTargetFragmentFragment = {
    __typename?: 'WebhookTarget';
    id: string;
    url: string;
    status: WebhookStatus;
    format: WebhookPayloadFormat;
    name?: string | undefined;
    headers?: Array<{
        __typename?: 'KeyValuePairOfStringAndString';
        key: string;
        value: string;
    }> | undefined;
};
declare type AddSourceToSourceGroupMutationVariables = Exact<{
    input: AddSourceToSourceGroupInput;
}>;
declare type AddSourceToSourceGroupMutation = {
    __typename?: 'NotifiMutation';
    addSourceToSourceGroup: {
        __typename?: 'SourceGroup';
        id: string;
        name?: string | undefined;
        sources?: Array<{
            __typename?: 'Source';
            id: string;
            name?: string | undefined;
            type: SourceType;
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: Array<{
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            } | undefined> | undefined;
        } | undefined> | undefined;
    };
};
declare type BeginLogInByTransactionMutationVariables = Exact<{
    walletAddress: Scalars['String']['input'];
    walletBlockchain: WalletBlockchain;
    dappAddress: Scalars['String']['input'];
}>;
declare type BeginLogInByTransactionMutation = {
    __typename?: 'NotifiMutation';
    beginLogInByTransaction: {
        __typename?: 'BeginLogInByTransactionResult';
        nonce: string;
    };
};
declare type BroadcastMessageMutationVariables = Exact<{
    idempotencyKey?: InputMaybe<Scalars['String']['input']>;
    topicName: Scalars['String']['input'];
    targetTemplates?: InputMaybe<Array<KeyValuePairOfTargetTypeAndStringInput> | KeyValuePairOfTargetTypeAndStringInput>;
    variables?: InputMaybe<Array<KeyValuePairOfStringAndStringInput> | KeyValuePairOfStringAndStringInput>;
    timestamp: Scalars['Long']['input'];
    walletBlockchain: WalletBlockchain;
    signature: Scalars['String']['input'];
}>;
declare type BroadcastMessageMutation = {
    __typename?: 'NotifiMutation';
    broadcastMessage?: {
        __typename?: 'BroadcastMessageResult';
        id?: string | undefined;
    } | undefined;
};
declare type CompleteLogInByTransactionMutationVariables = Exact<{
    walletAddress: Scalars['String']['input'];
    walletBlockchain: WalletBlockchain;
    dappAddress: Scalars['String']['input'];
    randomUuid: Scalars['String']['input'];
    transactionSignature: Scalars['String']['input'];
}>;
declare type CompleteLogInByTransactionMutation = {
    __typename?: 'NotifiMutation';
    completeLogInByTransaction?: {
        __typename?: 'User';
        email?: string | undefined;
        emailConfirmed: boolean;
        roles?: Array<string | undefined> | undefined;
        authorization?: {
            __typename?: 'Authorization';
            token: string;
            expiry: string;
        } | undefined;
    } | undefined;
};
declare type ConnectWalletMutationVariables = Exact<{
    walletPublicKey: Scalars['String']['input'];
    timestamp: Scalars['Long']['input'];
    signature: Scalars['String']['input'];
    walletBlockchain: WalletBlockchain;
    accountId?: InputMaybe<Scalars['String']['input']>;
    connectWalletConflictResolutionTechnique?: InputMaybe<ConnectWalletConflictResolutionTechnique>;
}>;
declare type ConnectWalletMutation = {
    __typename?: 'NotifiMutation';
    connectWallet?: {
        __typename?: 'ConnectedWallet';
        address?: string | undefined;
        walletBlockchain: WalletBlockchain;
    } | undefined;
};
declare type CreateAlertMutationVariables = Exact<{
    name: Scalars['String']['input'];
    sourceGroupId: Scalars['String']['input'];
    filterId: Scalars['String']['input'];
    targetGroupId: Scalars['String']['input'];
    filterOptions: Scalars['String']['input'];
    groupName: Scalars['String']['input'];
}>;
declare type CreateAlertMutation = {
    __typename?: 'NotifiMutation';
    createAlert?: {
        __typename?: 'Alert';
        id: string;
        groupName?: string | undefined;
        name?: string | undefined;
        filterOptions: string;
        filter: {
            __typename?: 'Filter';
            id: string;
            name?: string | undefined;
            filterType: FilterType;
        };
        sourceGroup: {
            __typename?: 'SourceGroup';
            id: string;
            name?: string | undefined;
            sources?: Array<{
                __typename?: 'Source';
                id: string;
                name?: string | undefined;
                type: SourceType;
                blockchainAddress: string;
                fusionEventTypeId?: string | undefined;
                applicableFilters?: Array<{
                    __typename?: 'Filter';
                    id: string;
                    name?: string | undefined;
                    filterType: FilterType;
                } | undefined> | undefined;
            } | undefined> | undefined;
        };
        targetGroup: {
            __typename?: 'TargetGroup';
            id: string;
            name?: string | undefined;
            emailTargets?: Array<{
                __typename?: 'EmailTarget';
                emailAddress?: string | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
            } | undefined> | undefined;
            smsTargets?: Array<{
                __typename?: 'SmsTarget';
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                phoneNumber?: string | undefined;
            } | undefined> | undefined;
            telegramTargets?: Array<{
                __typename?: 'TelegramTarget';
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                telegramId: string;
                confirmationUrl?: string | undefined;
            } | undefined> | undefined;
            webhookTargets?: Array<{
                __typename?: 'WebhookTarget';
                id: string;
                url: string;
                status: WebhookStatus;
                format: WebhookPayloadFormat;
                name?: string | undefined;
                headers?: Array<{
                    __typename?: 'KeyValuePairOfStringAndString';
                    key: string;
                    value: string;
                }> | undefined;
            } | undefined> | undefined;
            discordTargets?: Array<{
                __typename?: 'DiscordTarget';
                id: string;
                discordAccountId?: string | undefined;
                discriminator?: string | undefined;
                isConfirmed: boolean;
                username?: string | undefined;
                name?: string | undefined;
                userStatus: DiscordTargetStatus;
                verificationLink?: string | undefined;
                discordServerInviteLink?: string | undefined;
            } | undefined> | undefined;
        };
    } | undefined;
};
declare type CreateDirectPushAlertMutationVariables = Exact<{
    input: CreateDirectPushAlertInput;
}>;
declare type CreateDirectPushAlertMutation = {
    __typename?: 'NotifiMutation';
    createDirectPushAlert?: {
        __typename?: 'Alert';
        id: string;
        groupName?: string | undefined;
        name?: string | undefined;
        filterOptions: string;
        filter: {
            __typename?: 'Filter';
            id: string;
            name?: string | undefined;
            filterType: FilterType;
        };
        sourceGroup: {
            __typename?: 'SourceGroup';
            id: string;
            name?: string | undefined;
            sources?: Array<{
                __typename?: 'Source';
                id: string;
                name?: string | undefined;
                type: SourceType;
                blockchainAddress: string;
                fusionEventTypeId?: string | undefined;
                applicableFilters?: Array<{
                    __typename?: 'Filter';
                    id: string;
                    name?: string | undefined;
                    filterType: FilterType;
                } | undefined> | undefined;
            } | undefined> | undefined;
        };
        targetGroup: {
            __typename?: 'TargetGroup';
            id: string;
            name?: string | undefined;
            emailTargets?: Array<{
                __typename?: 'EmailTarget';
                emailAddress?: string | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
            } | undefined> | undefined;
            smsTargets?: Array<{
                __typename?: 'SmsTarget';
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                phoneNumber?: string | undefined;
            } | undefined> | undefined;
            telegramTargets?: Array<{
                __typename?: 'TelegramTarget';
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                telegramId: string;
                confirmationUrl?: string | undefined;
            } | undefined> | undefined;
            webhookTargets?: Array<{
                __typename?: 'WebhookTarget';
                id: string;
                url: string;
                status: WebhookStatus;
                format: WebhookPayloadFormat;
                name?: string | undefined;
                headers?: Array<{
                    __typename?: 'KeyValuePairOfStringAndString';
                    key: string;
                    value: string;
                }> | undefined;
            } | undefined> | undefined;
            discordTargets?: Array<{
                __typename?: 'DiscordTarget';
                id: string;
                discordAccountId?: string | undefined;
                discriminator?: string | undefined;
                isConfirmed: boolean;
                username?: string | undefined;
                name?: string | undefined;
                userStatus: DiscordTargetStatus;
                verificationLink?: string | undefined;
                discordServerInviteLink?: string | undefined;
            } | undefined> | undefined;
        };
    } | undefined;
};
declare type CreateDiscordTargetMutationVariables = Exact<{
    name: Scalars['String']['input'];
    value: Scalars['String']['input'];
}>;
declare type CreateDiscordTargetMutation = {
    __typename?: 'NotifiMutation';
    createDiscordTarget: {
        __typename?: 'DiscordTarget';
        id: string;
        discordAccountId?: string | undefined;
        discriminator?: string | undefined;
        isConfirmed: boolean;
        username?: string | undefined;
        name?: string | undefined;
        userStatus: DiscordTargetStatus;
        verificationLink?: string | undefined;
        discordServerInviteLink?: string | undefined;
    };
};
declare type CreateEmailTargetMutationVariables = Exact<{
    name: Scalars['String']['input'];
    value: Scalars['String']['input'];
}>;
declare type CreateEmailTargetMutation = {
    __typename?: 'NotifiMutation';
    createEmailTarget?: {
        __typename?: 'EmailTarget';
        emailAddress?: string | undefined;
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
    } | undefined;
};
declare type CreateSmsTargetMutationVariables = Exact<{
    name: Scalars['String']['input'];
    value: Scalars['String']['input'];
}>;
declare type CreateSmsTargetMutation = {
    __typename?: 'NotifiMutation';
    createSmsTarget?: {
        __typename?: 'SmsTarget';
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        phoneNumber?: string | undefined;
    } | undefined;
};
declare type CreateSourceMutationVariables = Exact<{
    name?: InputMaybe<Scalars['String']['input']>;
    blockchainAddress: Scalars['String']['input'];
    type: SourceType;
    fusionEventTypeId?: InputMaybe<Scalars['String']['input']>;
}>;
declare type CreateSourceMutation = {
    __typename?: 'NotifiMutation';
    createSource?: {
        __typename?: 'Source';
        id: string;
        name?: string | undefined;
        type: SourceType;
        blockchainAddress: string;
        fusionEventTypeId?: string | undefined;
        applicableFilters?: Array<{
            __typename?: 'Filter';
            id: string;
            name?: string | undefined;
            filterType: FilterType;
        } | undefined> | undefined;
    } | undefined;
};
declare type CreateSourceGroupMutationVariables = Exact<{
    name: Scalars['String']['input'];
    sourceIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;
declare type CreateSourceGroupMutation = {
    __typename?: 'NotifiMutation';
    createSourceGroup?: {
        __typename?: 'SourceGroup';
        id: string;
        name?: string | undefined;
        sources?: Array<{
            __typename?: 'Source';
            id: string;
            name?: string | undefined;
            type: SourceType;
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: Array<{
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            } | undefined> | undefined;
        } | undefined> | undefined;
    } | undefined;
};
declare type CreateSupportConversationMutationVariables = Exact<{
    [key: string]: never;
}>;
declare type CreateSupportConversationMutation = {
    __typename?: 'NotifiMutation';
    createSupportConversation: {
        __typename?: 'Conversation';
        id: string;
        conversationType: ConversationType;
        name: string;
        createdDate: string;
        backgroundImageUrl?: string | undefined;
        conversationGates?: Array<{
            __typename?: 'ConversationGate';
            id: string;
        } | undefined> | undefined;
        participants?: Array<{
            __typename?: 'ConversationParticipant';
            conversationParticipantType: ConversationParticipantType;
            resolvedName?: string | undefined;
            profile: {
                __typename?: 'UserProfile';
                id: string;
                preferredAddress?: string | undefined;
                preferredName?: string | undefined;
                avatarData?: string | undefined;
                avatarDataType: AvatarDataType;
            };
        } | undefined> | undefined;
    };
};
declare type CreateTargetGroupMutationVariables = Exact<{
    name: Scalars['String']['input'];
    emailTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
    smsTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
    telegramTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
    webhookTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
    discordTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;
declare type CreateTargetGroupMutation = {
    __typename?: 'NotifiMutation';
    createTargetGroup?: {
        __typename?: 'TargetGroup';
        id: string;
        name?: string | undefined;
        emailTargets?: Array<{
            __typename?: 'EmailTarget';
            emailAddress?: string | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
        } | undefined> | undefined;
        smsTargets?: Array<{
            __typename?: 'SmsTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            phoneNumber?: string | undefined;
        } | undefined> | undefined;
        telegramTargets?: Array<{
            __typename?: 'TelegramTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            telegramId: string;
            confirmationUrl?: string | undefined;
        } | undefined> | undefined;
        webhookTargets?: Array<{
            __typename?: 'WebhookTarget';
            id: string;
            url: string;
            status: WebhookStatus;
            format: WebhookPayloadFormat;
            name?: string | undefined;
            headers?: Array<{
                __typename?: 'KeyValuePairOfStringAndString';
                key: string;
                value: string;
            }> | undefined;
        } | undefined> | undefined;
        discordTargets?: Array<{
            __typename?: 'DiscordTarget';
            id: string;
            discordAccountId?: string | undefined;
            discriminator?: string | undefined;
            isConfirmed: boolean;
            username?: string | undefined;
            name?: string | undefined;
            userStatus: DiscordTargetStatus;
            verificationLink?: string | undefined;
            discordServerInviteLink?: string | undefined;
        } | undefined> | undefined;
    } | undefined;
};
declare type CreateTelegramTargetMutationVariables = Exact<{
    name: Scalars['String']['input'];
    value: Scalars['String']['input'];
}>;
declare type CreateTelegramTargetMutation = {
    __typename?: 'NotifiMutation';
    createTelegramTarget?: {
        __typename?: 'TelegramTarget';
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        telegramId: string;
        confirmationUrl?: string | undefined;
    } | undefined;
};
declare type CreateTenantUserMutationVariables = Exact<{
    input: CreateTenantUserInput;
}>;
declare type CreateTenantUserMutation = {
    __typename?: 'NotifiMutation';
    createTenantUser?: {
        __typename?: 'TenantUser';
        id: string;
        alerts?: Array<{
            __typename?: 'TenantUserAlert';
            id: string;
            name?: string | undefined;
            groupName?: string | undefined;
            filterOptions: string;
            filter: {
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            };
            sourceGroup: {
                __typename?: 'SourceGroup';
                id: string;
                name?: string | undefined;
                sources?: Array<{
                    __typename?: 'Source';
                    id: string;
                    name?: string | undefined;
                    type: SourceType;
                    blockchainAddress: string;
                    fusionEventTypeId?: string | undefined;
                    applicableFilters?: Array<{
                        __typename?: 'Filter';
                        id: string;
                        name?: string | undefined;
                        filterType: FilterType;
                    } | undefined> | undefined;
                } | undefined> | undefined;
            };
            targetGroup?: {
                __typename?: 'TenantTargetGroup';
                hasVerifiedFcm: boolean;
                hasVerifiedSms: boolean;
                hasVerifiedWeb3: boolean;
                hasVerifiedEmails: boolean;
                hasVerifiedWebhook: boolean;
                hasVerifiedDiscord: boolean;
                hasVerifiedTelegram: boolean;
            } | undefined;
        } | undefined> | undefined;
        connectedWallets?: Array<{
            __typename?: 'TenantConnectedWallet';
            address?: string | undefined;
            walletBlockchain: WalletBlockchain;
        } | undefined> | undefined;
    } | undefined;
};
declare type CreateWebhookTargetMutationVariables = Exact<{
    name: Scalars['String']['input'];
    url: Scalars['String']['input'];
    format: WebhookPayloadFormat;
    headers: Array<KeyValuePairOfStringAndStringInput> | KeyValuePairOfStringAndStringInput;
}>;
declare type CreateWebhookTargetMutation = {
    __typename?: 'NotifiMutation';
    createWebhookTarget?: {
        __typename?: 'WebhookTarget';
        id: string;
        url: string;
        status: WebhookStatus;
        format: WebhookPayloadFormat;
        name?: string | undefined;
        headers?: Array<{
            __typename?: 'KeyValuePairOfStringAndString';
            key: string;
            value: string;
        }> | undefined;
    } | undefined;
};
declare type DeleteAlertMutationVariables = Exact<{
    id: Scalars['String']['input'];
}>;
declare type DeleteAlertMutation = {
    __typename?: 'NotifiMutation';
    deleteAlert?: {
        __typename?: 'Alert';
        id: string;
    } | undefined;
};
declare type DeleteDirectPushAlertMutationVariables = Exact<{
    input: DeleteDirectPushAlertInput;
}>;
declare type DeleteDirectPushAlertMutation = {
    __typename?: 'NotifiMutation';
    deleteDirectPushAlert?: {
        __typename?: 'Alert';
        id: string;
    } | undefined;
};
declare type DeleteSourceGroupMutationVariables = Exact<{
    id: Scalars['String']['input'];
}>;
declare type DeleteSourceGroupMutation = {
    __typename?: 'NotifiMutation';
    deleteSourceGroup?: {
        __typename?: 'SourceGroup';
        id: string;
    } | undefined;
};
declare type DeleteTargetGroupMutationVariables = Exact<{
    id: Scalars['String']['input'];
}>;
declare type DeleteTargetGroupMutation = {
    __typename?: 'NotifiMutation';
    deleteTargetGroup?: {
        __typename?: 'TargetGroup';
        id: string;
    } | undefined;
};
declare type DeleteUserAlertMutationVariables = Exact<{
    alertId: Scalars['String']['input'];
}>;
declare type DeleteUserAlertMutation = {
    __typename?: 'NotifiMutation';
    deleteUserAlert?: {
        __typename?: 'Alert';
        id: string;
    } | undefined;
};
declare type DeleteWebhookTargetMutationVariables = Exact<{
    id: Scalars['String']['input'];
}>;
declare type DeleteWebhookTargetMutation = {
    __typename?: 'NotifiMutation';
    deleteWebhookTarget?: {
        __typename?: 'WebhookTarget';
        id: string;
    } | undefined;
};
declare type LogInFromDappMutationVariables = Exact<{
    walletBlockchain: WalletBlockchain;
    walletPublicKey: Scalars['String']['input'];
    dappAddress: Scalars['String']['input'];
    timestamp: Scalars['Long']['input'];
    signature: Scalars['String']['input'];
    accountId?: InputMaybe<Scalars['String']['input']>;
}>;
declare type LogInFromDappMutation = {
    __typename?: 'NotifiMutation';
    logInFromDapp?: {
        __typename?: 'User';
        email?: string | undefined;
        emailConfirmed: boolean;
        roles?: Array<string | undefined> | undefined;
        authorization?: {
            __typename?: 'Authorization';
            token: string;
            expiry: string;
        } | undefined;
    } | undefined;
};
declare type LogInFromServiceMutationVariables = Exact<{
    input: ServiceLogInInput;
}>;
declare type LogInFromServiceMutation = {
    __typename?: 'NotifiMutation';
    logInFromService?: {
        __typename?: 'Authorization';
        token: string;
        expiry: string;
    } | undefined;
};
declare type MarkFusionNotificationHistoryAsReadMutationVariables = Exact<{
    ids: Array<Scalars['String']['input']> | Scalars['String']['input'];
    beforeId?: InputMaybe<Scalars['String']['input']>;
    readState?: InputMaybe<NotificationHistoryReadState>;
}>;
declare type MarkFusionNotificationHistoryAsReadMutation = {
    __typename?: 'NotifiMutation';
    markFusionNotificationHistoryAsRead: Array<string>;
};
declare type PublishFusionMessageMutationVariables = Exact<{
    eventTypeId: Scalars['String']['input'];
    variablesJson: Scalars['String']['input'];
    specificWallets?: InputMaybe<Array<KeyValuePairOfStringAndWalletBlockchainInput> | KeyValuePairOfStringAndWalletBlockchainInput>;
}>;
declare type PublishFusionMessageMutation = {
    __typename?: 'NotifiMutation';
    publishFusionMessage: {
        __typename?: 'PublishFusionMessageResult';
        eventUuid: string;
    };
};
declare type RefreshAuthorizationMutationVariables = Exact<{
    [key: string]: never;
}>;
declare type RefreshAuthorizationMutation = {
    __typename?: 'NotifiMutation';
    refreshAuthorization?: {
        __typename?: 'Authorization';
        token: string;
        expiry: string;
    } | undefined;
};
declare type RemoveSourceFromSourceGroupMutationVariables = Exact<{
    input: RemoveSourceFromSourceGroupInput;
}>;
declare type RemoveSourceFromSourceGroupMutation = {
    __typename?: 'NotifiMutation';
    removeSourceFromSourceGroup: {
        __typename?: 'SourceGroup';
        id: string;
        name?: string | undefined;
        sources?: Array<{
            __typename?: 'Source';
            id: string;
            name?: string | undefined;
            type: SourceType;
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: Array<{
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            } | undefined> | undefined;
        } | undefined> | undefined;
    };
};
declare type SendConversationMessageMutationVariables = Exact<{
    sendConversationMessageInput: SendConversationMessageInput;
}>;
declare type SendConversationMessageMutation = {
    __typename?: 'NotifiMutation';
    sendConversationMessage: {
        __typename?: 'ConversationMessage';
        id: string;
        userId: string;
        conversationId: string;
        createdDate: string;
        updatedDate: string;
        message: string;
        conversationParticipant?: {
            __typename?: 'ConversationParticipant';
            conversationId: string;
            conversationParticipantType: ConversationParticipantType;
            resolvedName?: string | undefined;
            userId: string;
            walletAddress: string;
            walletBlockchain: WalletBlockchain;
            profile: {
                __typename?: 'UserProfile';
                avatarData?: string | undefined;
                avatarDataType: AvatarDataType;
                id: string;
                preferredAddress?: string | undefined;
                preferredBlockchain: WalletBlockchain;
                preferredName?: string | undefined;
            };
        } | undefined;
    };
};
declare type SendEmailTargetVerificationRequestMutationVariables = Exact<{
    targetId: Scalars['String']['input'];
}>;
declare type SendEmailTargetVerificationRequestMutation = {
    __typename?: 'NotifiMutation';
    sendEmailTargetVerificationRequest?: {
        __typename?: 'EmailTarget';
        emailAddress?: string | undefined;
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
    } | undefined;
};
declare type SendMessageMutationVariables = Exact<{
    input: SendMessageInput;
}>;
declare type SendMessageMutation = {
    __typename?: 'NotifiMutation';
    sendMessage: boolean;
};
declare type UpdateSourceGroupMutationVariables = Exact<{
    id: Scalars['String']['input'];
    name: Scalars['String']['input'];
    sourceIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;
declare type UpdateSourceGroupMutation = {
    __typename?: 'NotifiMutation';
    updateSourceGroup?: {
        __typename?: 'SourceGroup';
        id: string;
        name?: string | undefined;
        sources?: Array<{
            __typename?: 'Source';
            id: string;
            name?: string | undefined;
            type: SourceType;
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: Array<{
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            } | undefined> | undefined;
        } | undefined> | undefined;
    } | undefined;
};
declare type UpdateTargetGroupMutationVariables = Exact<{
    id: Scalars['String']['input'];
    name: Scalars['String']['input'];
    emailTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
    smsTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
    telegramTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
    webhookTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
    discordTargetIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;
declare type UpdateTargetGroupMutation = {
    __typename?: 'NotifiMutation';
    updateTargetGroup?: {
        __typename?: 'TargetGroup';
        id: string;
        name?: string | undefined;
        emailTargets?: Array<{
            __typename?: 'EmailTarget';
            emailAddress?: string | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
        } | undefined> | undefined;
        smsTargets?: Array<{
            __typename?: 'SmsTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            phoneNumber?: string | undefined;
        } | undefined> | undefined;
        telegramTargets?: Array<{
            __typename?: 'TelegramTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            telegramId: string;
            confirmationUrl?: string | undefined;
        } | undefined> | undefined;
        webhookTargets?: Array<{
            __typename?: 'WebhookTarget';
            id: string;
            url: string;
            status: WebhookStatus;
            format: WebhookPayloadFormat;
            name?: string | undefined;
            headers?: Array<{
                __typename?: 'KeyValuePairOfStringAndString';
                key: string;
                value: string;
            }> | undefined;
        } | undefined> | undefined;
        discordTargets?: Array<{
            __typename?: 'DiscordTarget';
            id: string;
            discordAccountId?: string | undefined;
            discriminator?: string | undefined;
            isConfirmed: boolean;
            username?: string | undefined;
            name?: string | undefined;
            userStatus: DiscordTargetStatus;
            verificationLink?: string | undefined;
            discordServerInviteLink?: string | undefined;
        } | undefined> | undefined;
    } | undefined;
};
declare type UpdateUserSettingsMutationVariables = Exact<{
    input: UserSettingsInput;
}>;
declare type UpdateUserSettingsMutation = {
    __typename?: 'NotifiMutation';
    updateUserSettings?: {
        __typename?: 'UserSettings';
        detailedAlertHistoryEnabled: boolean;
        userHasChatEnabled: boolean;
        ftuStage?: number | undefined;
    } | undefined;
};
declare type FetchDataQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type FetchDataQuery = {
    __typename?: 'NotifiQuery';
    alert?: Array<{
        __typename?: 'Alert';
        id: string;
        groupName?: string | undefined;
        name?: string | undefined;
        filterOptions: string;
        filter: {
            __typename?: 'Filter';
            id: string;
            name?: string | undefined;
            filterType: FilterType;
        };
        sourceGroup: {
            __typename?: 'SourceGroup';
            id: string;
            name?: string | undefined;
            sources?: Array<{
                __typename?: 'Source';
                id: string;
                name?: string | undefined;
                type: SourceType;
                blockchainAddress: string;
                fusionEventTypeId?: string | undefined;
                applicableFilters?: Array<{
                    __typename?: 'Filter';
                    id: string;
                    name?: string | undefined;
                    filterType: FilterType;
                } | undefined> | undefined;
            } | undefined> | undefined;
        };
        targetGroup: {
            __typename?: 'TargetGroup';
            id: string;
            name?: string | undefined;
            emailTargets?: Array<{
                __typename?: 'EmailTarget';
                emailAddress?: string | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
            } | undefined> | undefined;
            smsTargets?: Array<{
                __typename?: 'SmsTarget';
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                phoneNumber?: string | undefined;
            } | undefined> | undefined;
            telegramTargets?: Array<{
                __typename?: 'TelegramTarget';
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                telegramId: string;
                confirmationUrl?: string | undefined;
            } | undefined> | undefined;
            webhookTargets?: Array<{
                __typename?: 'WebhookTarget';
                id: string;
                url: string;
                status: WebhookStatus;
                format: WebhookPayloadFormat;
                name?: string | undefined;
                headers?: Array<{
                    __typename?: 'KeyValuePairOfStringAndString';
                    key: string;
                    value: string;
                }> | undefined;
            } | undefined> | undefined;
            discordTargets?: Array<{
                __typename?: 'DiscordTarget';
                id: string;
                discordAccountId?: string | undefined;
                discriminator?: string | undefined;
                isConfirmed: boolean;
                username?: string | undefined;
                name?: string | undefined;
                userStatus: DiscordTargetStatus;
                verificationLink?: string | undefined;
                discordServerInviteLink?: string | undefined;
            } | undefined> | undefined;
        };
    } | undefined> | undefined;
    sourceGroup?: Array<{
        __typename?: 'SourceGroup';
        id: string;
        name?: string | undefined;
        sources?: Array<{
            __typename?: 'Source';
            id: string;
            name?: string | undefined;
            type: SourceType;
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: Array<{
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            } | undefined> | undefined;
        } | undefined> | undefined;
    } | undefined> | undefined;
    connectedWallet?: Array<{
        __typename?: 'ConnectedWallet';
        address?: string | undefined;
        walletBlockchain: WalletBlockchain;
    } | undefined> | undefined;
    source?: Array<{
        __typename?: 'Source';
        id: string;
        name?: string | undefined;
        type: SourceType;
        blockchainAddress: string;
        fusionEventTypeId?: string | undefined;
        applicableFilters?: Array<{
            __typename?: 'Filter';
            id: string;
            name?: string | undefined;
            filterType: FilterType;
        } | undefined> | undefined;
    } | undefined> | undefined;
    targetGroup?: Array<{
        __typename?: 'TargetGroup';
        id: string;
        name?: string | undefined;
        emailTargets?: Array<{
            __typename?: 'EmailTarget';
            emailAddress?: string | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
        } | undefined> | undefined;
        smsTargets?: Array<{
            __typename?: 'SmsTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            phoneNumber?: string | undefined;
        } | undefined> | undefined;
        telegramTargets?: Array<{
            __typename?: 'TelegramTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            telegramId: string;
            confirmationUrl?: string | undefined;
        } | undefined> | undefined;
        webhookTargets?: Array<{
            __typename?: 'WebhookTarget';
            id: string;
            url: string;
            status: WebhookStatus;
            format: WebhookPayloadFormat;
            name?: string | undefined;
            headers?: Array<{
                __typename?: 'KeyValuePairOfStringAndString';
                key: string;
                value: string;
            }> | undefined;
        } | undefined> | undefined;
        discordTargets?: Array<{
            __typename?: 'DiscordTarget';
            id: string;
            discordAccountId?: string | undefined;
            discriminator?: string | undefined;
            isConfirmed: boolean;
            username?: string | undefined;
            name?: string | undefined;
            userStatus: DiscordTargetStatus;
            verificationLink?: string | undefined;
            discordServerInviteLink?: string | undefined;
        } | undefined> | undefined;
    } | undefined> | undefined;
    emailTarget?: Array<{
        __typename?: 'EmailTarget';
        emailAddress?: string | undefined;
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
    } | undefined> | undefined;
    smsTarget?: Array<{
        __typename?: 'SmsTarget';
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        phoneNumber?: string | undefined;
    } | undefined> | undefined;
    telegramTarget?: Array<{
        __typename?: 'TelegramTarget';
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        telegramId: string;
        confirmationUrl?: string | undefined;
    } | undefined> | undefined;
    discordTarget?: Array<{
        __typename?: 'DiscordTarget';
        id: string;
        discordAccountId?: string | undefined;
        discriminator?: string | undefined;
        isConfirmed: boolean;
        username?: string | undefined;
        name?: string | undefined;
        userStatus: DiscordTargetStatus;
        verificationLink?: string | undefined;
        discordServerInviteLink?: string | undefined;
    }> | undefined;
    filter?: Array<{
        __typename?: 'Filter';
        id: string;
        name?: string | undefined;
        filterType: FilterType;
    } | undefined> | undefined;
};
declare type FindTenantConfigQueryVariables = Exact<{
    input: FindTenantConfigInput;
}>;
declare type FindTenantConfigQuery = {
    __typename?: 'NotifiQuery';
    findTenantConfig: {
        __typename?: 'TenantConfig';
        id?: string | undefined;
        type: TenantConfigType;
        dataJson?: string | undefined;
    };
};
declare type GetAlertsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetAlertsQuery = {
    __typename?: 'NotifiQuery';
    alert?: Array<{
        __typename?: 'Alert';
        id: string;
        groupName?: string | undefined;
        name?: string | undefined;
        filterOptions: string;
        filter: {
            __typename?: 'Filter';
            id: string;
            name?: string | undefined;
            filterType: FilterType;
        };
        sourceGroup: {
            __typename?: 'SourceGroup';
            id: string;
            name?: string | undefined;
            sources?: Array<{
                __typename?: 'Source';
                id: string;
                name?: string | undefined;
                type: SourceType;
                blockchainAddress: string;
                fusionEventTypeId?: string | undefined;
                applicableFilters?: Array<{
                    __typename?: 'Filter';
                    id: string;
                    name?: string | undefined;
                    filterType: FilterType;
                } | undefined> | undefined;
            } | undefined> | undefined;
        };
        targetGroup: {
            __typename?: 'TargetGroup';
            id: string;
            name?: string | undefined;
            emailTargets?: Array<{
                __typename?: 'EmailTarget';
                emailAddress?: string | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
            } | undefined> | undefined;
            smsTargets?: Array<{
                __typename?: 'SmsTarget';
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                phoneNumber?: string | undefined;
            } | undefined> | undefined;
            telegramTargets?: Array<{
                __typename?: 'TelegramTarget';
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                telegramId: string;
                confirmationUrl?: string | undefined;
            } | undefined> | undefined;
            webhookTargets?: Array<{
                __typename?: 'WebhookTarget';
                id: string;
                url: string;
                status: WebhookStatus;
                format: WebhookPayloadFormat;
                name?: string | undefined;
                headers?: Array<{
                    __typename?: 'KeyValuePairOfStringAndString';
                    key: string;
                    value: string;
                }> | undefined;
            } | undefined> | undefined;
            discordTargets?: Array<{
                __typename?: 'DiscordTarget';
                id: string;
                discordAccountId?: string | undefined;
                discriminator?: string | undefined;
                isConfirmed: boolean;
                username?: string | undefined;
                name?: string | undefined;
                userStatus: DiscordTargetStatus;
                verificationLink?: string | undefined;
                discordServerInviteLink?: string | undefined;
            } | undefined> | undefined;
        };
    } | undefined> | undefined;
};
declare type GetConfigurationForDappQueryVariables = Exact<{
    dappAddress: Scalars['String']['input'];
}>;
declare type GetConfigurationForDappQuery = {
    __typename?: 'NotifiQuery';
    configurationForDapp?: {
        __typename?: 'ClientConfiguration';
        supportedSmsCountryCodes?: Array<string | undefined> | undefined;
        supportedTargetTypes?: Array<TargetType> | undefined;
    } | undefined;
};
declare type GetConnectedWalletsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetConnectedWalletsQuery = {
    __typename?: 'NotifiQuery';
    connectedWallet?: Array<{
        __typename?: 'ConnectedWallet';
        address?: string | undefined;
        walletBlockchain: WalletBlockchain;
    } | undefined> | undefined;
};
declare type GetConversationMessagesQueryVariables = Exact<{
    getConversationMessagesInput: GetConversationMessagesInput;
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
}>;
declare type GetConversationMessagesQuery = {
    __typename?: 'NotifiQuery';
    conversationMessages?: {
        __typename?: 'ConversationMessagesConnection';
        nodes?: Array<{
            __typename?: 'ConversationMessage';
            id: string;
            userId: string;
            conversationId: string;
            createdDate: string;
            updatedDate: string;
            message: string;
            conversationParticipant?: {
                __typename?: 'ConversationParticipant';
                conversationId: string;
                conversationParticipantType: ConversationParticipantType;
                resolvedName?: string | undefined;
                userId: string;
                walletAddress: string;
                walletBlockchain: WalletBlockchain;
                profile: {
                    __typename?: 'UserProfile';
                    avatarData?: string | undefined;
                    avatarDataType: AvatarDataType;
                    id: string;
                    preferredAddress?: string | undefined;
                    preferredBlockchain: WalletBlockchain;
                    preferredName?: string | undefined;
                };
            } | undefined;
        }> | undefined;
        pageInfo: {
            __typename?: 'PageInfo';
            hasNextPage: boolean;
            endCursor?: string | undefined;
        };
    } | undefined;
};
declare type GetDiscordTargetsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetDiscordTargetsQuery = {
    __typename?: 'NotifiQuery';
    discordTarget?: Array<{
        __typename?: 'DiscordTarget';
        id: string;
        discordAccountId?: string | undefined;
        discriminator?: string | undefined;
        isConfirmed: boolean;
        username?: string | undefined;
        name?: string | undefined;
        userStatus: DiscordTargetStatus;
        verificationLink?: string | undefined;
        discordServerInviteLink?: string | undefined;
    }> | undefined;
};
declare type GetEmailTargetsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetEmailTargetsQuery = {
    __typename?: 'NotifiQuery';
    emailTarget?: Array<{
        __typename?: 'EmailTarget';
        emailAddress?: string | undefined;
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
    } | undefined> | undefined;
};
declare type GetFiltersQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetFiltersQuery = {
    __typename?: 'NotifiQuery';
    filter?: Array<{
        __typename?: 'Filter';
        id: string;
        name?: string | undefined;
        filterType: FilterType;
    } | undefined> | undefined;
};
declare type GetFusionNotificationHistoryQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
    includeHidden?: InputMaybe<Scalars['Boolean']['input']>;
}>;
declare type GetFusionNotificationHistoryQuery = {
    __typename?: 'NotifiQuery';
    fusionNotificationHistory?: {
        __typename?: 'FusionNotificationHistoryConnection';
        nodes?: Array<{
            __typename: 'FusionNotificationHistoryEntry';
            id: string;
            createdDate: string;
            read: boolean;
            fusionEventVariables: string;
            detail?: {
                __typename: 'AccountBalanceChangedEventDetails';
                walletBlockchain: WalletBlockchain;
                direction: AccountBalanceChangeDirection;
                newValue: number;
                previousValue: number;
                tokenSymbol: string;
                isWhaleWatch: boolean;
            } | {
                __typename: 'BroadcastMessageEventDetails';
                subject?: string | undefined;
                message?: string | undefined;
                messageHtml?: string | undefined;
                messageType: string;
            } | {
                __typename: 'ChatMessageReceivedEventDetails';
                senderName: string;
                conversationId: string;
                messageId: string;
                senderId: string;
                senderBlockchain: WalletBlockchain;
                messageBody: string;
            } | {
                __typename: 'DAOProposalChangedEventDetails';
                tenantName: string;
                description: string;
                state?: string | undefined;
                daoUrl?: string | undefined;
                proposalUrl?: string | undefined;
                proposalTitle?: string | undefined;
            } | {
                __typename: 'DirectTenantMessageEventDetails';
                tenantName: string;
                targetTemplatesJson?: string | undefined;
                templateVariablesJson?: string | undefined;
            } | {
                __typename: 'GenericEventDetails';
                sourceName: string;
                notificationTypeName: string;
                eventDetailsJson?: string | undefined;
                icon: GenericEventIconHint;
                genericMessage: string;
                genericMessageHtml?: string | undefined;
                action?: {
                    __typename?: 'GenericEventAction';
                    name: string;
                    url: string;
                } | undefined;
            } | {
                __typename: 'HealthValueOverThresholdEventDetails';
                name: string;
                value: string;
                threshold: string;
                url: string;
            } | {
                __typename: 'NftAuctionChangedEventDetails';
                auctionUrl?: string | undefined;
                walletBlockchain: WalletBlockchain;
                highBidAmount: number;
                highBidSymbol?: string | undefined;
                imageUrl?: string | undefined;
                auctionTitle: string;
            } | {
                __typename: 'NftCollectionsReportEventDetails';
                type: NftCollectionsReportType;
                providerName: string;
                sourceLink: string;
                collections: Array<{
                    __typename?: 'NftCollectionStats';
                    collectionId: string;
                    name: string;
                    imgUrl?: string | undefined;
                    volume1Day?: string | undefined;
                    volume1DayChange?: string | undefined;
                }>;
            } | {
                __typename: 'WalletsActivityReportEventDetails';
                providerName: string;
                sourceLink: string;
                walletActivityType: WalletsActivityReportType;
                wallets: Array<{
                    __typename?: 'WalletsActivityReportWallet';
                    address: string;
                    volume1Day: string;
                    maxPurchase1Day?: string | undefined;
                    maxPurchaseName?: string | undefined;
                    maxPurchaseImgUrl?: string | undefined;
                    maxPurchaseTokenAddress?: string | undefined;
                }>;
            } | undefined;
        }> | undefined;
        pageInfo: {
            __typename?: 'PageInfo';
            hasNextPage: boolean;
            endCursor?: string | undefined;
        };
    } | undefined;
};
declare type GetNotificationHistoryQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']['input']>;
    first?: InputMaybe<Scalars['Int']['input']>;
}>;
declare type GetNotificationHistoryQuery = {
    __typename?: 'NotifiQuery';
    notificationHistory?: {
        __typename?: 'NotificationHistoryConnection';
        nodes?: Array<{
            __typename: 'NotificationHistoryEntry';
            id: string;
            createdDate: string;
            eventId: string;
            read: boolean;
            sourceAddress?: string | undefined;
            category?: NotificationCategory | undefined;
            transactionSignature?: string | undefined;
            targets: Array<{
                __typename?: 'NotificationTarget';
                type: TargetType;
                name?: string | undefined;
            }>;
            detail?: {
                __typename: 'AccountBalanceChangedEventDetails';
                walletBlockchain: WalletBlockchain;
                direction: AccountBalanceChangeDirection;
                newValue: number;
                previousValue: number;
                tokenSymbol: string;
                isWhaleWatch: boolean;
            } | {
                __typename: 'BroadcastMessageEventDetails';
                subject?: string | undefined;
                message?: string | undefined;
                messageHtml?: string | undefined;
                messageType: string;
            } | {
                __typename: 'ChatMessageReceivedEventDetails';
                senderName: string;
                conversationId: string;
                messageId: string;
                senderId: string;
                senderBlockchain: WalletBlockchain;
                messageBody: string;
            } | {
                __typename: 'DAOProposalChangedEventDetails';
                tenantName: string;
                description: string;
                state?: string | undefined;
                daoUrl?: string | undefined;
                proposalUrl?: string | undefined;
                proposalTitle?: string | undefined;
            } | {
                __typename: 'DirectTenantMessageEventDetails';
                tenantName: string;
                targetTemplatesJson?: string | undefined;
                templateVariablesJson?: string | undefined;
            } | {
                __typename: 'GenericEventDetails';
                sourceName: string;
                notificationTypeName: string;
                eventDetailsJson?: string | undefined;
                icon: GenericEventIconHint;
                genericMessage: string;
                genericMessageHtml?: string | undefined;
                action?: {
                    __typename?: 'GenericEventAction';
                    name: string;
                    url: string;
                } | undefined;
            } | {
                __typename: 'HealthValueOverThresholdEventDetails';
                name: string;
                value: string;
                threshold: string;
                url: string;
            } | {
                __typename: 'NftAuctionChangedEventDetails';
                auctionUrl?: string | undefined;
                walletBlockchain: WalletBlockchain;
                highBidAmount: number;
                highBidSymbol?: string | undefined;
                imageUrl?: string | undefined;
                auctionTitle: string;
            } | {
                __typename: 'NftCollectionsReportEventDetails';
                type: NftCollectionsReportType;
                providerName: string;
                sourceLink: string;
                collections: Array<{
                    __typename?: 'NftCollectionStats';
                    collectionId: string;
                    name: string;
                    imgUrl?: string | undefined;
                    volume1Day?: string | undefined;
                    volume1DayChange?: string | undefined;
                }>;
            } | {
                __typename: 'WalletsActivityReportEventDetails';
                providerName: string;
                sourceLink: string;
                walletActivityType: WalletsActivityReportType;
                wallets: Array<{
                    __typename?: 'WalletsActivityReportWallet';
                    address: string;
                    volume1Day: string;
                    maxPurchase1Day?: string | undefined;
                    maxPurchaseName?: string | undefined;
                    maxPurchaseImgUrl?: string | undefined;
                    maxPurchaseTokenAddress?: string | undefined;
                }>;
            } | undefined;
        }> | undefined;
        pageInfo: {
            __typename?: 'PageInfo';
            hasNextPage: boolean;
            endCursor?: string | undefined;
        };
    } | undefined;
};
declare type GetSmsTargetsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetSmsTargetsQuery = {
    __typename?: 'NotifiQuery';
    smsTarget?: Array<{
        __typename?: 'SmsTarget';
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        phoneNumber?: string | undefined;
    } | undefined> | undefined;
};
declare type GetSourceConnectionQueryVariables = Exact<{
    input?: InputMaybe<GetSourcesInput>;
    first?: InputMaybe<Scalars['Int']['input']>;
    after?: InputMaybe<Scalars['String']['input']>;
}>;
declare type GetSourceConnectionQuery = {
    __typename?: 'NotifiQuery';
    sources?: {
        __typename?: 'SourcesConnection';
        pageInfo: {
            __typename?: 'PageInfo';
            hasNextPage: boolean;
            endCursor?: string | undefined;
        };
        nodes?: Array<{
            __typename?: 'Source';
            id: string;
            name?: string | undefined;
            type: SourceType;
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: Array<{
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            } | undefined> | undefined;
        }> | undefined;
    } | undefined;
};
declare type GetSourceGroupsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetSourceGroupsQuery = {
    __typename?: 'NotifiQuery';
    sourceGroup?: Array<{
        __typename?: 'SourceGroup';
        id: string;
        name?: string | undefined;
        sources?: Array<{
            __typename?: 'Source';
            id: string;
            name?: string | undefined;
            type: SourceType;
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: Array<{
                __typename?: 'Filter';
                id: string;
                name?: string | undefined;
                filterType: FilterType;
            } | undefined> | undefined;
        } | undefined> | undefined;
    } | undefined> | undefined;
};
declare type GetSourcesQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetSourcesQuery = {
    __typename?: 'NotifiQuery';
    source?: Array<{
        __typename?: 'Source';
        id: string;
        name?: string | undefined;
        type: SourceType;
        blockchainAddress: string;
        fusionEventTypeId?: string | undefined;
        applicableFilters?: Array<{
            __typename?: 'Filter';
            id: string;
            name?: string | undefined;
            filterType: FilterType;
        } | undefined> | undefined;
    } | undefined> | undefined;
};
declare type GetTargetGroupsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetTargetGroupsQuery = {
    __typename?: 'NotifiQuery';
    targetGroup?: Array<{
        __typename?: 'TargetGroup';
        id: string;
        name?: string | undefined;
        emailTargets?: Array<{
            __typename?: 'EmailTarget';
            emailAddress?: string | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
        } | undefined> | undefined;
        smsTargets?: Array<{
            __typename?: 'SmsTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            phoneNumber?: string | undefined;
        } | undefined> | undefined;
        telegramTargets?: Array<{
            __typename?: 'TelegramTarget';
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            telegramId: string;
            confirmationUrl?: string | undefined;
        } | undefined> | undefined;
        webhookTargets?: Array<{
            __typename?: 'WebhookTarget';
            id: string;
            url: string;
            status: WebhookStatus;
            format: WebhookPayloadFormat;
            name?: string | undefined;
            headers?: Array<{
                __typename?: 'KeyValuePairOfStringAndString';
                key: string;
                value: string;
            }> | undefined;
        } | undefined> | undefined;
        discordTargets?: Array<{
            __typename?: 'DiscordTarget';
            id: string;
            discordAccountId?: string | undefined;
            discriminator?: string | undefined;
            isConfirmed: boolean;
            username?: string | undefined;
            name?: string | undefined;
            userStatus: DiscordTargetStatus;
            verificationLink?: string | undefined;
            discordServerInviteLink?: string | undefined;
        } | undefined> | undefined;
    } | undefined> | undefined;
};
declare type GetTelegramTargetsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetTelegramTargetsQuery = {
    __typename?: 'NotifiQuery';
    telegramTarget?: Array<{
        __typename?: 'TelegramTarget';
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        telegramId: string;
        confirmationUrl?: string | undefined;
    } | undefined> | undefined;
};
declare type GetTenantConnectedWalletQueryVariables = Exact<{
    input?: InputMaybe<GetTenantConnectedWalletInput>;
    first?: InputMaybe<Scalars['Int']['input']>;
    after?: InputMaybe<Scalars['String']['input']>;
}>;
declare type GetTenantConnectedWalletQuery = {
    __typename?: 'NotifiQuery';
    tenantConnectedWallet?: {
        __typename?: 'TenantConnectedWalletConnection';
        pageInfo: {
            __typename?: 'PageInfo';
            hasNextPage: boolean;
            endCursor?: string | undefined;
        };
        nodes?: Array<{
            __typename?: 'TenantConnectedWallet';
            address?: string | undefined;
            walletBlockchain: WalletBlockchain;
            user?: {
                __typename?: 'TenantUser';
                id: string;
                alerts?: Array<{
                    __typename?: 'TenantUserAlert';
                    id: string;
                    name?: string | undefined;
                    groupName?: string | undefined;
                    filterOptions: string;
                    filter: {
                        __typename?: 'Filter';
                        id: string;
                        name?: string | undefined;
                        filterType: FilterType;
                    };
                    sourceGroup: {
                        __typename?: 'SourceGroup';
                        id: string;
                        name?: string | undefined;
                        sources?: Array<{
                            __typename?: 'Source';
                            id: string;
                            name?: string | undefined;
                            type: SourceType;
                            blockchainAddress: string;
                            fusionEventTypeId?: string | undefined;
                            applicableFilters?: Array<{
                                __typename?: 'Filter';
                                id: string;
                                name?: string | undefined;
                                filterType: FilterType;
                            } | undefined> | undefined;
                        } | undefined> | undefined;
                    };
                    targetGroup?: {
                        __typename?: 'TenantTargetGroup';
                        hasVerifiedFcm: boolean;
                        hasVerifiedSms: boolean;
                        hasVerifiedWeb3: boolean;
                        hasVerifiedEmails: boolean;
                        hasVerifiedWebhook: boolean;
                        hasVerifiedDiscord: boolean;
                        hasVerifiedTelegram: boolean;
                    } | undefined;
                } | undefined> | undefined;
                connectedWallets?: Array<{
                    __typename?: 'TenantConnectedWallet';
                    address?: string | undefined;
                    walletBlockchain: WalletBlockchain;
                } | undefined> | undefined;
            } | undefined;
        } | undefined> | undefined;
    } | undefined;
};
declare type GetTenantUserQueryVariables = Exact<{
    first?: InputMaybe<Scalars['Int']['input']>;
    after?: InputMaybe<Scalars['String']['input']>;
}>;
declare type GetTenantUserQuery = {
    __typename?: 'NotifiQuery';
    tenantUser?: {
        __typename?: 'TenantUserConnection';
        pageInfo: {
            __typename?: 'PageInfo';
            hasNextPage: boolean;
            endCursor?: string | undefined;
        };
        nodes?: Array<{
            __typename?: 'TenantUser';
            id: string;
            alerts?: Array<{
                __typename?: 'TenantUserAlert';
                id: string;
                name?: string | undefined;
                groupName?: string | undefined;
                filterOptions: string;
                filter: {
                    __typename?: 'Filter';
                    id: string;
                    name?: string | undefined;
                    filterType: FilterType;
                };
                sourceGroup: {
                    __typename?: 'SourceGroup';
                    id: string;
                    name?: string | undefined;
                    sources?: Array<{
                        __typename?: 'Source';
                        id: string;
                        name?: string | undefined;
                        type: SourceType;
                        blockchainAddress: string;
                        fusionEventTypeId?: string | undefined;
                        applicableFilters?: Array<{
                            __typename?: 'Filter';
                            id: string;
                            name?: string | undefined;
                            filterType: FilterType;
                        } | undefined> | undefined;
                    } | undefined> | undefined;
                };
                targetGroup?: {
                    __typename?: 'TenantTargetGroup';
                    hasVerifiedFcm: boolean;
                    hasVerifiedSms: boolean;
                    hasVerifiedWeb3: boolean;
                    hasVerifiedEmails: boolean;
                    hasVerifiedWebhook: boolean;
                    hasVerifiedDiscord: boolean;
                    hasVerifiedTelegram: boolean;
                } | undefined;
            } | undefined> | undefined;
            connectedWallets?: Array<{
                __typename?: 'TenantConnectedWallet';
                address?: string | undefined;
                walletBlockchain: WalletBlockchain;
            } | undefined> | undefined;
        } | undefined> | undefined;
    } | undefined;
};
declare type GetTopicsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetTopicsQuery = {
    __typename?: 'NotifiQuery';
    topics?: {
        __typename?: 'TopicsConnection';
        nodes?: Array<{
            __typename?: 'UserTopic';
            name?: string | undefined;
            topicName: string;
            targetCollections?: Array<string> | undefined;
            targetTemplate?: string | undefined;
        }> | undefined;
    } | undefined;
};
declare type GetUnreadNotificationHistoryCountQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetUnreadNotificationHistoryCountQuery = {
    __typename?: 'NotifiQuery';
    unreadNotificationHistoryCount: {
        __typename?: 'GetUnreadNotificationHistoryCountResponse';
        count: number;
    };
};
declare type GetUserSettingsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetUserSettingsQuery = {
    __typename?: 'NotifiQuery';
    userSettings?: {
        __typename?: 'UserSettings';
        detailedAlertHistoryEnabled: boolean;
        userHasChatEnabled: boolean;
        ftuStage?: number | undefined;
    } | undefined;
};
declare type GetWebhookTargetsQueryVariables = Exact<{
    [key: string]: never;
}>;
declare type GetWebhookTargetsQuery = {
    __typename?: 'NotifiQuery';
    webhookTarget?: Array<{
        __typename?: 'WebhookTarget';
        id: string;
        url: string;
        status: WebhookStatus;
        format: WebhookPayloadFormat;
        name?: string | undefined;
        headers?: Array<{
            __typename?: 'KeyValuePairOfStringAndString';
            key: string;
            value: string;
        }> | undefined;
    }> | undefined;
};
declare const FilterFragmentFragmentDoc: graphql.DocumentNode;
declare const SourceFragmentFragmentDoc: graphql.DocumentNode;
declare const SourceGroupFragmentFragmentDoc: graphql.DocumentNode;
declare const EmailTargetFragmentFragmentDoc: graphql.DocumentNode;
declare const SmsTargetFragmentFragmentDoc: graphql.DocumentNode;
declare const TelegramTargetFragmentFragmentDoc: graphql.DocumentNode;
declare const WebhookTargetFragmentFragmentDoc: graphql.DocumentNode;
declare const DiscordTargetFragmentFragmentDoc: graphql.DocumentNode;
declare const TargetGroupFragmentFragmentDoc: graphql.DocumentNode;
declare const AlertFragmentFragmentDoc: graphql.DocumentNode;
declare const ConnectedWalletFragmentFragmentDoc: graphql.DocumentNode;
declare const ConvMessagePageInfoFragmentDoc: graphql.DocumentNode;
declare const ParticipantFragmentDoc: graphql.DocumentNode;
declare const ConversationMessageFragmentDoc: graphql.DocumentNode;
declare const FusionNotificationHistoryEntryFragmentFragmentDoc: graphql.DocumentNode;
declare const NotificationHistoryEntryFragmentFragmentDoc: graphql.DocumentNode;
declare const PageInfoFragmentFragmentDoc: graphql.DocumentNode;
declare const TenantConfigFragmentFragmentDoc: graphql.DocumentNode;
declare const TenantUserAlertFragmentFragmentDoc: graphql.DocumentNode;
declare const TenantConnectedWalletFragmentFragmentDoc: graphql.DocumentNode;
declare const TenantUserFragmentFragmentDoc: graphql.DocumentNode;
declare const AuthorizationFragmentFragmentDoc: graphql.DocumentNode;
declare const UserFragmentFragmentDoc: graphql.DocumentNode;
declare const UserTopicFragmentFragmentDoc: graphql.DocumentNode;
declare const AddSourceToSourceGroupDocument: graphql.DocumentNode;
declare const BeginLogInByTransactionDocument: graphql.DocumentNode;
declare const BroadcastMessageDocument: graphql.DocumentNode;
declare const CompleteLogInByTransactionDocument: graphql.DocumentNode;
declare const ConnectWalletDocument: graphql.DocumentNode;
declare const CreateAlertDocument: graphql.DocumentNode;
declare const CreateDirectPushAlertDocument: graphql.DocumentNode;
declare const CreateDiscordTargetDocument: graphql.DocumentNode;
declare const CreateEmailTargetDocument: graphql.DocumentNode;
declare const CreateSmsTargetDocument: graphql.DocumentNode;
declare const CreateSourceDocument: graphql.DocumentNode;
declare const CreateSourceGroupDocument: graphql.DocumentNode;
declare const CreateSupportConversationDocument: graphql.DocumentNode;
declare const CreateTargetGroupDocument: graphql.DocumentNode;
declare const CreateTelegramTargetDocument: graphql.DocumentNode;
declare const CreateTenantUserDocument: graphql.DocumentNode;
declare const CreateWebhookTargetDocument: graphql.DocumentNode;
declare const DeleteAlertDocument: graphql.DocumentNode;
declare const DeleteDirectPushAlertDocument: graphql.DocumentNode;
declare const DeleteSourceGroupDocument: graphql.DocumentNode;
declare const DeleteTargetGroupDocument: graphql.DocumentNode;
declare const DeleteUserAlertDocument: graphql.DocumentNode;
declare const DeleteWebhookTargetDocument: graphql.DocumentNode;
declare const LogInFromDappDocument: graphql.DocumentNode;
declare const LogInFromServiceDocument: graphql.DocumentNode;
declare const MarkFusionNotificationHistoryAsReadDocument: graphql.DocumentNode;
declare const PublishFusionMessageDocument: graphql.DocumentNode;
declare const RefreshAuthorizationDocument: graphql.DocumentNode;
declare const RemoveSourceFromSourceGroupDocument: graphql.DocumentNode;
declare const SendConversationMessageDocument: graphql.DocumentNode;
declare const SendEmailTargetVerificationRequestDocument: graphql.DocumentNode;
declare const SendMessageDocument: graphql.DocumentNode;
declare const UpdateSourceGroupDocument: graphql.DocumentNode;
declare const UpdateTargetGroupDocument: graphql.DocumentNode;
declare const UpdateUserSettingsDocument: graphql.DocumentNode;
declare const FetchDataDocument: graphql.DocumentNode;
declare const FindTenantConfigDocument: graphql.DocumentNode;
declare const GetAlertsDocument: graphql.DocumentNode;
declare const GetConfigurationForDappDocument: graphql.DocumentNode;
declare const GetConnectedWalletsDocument: graphql.DocumentNode;
declare const GetConversationMessagesDocument: graphql.DocumentNode;
declare const GetDiscordTargetsDocument: graphql.DocumentNode;
declare const GetEmailTargetsDocument: graphql.DocumentNode;
declare const GetFiltersDocument: graphql.DocumentNode;
declare const GetFusionNotificationHistoryDocument: graphql.DocumentNode;
declare const GetNotificationHistoryDocument: graphql.DocumentNode;
declare const GetSmsTargetsDocument: graphql.DocumentNode;
declare const GetSourceConnectionDocument: graphql.DocumentNode;
declare const GetSourceGroupsDocument: graphql.DocumentNode;
declare const GetSourcesDocument: graphql.DocumentNode;
declare const GetTargetGroupsDocument: graphql.DocumentNode;
declare const GetTelegramTargetsDocument: graphql.DocumentNode;
declare const GetTenantConnectedWalletDocument: graphql.DocumentNode;
declare const GetTenantUserDocument: graphql.DocumentNode;
declare const GetTopicsDocument: graphql.DocumentNode;
declare const GetUnreadNotificationHistoryCountDocument: graphql.DocumentNode;
declare const GetUserSettingsDocument: graphql.DocumentNode;
declare const GetWebhookTargetsDocument: graphql.DocumentNode;
declare type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    addSourceToSourceGroup(variables: AddSourceToSourceGroupMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddSourceToSourceGroupMutation>;
    beginLogInByTransaction(variables: BeginLogInByTransactionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<BeginLogInByTransactionMutation>;
    broadcastMessage(variables: BroadcastMessageMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<BroadcastMessageMutation>;
    completeLogInByTransaction(variables: CompleteLogInByTransactionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CompleteLogInByTransactionMutation>;
    connectWallet(variables: ConnectWalletMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ConnectWalletMutation>;
    createAlert(variables: CreateAlertMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateAlertMutation>;
    createDirectPushAlert(variables: CreateDirectPushAlertMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateDirectPushAlertMutation>;
    createDiscordTarget(variables: CreateDiscordTargetMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateDiscordTargetMutation>;
    createEmailTarget(variables: CreateEmailTargetMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateEmailTargetMutation>;
    createSmsTarget(variables: CreateSmsTargetMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateSmsTargetMutation>;
    createSource(variables: CreateSourceMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateSourceMutation>;
    createSourceGroup(variables: CreateSourceGroupMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateSourceGroupMutation>;
    createSupportConversation(variables?: CreateSupportConversationMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateSupportConversationMutation>;
    createTargetGroup(variables: CreateTargetGroupMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateTargetGroupMutation>;
    createTelegramTarget(variables: CreateTelegramTargetMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateTelegramTargetMutation>;
    createTenantUser(variables: CreateTenantUserMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateTenantUserMutation>;
    createWebhookTarget(variables: CreateWebhookTargetMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateWebhookTargetMutation>;
    deleteAlert(variables: DeleteAlertMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DeleteAlertMutation>;
    deleteDirectPushAlert(variables: DeleteDirectPushAlertMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DeleteDirectPushAlertMutation>;
    deleteSourceGroup(variables: DeleteSourceGroupMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DeleteSourceGroupMutation>;
    deleteTargetGroup(variables: DeleteTargetGroupMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DeleteTargetGroupMutation>;
    deleteUserAlert(variables: DeleteUserAlertMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DeleteUserAlertMutation>;
    deleteWebhookTarget(variables: DeleteWebhookTargetMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DeleteWebhookTargetMutation>;
    logInFromDapp(variables: LogInFromDappMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<LogInFromDappMutation>;
    logInFromService(variables: LogInFromServiceMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<LogInFromServiceMutation>;
    markFusionNotificationHistoryAsRead(variables: MarkFusionNotificationHistoryAsReadMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<MarkFusionNotificationHistoryAsReadMutation>;
    publishFusionMessage(variables: PublishFusionMessageMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<PublishFusionMessageMutation>;
    refreshAuthorization(variables?: RefreshAuthorizationMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RefreshAuthorizationMutation>;
    removeSourceFromSourceGroup(variables: RemoveSourceFromSourceGroupMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RemoveSourceFromSourceGroupMutation>;
    sendConversationMessage(variables: SendConversationMessageMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SendConversationMessageMutation>;
    sendEmailTargetVerificationRequest(variables: SendEmailTargetVerificationRequestMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SendEmailTargetVerificationRequestMutation>;
    sendMessage(variables: SendMessageMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SendMessageMutation>;
    updateSourceGroup(variables: UpdateSourceGroupMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateSourceGroupMutation>;
    updateTargetGroup(variables: UpdateTargetGroupMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateTargetGroupMutation>;
    updateUserSettings(variables: UpdateUserSettingsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateUserSettingsMutation>;
    fetchData(variables?: FetchDataQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FetchDataQuery>;
    findTenantConfig(variables: FindTenantConfigQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindTenantConfigQuery>;
    getAlerts(variables?: GetAlertsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetAlertsQuery>;
    getConfigurationForDapp(variables: GetConfigurationForDappQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetConfigurationForDappQuery>;
    getConnectedWallets(variables?: GetConnectedWalletsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetConnectedWalletsQuery>;
    getConversationMessages(variables: GetConversationMessagesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetConversationMessagesQuery>;
    getDiscordTargets(variables?: GetDiscordTargetsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetDiscordTargetsQuery>;
    getEmailTargets(variables?: GetEmailTargetsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetEmailTargetsQuery>;
    getFilters(variables?: GetFiltersQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetFiltersQuery>;
    getFusionNotificationHistory(variables?: GetFusionNotificationHistoryQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetFusionNotificationHistoryQuery>;
    getNotificationHistory(variables?: GetNotificationHistoryQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetNotificationHistoryQuery>;
    getSmsTargets(variables?: GetSmsTargetsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSmsTargetsQuery>;
    getSourceConnection(variables?: GetSourceConnectionQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSourceConnectionQuery>;
    getSourceGroups(variables?: GetSourceGroupsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSourceGroupsQuery>;
    getSources(variables?: GetSourcesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSourcesQuery>;
    getTargetGroups(variables?: GetTargetGroupsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetTargetGroupsQuery>;
    getTelegramTargets(variables?: GetTelegramTargetsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetTelegramTargetsQuery>;
    getTenantConnectedWallet(variables?: GetTenantConnectedWalletQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetTenantConnectedWalletQuery>;
    getTenantUser(variables?: GetTenantUserQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetTenantUserQuery>;
    getTopics(variables?: GetTopicsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetTopicsQuery>;
    getUnreadNotificationHistoryCount(variables?: GetUnreadNotificationHistoryCountQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetUnreadNotificationHistoryCountQuery>;
    getUserSettings(variables?: GetUserSettingsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetUserSettingsQuery>;
    getWebhookTargets(variables?: GetWebhookTargetsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetWebhookTargetsQuery>;
};
declare type Sdk = ReturnType<typeof getSdk>;

type generated_AccountBalanceChangeDirection = AccountBalanceChangeDirection;
type generated_AccountBalanceChangeRow = AccountBalanceChangeRow;
type generated_AccountBalanceChangedEventDetails = AccountBalanceChangedEventDetails;
type generated_ActivateFusionSourceInput = ActivateFusionSourceInput;
type generated_ActivateFusionSourceResponse = ActivateFusionSourceResponse;
type generated_AddBotInput = AddBotInput;
type generated_AddEmailSenderDomainInput = AddEmailSenderDomainInput;
type generated_AddFusionEventToFusionSourceInput = AddFusionEventToFusionSourceInput;
type generated_AddFusionEventToFusionSourceResponse = AddFusionEventToFusionSourceResponse;
type generated_AddOrUpdateMobileFcmTargetInput = AddOrUpdateMobileFcmTargetInput;
declare const generated_AddSourceToSourceGroupDocument: typeof AddSourceToSourceGroupDocument;
type generated_AddSourceToSourceGroupInput = AddSourceToSourceGroupInput;
type generated_AddSourceToSourceGroupMutation = AddSourceToSourceGroupMutation;
type generated_AddSourceToSourceGroupMutationVariables = AddSourceToSourceGroupMutationVariables;
type generated_Alert = Alert;
type generated_AlertCreatedEvent = AlertCreatedEvent;
type generated_AlertDeletedEvent = AlertDeletedEvent;
type generated_AlertFragmentFragment = AlertFragmentFragment;
declare const generated_AlertFragmentFragmentDoc: typeof AlertFragmentFragmentDoc;
type generated_ApplyPolicy = ApplyPolicy;
type generated_ApprovalStatus = ApprovalStatus;
type generated_Authorization = Authorization;
type generated_AuthorizationFragmentFragment = AuthorizationFragmentFragment;
declare const generated_AuthorizationFragmentFragmentDoc: typeof AuthorizationFragmentFragmentDoc;
type generated_AvatarDataType = AvatarDataType;
type generated_BatchBroadcastMessageInput = BatchBroadcastMessageInput;
type generated_BatchBroadcastMessageResult = BatchBroadcastMessageResult;
type generated_BeginLogInByQrCodeResult = BeginLogInByQrCodeResult;
declare const generated_BeginLogInByTransactionDocument: typeof BeginLogInByTransactionDocument;
type generated_BeginLogInByTransactionInput = BeginLogInByTransactionInput;
type generated_BeginLogInByTransactionMutation = BeginLogInByTransactionMutation;
type generated_BeginLogInByTransactionMutationVariables = BeginLogInByTransactionMutationVariables;
type generated_BeginLogInByTransactionResult = BeginLogInByTransactionResult;
type generated_BlockchainType = BlockchainType;
type generated_Bot = Bot;
type generated_BotStatus = BotStatus;
type generated_BotType = BotType;
declare const generated_BroadcastMessageDocument: typeof BroadcastMessageDocument;
type generated_BroadcastMessageEventDetails = BroadcastMessageEventDetails;
type generated_BroadcastMessageInput = BroadcastMessageInput;
type generated_BroadcastMessageMutation = BroadcastMessageMutation;
type generated_BroadcastMessageMutationVariables = BroadcastMessageMutationVariables;
type generated_BroadcastMessageResult = BroadcastMessageResult;
type generated_ChatMessageReceivedEventDetails = ChatMessageReceivedEventDetails;
type generated_ClientConfiguration = ClientConfiguration;
type generated_CommunityManagerPreviewInput = CommunityManagerPreviewInput;
type generated_CommunityManagerPreviewResult = CommunityManagerPreviewResult;
type generated_CompleteLogInByQrCodeInput = CompleteLogInByQrCodeInput;
declare const generated_CompleteLogInByTransactionDocument: typeof CompleteLogInByTransactionDocument;
type generated_CompleteLogInByTransactionInput = CompleteLogInByTransactionInput;
type generated_CompleteLogInByTransactionMutation = CompleteLogInByTransactionMutation;
type generated_CompleteLogInByTransactionMutationVariables = CompleteLogInByTransactionMutationVariables;
type generated_ConnectWalletConflictResolutionTechnique = ConnectWalletConflictResolutionTechnique;
declare const generated_ConnectWalletDocument: typeof ConnectWalletDocument;
type generated_ConnectWalletInput = ConnectWalletInput;
type generated_ConnectWalletMutation = ConnectWalletMutation;
type generated_ConnectWalletMutationVariables = ConnectWalletMutationVariables;
type generated_ConnectedWallet = ConnectedWallet;
type generated_ConnectedWalletFragmentFragment = ConnectedWalletFragmentFragment;
declare const generated_ConnectedWalletFragmentFragmentDoc: typeof ConnectedWalletFragmentFragmentDoc;
type generated_ConvMessagePageInfoFragment = ConvMessagePageInfoFragment;
declare const generated_ConvMessagePageInfoFragmentDoc: typeof ConvMessagePageInfoFragmentDoc;
type generated_Conversation = Conversation;
type generated_ConversationGate = ConversationGate;
type generated_ConversationGateTokenType = ConversationGateTokenType;
type generated_ConversationMessage = ConversationMessage;
type generated_ConversationMessageFragment = ConversationMessageFragment;
declare const generated_ConversationMessageFragmentDoc: typeof ConversationMessageFragmentDoc;
type generated_ConversationMessagesConnection = ConversationMessagesConnection;
type generated_ConversationMessagesEdge = ConversationMessagesEdge;
type generated_ConversationParticipant = ConversationParticipant;
type generated_ConversationParticipantInput = ConversationParticipantInput;
type generated_ConversationParticipantType = ConversationParticipantType;
type generated_ConversationType = ConversationType;
type generated_ConversationsConnection = ConversationsConnection;
type generated_ConversationsEdge = ConversationsEdge;
type generated_CorsPolicy = CorsPolicy;
type generated_CorsPolicyEntry = CorsPolicyEntry;
declare const generated_CreateAlertDocument: typeof CreateAlertDocument;
type generated_CreateAlertInput = CreateAlertInput;
type generated_CreateAlertMutation = CreateAlertMutation;
type generated_CreateAlertMutationVariables = CreateAlertMutationVariables;
type generated_CreateConversationInput = CreateConversationInput;
declare const generated_CreateDirectPushAlertDocument: typeof CreateDirectPushAlertDocument;
type generated_CreateDirectPushAlertInput = CreateDirectPushAlertInput;
type generated_CreateDirectPushAlertMutation = CreateDirectPushAlertMutation;
type generated_CreateDirectPushAlertMutationVariables = CreateDirectPushAlertMutationVariables;
type generated_CreateDiscordBotConfigurationInput = CreateDiscordBotConfigurationInput;
declare const generated_CreateDiscordTargetDocument: typeof CreateDiscordTargetDocument;
type generated_CreateDiscordTargetMutation = CreateDiscordTargetMutation;
type generated_CreateDiscordTargetMutationVariables = CreateDiscordTargetMutationVariables;
declare const generated_CreateEmailTargetDocument: typeof CreateEmailTargetDocument;
type generated_CreateEmailTargetMutation = CreateEmailTargetMutation;
type generated_CreateEmailTargetMutationVariables = CreateEmailTargetMutationVariables;
type generated_CreateFcmTargetInput = CreateFcmTargetInput;
type generated_CreateFusionEventInput = CreateFusionEventInput;
type generated_CreateFusionModuleInput = CreateFusionModuleInput;
type generated_CreateFusionModuleResponse = CreateFusionModuleResponse;
type generated_CreateFusionSourceInput = CreateFusionSourceInput;
type generated_CreateFusionSourceResponse = CreateFusionSourceResponse;
type generated_CreateOrUpdateUserInput = CreateOrUpdateUserInput;
declare const generated_CreateSmsTargetDocument: typeof CreateSmsTargetDocument;
type generated_CreateSmsTargetMutation = CreateSmsTargetMutation;
type generated_CreateSmsTargetMutationVariables = CreateSmsTargetMutationVariables;
declare const generated_CreateSourceDocument: typeof CreateSourceDocument;
declare const generated_CreateSourceGroupDocument: typeof CreateSourceGroupDocument;
type generated_CreateSourceGroupMutation = CreateSourceGroupMutation;
type generated_CreateSourceGroupMutationVariables = CreateSourceGroupMutationVariables;
type generated_CreateSourceInput = CreateSourceInput;
type generated_CreateSourceMutation = CreateSourceMutation;
type generated_CreateSourceMutationVariables = CreateSourceMutationVariables;
declare const generated_CreateSupportConversationDocument: typeof CreateSupportConversationDocument;
type generated_CreateSupportConversationMutation = CreateSupportConversationMutation;
type generated_CreateSupportConversationMutationVariables = CreateSupportConversationMutationVariables;
declare const generated_CreateTargetGroupDocument: typeof CreateTargetGroupDocument;
type generated_CreateTargetGroupMutation = CreateTargetGroupMutation;
type generated_CreateTargetGroupMutationVariables = CreateTargetGroupMutationVariables;
type generated_CreateTargetInput = CreateTargetInput;
declare const generated_CreateTelegramTargetDocument: typeof CreateTelegramTargetDocument;
type generated_CreateTelegramTargetMutation = CreateTelegramTargetMutation;
type generated_CreateTelegramTargetMutationVariables = CreateTelegramTargetMutationVariables;
type generated_CreateTenantConfigInput = CreateTenantConfigInput;
type generated_CreateTenantInput = CreateTenantInput;
declare const generated_CreateTenantUserDocument: typeof CreateTenantUserDocument;
type generated_CreateTenantUserInput = CreateTenantUserInput;
type generated_CreateTenantUserMutation = CreateTenantUserMutation;
type generated_CreateTenantUserMutationVariables = CreateTenantUserMutationVariables;
type generated_CreateWeb3TargetInput = CreateWeb3TargetInput;
declare const generated_CreateWebhookTargetDocument: typeof CreateWebhookTargetDocument;
type generated_CreateWebhookTargetInput = CreateWebhookTargetInput;
type generated_CreateWebhookTargetMutation = CreateWebhookTargetMutation;
type generated_CreateWebhookTargetMutationVariables = CreateWebhookTargetMutationVariables;
type generated_CursorEntry = CursorEntry;
type generated_CustomHtmlPayloadInput = CustomHtmlPayloadInput;
type generated_CustomPluginStorageEntity = CustomPluginStorageEntity;
type generated_DAppSubscription = DAppSubscription;
type generated_DaoProposalChangedEventDetails = DaoProposalChangedEventDetails;
type generated_DappLogInInput = DappLogInInput;
type generated_DeactivateFusionSourceInput = DeactivateFusionSourceInput;
type generated_DeactivateFusionSourceResponse = DeactivateFusionSourceResponse;
declare const generated_DeleteAlertDocument: typeof DeleteAlertDocument;
type generated_DeleteAlertMutation = DeleteAlertMutation;
type generated_DeleteAlertMutationVariables = DeleteAlertMutationVariables;
declare const generated_DeleteDirectPushAlertDocument: typeof DeleteDirectPushAlertDocument;
type generated_DeleteDirectPushAlertInput = DeleteDirectPushAlertInput;
type generated_DeleteDirectPushAlertMutation = DeleteDirectPushAlertMutation;
type generated_DeleteDirectPushAlertMutationVariables = DeleteDirectPushAlertMutationVariables;
type generated_DeleteFusionSourceInput = DeleteFusionSourceInput;
type generated_DeleteFusionSourceResponse = DeleteFusionSourceResponse;
declare const generated_DeleteSourceGroupDocument: typeof DeleteSourceGroupDocument;
type generated_DeleteSourceGroupMutation = DeleteSourceGroupMutation;
type generated_DeleteSourceGroupMutationVariables = DeleteSourceGroupMutationVariables;
declare const generated_DeleteTargetGroupDocument: typeof DeleteTargetGroupDocument;
type generated_DeleteTargetGroupMutation = DeleteTargetGroupMutation;
type generated_DeleteTargetGroupMutationVariables = DeleteTargetGroupMutationVariables;
type generated_DeleteTargetInput = DeleteTargetInput;
type generated_DeleteTenantConfigInput = DeleteTenantConfigInput;
declare const generated_DeleteUserAlertDocument: typeof DeleteUserAlertDocument;
type generated_DeleteUserAlertMutation = DeleteUserAlertMutation;
type generated_DeleteUserAlertMutationVariables = DeleteUserAlertMutationVariables;
declare const generated_DeleteWebhookTargetDocument: typeof DeleteWebhookTargetDocument;
type generated_DeleteWebhookTargetMutation = DeleteWebhookTargetMutation;
type generated_DeleteWebhookTargetMutationVariables = DeleteWebhookTargetMutationVariables;
type generated_DirectTenantMessageEventDetails = DirectTenantMessageEventDetails;
type generated_DisconnectWalletInput = DisconnectWalletInput;
type generated_DiscordBotConfiguration = DiscordBotConfiguration;
type generated_DiscordTarget = DiscordTarget;
type generated_DiscordTargetFragmentFragment = DiscordTargetFragmentFragment;
declare const generated_DiscordTargetFragmentFragmentDoc: typeof DiscordTargetFragmentFragmentDoc;
type generated_DiscordTargetStatus = DiscordTargetStatus;
type generated_EmailSenderDefaults = EmailSenderDefaults;
type generated_EmailSenderDomain = EmailSenderDomain;
type generated_EmailSenderDomainStatus = EmailSenderDomainStatus;
type generated_EmailTarget = EmailTarget;
type generated_EmailTargetFragmentFragment = EmailTargetFragmentFragment;
declare const generated_EmailTargetFragmentFragmentDoc: typeof EmailTargetFragmentFragmentDoc;
type generated_EnableOrDisableMobileFcmTargetsInput = EnableOrDisableMobileFcmTargetsInput;
type generated_EnqueueOffChainEventInput = EnqueueOffChainEventInput;
type generated_EnqueueOffChainEventResult = EnqueueOffChainEventResult;
type generated_EphemeralStorageConnection = EphemeralStorageConnection;
type generated_EphemeralStorageEdge = EphemeralStorageEdge;
type generated_EphemeralStorageEntry = EphemeralStorageEntry;
type generated_EphemeralStorageEntryInput = EphemeralStorageEntryInput;
type generated_EphemeralStorageQueryInput = EphemeralStorageQueryInput;
type generated_EventDetails = EventDetails;
type generated_Exact<T extends {
    [key: string]: unknown;
}> = Exact<T>;
type generated_FcmTarget = FcmTarget;
type generated_FcmTargetPlatform = FcmTargetPlatform;
declare const generated_FetchDataDocument: typeof FetchDataDocument;
type generated_FetchDataQuery = FetchDataQuery;
type generated_FetchDataQueryVariables = FetchDataQueryVariables;
type generated_Filter = Filter;
type generated_FilterFragmentFragment = FilterFragmentFragment;
declare const generated_FilterFragmentFragmentDoc: typeof FilterFragmentFragmentDoc;
type generated_FilterType = FilterType;
declare const generated_FindTenantConfigDocument: typeof FindTenantConfigDocument;
type generated_FindTenantConfigInput = FindTenantConfigInput;
type generated_FindTenantConfigQuery = FindTenantConfigQuery;
type generated_FindTenantConfigQueryVariables = FindTenantConfigQueryVariables;
type generated_FusionBroadcastMessageInput = FusionBroadcastMessageInput;
type generated_FusionBroadcastMessageResult = FusionBroadcastMessageResult;
type generated_FusionCommunityManagerPreviewInput = FusionCommunityManagerPreviewInput;
type generated_FusionCommunityManagerPreviewResult = FusionCommunityManagerPreviewResult;
type generated_FusionEventCategory = FusionEventCategory;
type generated_FusionEventData = FusionEventData;
type generated_FusionEventRequiredParserVariables = FusionEventRequiredParserVariables;
type generated_FusionEventsConnection = FusionEventsConnection;
type generated_FusionEventsEdge = FusionEventsEdge;
type generated_FusionExecutionDetails = FusionExecutionDetails;
type generated_FusionExecutionLogDataType = FusionExecutionLogDataType;
type generated_FusionExecutionLogsConnection = FusionExecutionLogsConnection;
type generated_FusionExecutionLogsEdge = FusionExecutionLogsEdge;
type generated_FusionExecutionStatus = FusionExecutionStatus;
type generated_FusionExecutionType = FusionExecutionType;
type generated_FusionModuleData = FusionModuleData;
type generated_FusionModuleType = FusionModuleType;
type generated_FusionNotificationHistoryConnection = FusionNotificationHistoryConnection;
type generated_FusionNotificationHistoryEdge = FusionNotificationHistoryEdge;
type generated_FusionNotificationHistoryEntry = FusionNotificationHistoryEntry;
type generated_FusionNotificationHistoryEntryFragmentFragment = FusionNotificationHistoryEntryFragmentFragment;
declare const generated_FusionNotificationHistoryEntryFragmentFragmentDoc: typeof FusionNotificationHistoryEntryFragmentFragmentDoc;
type generated_FusionSourceState = FusionSourceState;
type generated_FusionSourceWithCursor = FusionSourceWithCursor;
type generated_FusionSourcesConnection = FusionSourcesConnection;
type generated_FusionSourcesEdge = FusionSourcesEdge;
type generated_GenericEventAction = GenericEventAction;
type generated_GenericEventDetails = GenericEventDetails;
type generated_GenericEventIconHint = GenericEventIconHint;
type generated_GetAlertInput = GetAlertInput;
declare const generated_GetAlertsDocument: typeof GetAlertsDocument;
type generated_GetAlertsQuery = GetAlertsQuery;
type generated_GetAlertsQueryVariables = GetAlertsQueryVariables;
type generated_GetBotsByTypeInput = GetBotsByTypeInput;
declare const generated_GetConfigurationForDappDocument: typeof GetConfigurationForDappDocument;
type generated_GetConfigurationForDappInput = GetConfigurationForDappInput;
type generated_GetConfigurationForDappQuery = GetConfigurationForDappQuery;
type generated_GetConfigurationForDappQueryVariables = GetConfigurationForDappQueryVariables;
declare const generated_GetConnectedWalletsDocument: typeof GetConnectedWalletsDocument;
type generated_GetConnectedWalletsInput = GetConnectedWalletsInput;
type generated_GetConnectedWalletsQuery = GetConnectedWalletsQuery;
type generated_GetConnectedWalletsQueryVariables = GetConnectedWalletsQueryVariables;
type generated_GetConversationInput = GetConversationInput;
declare const generated_GetConversationMessagesDocument: typeof GetConversationMessagesDocument;
type generated_GetConversationMessagesInput = GetConversationMessagesInput;
type generated_GetConversationMessagesQuery = GetConversationMessagesQuery;
type generated_GetConversationMessagesQueryVariables = GetConversationMessagesQueryVariables;
declare const generated_GetDiscordTargetsDocument: typeof GetDiscordTargetsDocument;
type generated_GetDiscordTargetsQuery = GetDiscordTargetsQuery;
type generated_GetDiscordTargetsQueryVariables = GetDiscordTargetsQueryVariables;
declare const generated_GetEmailTargetsDocument: typeof GetEmailTargetsDocument;
type generated_GetEmailTargetsQuery = GetEmailTargetsQuery;
type generated_GetEmailTargetsQueryVariables = GetEmailTargetsQueryVariables;
type generated_GetFilterInput = GetFilterInput;
declare const generated_GetFiltersDocument: typeof GetFiltersDocument;
type generated_GetFiltersQuery = GetFiltersQuery;
type generated_GetFiltersQueryVariables = GetFiltersQueryVariables;
type generated_GetFusionExecutionLogsInput = GetFusionExecutionLogsInput;
type generated_GetFusionModuleExecutionDetailsResult = GetFusionModuleExecutionDetailsResult;
type generated_GetFusionModulePutUrlResponse = GetFusionModulePutUrlResponse;
declare const generated_GetFusionNotificationHistoryDocument: typeof GetFusionNotificationHistoryDocument;
type generated_GetFusionNotificationHistoryQuery = GetFusionNotificationHistoryQuery;
type generated_GetFusionNotificationHistoryQueryVariables = GetFusionNotificationHistoryQueryVariables;
type generated_GetFusionSourceDevParamsInput = GetFusionSourceDevParamsInput;
type generated_GetFusionSourceDevParamsResponse = GetFusionSourceDevParamsResponse;
type generated_GetFusionSourceExecutionDetailsResult = GetFusionSourceExecutionDetailsResult;
type generated_GetFusionSourcePutUrlResponse = GetFusionSourcePutUrlResponse;
type generated_GetFusionSourceStateInput = GetFusionSourceStateInput;
type generated_GetJabberMessagesInput = GetJabberMessagesInput;
type generated_GetMessageDeliveryStatisticsResult = GetMessageDeliveryStatisticsResult;
declare const generated_GetNotificationHistoryDocument: typeof GetNotificationHistoryDocument;
type generated_GetNotificationHistoryQuery = GetNotificationHistoryQuery;
type generated_GetNotificationHistoryQueryVariables = GetNotificationHistoryQueryVariables;
type generated_GetPublicTopicsInput = GetPublicTopicsInput;
type generated_GetPublicUserTopicPostInput = GetPublicUserTopicPostInput;
declare const generated_GetSmsTargetsDocument: typeof GetSmsTargetsDocument;
type generated_GetSmsTargetsQuery = GetSmsTargetsQuery;
type generated_GetSmsTargetsQueryVariables = GetSmsTargetsQueryVariables;
declare const generated_GetSourceConnectionDocument: typeof GetSourceConnectionDocument;
type generated_GetSourceConnectionQuery = GetSourceConnectionQuery;
type generated_GetSourceConnectionQueryVariables = GetSourceConnectionQueryVariables;
type generated_GetSourceGroupInput = GetSourceGroupInput;
declare const generated_GetSourceGroupsDocument: typeof GetSourceGroupsDocument;
type generated_GetSourceGroupsQuery = GetSourceGroupsQuery;
type generated_GetSourceGroupsQueryVariables = GetSourceGroupsQueryVariables;
type generated_GetSourceInput = GetSourceInput;
declare const generated_GetSourcesDocument: typeof GetSourcesDocument;
type generated_GetSourcesInput = GetSourcesInput;
type generated_GetSourcesQuery = GetSourcesQuery;
type generated_GetSourcesQueryVariables = GetSourcesQueryVariables;
type generated_GetSupportedTargetTypesForDappInput = GetSupportedTargetTypesForDappInput;
type generated_GetTargetGroupInput = GetTargetGroupInput;
declare const generated_GetTargetGroupsDocument: typeof GetTargetGroupsDocument;
type generated_GetTargetGroupsQuery = GetTargetGroupsQuery;
type generated_GetTargetGroupsQueryVariables = GetTargetGroupsQueryVariables;
type generated_GetTargetInput = GetTargetInput;
declare const generated_GetTelegramTargetsDocument: typeof GetTelegramTargetsDocument;
type generated_GetTelegramTargetsQuery = GetTelegramTargetsQuery;
type generated_GetTelegramTargetsQueryVariables = GetTelegramTargetsQueryVariables;
type generated_GetTemplateDataInput = GetTemplateDataInput;
type generated_GetTemplateResponse = GetTemplateResponse;
type generated_GetTenantAvailableReportsResult = GetTenantAvailableReportsResult;
type generated_GetTenantConfigInput = GetTenantConfigInput;
declare const generated_GetTenantConnectedWalletDocument: typeof GetTenantConnectedWalletDocument;
type generated_GetTenantConnectedWalletInput = GetTenantConnectedWalletInput;
type generated_GetTenantConnectedWalletQuery = GetTenantConnectedWalletQuery;
type generated_GetTenantConnectedWalletQueryVariables = GetTenantConnectedWalletQueryVariables;
type generated_GetTenantDeliveryReportRequestInput = GetTenantDeliveryReportRequestInput;
type generated_GetTenantDeliveryReportResult = GetTenantDeliveryReportResult;
declare const generated_GetTenantUserDocument: typeof GetTenantUserDocument;
type generated_GetTenantUserQuery = GetTenantUserQuery;
type generated_GetTenantUserQueryVariables = GetTenantUserQueryVariables;
declare const generated_GetTopicsDocument: typeof GetTopicsDocument;
type generated_GetTopicsQuery = GetTopicsQuery;
type generated_GetTopicsQueryVariables = GetTopicsQueryVariables;
type generated_GetTotalMessagesPerMonthByTenantResult = GetTotalMessagesPerMonthByTenantResult;
declare const generated_GetUnreadNotificationHistoryCountDocument: typeof GetUnreadNotificationHistoryCountDocument;
type generated_GetUnreadNotificationHistoryCountQuery = GetUnreadNotificationHistoryCountQuery;
type generated_GetUnreadNotificationHistoryCountQueryVariables = GetUnreadNotificationHistoryCountQueryVariables;
type generated_GetUnreadNotificationHistoryCountResponse = GetUnreadNotificationHistoryCountResponse;
type generated_GetUserProfileInput = GetUserProfileInput;
declare const generated_GetUserSettingsDocument: typeof GetUserSettingsDocument;
type generated_GetUserSettingsQuery = GetUserSettingsQuery;
type generated_GetUserSettingsQueryVariables = GetUserSettingsQueryVariables;
type generated_GetUsersByTopicResult = GetUsersByTopicResult;
declare const generated_GetWebhookTargetsDocument: typeof GetWebhookTargetsDocument;
type generated_GetWebhookTargetsQuery = GetWebhookTargetsQuery;
type generated_GetWebhookTargetsQueryVariables = GetWebhookTargetsQueryVariables;
type generated_HealthValueOverThresholdEventDetails = HealthValueOverThresholdEventDetails;
type generated_Incremental<T> = Incremental<T>;
type generated_InputMaybe<T> = InputMaybe<T>;
type generated_JabberMessagesConnection = JabberMessagesConnection;
type generated_JabberMessagesEdge = JabberMessagesEdge;
type generated_JabberThreadsConnection = JabberThreadsConnection;
type generated_JabberThreadsEdge = JabberThreadsEdge;
type generated_JabberV1Message = JabberV1Message;
type generated_JabberV1Participant = JabberV1Participant;
type generated_JabberV1Thread = JabberV1Thread;
type generated_KeyValuePairOfStringAndInt32 = KeyValuePairOfStringAndInt32;
type generated_KeyValuePairOfStringAndMessageDetails = KeyValuePairOfStringAndMessageDetails;
type generated_KeyValuePairOfStringAndString = KeyValuePairOfStringAndString;
type generated_KeyValuePairOfStringAndStringInput = KeyValuePairOfStringAndStringInput;
type generated_KeyValuePairOfStringAndWalletBlockchainInput = KeyValuePairOfStringAndWalletBlockchainInput;
type generated_KeyValuePairOfTargetTypeAndDictionaryOfStringAndStringInput = KeyValuePairOfTargetTypeAndDictionaryOfStringAndStringInput;
type generated_KeyValuePairOfTargetTypeAndStringInput = KeyValuePairOfTargetTypeAndStringInput;
type generated_LeaveConversationInput = LeaveConversationInput;
type generated_ListTemplatesInput = ListTemplatesInput;
type generated_ListTemplatesResponse = ListTemplatesResponse;
type generated_LogInByEmailAddressInput = LogInByEmailAddressInput;
type generated_LogInByOAuthInput = LogInByOAuthInput;
declare const generated_LogInFromDappDocument: typeof LogInFromDappDocument;
type generated_LogInFromDappMutation = LogInFromDappMutation;
type generated_LogInFromDappMutationVariables = LogInFromDappMutationVariables;
declare const generated_LogInFromServiceDocument: typeof LogInFromServiceDocument;
type generated_LogInFromServiceMutation = LogInFromServiceMutation;
type generated_LogInFromServiceMutationVariables = LogInFromServiceMutationVariables;
type generated_MakeEmpty<T extends {
    [key: string]: unknown;
}, K extends keyof T> = MakeEmpty<T, K>;
type generated_MakeMaybe<T, K extends keyof T> = MakeMaybe<T, K>;
type generated_MakeOptional<T, K extends keyof T> = MakeOptional<T, K>;
declare const generated_MarkFusionNotificationHistoryAsReadDocument: typeof MarkFusionNotificationHistoryAsReadDocument;
type generated_MarkFusionNotificationHistoryAsReadInput = MarkFusionNotificationHistoryAsReadInput;
type generated_MarkFusionNotificationHistoryAsReadMutation = MarkFusionNotificationHistoryAsReadMutation;
type generated_MarkFusionNotificationHistoryAsReadMutationVariables = MarkFusionNotificationHistoryAsReadMutationVariables;
type generated_MarkNotificationsAsReadInput = MarkNotificationsAsReadInput;
type generated_Maybe<T> = Maybe<T>;
type generated_MessageDetails = MessageDetails;
type generated_MessageStats = MessageStats;
type generated_MessageType = MessageType;
type generated_MobilePushSettings = MobilePushSettings;
type generated_MobilePushSettingsInput = MobilePushSettingsInput;
type generated_NftAuctionChangedEventDetails = NftAuctionChangedEventDetails;
type generated_NftCollectionStats = NftCollectionStats;
type generated_NftCollectionsReportEventDetails = NftCollectionsReportEventDetails;
type generated_NftCollectionsReportType = NftCollectionsReportType;
type generated_NotifiMutation = NotifiMutation;
type generated_NotifiMutationActivateFusionModuleArgs = NotifiMutationActivateFusionModuleArgs;
type generated_NotifiMutationActivateFusionSourceArgs = NotifiMutationActivateFusionSourceArgs;
type generated_NotifiMutationAddBotArgs = NotifiMutationAddBotArgs;
type generated_NotifiMutationAddEmailSenderDomainArgs = NotifiMutationAddEmailSenderDomainArgs;
type generated_NotifiMutationAddFusionEventToFusionSourceArgs = NotifiMutationAddFusionEventToFusionSourceArgs;
type generated_NotifiMutationAddOrUpdateMobileFcmTargetArgs = NotifiMutationAddOrUpdateMobileFcmTargetArgs;
type generated_NotifiMutationAddSourceToSourceGroupArgs = NotifiMutationAddSourceToSourceGroupArgs;
type generated_NotifiMutationBatchBroadcastMessageArgs = NotifiMutationBatchBroadcastMessageArgs;
type generated_NotifiMutationBeginLogInByTransactionArgs = NotifiMutationBeginLogInByTransactionArgs;
type generated_NotifiMutationBroadcastMessageArgs = NotifiMutationBroadcastMessageArgs;
type generated_NotifiMutationCompleteLogInByQrCodeArgs = NotifiMutationCompleteLogInByQrCodeArgs;
type generated_NotifiMutationCompleteLogInByTransactionArgs = NotifiMutationCompleteLogInByTransactionArgs;
type generated_NotifiMutationConfirmEmailArgs = NotifiMutationConfirmEmailArgs;
type generated_NotifiMutationConnectWalletArgs = NotifiMutationConnectWalletArgs;
type generated_NotifiMutationCreateAlertArgs = NotifiMutationCreateAlertArgs;
type generated_NotifiMutationCreateArgs = NotifiMutationCreateArgs;
type generated_NotifiMutationCreateConversationArgs = NotifiMutationCreateConversationArgs;
type generated_NotifiMutationCreateDirectPushAlertArgs = NotifiMutationCreateDirectPushAlertArgs;
type generated_NotifiMutationCreateDiscordBotConfigurationArgs = NotifiMutationCreateDiscordBotConfigurationArgs;
type generated_NotifiMutationCreateDiscordTargetArgs = NotifiMutationCreateDiscordTargetArgs;
type generated_NotifiMutationCreateEmailTargetArgs = NotifiMutationCreateEmailTargetArgs;
type generated_NotifiMutationCreateFcmTargetArgs = NotifiMutationCreateFcmTargetArgs;
type generated_NotifiMutationCreateFusionEventArgs = NotifiMutationCreateFusionEventArgs;
type generated_NotifiMutationCreateFusionModuleArgs = NotifiMutationCreateFusionModuleArgs;
type generated_NotifiMutationCreateFusionSourceArgs = NotifiMutationCreateFusionSourceArgs;
type generated_NotifiMutationCreateOrUpdateUserArgs = NotifiMutationCreateOrUpdateUserArgs;
type generated_NotifiMutationCreateSmsTargetArgs = NotifiMutationCreateSmsTargetArgs;
type generated_NotifiMutationCreateSourceArgs = NotifiMutationCreateSourceArgs;
type generated_NotifiMutationCreateSourceGroupArgs = NotifiMutationCreateSourceGroupArgs;
type generated_NotifiMutationCreateTargetGroupArgs = NotifiMutationCreateTargetGroupArgs;
type generated_NotifiMutationCreateTelegramTargetArgs = NotifiMutationCreateTelegramTargetArgs;
type generated_NotifiMutationCreateTenantArgs = NotifiMutationCreateTenantArgs;
type generated_NotifiMutationCreateTenantConfigArgs = NotifiMutationCreateTenantConfigArgs;
type generated_NotifiMutationCreateTenantUserArgs = NotifiMutationCreateTenantUserArgs;
type generated_NotifiMutationCreateWeb3TargetArgs = NotifiMutationCreateWeb3TargetArgs;
type generated_NotifiMutationCreateWebhookTargetArgs = NotifiMutationCreateWebhookTargetArgs;
type generated_NotifiMutationDeactivateFusionSourceArgs = NotifiMutationDeactivateFusionSourceArgs;
type generated_NotifiMutationDeleteAlertArgs = NotifiMutationDeleteAlertArgs;
type generated_NotifiMutationDeleteDAppSubscriptionArgs = NotifiMutationDeleteDAppSubscriptionArgs;
type generated_NotifiMutationDeleteDirectPushAlertArgs = NotifiMutationDeleteDirectPushAlertArgs;
type generated_NotifiMutationDeleteDiscordTargetArgs = NotifiMutationDeleteDiscordTargetArgs;
type generated_NotifiMutationDeleteEmailTargetArgs = NotifiMutationDeleteEmailTargetArgs;
type generated_NotifiMutationDeleteFcmTargetArgs = NotifiMutationDeleteFcmTargetArgs;
type generated_NotifiMutationDeleteFusionEventArgs = NotifiMutationDeleteFusionEventArgs;
type generated_NotifiMutationDeleteFusionModuleArgs = NotifiMutationDeleteFusionModuleArgs;
type generated_NotifiMutationDeleteFusionSourceArgs = NotifiMutationDeleteFusionSourceArgs;
type generated_NotifiMutationDeleteSmsTargetArgs = NotifiMutationDeleteSmsTargetArgs;
type generated_NotifiMutationDeleteSourceArgs = NotifiMutationDeleteSourceArgs;
type generated_NotifiMutationDeleteSourceGroupArgs = NotifiMutationDeleteSourceGroupArgs;
type generated_NotifiMutationDeleteTargetGroupArgs = NotifiMutationDeleteTargetGroupArgs;
type generated_NotifiMutationDeleteTelegramTargetArgs = NotifiMutationDeleteTelegramTargetArgs;
type generated_NotifiMutationDeleteTenantConfigArgs = NotifiMutationDeleteTenantConfigArgs;
type generated_NotifiMutationDeleteUserAlertArgs = NotifiMutationDeleteUserAlertArgs;
type generated_NotifiMutationDeleteWeb3TargetArgs = NotifiMutationDeleteWeb3TargetArgs;
type generated_NotifiMutationDeleteWebhookTargetArgs = NotifiMutationDeleteWebhookTargetArgs;
type generated_NotifiMutationDisconnectWalletArgs = NotifiMutationDisconnectWalletArgs;
type generated_NotifiMutationEnableOrDisableMobileFcmTargetsArgs = NotifiMutationEnableOrDisableMobileFcmTargetsArgs;
type generated_NotifiMutationEnqueueOffChainEventArgs = NotifiMutationEnqueueOffChainEventArgs;
type generated_NotifiMutationFusionBroadcastMessageArgs = NotifiMutationFusionBroadcastMessageArgs;
type generated_NotifiMutationGenerateEmailConfirmationTokenArgs = NotifiMutationGenerateEmailConfirmationTokenArgs;
type generated_NotifiMutationLeaveConversationArgs = NotifiMutationLeaveConversationArgs;
type generated_NotifiMutationLogInArgs = NotifiMutationLogInArgs;
type generated_NotifiMutationLogInByEmailAddressArgs = NotifiMutationLogInByEmailAddressArgs;
type generated_NotifiMutationLogInByOAuthArgs = NotifiMutationLogInByOAuthArgs;
type generated_NotifiMutationLogInFromDappArgs = NotifiMutationLogInFromDappArgs;
type generated_NotifiMutationLogInFromServiceArgs = NotifiMutationLogInFromServiceArgs;
type generated_NotifiMutationMarkFusionNotificationHistoryAsReadArgs = NotifiMutationMarkFusionNotificationHistoryAsReadArgs;
type generated_NotifiMutationMarkNotificationsAsReadArgs = NotifiMutationMarkNotificationsAsReadArgs;
type generated_NotifiMutationPublishFusionMessageArgs = NotifiMutationPublishFusionMessageArgs;
type generated_NotifiMutationRemoveBotArgs = NotifiMutationRemoveBotArgs;
type generated_NotifiMutationRemoveEmailSenderDomainArgs = NotifiMutationRemoveEmailSenderDomainArgs;
type generated_NotifiMutationRemoveFusionEventFromFusionSourceArgs = NotifiMutationRemoveFusionEventFromFusionSourceArgs;
type generated_NotifiMutationRemoveSourceFromSourceGroupArgs = NotifiMutationRemoveSourceFromSourceGroupArgs;
type generated_NotifiMutationRemoveTenantUserRolesArgs = NotifiMutationRemoveTenantUserRolesArgs;
type generated_NotifiMutationResetPasswordArgs = NotifiMutationResetPasswordArgs;
type generated_NotifiMutationSendConversationMessageArgs = NotifiMutationSendConversationMessageArgs;
type generated_NotifiMutationSendEmailTargetVerificationRequestArgs = NotifiMutationSendEmailTargetVerificationRequestArgs;
type generated_NotifiMutationSendMessageArgs = NotifiMutationSendMessageArgs;
type generated_NotifiMutationSendResetPasswordEmailArgs = NotifiMutationSendResetPasswordEmailArgs;
type generated_NotifiMutationUnsubscribeArgs = NotifiMutationUnsubscribeArgs;
type generated_NotifiMutationUpdateBotArgs = NotifiMutationUpdateBotArgs;
type generated_NotifiMutationUpdateCorsPolicyArgs = NotifiMutationUpdateCorsPolicyArgs;
type generated_NotifiMutationUpdateDefaultEmailSenderDisplayNameArgs = NotifiMutationUpdateDefaultEmailSenderDisplayNameArgs;
type generated_NotifiMutationUpdateDefaultEmailSenderDomainArgs = NotifiMutationUpdateDefaultEmailSenderDomainArgs;
type generated_NotifiMutationUpdateDefaultEmailSenderNameArgs = NotifiMutationUpdateDefaultEmailSenderNameArgs;
type generated_NotifiMutationUpdateDiscordBotConfigurationArgs = NotifiMutationUpdateDiscordBotConfigurationArgs;
type generated_NotifiMutationUpdateEphemeralStorageArgs = NotifiMutationUpdateEphemeralStorageArgs;
type generated_NotifiMutationUpdateFusionEventArgs = NotifiMutationUpdateFusionEventArgs;
type generated_NotifiMutationUpdateFusionSourceArgs = NotifiMutationUpdateFusionSourceArgs;
type generated_NotifiMutationUpdatePersistentStorageArgs = NotifiMutationUpdatePersistentStorageArgs;
type generated_NotifiMutationUpdateUserProfileArgs = NotifiMutationUpdateUserProfileArgs;
type generated_NotifiMutationUpdateUserSettingsArgs = NotifiMutationUpdateUserSettingsArgs;
type generated_NotifiMutationUploadTemplateArgs = NotifiMutationUploadTemplateArgs;
type generated_NotifiMutationVerifyDiscordTargetArgs = NotifiMutationVerifyDiscordTargetArgs;
type generated_NotifiMutationVerifyTargetArgs = NotifiMutationVerifyTargetArgs;
type generated_NotifiQuery = NotifiQuery;
type generated_NotifiQueryAlertArgs = NotifiQueryAlertArgs;
type generated_NotifiQueryBotsByTypeArgs = NotifiQueryBotsByTypeArgs;
type generated_NotifiQueryConfigurationForDappArgs = NotifiQueryConfigurationForDappArgs;
type generated_NotifiQueryConnectedWalletArgs = NotifiQueryConnectedWalletArgs;
type generated_NotifiQueryConversationArgs = NotifiQueryConversationArgs;
type generated_NotifiQueryConversationMessagesArgs = NotifiQueryConversationMessagesArgs;
type generated_NotifiQueryConversationsArgs = NotifiQueryConversationsArgs;
type generated_NotifiQueryDiscordTargetArgs = NotifiQueryDiscordTargetArgs;
type generated_NotifiQueryEmailTargetArgs = NotifiQueryEmailTargetArgs;
type generated_NotifiQueryEphemeralStorageArgs = NotifiQueryEphemeralStorageArgs;
type generated_NotifiQueryFcmTargetsArgs = NotifiQueryFcmTargetsArgs;
type generated_NotifiQueryFilterArgs = NotifiQueryFilterArgs;
type generated_NotifiQueryFindTenantConfigArgs = NotifiQueryFindTenantConfigArgs;
type generated_NotifiQueryFusionEventsArgs = NotifiQueryFusionEventsArgs;
type generated_NotifiQueryFusionExecutionLogsArgs = NotifiQueryFusionExecutionLogsArgs;
type generated_NotifiQueryFusionModulePutUrlArgs = NotifiQueryFusionModulePutUrlArgs;
type generated_NotifiQueryFusionNotificationHistoryArgs = NotifiQueryFusionNotificationHistoryArgs;
type generated_NotifiQueryFusionPreviewCommunityManagerContentArgs = NotifiQueryFusionPreviewCommunityManagerContentArgs;
type generated_NotifiQueryFusionSourceDevParamsArgs = NotifiQueryFusionSourceDevParamsArgs;
type generated_NotifiQueryFusionSourcePutUrlArgs = NotifiQueryFusionSourcePutUrlArgs;
type generated_NotifiQueryFusionSourceStateArgs = NotifiQueryFusionSourceStateArgs;
type generated_NotifiQueryFusionSourcesArgs = NotifiQueryFusionSourcesArgs;
type generated_NotifiQueryJabberMessagesArgs = NotifiQueryJabberMessagesArgs;
type generated_NotifiQueryJabberThreadsArgs = NotifiQueryJabberThreadsArgs;
type generated_NotifiQueryListTemplatesArgs = NotifiQueryListTemplatesArgs;
type generated_NotifiQueryMobilePushSettingsArgs = NotifiQueryMobilePushSettingsArgs;
type generated_NotifiQueryNotificationByIdArgs = NotifiQueryNotificationByIdArgs;
type generated_NotifiQueryNotificationHistoryArgs = NotifiQueryNotificationHistoryArgs;
type generated_NotifiQueryPersistentStorageArgs = NotifiQueryPersistentStorageArgs;
type generated_NotifiQueryPreviewCommunityManagerContentArgs = NotifiQueryPreviewCommunityManagerContentArgs;
type generated_NotifiQueryPublicTopicsArgs = NotifiQueryPublicTopicsArgs;
type generated_NotifiQueryPublicUserTopicPostArgs = NotifiQueryPublicUserTopicPostArgs;
type generated_NotifiQueryResolveSnsFromAddressArgs = NotifiQueryResolveSnsFromAddressArgs;
type generated_NotifiQuerySmsTargetArgs = NotifiQuerySmsTargetArgs;
type generated_NotifiQuerySourceArgs = NotifiQuerySourceArgs;
type generated_NotifiQuerySourceGroupArgs = NotifiQuerySourceGroupArgs;
type generated_NotifiQuerySourcesArgs = NotifiQuerySourcesArgs;
type generated_NotifiQuerySupportedTargetTypesForDappArgs = NotifiQuerySupportedTargetTypesForDappArgs;
type generated_NotifiQueryTargetGroupArgs = NotifiQueryTargetGroupArgs;
type generated_NotifiQueryTelegramTargetArgs = NotifiQueryTelegramTargetArgs;
type generated_NotifiQueryTemplateDataArgs = NotifiQueryTemplateDataArgs;
type generated_NotifiQueryTenantConfigsArgs = NotifiQueryTenantConfigsArgs;
type generated_NotifiQueryTenantConnectedWalletArgs = NotifiQueryTenantConnectedWalletArgs;
type generated_NotifiQueryTenantDeliveryReportArgs = NotifiQueryTenantDeliveryReportArgs;
type generated_NotifiQueryTenantFeatureFlagArgs = NotifiQueryTenantFeatureFlagArgs;
type generated_NotifiQueryTenantUserArgs = NotifiQueryTenantUserArgs;
type generated_NotifiQueryTenantUsersArgs = NotifiQueryTenantUsersArgs;
type generated_NotifiQueryTopicsArgs = NotifiQueryTopicsArgs;
type generated_NotifiQueryUserProfileArgs = NotifiQueryUserProfileArgs;
type generated_NotifiQueryWebhookTargetArgs = NotifiQueryWebhookTargetArgs;
type generated_NotifiSubscription = NotifiSubscription;
type generated_NotificationCategory = NotificationCategory;
type generated_NotificationHistoryConnection = NotificationHistoryConnection;
type generated_NotificationHistoryEdge = NotificationHistoryEdge;
type generated_NotificationHistoryEntry = NotificationHistoryEntry;
type generated_NotificationHistoryEntryFragmentFragment = NotificationHistoryEntryFragmentFragment;
declare const generated_NotificationHistoryEntryFragmentFragmentDoc: typeof NotificationHistoryEntryFragmentFragmentDoc;
type generated_NotificationHistoryFilterInput = NotificationHistoryFilterInput;
type generated_NotificationHistoryReadState = NotificationHistoryReadState;
type generated_NotificationTarget = NotificationTarget;
type generated_OAuthIssuer = OAuthIssuer;
type generated_PageInfo = PageInfo;
type generated_PageInfoFragmentFragment = PageInfoFragmentFragment;
declare const generated_PageInfoFragmentFragmentDoc: typeof PageInfoFragmentFragmentDoc;
type generated_ParticipantFragment = ParticipantFragment;
declare const generated_ParticipantFragmentDoc: typeof ParticipantFragmentDoc;
type generated_PersistentStorageConnection = PersistentStorageConnection;
type generated_PersistentStorageEdge = PersistentStorageEdge;
type generated_PersistentStorageEntry = PersistentStorageEntry;
type generated_PersistentStorageEntryInput = PersistentStorageEntryInput;
type generated_PersistentStorageQueryInput = PersistentStorageQueryInput;
type generated_PublicTopicsConnection = PublicTopicsConnection;
type generated_PublicTopicsEdge = PublicTopicsEdge;
type generated_PublicUserTopicPost = PublicUserTopicPost;
type generated_PublicUserTopicPostConnection = PublicUserTopicPostConnection;
type generated_PublicUserTopicPostEdge = PublicUserTopicPostEdge;
declare const generated_PublishFusionMessageDocument: typeof PublishFusionMessageDocument;
type generated_PublishFusionMessageInput = PublishFusionMessageInput;
type generated_PublishFusionMessageMutation = PublishFusionMessageMutation;
type generated_PublishFusionMessageMutationVariables = PublishFusionMessageMutationVariables;
type generated_PublishFusionMessageResult = PublishFusionMessageResult;
declare const generated_RefreshAuthorizationDocument: typeof RefreshAuthorizationDocument;
type generated_RefreshAuthorizationMutation = RefreshAuthorizationMutation;
type generated_RefreshAuthorizationMutationVariables = RefreshAuthorizationMutationVariables;
type generated_RemoveBotInput = RemoveBotInput;
type generated_RemoveEmailSenderDomainInput = RemoveEmailSenderDomainInput;
type generated_RemoveFusionEventFromFusionSourceInput = RemoveFusionEventFromFusionSourceInput;
type generated_RemoveFusionEventFromFusionSourceResponse = RemoveFusionEventFromFusionSourceResponse;
declare const generated_RemoveSourceFromSourceGroupDocument: typeof RemoveSourceFromSourceGroupDocument;
type generated_RemoveSourceFromSourceGroupInput = RemoveSourceFromSourceGroupInput;
type generated_RemoveSourceFromSourceGroupMutation = RemoveSourceFromSourceGroupMutation;
type generated_RemoveSourceFromSourceGroupMutationVariables = RemoveSourceFromSourceGroupMutationVariables;
type generated_RemoveTenantUserRolesInput = RemoveTenantUserRolesInput;
type generated_RequiredParserVariableType = RequiredParserVariableType;
type generated_RequiredVariable = RequiredVariable;
type generated_Scalars = Scalars;
type generated_Sdk = Sdk;
type generated_SdkFunctionWrapper = SdkFunctionWrapper;
declare const generated_SendConversationMessageDocument: typeof SendConversationMessageDocument;
type generated_SendConversationMessageInput = SendConversationMessageInput;
type generated_SendConversationMessageMutation = SendConversationMessageMutation;
type generated_SendConversationMessageMutationVariables = SendConversationMessageMutationVariables;
declare const generated_SendEmailTargetVerificationRequestDocument: typeof SendEmailTargetVerificationRequestDocument;
type generated_SendEmailTargetVerificationRequestMutation = SendEmailTargetVerificationRequestMutation;
type generated_SendEmailTargetVerificationRequestMutationVariables = SendEmailTargetVerificationRequestMutationVariables;
declare const generated_SendMessageDocument: typeof SendMessageDocument;
type generated_SendMessageInput = SendMessageInput;
type generated_SendMessageMutation = SendMessageMutation;
type generated_SendMessageMutationVariables = SendMessageMutationVariables;
type generated_SendTargetConfirmationRequestInput = SendTargetConfirmationRequestInput;
type generated_ServiceIdentifier = ServiceIdentifier;
type generated_ServiceLogInInput = ServiceLogInInput;
type generated_SmsTarget = SmsTarget;
type generated_SmsTargetFragmentFragment = SmsTargetFragmentFragment;
declare const generated_SmsTargetFragmentFragmentDoc: typeof SmsTargetFragmentFragmentDoc;
type generated_Source = Source;
type generated_SourceFragmentFragment = SourceFragmentFragment;
declare const generated_SourceFragmentFragmentDoc: typeof SourceFragmentFragmentDoc;
type generated_SourceGroup = SourceGroup;
type generated_SourceGroupFragmentFragment = SourceGroupFragmentFragment;
declare const generated_SourceGroupFragmentFragmentDoc: typeof SourceGroupFragmentFragmentDoc;
type generated_SourceGroupInput = SourceGroupInput;
type generated_SourceType = SourceType;
type generated_SourcesConnection = SourcesConnection;
type generated_SourcesEdge = SourcesEdge;
type generated_StorageType = StorageType;
type generated_SubscribeableTopic = SubscribeableTopic;
type generated_TargetGroup = TargetGroup;
type generated_TargetGroupFragmentFragment = TargetGroupFragmentFragment;
declare const generated_TargetGroupFragmentFragmentDoc: typeof TargetGroupFragmentFragmentDoc;
type generated_TargetGroupInput = TargetGroupInput;
type generated_TargetType = TargetType;
type generated_TelegramTarget = TelegramTarget;
type generated_TelegramTargetFragmentFragment = TelegramTargetFragmentFragment;
declare const generated_TelegramTargetFragmentFragmentDoc: typeof TelegramTargetFragmentFragmentDoc;
type generated_Template = Template;
type generated_TemplateType = TemplateType;
type generated_Tenant = Tenant;
type generated_TenantConfig = TenantConfig;
type generated_TenantConfigFragmentFragment = TenantConfigFragmentFragment;
declare const generated_TenantConfigFragmentFragmentDoc: typeof TenantConfigFragmentFragmentDoc;
type generated_TenantConfigType = TenantConfigType;
type generated_TenantConfigsConnection = TenantConfigsConnection;
type generated_TenantConfigsEdge = TenantConfigsEdge;
type generated_TenantConnectedWallet = TenantConnectedWallet;
type generated_TenantConnectedWalletConnection = TenantConnectedWalletConnection;
type generated_TenantConnectedWalletEdge = TenantConnectedWalletEdge;
type generated_TenantConnectedWalletFragmentFragment = TenantConnectedWalletFragmentFragment;
declare const generated_TenantConnectedWalletFragmentFragmentDoc: typeof TenantConnectedWalletFragmentFragmentDoc;
type generated_TenantEntityChangeEvent = TenantEntityChangeEvent;
type generated_TenantFeatureFlag = TenantFeatureFlag;
type generated_TenantFeatureFlagInput = TenantFeatureFlagInput;
type generated_TenantTargetGroup = TenantTargetGroup;
type generated_TenantUser = TenantUser;
type generated_TenantUserAlert = TenantUserAlert;
type generated_TenantUserAlertFragmentFragment = TenantUserAlertFragmentFragment;
declare const generated_TenantUserAlertFragmentFragmentDoc: typeof TenantUserAlertFragmentFragmentDoc;
type generated_TenantUserConnection = TenantUserConnection;
type generated_TenantUserEdge = TenantUserEdge;
type generated_TenantUserFragmentFragment = TenantUserFragmentFragment;
declare const generated_TenantUserFragmentFragmentDoc: typeof TenantUserFragmentFragmentDoc;
type generated_TenantUsersConnection = TenantUsersConnection;
type generated_TenantUsersEdge = TenantUsersEdge;
type generated_TenantUsersInput = TenantUsersInput;
type generated_Timestamp = Timestamp;
type generated_TopicsConnection = TopicsConnection;
type generated_TopicsEdge = TopicsEdge;
type generated_UnsubscribeInputTypeInput = UnsubscribeInputTypeInput;
type generated_UnsubscribeResult = UnsubscribeResult;
type generated_UpdateBotInput = UpdateBotInput;
type generated_UpdateCorsPolicyInput = UpdateCorsPolicyInput;
type generated_UpdateDefaultEmailSenderDisplayNameInput = UpdateDefaultEmailSenderDisplayNameInput;
type generated_UpdateDefaultEmailSenderDomainInput = UpdateDefaultEmailSenderDomainInput;
type generated_UpdateDefaultEmailSenderNameInput = UpdateDefaultEmailSenderNameInput;
type generated_UpdateDiscordBotConfigurationInput = UpdateDiscordBotConfigurationInput;
type generated_UpdateEphemeralStorageInput = UpdateEphemeralStorageInput;
type generated_UpdateEphemeralStorageResult = UpdateEphemeralStorageResult;
type generated_UpdateFusionEventInput = UpdateFusionEventInput;
type generated_UpdateFusionSourceInput = UpdateFusionSourceInput;
type generated_UpdateFusionSourceResponse = UpdateFusionSourceResponse;
type generated_UpdatePersistentStorageInput = UpdatePersistentStorageInput;
type generated_UpdatePersistentStorageResult = UpdatePersistentStorageResult;
declare const generated_UpdateSourceGroupDocument: typeof UpdateSourceGroupDocument;
type generated_UpdateSourceGroupMutation = UpdateSourceGroupMutation;
type generated_UpdateSourceGroupMutationVariables = UpdateSourceGroupMutationVariables;
declare const generated_UpdateTargetGroupDocument: typeof UpdateTargetGroupDocument;
type generated_UpdateTargetGroupMutation = UpdateTargetGroupMutation;
type generated_UpdateTargetGroupMutationVariables = UpdateTargetGroupMutationVariables;
declare const generated_UpdateUserSettingsDocument: typeof UpdateUserSettingsDocument;
type generated_UpdateUserSettingsMutation = UpdateUserSettingsMutation;
type generated_UpdateUserSettingsMutationVariables = UpdateUserSettingsMutationVariables;
type generated_User = User;
type generated_UserCreatedEvent = UserCreatedEvent;
type generated_UserFeatureFlags = UserFeatureFlags;
type generated_UserFragmentFragment = UserFragmentFragment;
declare const generated_UserFragmentFragmentDoc: typeof UserFragmentFragmentDoc;
type generated_UserInput = UserInput;
type generated_UserProfile = UserProfile;
type generated_UserProfileInput = UserProfileInput;
type generated_UserSettings = UserSettings;
type generated_UserSettingsInput = UserSettingsInput;
type generated_UserTopic = UserTopic;
type generated_UserTopicFragmentFragment = UserTopicFragmentFragment;
declare const generated_UserTopicFragmentFragmentDoc: typeof UserTopicFragmentFragmentDoc;
type generated_VerifyDiscordTargetInput = VerifyDiscordTargetInput;
type generated_VerifyTargetInput = VerifyTargetInput;
type generated_WalletBlockchain = WalletBlockchain;
type generated_WalletsActivityReportEventDetails = WalletsActivityReportEventDetails;
type generated_WalletsActivityReportType = WalletsActivityReportType;
type generated_WalletsActivityReportWallet = WalletsActivityReportWallet;
type generated_Web3Target = Web3Target;
type generated_Web3TargetProtocol = Web3TargetProtocol;
type generated_WebhookPayloadFormat = WebhookPayloadFormat;
type generated_WebhookStatus = WebhookStatus;
type generated_WebhookTarget = WebhookTarget;
type generated_WebhookTargetFragmentFragment = WebhookTargetFragmentFragment;
declare const generated_WebhookTargetFragmentFragmentDoc: typeof WebhookTargetFragmentFragmentDoc;
declare const generated_getSdk: typeof getSdk;
declare namespace generated {
  export {
    generated_AccountBalanceChangeDirection as AccountBalanceChangeDirection,
    generated_AccountBalanceChangeRow as AccountBalanceChangeRow,
    generated_AccountBalanceChangedEventDetails as AccountBalanceChangedEventDetails,
    generated_ActivateFusionSourceInput as ActivateFusionSourceInput,
    generated_ActivateFusionSourceResponse as ActivateFusionSourceResponse,
    generated_AddBotInput as AddBotInput,
    generated_AddEmailSenderDomainInput as AddEmailSenderDomainInput,
    generated_AddFusionEventToFusionSourceInput as AddFusionEventToFusionSourceInput,
    generated_AddFusionEventToFusionSourceResponse as AddFusionEventToFusionSourceResponse,
    generated_AddOrUpdateMobileFcmTargetInput as AddOrUpdateMobileFcmTargetInput,
    generated_AddSourceToSourceGroupDocument as AddSourceToSourceGroupDocument,
    generated_AddSourceToSourceGroupInput as AddSourceToSourceGroupInput,
    generated_AddSourceToSourceGroupMutation as AddSourceToSourceGroupMutation,
    generated_AddSourceToSourceGroupMutationVariables as AddSourceToSourceGroupMutationVariables,
    generated_Alert as Alert,
    generated_AlertCreatedEvent as AlertCreatedEvent,
    generated_AlertDeletedEvent as AlertDeletedEvent,
    generated_AlertFragmentFragment as AlertFragmentFragment,
    generated_AlertFragmentFragmentDoc as AlertFragmentFragmentDoc,
    generated_ApplyPolicy as ApplyPolicy,
    generated_ApprovalStatus as ApprovalStatus,
    generated_Authorization as Authorization,
    generated_AuthorizationFragmentFragment as AuthorizationFragmentFragment,
    generated_AuthorizationFragmentFragmentDoc as AuthorizationFragmentFragmentDoc,
    generated_AvatarDataType as AvatarDataType,
    generated_BatchBroadcastMessageInput as BatchBroadcastMessageInput,
    generated_BatchBroadcastMessageResult as BatchBroadcastMessageResult,
    generated_BeginLogInByQrCodeResult as BeginLogInByQrCodeResult,
    generated_BeginLogInByTransactionDocument as BeginLogInByTransactionDocument,
    generated_BeginLogInByTransactionInput as BeginLogInByTransactionInput,
    generated_BeginLogInByTransactionMutation as BeginLogInByTransactionMutation,
    generated_BeginLogInByTransactionMutationVariables as BeginLogInByTransactionMutationVariables,
    generated_BeginLogInByTransactionResult as BeginLogInByTransactionResult,
    generated_BlockchainType as BlockchainType,
    generated_Bot as Bot,
    generated_BotStatus as BotStatus,
    generated_BotType as BotType,
    generated_BroadcastMessageDocument as BroadcastMessageDocument,
    generated_BroadcastMessageEventDetails as BroadcastMessageEventDetails,
    generated_BroadcastMessageInput as BroadcastMessageInput,
    generated_BroadcastMessageMutation as BroadcastMessageMutation,
    generated_BroadcastMessageMutationVariables as BroadcastMessageMutationVariables,
    generated_BroadcastMessageResult as BroadcastMessageResult,
    generated_ChatMessageReceivedEventDetails as ChatMessageReceivedEventDetails,
    generated_ClientConfiguration as ClientConfiguration,
    generated_CommunityManagerPreviewInput as CommunityManagerPreviewInput,
    generated_CommunityManagerPreviewResult as CommunityManagerPreviewResult,
    generated_CompleteLogInByQrCodeInput as CompleteLogInByQrCodeInput,
    generated_CompleteLogInByTransactionDocument as CompleteLogInByTransactionDocument,
    generated_CompleteLogInByTransactionInput as CompleteLogInByTransactionInput,
    generated_CompleteLogInByTransactionMutation as CompleteLogInByTransactionMutation,
    generated_CompleteLogInByTransactionMutationVariables as CompleteLogInByTransactionMutationVariables,
    generated_ConnectWalletConflictResolutionTechnique as ConnectWalletConflictResolutionTechnique,
    generated_ConnectWalletDocument as ConnectWalletDocument,
    generated_ConnectWalletInput as ConnectWalletInput,
    generated_ConnectWalletMutation as ConnectWalletMutation,
    generated_ConnectWalletMutationVariables as ConnectWalletMutationVariables,
    generated_ConnectedWallet as ConnectedWallet,
    generated_ConnectedWalletFragmentFragment as ConnectedWalletFragmentFragment,
    generated_ConnectedWalletFragmentFragmentDoc as ConnectedWalletFragmentFragmentDoc,
    generated_ConvMessagePageInfoFragment as ConvMessagePageInfoFragment,
    generated_ConvMessagePageInfoFragmentDoc as ConvMessagePageInfoFragmentDoc,
    generated_Conversation as Conversation,
    generated_ConversationGate as ConversationGate,
    generated_ConversationGateTokenType as ConversationGateTokenType,
    generated_ConversationMessage as ConversationMessage,
    generated_ConversationMessageFragment as ConversationMessageFragment,
    generated_ConversationMessageFragmentDoc as ConversationMessageFragmentDoc,
    generated_ConversationMessagesConnection as ConversationMessagesConnection,
    generated_ConversationMessagesEdge as ConversationMessagesEdge,
    generated_ConversationParticipant as ConversationParticipant,
    generated_ConversationParticipantInput as ConversationParticipantInput,
    generated_ConversationParticipantType as ConversationParticipantType,
    generated_ConversationType as ConversationType,
    generated_ConversationsConnection as ConversationsConnection,
    generated_ConversationsEdge as ConversationsEdge,
    generated_CorsPolicy as CorsPolicy,
    generated_CorsPolicyEntry as CorsPolicyEntry,
    generated_CreateAlertDocument as CreateAlertDocument,
    generated_CreateAlertInput as CreateAlertInput,
    generated_CreateAlertMutation as CreateAlertMutation,
    generated_CreateAlertMutationVariables as CreateAlertMutationVariables,
    generated_CreateConversationInput as CreateConversationInput,
    generated_CreateDirectPushAlertDocument as CreateDirectPushAlertDocument,
    generated_CreateDirectPushAlertInput as CreateDirectPushAlertInput,
    generated_CreateDirectPushAlertMutation as CreateDirectPushAlertMutation,
    generated_CreateDirectPushAlertMutationVariables as CreateDirectPushAlertMutationVariables,
    generated_CreateDiscordBotConfigurationInput as CreateDiscordBotConfigurationInput,
    generated_CreateDiscordTargetDocument as CreateDiscordTargetDocument,
    generated_CreateDiscordTargetMutation as CreateDiscordTargetMutation,
    generated_CreateDiscordTargetMutationVariables as CreateDiscordTargetMutationVariables,
    generated_CreateEmailTargetDocument as CreateEmailTargetDocument,
    generated_CreateEmailTargetMutation as CreateEmailTargetMutation,
    generated_CreateEmailTargetMutationVariables as CreateEmailTargetMutationVariables,
    generated_CreateFcmTargetInput as CreateFcmTargetInput,
    generated_CreateFusionEventInput as CreateFusionEventInput,
    generated_CreateFusionModuleInput as CreateFusionModuleInput,
    generated_CreateFusionModuleResponse as CreateFusionModuleResponse,
    generated_CreateFusionSourceInput as CreateFusionSourceInput,
    generated_CreateFusionSourceResponse as CreateFusionSourceResponse,
    generated_CreateOrUpdateUserInput as CreateOrUpdateUserInput,
    generated_CreateSmsTargetDocument as CreateSmsTargetDocument,
    generated_CreateSmsTargetMutation as CreateSmsTargetMutation,
    generated_CreateSmsTargetMutationVariables as CreateSmsTargetMutationVariables,
    generated_CreateSourceDocument as CreateSourceDocument,
    generated_CreateSourceGroupDocument as CreateSourceGroupDocument,
    generated_CreateSourceGroupMutation as CreateSourceGroupMutation,
    generated_CreateSourceGroupMutationVariables as CreateSourceGroupMutationVariables,
    generated_CreateSourceInput as CreateSourceInput,
    generated_CreateSourceMutation as CreateSourceMutation,
    generated_CreateSourceMutationVariables as CreateSourceMutationVariables,
    generated_CreateSupportConversationDocument as CreateSupportConversationDocument,
    generated_CreateSupportConversationMutation as CreateSupportConversationMutation,
    generated_CreateSupportConversationMutationVariables as CreateSupportConversationMutationVariables,
    generated_CreateTargetGroupDocument as CreateTargetGroupDocument,
    generated_CreateTargetGroupMutation as CreateTargetGroupMutation,
    generated_CreateTargetGroupMutationVariables as CreateTargetGroupMutationVariables,
    generated_CreateTargetInput as CreateTargetInput,
    generated_CreateTelegramTargetDocument as CreateTelegramTargetDocument,
    generated_CreateTelegramTargetMutation as CreateTelegramTargetMutation,
    generated_CreateTelegramTargetMutationVariables as CreateTelegramTargetMutationVariables,
    generated_CreateTenantConfigInput as CreateTenantConfigInput,
    generated_CreateTenantInput as CreateTenantInput,
    generated_CreateTenantUserDocument as CreateTenantUserDocument,
    generated_CreateTenantUserInput as CreateTenantUserInput,
    generated_CreateTenantUserMutation as CreateTenantUserMutation,
    generated_CreateTenantUserMutationVariables as CreateTenantUserMutationVariables,
    generated_CreateWeb3TargetInput as CreateWeb3TargetInput,
    generated_CreateWebhookTargetDocument as CreateWebhookTargetDocument,
    generated_CreateWebhookTargetInput as CreateWebhookTargetInput,
    generated_CreateWebhookTargetMutation as CreateWebhookTargetMutation,
    generated_CreateWebhookTargetMutationVariables as CreateWebhookTargetMutationVariables,
    generated_CursorEntry as CursorEntry,
    generated_CustomHtmlPayloadInput as CustomHtmlPayloadInput,
    generated_CustomPluginStorageEntity as CustomPluginStorageEntity,
    generated_DAppSubscription as DAppSubscription,
    generated_DaoProposalChangedEventDetails as DaoProposalChangedEventDetails,
    generated_DappLogInInput as DappLogInInput,
    generated_DeactivateFusionSourceInput as DeactivateFusionSourceInput,
    generated_DeactivateFusionSourceResponse as DeactivateFusionSourceResponse,
    generated_DeleteAlertDocument as DeleteAlertDocument,
    generated_DeleteAlertMutation as DeleteAlertMutation,
    generated_DeleteAlertMutationVariables as DeleteAlertMutationVariables,
    generated_DeleteDirectPushAlertDocument as DeleteDirectPushAlertDocument,
    generated_DeleteDirectPushAlertInput as DeleteDirectPushAlertInput,
    generated_DeleteDirectPushAlertMutation as DeleteDirectPushAlertMutation,
    generated_DeleteDirectPushAlertMutationVariables as DeleteDirectPushAlertMutationVariables,
    generated_DeleteFusionSourceInput as DeleteFusionSourceInput,
    generated_DeleteFusionSourceResponse as DeleteFusionSourceResponse,
    generated_DeleteSourceGroupDocument as DeleteSourceGroupDocument,
    generated_DeleteSourceGroupMutation as DeleteSourceGroupMutation,
    generated_DeleteSourceGroupMutationVariables as DeleteSourceGroupMutationVariables,
    generated_DeleteTargetGroupDocument as DeleteTargetGroupDocument,
    generated_DeleteTargetGroupMutation as DeleteTargetGroupMutation,
    generated_DeleteTargetGroupMutationVariables as DeleteTargetGroupMutationVariables,
    generated_DeleteTargetInput as DeleteTargetInput,
    generated_DeleteTenantConfigInput as DeleteTenantConfigInput,
    generated_DeleteUserAlertDocument as DeleteUserAlertDocument,
    generated_DeleteUserAlertMutation as DeleteUserAlertMutation,
    generated_DeleteUserAlertMutationVariables as DeleteUserAlertMutationVariables,
    generated_DeleteWebhookTargetDocument as DeleteWebhookTargetDocument,
    generated_DeleteWebhookTargetMutation as DeleteWebhookTargetMutation,
    generated_DeleteWebhookTargetMutationVariables as DeleteWebhookTargetMutationVariables,
    generated_DirectTenantMessageEventDetails as DirectTenantMessageEventDetails,
    generated_DisconnectWalletInput as DisconnectWalletInput,
    generated_DiscordBotConfiguration as DiscordBotConfiguration,
    generated_DiscordTarget as DiscordTarget,
    generated_DiscordTargetFragmentFragment as DiscordTargetFragmentFragment,
    generated_DiscordTargetFragmentFragmentDoc as DiscordTargetFragmentFragmentDoc,
    generated_DiscordTargetStatus as DiscordTargetStatus,
    generated_EmailSenderDefaults as EmailSenderDefaults,
    generated_EmailSenderDomain as EmailSenderDomain,
    generated_EmailSenderDomainStatus as EmailSenderDomainStatus,
    generated_EmailTarget as EmailTarget,
    generated_EmailTargetFragmentFragment as EmailTargetFragmentFragment,
    generated_EmailTargetFragmentFragmentDoc as EmailTargetFragmentFragmentDoc,
    generated_EnableOrDisableMobileFcmTargetsInput as EnableOrDisableMobileFcmTargetsInput,
    generated_EnqueueOffChainEventInput as EnqueueOffChainEventInput,
    generated_EnqueueOffChainEventResult as EnqueueOffChainEventResult,
    generated_EphemeralStorageConnection as EphemeralStorageConnection,
    generated_EphemeralStorageEdge as EphemeralStorageEdge,
    generated_EphemeralStorageEntry as EphemeralStorageEntry,
    generated_EphemeralStorageEntryInput as EphemeralStorageEntryInput,
    generated_EphemeralStorageQueryInput as EphemeralStorageQueryInput,
    generated_EventDetails as EventDetails,
    generated_Exact as Exact,
    generated_FcmTarget as FcmTarget,
    generated_FcmTargetPlatform as FcmTargetPlatform,
    generated_FetchDataDocument as FetchDataDocument,
    generated_FetchDataQuery as FetchDataQuery,
    generated_FetchDataQueryVariables as FetchDataQueryVariables,
    generated_Filter as Filter,
    generated_FilterFragmentFragment as FilterFragmentFragment,
    generated_FilterFragmentFragmentDoc as FilterFragmentFragmentDoc,
    generated_FilterType as FilterType,
    generated_FindTenantConfigDocument as FindTenantConfigDocument,
    generated_FindTenantConfigInput as FindTenantConfigInput,
    generated_FindTenantConfigQuery as FindTenantConfigQuery,
    generated_FindTenantConfigQueryVariables as FindTenantConfigQueryVariables,
    generated_FusionBroadcastMessageInput as FusionBroadcastMessageInput,
    generated_FusionBroadcastMessageResult as FusionBroadcastMessageResult,
    generated_FusionCommunityManagerPreviewInput as FusionCommunityManagerPreviewInput,
    generated_FusionCommunityManagerPreviewResult as FusionCommunityManagerPreviewResult,
    generated_FusionEventCategory as FusionEventCategory,
    generated_FusionEventData as FusionEventData,
    generated_FusionEventRequiredParserVariables as FusionEventRequiredParserVariables,
    generated_FusionEventsConnection as FusionEventsConnection,
    generated_FusionEventsEdge as FusionEventsEdge,
    generated_FusionExecutionDetails as FusionExecutionDetails,
    generated_FusionExecutionLogDataType as FusionExecutionLogDataType,
    generated_FusionExecutionLogsConnection as FusionExecutionLogsConnection,
    generated_FusionExecutionLogsEdge as FusionExecutionLogsEdge,
    generated_FusionExecutionStatus as FusionExecutionStatus,
    generated_FusionExecutionType as FusionExecutionType,
    generated_FusionModuleData as FusionModuleData,
    generated_FusionModuleType as FusionModuleType,
    generated_FusionNotificationHistoryConnection as FusionNotificationHistoryConnection,
    generated_FusionNotificationHistoryEdge as FusionNotificationHistoryEdge,
    generated_FusionNotificationHistoryEntry as FusionNotificationHistoryEntry,
    generated_FusionNotificationHistoryEntryFragmentFragment as FusionNotificationHistoryEntryFragmentFragment,
    generated_FusionNotificationHistoryEntryFragmentFragmentDoc as FusionNotificationHistoryEntryFragmentFragmentDoc,
    generated_FusionSourceState as FusionSourceState,
    generated_FusionSourceWithCursor as FusionSourceWithCursor,
    generated_FusionSourcesConnection as FusionSourcesConnection,
    generated_FusionSourcesEdge as FusionSourcesEdge,
    generated_GenericEventAction as GenericEventAction,
    generated_GenericEventDetails as GenericEventDetails,
    generated_GenericEventIconHint as GenericEventIconHint,
    generated_GetAlertInput as GetAlertInput,
    generated_GetAlertsDocument as GetAlertsDocument,
    generated_GetAlertsQuery as GetAlertsQuery,
    generated_GetAlertsQueryVariables as GetAlertsQueryVariables,
    generated_GetBotsByTypeInput as GetBotsByTypeInput,
    generated_GetConfigurationForDappDocument as GetConfigurationForDappDocument,
    generated_GetConfigurationForDappInput as GetConfigurationForDappInput,
    generated_GetConfigurationForDappQuery as GetConfigurationForDappQuery,
    generated_GetConfigurationForDappQueryVariables as GetConfigurationForDappQueryVariables,
    generated_GetConnectedWalletsDocument as GetConnectedWalletsDocument,
    generated_GetConnectedWalletsInput as GetConnectedWalletsInput,
    generated_GetConnectedWalletsQuery as GetConnectedWalletsQuery,
    generated_GetConnectedWalletsQueryVariables as GetConnectedWalletsQueryVariables,
    generated_GetConversationInput as GetConversationInput,
    generated_GetConversationMessagesDocument as GetConversationMessagesDocument,
    generated_GetConversationMessagesInput as GetConversationMessagesInput,
    generated_GetConversationMessagesQuery as GetConversationMessagesQuery,
    generated_GetConversationMessagesQueryVariables as GetConversationMessagesQueryVariables,
    generated_GetDiscordTargetsDocument as GetDiscordTargetsDocument,
    generated_GetDiscordTargetsQuery as GetDiscordTargetsQuery,
    generated_GetDiscordTargetsQueryVariables as GetDiscordTargetsQueryVariables,
    generated_GetEmailTargetsDocument as GetEmailTargetsDocument,
    generated_GetEmailTargetsQuery as GetEmailTargetsQuery,
    generated_GetEmailTargetsQueryVariables as GetEmailTargetsQueryVariables,
    generated_GetFilterInput as GetFilterInput,
    generated_GetFiltersDocument as GetFiltersDocument,
    generated_GetFiltersQuery as GetFiltersQuery,
    generated_GetFiltersQueryVariables as GetFiltersQueryVariables,
    generated_GetFusionExecutionLogsInput as GetFusionExecutionLogsInput,
    generated_GetFusionModuleExecutionDetailsResult as GetFusionModuleExecutionDetailsResult,
    generated_GetFusionModulePutUrlResponse as GetFusionModulePutUrlResponse,
    generated_GetFusionNotificationHistoryDocument as GetFusionNotificationHistoryDocument,
    generated_GetFusionNotificationHistoryQuery as GetFusionNotificationHistoryQuery,
    generated_GetFusionNotificationHistoryQueryVariables as GetFusionNotificationHistoryQueryVariables,
    generated_GetFusionSourceDevParamsInput as GetFusionSourceDevParamsInput,
    generated_GetFusionSourceDevParamsResponse as GetFusionSourceDevParamsResponse,
    generated_GetFusionSourceExecutionDetailsResult as GetFusionSourceExecutionDetailsResult,
    generated_GetFusionSourcePutUrlResponse as GetFusionSourcePutUrlResponse,
    generated_GetFusionSourceStateInput as GetFusionSourceStateInput,
    generated_GetJabberMessagesInput as GetJabberMessagesInput,
    generated_GetMessageDeliveryStatisticsResult as GetMessageDeliveryStatisticsResult,
    generated_GetNotificationHistoryDocument as GetNotificationHistoryDocument,
    generated_GetNotificationHistoryQuery as GetNotificationHistoryQuery,
    generated_GetNotificationHistoryQueryVariables as GetNotificationHistoryQueryVariables,
    generated_GetPublicTopicsInput as GetPublicTopicsInput,
    generated_GetPublicUserTopicPostInput as GetPublicUserTopicPostInput,
    generated_GetSmsTargetsDocument as GetSmsTargetsDocument,
    generated_GetSmsTargetsQuery as GetSmsTargetsQuery,
    generated_GetSmsTargetsQueryVariables as GetSmsTargetsQueryVariables,
    generated_GetSourceConnectionDocument as GetSourceConnectionDocument,
    generated_GetSourceConnectionQuery as GetSourceConnectionQuery,
    generated_GetSourceConnectionQueryVariables as GetSourceConnectionQueryVariables,
    generated_GetSourceGroupInput as GetSourceGroupInput,
    generated_GetSourceGroupsDocument as GetSourceGroupsDocument,
    generated_GetSourceGroupsQuery as GetSourceGroupsQuery,
    generated_GetSourceGroupsQueryVariables as GetSourceGroupsQueryVariables,
    generated_GetSourceInput as GetSourceInput,
    generated_GetSourcesDocument as GetSourcesDocument,
    generated_GetSourcesInput as GetSourcesInput,
    generated_GetSourcesQuery as GetSourcesQuery,
    generated_GetSourcesQueryVariables as GetSourcesQueryVariables,
    generated_GetSupportedTargetTypesForDappInput as GetSupportedTargetTypesForDappInput,
    generated_GetTargetGroupInput as GetTargetGroupInput,
    generated_GetTargetGroupsDocument as GetTargetGroupsDocument,
    generated_GetTargetGroupsQuery as GetTargetGroupsQuery,
    generated_GetTargetGroupsQueryVariables as GetTargetGroupsQueryVariables,
    generated_GetTargetInput as GetTargetInput,
    generated_GetTelegramTargetsDocument as GetTelegramTargetsDocument,
    generated_GetTelegramTargetsQuery as GetTelegramTargetsQuery,
    generated_GetTelegramTargetsQueryVariables as GetTelegramTargetsQueryVariables,
    generated_GetTemplateDataInput as GetTemplateDataInput,
    generated_GetTemplateResponse as GetTemplateResponse,
    generated_GetTenantAvailableReportsResult as GetTenantAvailableReportsResult,
    generated_GetTenantConfigInput as GetTenantConfigInput,
    generated_GetTenantConnectedWalletDocument as GetTenantConnectedWalletDocument,
    generated_GetTenantConnectedWalletInput as GetTenantConnectedWalletInput,
    generated_GetTenantConnectedWalletQuery as GetTenantConnectedWalletQuery,
    generated_GetTenantConnectedWalletQueryVariables as GetTenantConnectedWalletQueryVariables,
    generated_GetTenantDeliveryReportRequestInput as GetTenantDeliveryReportRequestInput,
    generated_GetTenantDeliveryReportResult as GetTenantDeliveryReportResult,
    generated_GetTenantUserDocument as GetTenantUserDocument,
    generated_GetTenantUserQuery as GetTenantUserQuery,
    generated_GetTenantUserQueryVariables as GetTenantUserQueryVariables,
    generated_GetTopicsDocument as GetTopicsDocument,
    generated_GetTopicsQuery as GetTopicsQuery,
    generated_GetTopicsQueryVariables as GetTopicsQueryVariables,
    generated_GetTotalMessagesPerMonthByTenantResult as GetTotalMessagesPerMonthByTenantResult,
    generated_GetUnreadNotificationHistoryCountDocument as GetUnreadNotificationHistoryCountDocument,
    generated_GetUnreadNotificationHistoryCountQuery as GetUnreadNotificationHistoryCountQuery,
    generated_GetUnreadNotificationHistoryCountQueryVariables as GetUnreadNotificationHistoryCountQueryVariables,
    generated_GetUnreadNotificationHistoryCountResponse as GetUnreadNotificationHistoryCountResponse,
    generated_GetUserProfileInput as GetUserProfileInput,
    generated_GetUserSettingsDocument as GetUserSettingsDocument,
    generated_GetUserSettingsQuery as GetUserSettingsQuery,
    generated_GetUserSettingsQueryVariables as GetUserSettingsQueryVariables,
    generated_GetUsersByTopicResult as GetUsersByTopicResult,
    generated_GetWebhookTargetsDocument as GetWebhookTargetsDocument,
    generated_GetWebhookTargetsQuery as GetWebhookTargetsQuery,
    generated_GetWebhookTargetsQueryVariables as GetWebhookTargetsQueryVariables,
    generated_HealthValueOverThresholdEventDetails as HealthValueOverThresholdEventDetails,
    generated_Incremental as Incremental,
    generated_InputMaybe as InputMaybe,
    generated_JabberMessagesConnection as JabberMessagesConnection,
    generated_JabberMessagesEdge as JabberMessagesEdge,
    generated_JabberThreadsConnection as JabberThreadsConnection,
    generated_JabberThreadsEdge as JabberThreadsEdge,
    generated_JabberV1Message as JabberV1Message,
    generated_JabberV1Participant as JabberV1Participant,
    generated_JabberV1Thread as JabberV1Thread,
    generated_KeyValuePairOfStringAndInt32 as KeyValuePairOfStringAndInt32,
    generated_KeyValuePairOfStringAndMessageDetails as KeyValuePairOfStringAndMessageDetails,
    generated_KeyValuePairOfStringAndString as KeyValuePairOfStringAndString,
    generated_KeyValuePairOfStringAndStringInput as KeyValuePairOfStringAndStringInput,
    generated_KeyValuePairOfStringAndWalletBlockchainInput as KeyValuePairOfStringAndWalletBlockchainInput,
    generated_KeyValuePairOfTargetTypeAndDictionaryOfStringAndStringInput as KeyValuePairOfTargetTypeAndDictionaryOfStringAndStringInput,
    generated_KeyValuePairOfTargetTypeAndStringInput as KeyValuePairOfTargetTypeAndStringInput,
    generated_LeaveConversationInput as LeaveConversationInput,
    generated_ListTemplatesInput as ListTemplatesInput,
    generated_ListTemplatesResponse as ListTemplatesResponse,
    generated_LogInByEmailAddressInput as LogInByEmailAddressInput,
    generated_LogInByOAuthInput as LogInByOAuthInput,
    generated_LogInFromDappDocument as LogInFromDappDocument,
    generated_LogInFromDappMutation as LogInFromDappMutation,
    generated_LogInFromDappMutationVariables as LogInFromDappMutationVariables,
    generated_LogInFromServiceDocument as LogInFromServiceDocument,
    generated_LogInFromServiceMutation as LogInFromServiceMutation,
    generated_LogInFromServiceMutationVariables as LogInFromServiceMutationVariables,
    generated_MakeEmpty as MakeEmpty,
    generated_MakeMaybe as MakeMaybe,
    generated_MakeOptional as MakeOptional,
    generated_MarkFusionNotificationHistoryAsReadDocument as MarkFusionNotificationHistoryAsReadDocument,
    generated_MarkFusionNotificationHistoryAsReadInput as MarkFusionNotificationHistoryAsReadInput,
    generated_MarkFusionNotificationHistoryAsReadMutation as MarkFusionNotificationHistoryAsReadMutation,
    generated_MarkFusionNotificationHistoryAsReadMutationVariables as MarkFusionNotificationHistoryAsReadMutationVariables,
    generated_MarkNotificationsAsReadInput as MarkNotificationsAsReadInput,
    generated_Maybe as Maybe,
    generated_MessageDetails as MessageDetails,
    generated_MessageStats as MessageStats,
    generated_MessageType as MessageType,
    generated_MobilePushSettings as MobilePushSettings,
    generated_MobilePushSettingsInput as MobilePushSettingsInput,
    generated_NftAuctionChangedEventDetails as NftAuctionChangedEventDetails,
    generated_NftCollectionStats as NftCollectionStats,
    generated_NftCollectionsReportEventDetails as NftCollectionsReportEventDetails,
    generated_NftCollectionsReportType as NftCollectionsReportType,
    generated_NotifiMutation as NotifiMutation,
    generated_NotifiMutationActivateFusionModuleArgs as NotifiMutationActivateFusionModuleArgs,
    generated_NotifiMutationActivateFusionSourceArgs as NotifiMutationActivateFusionSourceArgs,
    generated_NotifiMutationAddBotArgs as NotifiMutationAddBotArgs,
    generated_NotifiMutationAddEmailSenderDomainArgs as NotifiMutationAddEmailSenderDomainArgs,
    generated_NotifiMutationAddFusionEventToFusionSourceArgs as NotifiMutationAddFusionEventToFusionSourceArgs,
    generated_NotifiMutationAddOrUpdateMobileFcmTargetArgs as NotifiMutationAddOrUpdateMobileFcmTargetArgs,
    generated_NotifiMutationAddSourceToSourceGroupArgs as NotifiMutationAddSourceToSourceGroupArgs,
    generated_NotifiMutationBatchBroadcastMessageArgs as NotifiMutationBatchBroadcastMessageArgs,
    generated_NotifiMutationBeginLogInByTransactionArgs as NotifiMutationBeginLogInByTransactionArgs,
    generated_NotifiMutationBroadcastMessageArgs as NotifiMutationBroadcastMessageArgs,
    generated_NotifiMutationCompleteLogInByQrCodeArgs as NotifiMutationCompleteLogInByQrCodeArgs,
    generated_NotifiMutationCompleteLogInByTransactionArgs as NotifiMutationCompleteLogInByTransactionArgs,
    generated_NotifiMutationConfirmEmailArgs as NotifiMutationConfirmEmailArgs,
    generated_NotifiMutationConnectWalletArgs as NotifiMutationConnectWalletArgs,
    generated_NotifiMutationCreateAlertArgs as NotifiMutationCreateAlertArgs,
    generated_NotifiMutationCreateArgs as NotifiMutationCreateArgs,
    generated_NotifiMutationCreateConversationArgs as NotifiMutationCreateConversationArgs,
    generated_NotifiMutationCreateDirectPushAlertArgs as NotifiMutationCreateDirectPushAlertArgs,
    generated_NotifiMutationCreateDiscordBotConfigurationArgs as NotifiMutationCreateDiscordBotConfigurationArgs,
    generated_NotifiMutationCreateDiscordTargetArgs as NotifiMutationCreateDiscordTargetArgs,
    generated_NotifiMutationCreateEmailTargetArgs as NotifiMutationCreateEmailTargetArgs,
    generated_NotifiMutationCreateFcmTargetArgs as NotifiMutationCreateFcmTargetArgs,
    generated_NotifiMutationCreateFusionEventArgs as NotifiMutationCreateFusionEventArgs,
    generated_NotifiMutationCreateFusionModuleArgs as NotifiMutationCreateFusionModuleArgs,
    generated_NotifiMutationCreateFusionSourceArgs as NotifiMutationCreateFusionSourceArgs,
    generated_NotifiMutationCreateOrUpdateUserArgs as NotifiMutationCreateOrUpdateUserArgs,
    generated_NotifiMutationCreateSmsTargetArgs as NotifiMutationCreateSmsTargetArgs,
    generated_NotifiMutationCreateSourceArgs as NotifiMutationCreateSourceArgs,
    generated_NotifiMutationCreateSourceGroupArgs as NotifiMutationCreateSourceGroupArgs,
    generated_NotifiMutationCreateTargetGroupArgs as NotifiMutationCreateTargetGroupArgs,
    generated_NotifiMutationCreateTelegramTargetArgs as NotifiMutationCreateTelegramTargetArgs,
    generated_NotifiMutationCreateTenantArgs as NotifiMutationCreateTenantArgs,
    generated_NotifiMutationCreateTenantConfigArgs as NotifiMutationCreateTenantConfigArgs,
    generated_NotifiMutationCreateTenantUserArgs as NotifiMutationCreateTenantUserArgs,
    generated_NotifiMutationCreateWeb3TargetArgs as NotifiMutationCreateWeb3TargetArgs,
    generated_NotifiMutationCreateWebhookTargetArgs as NotifiMutationCreateWebhookTargetArgs,
    generated_NotifiMutationDeactivateFusionSourceArgs as NotifiMutationDeactivateFusionSourceArgs,
    generated_NotifiMutationDeleteAlertArgs as NotifiMutationDeleteAlertArgs,
    generated_NotifiMutationDeleteDAppSubscriptionArgs as NotifiMutationDeleteDAppSubscriptionArgs,
    generated_NotifiMutationDeleteDirectPushAlertArgs as NotifiMutationDeleteDirectPushAlertArgs,
    generated_NotifiMutationDeleteDiscordTargetArgs as NotifiMutationDeleteDiscordTargetArgs,
    generated_NotifiMutationDeleteEmailTargetArgs as NotifiMutationDeleteEmailTargetArgs,
    generated_NotifiMutationDeleteFcmTargetArgs as NotifiMutationDeleteFcmTargetArgs,
    generated_NotifiMutationDeleteFusionEventArgs as NotifiMutationDeleteFusionEventArgs,
    generated_NotifiMutationDeleteFusionModuleArgs as NotifiMutationDeleteFusionModuleArgs,
    generated_NotifiMutationDeleteFusionSourceArgs as NotifiMutationDeleteFusionSourceArgs,
    generated_NotifiMutationDeleteSmsTargetArgs as NotifiMutationDeleteSmsTargetArgs,
    generated_NotifiMutationDeleteSourceArgs as NotifiMutationDeleteSourceArgs,
    generated_NotifiMutationDeleteSourceGroupArgs as NotifiMutationDeleteSourceGroupArgs,
    generated_NotifiMutationDeleteTargetGroupArgs as NotifiMutationDeleteTargetGroupArgs,
    generated_NotifiMutationDeleteTelegramTargetArgs as NotifiMutationDeleteTelegramTargetArgs,
    generated_NotifiMutationDeleteTenantConfigArgs as NotifiMutationDeleteTenantConfigArgs,
    generated_NotifiMutationDeleteUserAlertArgs as NotifiMutationDeleteUserAlertArgs,
    generated_NotifiMutationDeleteWeb3TargetArgs as NotifiMutationDeleteWeb3TargetArgs,
    generated_NotifiMutationDeleteWebhookTargetArgs as NotifiMutationDeleteWebhookTargetArgs,
    generated_NotifiMutationDisconnectWalletArgs as NotifiMutationDisconnectWalletArgs,
    generated_NotifiMutationEnableOrDisableMobileFcmTargetsArgs as NotifiMutationEnableOrDisableMobileFcmTargetsArgs,
    generated_NotifiMutationEnqueueOffChainEventArgs as NotifiMutationEnqueueOffChainEventArgs,
    generated_NotifiMutationFusionBroadcastMessageArgs as NotifiMutationFusionBroadcastMessageArgs,
    generated_NotifiMutationGenerateEmailConfirmationTokenArgs as NotifiMutationGenerateEmailConfirmationTokenArgs,
    generated_NotifiMutationLeaveConversationArgs as NotifiMutationLeaveConversationArgs,
    generated_NotifiMutationLogInArgs as NotifiMutationLogInArgs,
    generated_NotifiMutationLogInByEmailAddressArgs as NotifiMutationLogInByEmailAddressArgs,
    generated_NotifiMutationLogInByOAuthArgs as NotifiMutationLogInByOAuthArgs,
    generated_NotifiMutationLogInFromDappArgs as NotifiMutationLogInFromDappArgs,
    generated_NotifiMutationLogInFromServiceArgs as NotifiMutationLogInFromServiceArgs,
    generated_NotifiMutationMarkFusionNotificationHistoryAsReadArgs as NotifiMutationMarkFusionNotificationHistoryAsReadArgs,
    generated_NotifiMutationMarkNotificationsAsReadArgs as NotifiMutationMarkNotificationsAsReadArgs,
    generated_NotifiMutationPublishFusionMessageArgs as NotifiMutationPublishFusionMessageArgs,
    generated_NotifiMutationRemoveBotArgs as NotifiMutationRemoveBotArgs,
    generated_NotifiMutationRemoveEmailSenderDomainArgs as NotifiMutationRemoveEmailSenderDomainArgs,
    generated_NotifiMutationRemoveFusionEventFromFusionSourceArgs as NotifiMutationRemoveFusionEventFromFusionSourceArgs,
    generated_NotifiMutationRemoveSourceFromSourceGroupArgs as NotifiMutationRemoveSourceFromSourceGroupArgs,
    generated_NotifiMutationRemoveTenantUserRolesArgs as NotifiMutationRemoveTenantUserRolesArgs,
    generated_NotifiMutationResetPasswordArgs as NotifiMutationResetPasswordArgs,
    generated_NotifiMutationSendConversationMessageArgs as NotifiMutationSendConversationMessageArgs,
    generated_NotifiMutationSendEmailTargetVerificationRequestArgs as NotifiMutationSendEmailTargetVerificationRequestArgs,
    generated_NotifiMutationSendMessageArgs as NotifiMutationSendMessageArgs,
    generated_NotifiMutationSendResetPasswordEmailArgs as NotifiMutationSendResetPasswordEmailArgs,
    generated_NotifiMutationUnsubscribeArgs as NotifiMutationUnsubscribeArgs,
    generated_NotifiMutationUpdateBotArgs as NotifiMutationUpdateBotArgs,
    generated_NotifiMutationUpdateCorsPolicyArgs as NotifiMutationUpdateCorsPolicyArgs,
    generated_NotifiMutationUpdateDefaultEmailSenderDisplayNameArgs as NotifiMutationUpdateDefaultEmailSenderDisplayNameArgs,
    generated_NotifiMutationUpdateDefaultEmailSenderDomainArgs as NotifiMutationUpdateDefaultEmailSenderDomainArgs,
    generated_NotifiMutationUpdateDefaultEmailSenderNameArgs as NotifiMutationUpdateDefaultEmailSenderNameArgs,
    generated_NotifiMutationUpdateDiscordBotConfigurationArgs as NotifiMutationUpdateDiscordBotConfigurationArgs,
    generated_NotifiMutationUpdateEphemeralStorageArgs as NotifiMutationUpdateEphemeralStorageArgs,
    generated_NotifiMutationUpdateFusionEventArgs as NotifiMutationUpdateFusionEventArgs,
    generated_NotifiMutationUpdateFusionSourceArgs as NotifiMutationUpdateFusionSourceArgs,
    generated_NotifiMutationUpdatePersistentStorageArgs as NotifiMutationUpdatePersistentStorageArgs,
    generated_NotifiMutationUpdateUserProfileArgs as NotifiMutationUpdateUserProfileArgs,
    generated_NotifiMutationUpdateUserSettingsArgs as NotifiMutationUpdateUserSettingsArgs,
    generated_NotifiMutationUploadTemplateArgs as NotifiMutationUploadTemplateArgs,
    generated_NotifiMutationVerifyDiscordTargetArgs as NotifiMutationVerifyDiscordTargetArgs,
    generated_NotifiMutationVerifyTargetArgs as NotifiMutationVerifyTargetArgs,
    generated_NotifiQuery as NotifiQuery,
    generated_NotifiQueryAlertArgs as NotifiQueryAlertArgs,
    generated_NotifiQueryBotsByTypeArgs as NotifiQueryBotsByTypeArgs,
    generated_NotifiQueryConfigurationForDappArgs as NotifiQueryConfigurationForDappArgs,
    generated_NotifiQueryConnectedWalletArgs as NotifiQueryConnectedWalletArgs,
    generated_NotifiQueryConversationArgs as NotifiQueryConversationArgs,
    generated_NotifiQueryConversationMessagesArgs as NotifiQueryConversationMessagesArgs,
    generated_NotifiQueryConversationsArgs as NotifiQueryConversationsArgs,
    generated_NotifiQueryDiscordTargetArgs as NotifiQueryDiscordTargetArgs,
    generated_NotifiQueryEmailTargetArgs as NotifiQueryEmailTargetArgs,
    generated_NotifiQueryEphemeralStorageArgs as NotifiQueryEphemeralStorageArgs,
    generated_NotifiQueryFcmTargetsArgs as NotifiQueryFcmTargetsArgs,
    generated_NotifiQueryFilterArgs as NotifiQueryFilterArgs,
    generated_NotifiQueryFindTenantConfigArgs as NotifiQueryFindTenantConfigArgs,
    generated_NotifiQueryFusionEventsArgs as NotifiQueryFusionEventsArgs,
    generated_NotifiQueryFusionExecutionLogsArgs as NotifiQueryFusionExecutionLogsArgs,
    generated_NotifiQueryFusionModulePutUrlArgs as NotifiQueryFusionModulePutUrlArgs,
    generated_NotifiQueryFusionNotificationHistoryArgs as NotifiQueryFusionNotificationHistoryArgs,
    generated_NotifiQueryFusionPreviewCommunityManagerContentArgs as NotifiQueryFusionPreviewCommunityManagerContentArgs,
    generated_NotifiQueryFusionSourceDevParamsArgs as NotifiQueryFusionSourceDevParamsArgs,
    generated_NotifiQueryFusionSourcePutUrlArgs as NotifiQueryFusionSourcePutUrlArgs,
    generated_NotifiQueryFusionSourceStateArgs as NotifiQueryFusionSourceStateArgs,
    generated_NotifiQueryFusionSourcesArgs as NotifiQueryFusionSourcesArgs,
    generated_NotifiQueryJabberMessagesArgs as NotifiQueryJabberMessagesArgs,
    generated_NotifiQueryJabberThreadsArgs as NotifiQueryJabberThreadsArgs,
    generated_NotifiQueryListTemplatesArgs as NotifiQueryListTemplatesArgs,
    generated_NotifiQueryMobilePushSettingsArgs as NotifiQueryMobilePushSettingsArgs,
    generated_NotifiQueryNotificationByIdArgs as NotifiQueryNotificationByIdArgs,
    generated_NotifiQueryNotificationHistoryArgs as NotifiQueryNotificationHistoryArgs,
    generated_NotifiQueryPersistentStorageArgs as NotifiQueryPersistentStorageArgs,
    generated_NotifiQueryPreviewCommunityManagerContentArgs as NotifiQueryPreviewCommunityManagerContentArgs,
    generated_NotifiQueryPublicTopicsArgs as NotifiQueryPublicTopicsArgs,
    generated_NotifiQueryPublicUserTopicPostArgs as NotifiQueryPublicUserTopicPostArgs,
    generated_NotifiQueryResolveSnsFromAddressArgs as NotifiQueryResolveSnsFromAddressArgs,
    generated_NotifiQuerySmsTargetArgs as NotifiQuerySmsTargetArgs,
    generated_NotifiQuerySourceArgs as NotifiQuerySourceArgs,
    generated_NotifiQuerySourceGroupArgs as NotifiQuerySourceGroupArgs,
    generated_NotifiQuerySourcesArgs as NotifiQuerySourcesArgs,
    generated_NotifiQuerySupportedTargetTypesForDappArgs as NotifiQuerySupportedTargetTypesForDappArgs,
    generated_NotifiQueryTargetGroupArgs as NotifiQueryTargetGroupArgs,
    generated_NotifiQueryTelegramTargetArgs as NotifiQueryTelegramTargetArgs,
    generated_NotifiQueryTemplateDataArgs as NotifiQueryTemplateDataArgs,
    generated_NotifiQueryTenantConfigsArgs as NotifiQueryTenantConfigsArgs,
    generated_NotifiQueryTenantConnectedWalletArgs as NotifiQueryTenantConnectedWalletArgs,
    generated_NotifiQueryTenantDeliveryReportArgs as NotifiQueryTenantDeliveryReportArgs,
    generated_NotifiQueryTenantFeatureFlagArgs as NotifiQueryTenantFeatureFlagArgs,
    generated_NotifiQueryTenantUserArgs as NotifiQueryTenantUserArgs,
    generated_NotifiQueryTenantUsersArgs as NotifiQueryTenantUsersArgs,
    generated_NotifiQueryTopicsArgs as NotifiQueryTopicsArgs,
    generated_NotifiQueryUserProfileArgs as NotifiQueryUserProfileArgs,
    generated_NotifiQueryWebhookTargetArgs as NotifiQueryWebhookTargetArgs,
    generated_NotifiSubscription as NotifiSubscription,
    generated_NotificationCategory as NotificationCategory,
    generated_NotificationHistoryConnection as NotificationHistoryConnection,
    generated_NotificationHistoryEdge as NotificationHistoryEdge,
    generated_NotificationHistoryEntry as NotificationHistoryEntry,
    generated_NotificationHistoryEntryFragmentFragment as NotificationHistoryEntryFragmentFragment,
    generated_NotificationHistoryEntryFragmentFragmentDoc as NotificationHistoryEntryFragmentFragmentDoc,
    generated_NotificationHistoryFilterInput as NotificationHistoryFilterInput,
    generated_NotificationHistoryReadState as NotificationHistoryReadState,
    generated_NotificationTarget as NotificationTarget,
    generated_OAuthIssuer as OAuthIssuer,
    generated_PageInfo as PageInfo,
    generated_PageInfoFragmentFragment as PageInfoFragmentFragment,
    generated_PageInfoFragmentFragmentDoc as PageInfoFragmentFragmentDoc,
    generated_ParticipantFragment as ParticipantFragment,
    generated_ParticipantFragmentDoc as ParticipantFragmentDoc,
    generated_PersistentStorageConnection as PersistentStorageConnection,
    generated_PersistentStorageEdge as PersistentStorageEdge,
    generated_PersistentStorageEntry as PersistentStorageEntry,
    generated_PersistentStorageEntryInput as PersistentStorageEntryInput,
    generated_PersistentStorageQueryInput as PersistentStorageQueryInput,
    generated_PublicTopicsConnection as PublicTopicsConnection,
    generated_PublicTopicsEdge as PublicTopicsEdge,
    generated_PublicUserTopicPost as PublicUserTopicPost,
    generated_PublicUserTopicPostConnection as PublicUserTopicPostConnection,
    generated_PublicUserTopicPostEdge as PublicUserTopicPostEdge,
    generated_PublishFusionMessageDocument as PublishFusionMessageDocument,
    generated_PublishFusionMessageInput as PublishFusionMessageInput,
    generated_PublishFusionMessageMutation as PublishFusionMessageMutation,
    generated_PublishFusionMessageMutationVariables as PublishFusionMessageMutationVariables,
    generated_PublishFusionMessageResult as PublishFusionMessageResult,
    generated_RefreshAuthorizationDocument as RefreshAuthorizationDocument,
    generated_RefreshAuthorizationMutation as RefreshAuthorizationMutation,
    generated_RefreshAuthorizationMutationVariables as RefreshAuthorizationMutationVariables,
    generated_RemoveBotInput as RemoveBotInput,
    generated_RemoveEmailSenderDomainInput as RemoveEmailSenderDomainInput,
    generated_RemoveFusionEventFromFusionSourceInput as RemoveFusionEventFromFusionSourceInput,
    generated_RemoveFusionEventFromFusionSourceResponse as RemoveFusionEventFromFusionSourceResponse,
    generated_RemoveSourceFromSourceGroupDocument as RemoveSourceFromSourceGroupDocument,
    generated_RemoveSourceFromSourceGroupInput as RemoveSourceFromSourceGroupInput,
    generated_RemoveSourceFromSourceGroupMutation as RemoveSourceFromSourceGroupMutation,
    generated_RemoveSourceFromSourceGroupMutationVariables as RemoveSourceFromSourceGroupMutationVariables,
    generated_RemoveTenantUserRolesInput as RemoveTenantUserRolesInput,
    generated_RequiredParserVariableType as RequiredParserVariableType,
    generated_RequiredVariable as RequiredVariable,
    generated_Scalars as Scalars,
    generated_Sdk as Sdk,
    generated_SdkFunctionWrapper as SdkFunctionWrapper,
    generated_SendConversationMessageDocument as SendConversationMessageDocument,
    generated_SendConversationMessageInput as SendConversationMessageInput,
    generated_SendConversationMessageMutation as SendConversationMessageMutation,
    generated_SendConversationMessageMutationVariables as SendConversationMessageMutationVariables,
    generated_SendEmailTargetVerificationRequestDocument as SendEmailTargetVerificationRequestDocument,
    generated_SendEmailTargetVerificationRequestMutation as SendEmailTargetVerificationRequestMutation,
    generated_SendEmailTargetVerificationRequestMutationVariables as SendEmailTargetVerificationRequestMutationVariables,
    generated_SendMessageDocument as SendMessageDocument,
    generated_SendMessageInput as SendMessageInput,
    generated_SendMessageMutation as SendMessageMutation,
    generated_SendMessageMutationVariables as SendMessageMutationVariables,
    generated_SendTargetConfirmationRequestInput as SendTargetConfirmationRequestInput,
    generated_ServiceIdentifier as ServiceIdentifier,
    generated_ServiceLogInInput as ServiceLogInInput,
    generated_SmsTarget as SmsTarget,
    generated_SmsTargetFragmentFragment as SmsTargetFragmentFragment,
    generated_SmsTargetFragmentFragmentDoc as SmsTargetFragmentFragmentDoc,
    generated_Source as Source,
    generated_SourceFragmentFragment as SourceFragmentFragment,
    generated_SourceFragmentFragmentDoc as SourceFragmentFragmentDoc,
    generated_SourceGroup as SourceGroup,
    generated_SourceGroupFragmentFragment as SourceGroupFragmentFragment,
    generated_SourceGroupFragmentFragmentDoc as SourceGroupFragmentFragmentDoc,
    generated_SourceGroupInput as SourceGroupInput,
    generated_SourceType as SourceType,
    generated_SourcesConnection as SourcesConnection,
    generated_SourcesEdge as SourcesEdge,
    generated_StorageType as StorageType,
    generated_SubscribeableTopic as SubscribeableTopic,
    generated_TargetGroup as TargetGroup,
    generated_TargetGroupFragmentFragment as TargetGroupFragmentFragment,
    generated_TargetGroupFragmentFragmentDoc as TargetGroupFragmentFragmentDoc,
    generated_TargetGroupInput as TargetGroupInput,
    generated_TargetType as TargetType,
    generated_TelegramTarget as TelegramTarget,
    generated_TelegramTargetFragmentFragment as TelegramTargetFragmentFragment,
    generated_TelegramTargetFragmentFragmentDoc as TelegramTargetFragmentFragmentDoc,
    generated_Template as Template,
    generated_TemplateType as TemplateType,
    generated_Tenant as Tenant,
    generated_TenantConfig as TenantConfig,
    generated_TenantConfigFragmentFragment as TenantConfigFragmentFragment,
    generated_TenantConfigFragmentFragmentDoc as TenantConfigFragmentFragmentDoc,
    generated_TenantConfigType as TenantConfigType,
    generated_TenantConfigsConnection as TenantConfigsConnection,
    generated_TenantConfigsEdge as TenantConfigsEdge,
    generated_TenantConnectedWallet as TenantConnectedWallet,
    generated_TenantConnectedWalletConnection as TenantConnectedWalletConnection,
    generated_TenantConnectedWalletEdge as TenantConnectedWalletEdge,
    generated_TenantConnectedWalletFragmentFragment as TenantConnectedWalletFragmentFragment,
    generated_TenantConnectedWalletFragmentFragmentDoc as TenantConnectedWalletFragmentFragmentDoc,
    generated_TenantEntityChangeEvent as TenantEntityChangeEvent,
    generated_TenantFeatureFlag as TenantFeatureFlag,
    generated_TenantFeatureFlagInput as TenantFeatureFlagInput,
    generated_TenantTargetGroup as TenantTargetGroup,
    generated_TenantUser as TenantUser,
    generated_TenantUserAlert as TenantUserAlert,
    generated_TenantUserAlertFragmentFragment as TenantUserAlertFragmentFragment,
    generated_TenantUserAlertFragmentFragmentDoc as TenantUserAlertFragmentFragmentDoc,
    generated_TenantUserConnection as TenantUserConnection,
    generated_TenantUserEdge as TenantUserEdge,
    generated_TenantUserFragmentFragment as TenantUserFragmentFragment,
    generated_TenantUserFragmentFragmentDoc as TenantUserFragmentFragmentDoc,
    generated_TenantUsersConnection as TenantUsersConnection,
    generated_TenantUsersEdge as TenantUsersEdge,
    generated_TenantUsersInput as TenantUsersInput,
    generated_Timestamp as Timestamp,
    generated_TopicsConnection as TopicsConnection,
    generated_TopicsEdge as TopicsEdge,
    generated_UnsubscribeInputTypeInput as UnsubscribeInputTypeInput,
    generated_UnsubscribeResult as UnsubscribeResult,
    generated_UpdateBotInput as UpdateBotInput,
    generated_UpdateCorsPolicyInput as UpdateCorsPolicyInput,
    generated_UpdateDefaultEmailSenderDisplayNameInput as UpdateDefaultEmailSenderDisplayNameInput,
    generated_UpdateDefaultEmailSenderDomainInput as UpdateDefaultEmailSenderDomainInput,
    generated_UpdateDefaultEmailSenderNameInput as UpdateDefaultEmailSenderNameInput,
    generated_UpdateDiscordBotConfigurationInput as UpdateDiscordBotConfigurationInput,
    generated_UpdateEphemeralStorageInput as UpdateEphemeralStorageInput,
    generated_UpdateEphemeralStorageResult as UpdateEphemeralStorageResult,
    generated_UpdateFusionEventInput as UpdateFusionEventInput,
    generated_UpdateFusionSourceInput as UpdateFusionSourceInput,
    generated_UpdateFusionSourceResponse as UpdateFusionSourceResponse,
    generated_UpdatePersistentStorageInput as UpdatePersistentStorageInput,
    generated_UpdatePersistentStorageResult as UpdatePersistentStorageResult,
    generated_UpdateSourceGroupDocument as UpdateSourceGroupDocument,
    generated_UpdateSourceGroupMutation as UpdateSourceGroupMutation,
    generated_UpdateSourceGroupMutationVariables as UpdateSourceGroupMutationVariables,
    generated_UpdateTargetGroupDocument as UpdateTargetGroupDocument,
    generated_UpdateTargetGroupMutation as UpdateTargetGroupMutation,
    generated_UpdateTargetGroupMutationVariables as UpdateTargetGroupMutationVariables,
    generated_UpdateUserSettingsDocument as UpdateUserSettingsDocument,
    generated_UpdateUserSettingsMutation as UpdateUserSettingsMutation,
    generated_UpdateUserSettingsMutationVariables as UpdateUserSettingsMutationVariables,
    generated_User as User,
    generated_UserCreatedEvent as UserCreatedEvent,
    generated_UserFeatureFlags as UserFeatureFlags,
    generated_UserFragmentFragment as UserFragmentFragment,
    generated_UserFragmentFragmentDoc as UserFragmentFragmentDoc,
    generated_UserInput as UserInput,
    generated_UserProfile as UserProfile,
    generated_UserProfileInput as UserProfileInput,
    generated_UserSettings as UserSettings,
    generated_UserSettingsInput as UserSettingsInput,
    generated_UserTopic as UserTopic,
    generated_UserTopicFragmentFragment as UserTopicFragmentFragment,
    generated_UserTopicFragmentFragmentDoc as UserTopicFragmentFragmentDoc,
    generated_VerifyDiscordTargetInput as VerifyDiscordTargetInput,
    generated_VerifyTargetInput as VerifyTargetInput,
    generated_WalletBlockchain as WalletBlockchain,
    generated_WalletsActivityReportEventDetails as WalletsActivityReportEventDetails,
    generated_WalletsActivityReportType as WalletsActivityReportType,
    generated_WalletsActivityReportWallet as WalletsActivityReportWallet,
    generated_Web3Target as Web3Target,
    generated_Web3TargetProtocol as Web3TargetProtocol,
    generated_WebhookPayloadFormat as WebhookPayloadFormat,
    generated_WebhookStatus as WebhookStatus,
    generated_WebhookTarget as WebhookTarget,
    generated_WebhookTargetFragmentFragment as WebhookTargetFragmentFragment,
    generated_WebhookTargetFragmentFragmentDoc as WebhookTargetFragmentFragmentDoc,
    generated_getSdk as getSdk,
  };
}

declare type AddSourceToSourceGroupService = Readonly<{
    addSourceToSourceGroup: (variables: AddSourceToSourceGroupMutationVariables) => Promise<AddSourceToSourceGroupMutation>;
}>;

declare type BeginLogInByTransactionService = Readonly<{
    beginLogInByTransaction: (variables: BeginLogInByTransactionMutationVariables) => Promise<BeginLogInByTransactionMutation>;
}>;

declare type BroadcastMessageService = Readonly<{
    broadcastMessage: (variables: BroadcastMessageMutationVariables) => Promise<BroadcastMessageMutation>;
}>;

declare type CompleteLogInByTransactionService = Readonly<{
    completeLogInByTransaction: (variables: CompleteLogInByTransactionMutationVariables) => Promise<CompleteLogInByTransactionMutation>;
}>;

declare type CreateAlertService = Readonly<{
    createAlert: (variables: CreateAlertMutationVariables) => Promise<CreateAlertMutation>;
}>;

declare type CreateDirectPushAlertService = Readonly<{
    createDirectPushAlert: (variables: CreateDirectPushAlertMutationVariables) => Promise<CreateDirectPushAlertMutation>;
}>;

declare type CreateDiscordTargetService = Readonly<{
    createDiscordTarget: (variables: CreateDiscordTargetMutationVariables) => Promise<CreateDiscordTargetMutation>;
}>;

declare type CreateEmailTargetService = Readonly<{
    createEmailTarget: (variables: CreateEmailTargetMutationVariables) => Promise<CreateEmailTargetMutation>;
}>;

declare type CreateSmsTargetService = Readonly<{
    createSmsTarget: (variables: CreateSmsTargetMutationVariables) => Promise<CreateSmsTargetMutation>;
}>;

declare type CreateSourceService = Readonly<{
    createSource: (variables: CreateSourceMutationVariables) => Promise<CreateSourceMutation>;
}>;

declare type CreateSourceGroupService = Readonly<{
    createSourceGroup: (variables: CreateSourceGroupMutationVariables) => Promise<CreateSourceGroupMutation>;
}>;

declare type CreateTargetGroupService = Readonly<{
    createTargetGroup: (variables: CreateTargetGroupMutationVariables) => Promise<CreateTargetGroupMutation>;
}>;

declare type CreateTelegramTargetService = Readonly<{
    createTelegramTarget: (variables: CreateTelegramTargetMutationVariables) => Promise<CreateTelegramTargetMutation>;
}>;

declare type CreateTenantUserService = Readonly<{
    createTenantUser: (variables: CreateTenantUserMutationVariables) => Promise<CreateTenantUserMutation>;
}>;

declare type CreateWebhookTargetService = Readonly<{
    createWebhookTarget: (variables: CreateWebhookTargetMutationVariables) => Promise<CreateWebhookTargetMutation>;
}>;

declare type DeleteAlertService = Readonly<{
    deleteAlert: (variables: DeleteAlertMutationVariables) => Promise<DeleteAlertMutation>;
}>;

declare type DeleteDirectPushAlertService = Readonly<{
    deleteDirectPushAlert: (variables: DeleteDirectPushAlertMutationVariables) => Promise<DeleteDirectPushAlertMutation>;
}>;

declare type DeleteUserAlertService = Readonly<{
    deleteUserAlert: (variables: DeleteUserAlertMutationVariables) => Promise<DeleteUserAlertMutation>;
}>;

declare type DeleteSourceGroupService = Readonly<{
    deleteSourceGroup: (variables: DeleteSourceGroupMutationVariables) => Promise<DeleteSourceGroupMutation>;
}>;

declare type DeleteTargetGroupService = Readonly<{
    deleteTargetGroup: (variables: DeleteTargetGroupMutationVariables) => Promise<DeleteTargetGroupMutation>;
}>;

declare type DeleteWebhookTargetService = Readonly<{
    deleteWebhookTarget: (variables: DeleteWebhookTargetMutationVariables) => Promise<DeleteWebhookTargetMutation>;
}>;

declare type FindTenantConfigService = Readonly<{
    findTenantConfig: (variables: FindTenantConfigQueryVariables) => Promise<FindTenantConfigQuery>;
}>;

declare type GetAlertsService = Readonly<{
    getAlerts: (variables: GetAlertsQueryVariables) => Promise<GetAlertsQuery>;
}>;

declare type GetConfigurationForDappService = Readonly<{
    getConfigurationForDapp: (variables: GetConfigurationForDappQueryVariables) => Promise<GetConfigurationForDappQuery>;
}>;

declare type GetEmailTargetsService = Readonly<{
    getEmailTargets: (variables: GetEmailTargetsQueryVariables) => Promise<GetEmailTargetsQuery>;
}>;

declare type GetFiltersService = Readonly<{
    getFilters: (variables: GetFiltersQueryVariables) => Promise<GetFiltersQuery>;
}>;

declare type GetNotificationHistoryService = Readonly<{
    getNotificationHistory: (variables: GetNotificationHistoryQueryVariables) => Promise<GetNotificationHistoryQuery>;
}>;

declare type GetSmsTargetsService = Readonly<{
    getSmsTargets: (variables: GetSmsTargetsQueryVariables) => Promise<GetSmsTargetsQuery>;
}>;

declare type GetSourceConnectionService = Readonly<{
    getSourceConnection: (variables: GetSourceConnectionQueryVariables) => Promise<GetSourceConnectionQuery>;
}>;

declare type GetSourceGroupsService = Readonly<{
    getSourceGroups: (variables: GetSourceGroupsQueryVariables) => Promise<GetSourceGroupsQuery>;
}>;

declare type GetSourcesService = Readonly<{
    getSources: (variables: GetSourcesQueryVariables) => Promise<GetSourcesQuery>;
}>;

declare type GetTargetGroupsService = Readonly<{
    getTargetGroups: (variables: GetTargetGroupsQueryVariables) => Promise<GetTargetGroupsQuery>;
}>;

declare type GetTelegramTargetsService = Readonly<{
    getTelegramTargets: (variables: GetTelegramTargetsQueryVariables) => Promise<GetTelegramTargetsQuery>;
}>;

declare type GetTenantConnectedWalletsService = Readonly<{
    getTenantConnectedWallets: (variables: GetTenantConnectedWalletQueryVariables) => Promise<GetTenantConnectedWalletQuery>;
}>;

declare type GetTenantUserService = Readonly<{
    getTenantUser: (variables: GetTenantUserQueryVariables) => Promise<GetTenantUserQuery>;
}>;

declare type GetTopicsService = Readonly<{
    getTopics: (variables: GetTopicsQueryVariables) => Promise<GetTopicsQuery>;
}>;

declare type GetWebhookTargetsService = Readonly<{
    getWebhookTargets: (variables: GetWebhookTargetsQueryVariables) => Promise<GetWebhookTargetsQuery>;
}>;

declare type LogInFromDappService = Readonly<{
    logInFromDapp: (variables: LogInFromDappMutationVariables) => Promise<LogInFromDappMutation>;
}>;

declare type LogInFromServiceService = Readonly<{
    logInFromService: (variables: LogInFromServiceMutationVariables) => Promise<LogInFromServiceMutation>;
}>;

declare type PublishFusionMessageService = Readonly<{
    publishFusionMessage: (variables: PublishFusionMessageMutationVariables) => Promise<PublishFusionMessageMutation>;
}>;

declare type RefreshAuthorizationService = Readonly<{
    refreshAuthorization: (variables: RefreshAuthorizationMutationVariables) => Promise<RefreshAuthorizationMutation>;
}>;

declare type RemoveSourceFromSourceGroupService = Readonly<{
    removeSourceFromSourceGroup: (variables: RemoveSourceFromSourceGroupMutationVariables) => Promise<RemoveSourceFromSourceGroupMutation>;
}>;

declare type SendMessageService = Readonly<{
    sendMessage: (variables: SendMessageMutationVariables) => Promise<SendMessageMutation>;
}>;

declare type SendEmailTargetVerificationRequestService = Readonly<{
    sendEmailTargetVerificationRequest: (variables: SendEmailTargetVerificationRequestMutationVariables) => Promise<SendEmailTargetVerificationRequestMutation>;
}>;

declare type UpdateSourceGroupService = Readonly<{
    updateSourceGroup: (variables: UpdateSourceGroupMutationVariables) => Promise<UpdateSourceGroupMutation>;
}>;

declare type UpdateTargetGroupService = Readonly<{
    updateTargetGroup: (variables: UpdateTargetGroupMutationVariables) => Promise<UpdateTargetGroupMutation>;
}>;

declare type GetDiscordTargetsService = Readonly<{
    getDiscordTargets: (variables: GetDiscordTargetsQueryVariables) => Promise<GetDiscordTargetsQuery>;
}>;

declare type ConnectWalletService = Readonly<{
    connectWallet: (variables: ConnectWalletMutationVariables) => Promise<ConnectWalletMutation>;
}>;

declare type GetConnectedWalletsService = Readonly<{
    getConnectedWallets: (variables: GetConnectedWalletsQueryVariables) => Promise<GetConnectedWalletsQuery>;
}>;

declare type GetConversationMessagesService = Readonly<{
    getConversationMessages: (variables: GetConversationMessagesQueryVariables) => Promise<GetConversationMessagesQuery>;
}>;

declare type SendConversationMessageService = Readonly<{
    sendConversationMessages: (variables: SendConversationMessageMutationVariables) => Promise<SendConversationMessageMutation>;
}>;

declare type CreateSupportConversationService = Readonly<{
    createSupportConversation: (variables: CreateSupportConversationMutationVariables) => Promise<CreateSupportConversationMutation>;
}>;

declare type FetchDataService = Readonly<{
    fetchData: (variables: FetchDataQueryVariables) => Promise<FetchDataQuery>;
}>;

declare type GetUnreadNotificationHistoryCountService = Readonly<{
    getUnreadNotificationHistoryCount: (variables: GetUnreadNotificationHistoryCountQueryVariables) => Promise<GetUnreadNotificationHistoryCountQuery>;
}>;

declare type GetFusionNotificationHistoryService = Readonly<{
    getFusionNotificationHistory: (variables: GetFusionNotificationHistoryQueryVariables) => Promise<GetFusionNotificationHistoryQuery>;
}>;

declare type MarkFusionNotificationHistoryAsReadService = Readonly<{
    markFusionNotificationHistoryAsRead: (variables: MarkFusionNotificationHistoryAsReadMutationVariables) => Promise<MarkFusionNotificationHistoryAsReadMutation>;
}>;

declare type GetUserSettingsService = Readonly<{
    getUserSettings: (variables: GetUserSettingsQueryVariables) => Promise<GetUserSettingsQuery>;
}>;

declare type UpdateUserSettingsService = Readonly<{
    updateUserSettings: (variables: UpdateUserSettingsMutationVariables) => Promise<UpdateUserSettingsMutation>;
}>;

type index_AddSourceToSourceGroupService = AddSourceToSourceGroupService;
type index_BeginLogInByTransactionService = BeginLogInByTransactionService;
type index_BroadcastMessageService = BroadcastMessageService;
type index_CompleteLogInByTransactionService = CompleteLogInByTransactionService;
type index_ConnectWalletService = ConnectWalletService;
type index_CreateAlertService = CreateAlertService;
type index_CreateDirectPushAlertService = CreateDirectPushAlertService;
type index_CreateDiscordTargetService = CreateDiscordTargetService;
type index_CreateEmailTargetService = CreateEmailTargetService;
type index_CreateSmsTargetService = CreateSmsTargetService;
type index_CreateSourceGroupService = CreateSourceGroupService;
type index_CreateSourceService = CreateSourceService;
type index_CreateSupportConversationService = CreateSupportConversationService;
type index_CreateTargetGroupService = CreateTargetGroupService;
type index_CreateTelegramTargetService = CreateTelegramTargetService;
type index_CreateTenantUserService = CreateTenantUserService;
type index_CreateWebhookTargetService = CreateWebhookTargetService;
type index_DeleteAlertService = DeleteAlertService;
type index_DeleteDirectPushAlertService = DeleteDirectPushAlertService;
type index_DeleteSourceGroupService = DeleteSourceGroupService;
type index_DeleteTargetGroupService = DeleteTargetGroupService;
type index_DeleteUserAlertService = DeleteUserAlertService;
type index_DeleteWebhookTargetService = DeleteWebhookTargetService;
type index_FetchDataService = FetchDataService;
type index_FindTenantConfigService = FindTenantConfigService;
type index_GetAlertsService = GetAlertsService;
type index_GetConfigurationForDappService = GetConfigurationForDappService;
type index_GetConnectedWalletsService = GetConnectedWalletsService;
type index_GetConversationMessagesService = GetConversationMessagesService;
type index_GetDiscordTargetsService = GetDiscordTargetsService;
type index_GetEmailTargetsService = GetEmailTargetsService;
type index_GetFiltersService = GetFiltersService;
type index_GetFusionNotificationHistoryService = GetFusionNotificationHistoryService;
type index_GetNotificationHistoryService = GetNotificationHistoryService;
type index_GetSmsTargetsService = GetSmsTargetsService;
type index_GetSourceConnectionService = GetSourceConnectionService;
type index_GetSourceGroupsService = GetSourceGroupsService;
type index_GetSourcesService = GetSourcesService;
type index_GetTargetGroupsService = GetTargetGroupsService;
type index_GetTelegramTargetsService = GetTelegramTargetsService;
type index_GetTenantConnectedWalletsService = GetTenantConnectedWalletsService;
type index_GetTenantUserService = GetTenantUserService;
type index_GetTopicsService = GetTopicsService;
type index_GetUnreadNotificationHistoryCountService = GetUnreadNotificationHistoryCountService;
type index_GetUserSettingsService = GetUserSettingsService;
type index_GetWebhookTargetsService = GetWebhookTargetsService;
type index_LogInFromDappService = LogInFromDappService;
type index_LogInFromServiceService = LogInFromServiceService;
type index_MarkFusionNotificationHistoryAsReadService = MarkFusionNotificationHistoryAsReadService;
type index_PublishFusionMessageService = PublishFusionMessageService;
type index_RefreshAuthorizationService = RefreshAuthorizationService;
type index_RemoveSourceFromSourceGroupService = RemoveSourceFromSourceGroupService;
type index_SendConversationMessageService = SendConversationMessageService;
type index_SendEmailTargetVerificationRequestService = SendEmailTargetVerificationRequestService;
type index_SendMessageService = SendMessageService;
type index_UpdateSourceGroupService = UpdateSourceGroupService;
type index_UpdateTargetGroupService = UpdateTargetGroupService;
type index_UpdateUserSettingsService = UpdateUserSettingsService;
declare namespace index {
  export {
    index_AddSourceToSourceGroupService as AddSourceToSourceGroupService,
    index_BeginLogInByTransactionService as BeginLogInByTransactionService,
    index_BroadcastMessageService as BroadcastMessageService,
    index_CompleteLogInByTransactionService as CompleteLogInByTransactionService,
    index_ConnectWalletService as ConnectWalletService,
    index_CreateAlertService as CreateAlertService,
    index_CreateDirectPushAlertService as CreateDirectPushAlertService,
    index_CreateDiscordTargetService as CreateDiscordTargetService,
    index_CreateEmailTargetService as CreateEmailTargetService,
    index_CreateSmsTargetService as CreateSmsTargetService,
    index_CreateSourceGroupService as CreateSourceGroupService,
    index_CreateSourceService as CreateSourceService,
    index_CreateSupportConversationService as CreateSupportConversationService,
    index_CreateTargetGroupService as CreateTargetGroupService,
    index_CreateTelegramTargetService as CreateTelegramTargetService,
    index_CreateTenantUserService as CreateTenantUserService,
    index_CreateWebhookTargetService as CreateWebhookTargetService,
    index_DeleteAlertService as DeleteAlertService,
    index_DeleteDirectPushAlertService as DeleteDirectPushAlertService,
    index_DeleteSourceGroupService as DeleteSourceGroupService,
    index_DeleteTargetGroupService as DeleteTargetGroupService,
    index_DeleteUserAlertService as DeleteUserAlertService,
    index_DeleteWebhookTargetService as DeleteWebhookTargetService,
    index_FetchDataService as FetchDataService,
    index_FindTenantConfigService as FindTenantConfigService,
    index_GetAlertsService as GetAlertsService,
    index_GetConfigurationForDappService as GetConfigurationForDappService,
    index_GetConnectedWalletsService as GetConnectedWalletsService,
    index_GetConversationMessagesService as GetConversationMessagesService,
    index_GetDiscordTargetsService as GetDiscordTargetsService,
    index_GetEmailTargetsService as GetEmailTargetsService,
    index_GetFiltersService as GetFiltersService,
    index_GetFusionNotificationHistoryService as GetFusionNotificationHistoryService,
    index_GetNotificationHistoryService as GetNotificationHistoryService,
    index_GetSmsTargetsService as GetSmsTargetsService,
    index_GetSourceConnectionService as GetSourceConnectionService,
    index_GetSourceGroupsService as GetSourceGroupsService,
    index_GetSourcesService as GetSourcesService,
    index_GetTargetGroupsService as GetTargetGroupsService,
    index_GetTelegramTargetsService as GetTelegramTargetsService,
    index_GetTenantConnectedWalletsService as GetTenantConnectedWalletsService,
    index_GetTenantUserService as GetTenantUserService,
    index_GetTopicsService as GetTopicsService,
    index_GetUnreadNotificationHistoryCountService as GetUnreadNotificationHistoryCountService,
    index_GetUserSettingsService as GetUserSettingsService,
    index_GetWebhookTargetsService as GetWebhookTargetsService,
    index_LogInFromDappService as LogInFromDappService,
    index_LogInFromServiceService as LogInFromServiceService,
    index_MarkFusionNotificationHistoryAsReadService as MarkFusionNotificationHistoryAsReadService,
    index_PublishFusionMessageService as PublishFusionMessageService,
    index_RefreshAuthorizationService as RefreshAuthorizationService,
    index_RemoveSourceFromSourceGroupService as RemoveSourceFromSourceGroupService,
    index_SendConversationMessageService as SendConversationMessageService,
    index_SendEmailTargetVerificationRequestService as SendEmailTargetVerificationRequestService,
    index_SendMessageService as SendMessageService,
    index_UpdateSourceGroupService as UpdateSourceGroupService,
    index_UpdateTargetGroupService as UpdateTargetGroupService,
    index_UpdateUserSettingsService as UpdateUserSettingsService,
  };
}

declare class NotifiService implements AddSourceToSourceGroupService, BeginLogInByTransactionService, BroadcastMessageService, CompleteLogInByTransactionService, ConnectWalletService, CreateAlertService, CreateDirectPushAlertService, CreateEmailTargetService, CreateSmsTargetService, CreateSourceService, CreateSourceGroupService, CreateSupportConversationService, CreateTargetGroupService, CreateTelegramTargetService, CreateTenantUserService, CreateWebhookTargetService, DeleteAlertService, DeleteUserAlertService, DeleteSourceGroupService, DeleteTargetGroupService, DeleteWebhookTargetService, FetchDataService, FindTenantConfigService, GetAlertsService, GetConfigurationForDappService, GetConversationMessagesService, GetConnectedWalletsService, GetEmailTargetsService, GetFiltersService, GetFusionNotificationHistoryService, GetNotificationHistoryService, GetSmsTargetsService, GetSourceConnectionService, GetSourceGroupsService, GetSourcesService, GetTargetGroupsService, GetTelegramTargetsService, GetTenantConnectedWalletsService, GetTenantUserService, GetTopicsService, GetWebhookTargetsService, LogInFromDappService, LogInFromServiceService, RefreshAuthorizationService, RemoveSourceFromSourceGroupService, SendConversationMessageService, SendEmailTargetVerificationRequestService, SendMessageService, UpdateSourceGroupService, UpdateTargetGroupService, CreateDiscordTargetService, GetDiscordTargetsService, GetUnreadNotificationHistoryCountService, MarkFusionNotificationHistoryAsReadService, UpdateUserSettingsService, GetUserSettingsService {
    private _jwt;
    private _typedClient;
    constructor(graphQLClient: GraphQLClient);
    setJwt(jwt: string | undefined): void;
    logOut(): Promise<void>;
    addSourceToSourceGroup(variables: AddSourceToSourceGroupMutationVariables): Promise<AddSourceToSourceGroupMutation>;
    beginLogInByTransaction(variables: BeginLogInByTransactionMutationVariables): Promise<BeginLogInByTransactionMutation>;
    broadcastMessage(variables: BroadcastMessageMutationVariables): Promise<BroadcastMessageMutation>;
    completeLogInByTransaction(variables: CompleteLogInByTransactionMutationVariables): Promise<CompleteLogInByTransactionMutation>;
    connectWallet(variables: ConnectWalletMutationVariables): Promise<ConnectWalletMutation>;
    createAlert(variables: CreateAlertMutationVariables): Promise<CreateAlertMutation>;
    createDirectPushAlert(variables: CreateDirectPushAlertMutationVariables): Promise<CreateDirectPushAlertMutation>;
    createEmailTarget(variables: CreateEmailTargetMutationVariables): Promise<CreateEmailTargetMutation>;
    createDiscordTarget(variables: CreateDiscordTargetMutationVariables): Promise<CreateDiscordTargetMutation>;
    createSmsTarget(variables: CreateSmsTargetMutationVariables): Promise<CreateSmsTargetMutation>;
    createSource(variables: CreateSourceMutationVariables): Promise<CreateSourceMutation>;
    createSourceGroup(variables: CreateSourceGroupMutationVariables): Promise<CreateSourceGroupMutation>;
    createSupportConversation(variables: CreateSupportConversationMutationVariables): Promise<CreateSupportConversationMutation>;
    createTargetGroup(variables: CreateTargetGroupMutationVariables): Promise<CreateTargetGroupMutation>;
    createTenantUser(variables: CreateTenantUserMutationVariables): Promise<CreateTenantUserMutation>;
    createWebhookTarget(variables: CreateWebhookTargetMutationVariables): Promise<CreateWebhookTargetMutation>;
    createTelegramTarget(variables: CreateTelegramTargetMutationVariables): Promise<CreateTelegramTargetMutation>;
    deleteAlert(variables: DeleteAlertMutationVariables): Promise<DeleteAlertMutation>;
    DeleteDirectPushAlert(variables: DeleteDirectPushAlertMutationVariables): Promise<DeleteDirectPushAlertMutation>;
    deleteUserAlert(variables: DeleteUserAlertMutationVariables): Promise<DeleteUserAlertMutation>;
    deleteSourceGroup(variables: DeleteSourceGroupMutationVariables): Promise<DeleteSourceGroupMutation>;
    deleteTargetGroup(variables: DeleteTargetGroupMutationVariables): Promise<DeleteTargetGroupMutation>;
    deleteWebhookTarget(variables: DeleteWebhookTargetMutationVariables): Promise<DeleteWebhookTargetMutation>;
    fetchData(variables: FetchDataQueryVariables): Promise<FetchDataQuery>;
    findTenantConfig(variables: FindTenantConfigQueryVariables): Promise<FindTenantConfigQuery>;
    getAlerts(variables: GetAlertsQueryVariables): Promise<GetAlertsQuery>;
    getConfigurationForDapp(variables: GetConfigurationForDappQueryVariables): Promise<GetConfigurationForDappQuery>;
    getConnectedWallets(variables: GetConnectedWalletsQueryVariables): Promise<GetConnectedWalletsQuery>;
    getConversationMessages(variables: GetConversationMessagesQueryVariables): Promise<GetConversationMessagesQuery>;
    getEmailTargets(variables: GetEmailTargetsQueryVariables): Promise<GetEmailTargetsQuery>;
    getDiscordTargets(variables: GetDiscordTargetsQueryVariables): Promise<GetDiscordTargetsQuery>;
    getFilters(variables: GetFiltersQueryVariables): Promise<GetFiltersQuery>;
    getFusionNotificationHistory(variables: GetFusionNotificationHistoryQueryVariables): Promise<GetFusionNotificationHistoryQuery>;
    /**
     * @deprecated Use getFusionNotificationHistory instead
     */
    getNotificationHistory(variables: GetNotificationHistoryQueryVariables): Promise<GetNotificationHistoryQuery>;
    getSmsTargets(variables: GetSmsTargetsQueryVariables): Promise<GetSmsTargetsQuery>;
    getSourceConnection(variables: GetSourceConnectionQueryVariables): Promise<GetSourceConnectionQuery>;
    getSourceGroups(variables: GetSourceGroupsQueryVariables): Promise<GetSourceGroupsQuery>;
    getSources(variables: GetSourcesQueryVariables): Promise<GetSourcesQuery>;
    getTargetGroups(variables: GetTargetGroupsQueryVariables): Promise<GetTargetGroupsQuery>;
    getTelegramTargets(variables: GetTelegramTargetsQueryVariables): Promise<GetTelegramTargetsQuery>;
    getTenantConnectedWallets(variables: GetTenantConnectedWalletQueryVariables): Promise<GetTenantConnectedWalletQuery>;
    getTenantUser(variables: GetTenantUserQueryVariables): Promise<GetTenantUserQuery>;
    getTopics(variables: GetTopicsQueryVariables): Promise<GetTopicsQuery>;
    getUnreadNotificationHistoryCount(variables: GetUnreadNotificationHistoryCountQueryVariables): Promise<GetUnreadNotificationHistoryCountQuery>;
    getUserSettings(variables: GetUserSettingsQueryVariables): Promise<GetUserSettingsQuery>;
    getWebhookTargets(variables: GetWebhookTargetsQueryVariables): Promise<GetWebhookTargetsQuery>;
    logInFromDapp(variables: LogInFromDappMutationVariables): Promise<LogInFromDappMutation>;
    logInFromService(variables: LogInFromServiceMutationVariables): Promise<LogInFromServiceMutation>;
    markFusionNotificationHistoryAsRead(variables: MarkFusionNotificationHistoryAsReadMutationVariables): Promise<MarkFusionNotificationHistoryAsReadMutation>;
    updateUserSettings(variables: UpdateUserSettingsMutationVariables): Promise<UpdateUserSettingsMutation>;
    refreshAuthorization(variables: RefreshAuthorizationMutationVariables): Promise<RefreshAuthorizationMutation>;
    removeSourceFromSourceGroup(variables: RemoveSourceFromSourceGroupMutationVariables): Promise<RemoveSourceFromSourceGroupMutation>;
    sendConversationMessages(variables: SendConversationMessageMutationVariables): Promise<SendConversationMessageMutation>;
    sendEmailTargetVerificationRequest(variables: SendEmailTargetVerificationRequestMutationVariables): Promise<SendEmailTargetVerificationRequestMutation>;
    sendMessage(variables: SendMessageMutationVariables): Promise<SendMessageMutation>;
    updateSourceGroup(variables: UpdateSourceGroupMutationVariables): Promise<UpdateSourceGroupMutation>;
    updateTargetGroup(variables: UpdateTargetGroupMutationVariables): Promise<UpdateTargetGroupMutation>;
    private _requestHeaders;
}

export { NotifiService, index as Operations, generated as Types };
