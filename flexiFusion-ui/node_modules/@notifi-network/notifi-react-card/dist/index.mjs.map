{"version":3,"sources":["../lib/components/NotifiEmailInput.tsx","../lib/assets/EmailIcon.tsx","../lib/context/NotifiContext.tsx","../lib/context/NotifiClientContext.tsx","../lib/context/NotifiFormContext.tsx","../lib/context/NotifiSubscriptionContext.tsx","../../../node_modules/libphonenumber-js/metadata.min.json.js","../../../node_modules/libphonenumber-js/min/exports/withMetadataArgument.js","../../../node_modules/libphonenumber-js/source/ParseError.js","../../../node_modules/libphonenumber-js/source/constants.js","../../../node_modules/libphonenumber-js/source/tools/semver-compare.js","../../../node_modules/libphonenumber-js/source/metadata.js","../../../node_modules/libphonenumber-js/source/helpers/extension/createExtensionPattern.js","../../../node_modules/libphonenumber-js/source/helpers/isViablePhoneNumber.js","../../../node_modules/libphonenumber-js/source/helpers/extension/extractExtension.js","../../../node_modules/libphonenumber-js/source/helpers/parseDigits.js","../../../node_modules/libphonenumber-js/source/parseIncompletePhoneNumber.js","../../../node_modules/libphonenumber-js/source/helpers/mergeArrays.js","../../../node_modules/libphonenumber-js/source/helpers/checkNumberLength.js","../../../node_modules/libphonenumber-js/source/isPossible.js","../../../node_modules/libphonenumber-js/source/helpers/RFC3966.js","../../../node_modules/libphonenumber-js/source/helpers/matchesEntirely.js","../../../node_modules/libphonenumber-js/source/helpers/getNumberType.js","../../../node_modules/libphonenumber-js/source/isValid.js","../../../node_modules/libphonenumber-js/source/helpers/getPossibleCountriesForNumber.js","../../../node_modules/libphonenumber-js/source/helpers/applyInternationalSeparatorStyle.js","../../../node_modules/libphonenumber-js/source/helpers/formatNationalNumberUsingFormat.js","../../../node_modules/libphonenumber-js/source/helpers/getIddPrefix.js","../../../node_modules/libphonenumber-js/source/format.js","../../../node_modules/libphonenumber-js/source/PhoneNumber.js","../../../node_modules/libphonenumber-js/source/helpers/stripIddPrefix.js","../../../node_modules/libphonenumber-js/source/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../../../node_modules/libphonenumber-js/source/helpers/extractNationalNumber.js","../../../node_modules/libphonenumber-js/source/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../../../node_modules/libphonenumber-js/source/helpers/extractCountryCallingCode.js","../../../node_modules/libphonenumber-js/source/helpers/getCountryByNationalNumber.js","../../../node_modules/libphonenumber-js/source/helpers/getCountryByCallingCode.js","../../../node_modules/libphonenumber-js/source/parse.js","../../../node_modules/libphonenumber-js/source/parsePhoneNumberWithError_.js","../../../node_modules/libphonenumber-js/source/normalizeArguments.js","../../../node_modules/libphonenumber-js/source/parsePhoneNumberWithError.js","../../../node_modules/libphonenumber-js/source/parsePhoneNumber_.js","../../../node_modules/libphonenumber-js/source/isValidPhoneNumber.js","../../../node_modules/libphonenumber-js/min/exports/parsePhoneNumberWithError.js","../../../node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js","../lib/hooks/useNotifiSubscribe.ts","../lib/utils/stringUtils.ts","../lib/utils/walletUtils.ts","../lib/hooks/useSubscriptionCard.ts","../lib/hooks/useFetchedCardState.ts","../lib/hooks/useUnreadState.ts","../lib/hooks/useFrontendClientLogin.ts","../lib/hooks/useIntercomCardState.ts","../lib/context/NotifiDemoPreviewContext.tsx","../lib/components/NotifiFooter.tsx","../lib/components/NotifiDisclosureStatement.tsx","../lib/components/NotifiLogo.tsx","../lib/components/NotifiSmsInput.tsx","../lib/assets/SmsIcon.tsx","../lib/constants/countryData.tsx","../lib/utils/phoneUtils.ts","../lib/components/NotifiSmsDropdownOption.tsx","../lib/components/NotifiTelegramInput.tsx","../lib/assets/TelegramIcon.tsx","../lib/components/subscription/EventTypeBroadcastRow.tsx","../lib/components/subscription/resolveRef.ts","../lib/utils/AlertConfiguration.ts","../lib/utils/NotificationHistoryUtils.tsx","../lib/assets/AnnouncementIcon.tsx","../lib/assets/ChatAlertIcon.tsx","../lib/assets/RatioCheckIcon.tsx","../lib/assets/SwapIcon.tsx","../lib/assets/BellIcon.tsx","../lib/components/AlertHistory/AlertIcon.tsx","../lib/assets/ChartIcon.tsx","../lib/assets/CheckIcon.tsx","../lib/assets/ClockIcon.tsx","../lib/assets/DaoIcon.tsx","../lib/assets/DownArrowIcon.tsx","../lib/assets/FlagIcon.tsx","../lib/assets/GraphIcon.tsx","../lib/assets/InfoIcon.tsx","../lib/assets/StarIcon.tsx","../lib/assets/UpArrowIcon.tsx","../lib/assets/UrgentIcon.tsx","../lib/assets/WatchIcon.tsx","../lib/utils/AlertHistoryUtils.tsx","../lib/utils/frontendClient.ts","../lib/utils/typeUtils.ts","../lib/components/subscription/NotifiToggle.tsx","../lib/components/subscription/NotifiTooltip.tsx","../lib/components/subscription/EventTypeCustomHealthCheckRow.tsx","../lib/components/subscription/EventTypeCustomToggleRow.tsx","../lib/components/subscription/EventTypeDirectPushRow.tsx","../lib/components/subscription/EventTypeHealthCheckRow.tsx","../lib/components/subscription/EventTypeLabelRow.tsx","../lib/components/subscription/EventTypePriceChangeRow.tsx","../lib/components/subscription/EventTypeTradingPairsRow.tsx","../lib/assets/DeleteIcon.tsx","../lib/components/subscription/EventTypeFusionMultiThresholdRow.tsx","../lib/components/subscription/EventTypeUnsupportedRow.tsx","../lib/components/subscription/EventTypeWalletBalanceRow.tsx","../lib/components/subscription/FetchedStateCard.tsx","../lib/components/subscription/SubscriptionCardUnsupported.tsx","../lib/components/subscription/SubscriptionCardV1.tsx","../lib/hooks/useDestinationState.ts","../lib/components/AlertHistory/AlertDetailsCard.tsx","../lib/components/ConfigAlertModal.tsx","../lib/components/AlertBox/AlertActionIcon.tsx","../lib/assets/BackArrowIcon.tsx","../lib/assets/CloseIcon.tsx","../lib/assets/SettingIcon.tsx","../lib/components/ConfigDestinationModal.tsx","../lib/assets/DiscordIcon.tsx","../lib/components/subscription/subscription-card-views/preview-panel/DestinationErrorMessage.tsx","../lib/components/NotifiAlertBox.tsx","../lib/components/SignupBanner.tsx","../lib/assets/CircleBellIcon.tsx","../lib/components/VerifyBanner.tsx","../lib/components/common/ErrorStateCard.tsx","../lib/utils/errorUtils.ts","../lib/components/common/LoadingStateCard.tsx","../lib/components/common/Spinner.tsx","../lib/components/subscription/subscription-card-views/EditCardView.tsx","../lib/components/subscription/NotifiSubscribeButton.tsx","../lib/components/subscription/subscription-card-views/AlertListPreview.tsx","../lib/components/subscription/subscription-card-views/InputFields.tsx","../lib/components/NotifiDiscordToggle.tsx","../lib/components/NotifiHwWalletToggle.tsx","../lib/components/subscription/subscription-card-views/ExpiredTokenViewCard.tsx","../lib/components/subscription/subscription-card-views/HistoryCardView.tsx","../lib/assets/NotificationEmptyBellIcon.tsx","../lib/utils/constants.ts","../lib/components/AlertHistory/AlertNotificationRow.tsx","../lib/components/subscription/subscription-card-views/PreviewCard.tsx","../lib/components/subscription/subscription-card-views/preview-panel/AlertsPanel.tsx","../lib/components/subscription/EventTypeFusionHealthCheckRow.tsx","../lib/components/subscription/EventTypeFusionToggleRow.tsx","../lib/components/subscription/EventTypeXMTPRow.tsx","../lib/components/subscription/subscription-card-views/preview-panel/UserInfoPanel.tsx","../lib/assets/PenIcon.tsx","../lib/components/subscription/subscription-card-views/VerifyWalletView.tsx","../lib/components/WalletList/ConnectWalletRow.tsx","../lib/components/WalletList/WalletList.tsx","../lib/components/common/NotifiCardButton.tsx","../lib/components/subscription/NotifiSubscriptionCard.tsx","../lib/components/intercom/ChatMessageDate.tsx","../lib/utils/datetimeUtils.ts","../lib/components/intercom/ChatMessageSection.tsx","../lib/hooks/useIntercomChat.ts","../lib/components/intercom/ChatWindowIntroSection.tsx","../lib/components/intercom/MessageList.tsx","../lib/components/intercom/MessageGroup.tsx","../lib/components/intercom/SendMessageSection.tsx","../lib/components/intercom/ChatWindowHeader.tsx","../lib/assets/ChatIcon.tsx","../lib/components/intercom/IntercomCard.tsx","../lib/components/intercom/NotifiIntercomChatWindowContainer.tsx","../lib/components/intercom/NotifiIntercomFTUNotificationTargetSection.tsx","../lib/components/intercom/NotifiStartChatButton.tsx","../lib/components/intercom/SettingHeader.tsx","../lib/components/intercom/NotifiIntercomCard.tsx","../lib/components/intercom/NotifiIntercomCardContainer.tsx","../lib/hooks/useIntercomCard.ts"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\n\nimport { EmailIcon } from '../assets/EmailIcon';\nimport { useNotifiForm, useNotifiSubscriptionContext } from '../context';\nimport type { DeepPartialReadonly } from '../utils';\n\nexport type NotifiEmailInputProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    input: string;\n    label: string;\n    errorMessage: string;\n    button: string;\n  }>;\n  copy?: DeepPartialReadonly<{\n    placeholder: string;\n    label: string;\n  }>;\n  disabled: boolean;\n  intercomEmailInputStyle?: string;\n  intercomEmailInputContainerStyle?: string;\n  intercomView?: boolean;\n  hasChatAlert?: boolean;\n}>;\n\nexport const NotifiEmailInput: React.FC<NotifiEmailInputProps> = ({\n  classNames,\n  copy,\n  disabled,\n  intercomEmailInputStyle,\n  intercomEmailInputContainerStyle,\n  intercomView,\n}: NotifiEmailInputProps) => {\n  const { intercomCardView, destinationErrorMessages } =\n    useNotifiSubscriptionContext();\n\n  const {\n    formState,\n    formErrorMessages,\n    setEmail,\n    setEmailErrorMessage,\n    setHasChanges,\n  } = useNotifiForm();\n\n  const { email } = formState;\n\n  const { email: emailErrorMessage } = formErrorMessages;\n\n  const { email: emailErrorMessageFromSubscriptionContext } =\n    destinationErrorMessages;\n\n  const validateEmail = () => {\n    if (email === '') {\n      return;\n    }\n\n    const emailRegex = new RegExp(\n      '^[a-zA-Z0-9._:$!%-+]+@[a-zA-Z0-9.-]+.[a-zA-Z]$',\n    );\n    if (emailRegex.test(email)) {\n      setEmailErrorMessage('');\n    } else {\n      setEmailErrorMessage('The email is invalid. Please try again.');\n    }\n  };\n\n  const handleClick = () => {\n    if (emailErrorMessageFromSubscriptionContext?.type !== 'recoverableError')\n      return;\n    emailErrorMessageFromSubscriptionContext.onClick();\n  };\n\n  return (\n    <>\n      {intercomView ? (\n        intercomCardView.state === 'settingView' &&\n        emailErrorMessageFromSubscriptionContext?.type ===\n          'recoverableError' ? (\n          <div\n            onClick={handleClick}\n            className={clsx(\n              'NotifiEmailVerification__button',\n              classNames?.button,\n            )}\n          >\n            Resend Verification\n          </div>\n        ) : null\n      ) : (\n        <label className={clsx('NotifiEmailInput__label', classNames?.label)}>\n          {copy?.label}\n        </label>\n      )}\n      <div\n        className={clsx(\n          'NotifiEmailInput__container',\n          intercomEmailInputContainerStyle,\n          classNames?.container,\n        )}\n      >\n        <EmailIcon className={'NotifiInput__icon'} />\n        <input\n          data-cy=\"notifiEmailInput\"\n          onBlur={validateEmail}\n          className={clsx(\n            'NotifiEmailInput__input',\n            intercomEmailInputStyle,\n            classNames?.input,\n          )}\n          disabled={disabled}\n          name=\"notifi-email\"\n          type=\"email\"\n          value={email}\n          onFocus={() => setEmailErrorMessage('')}\n          onChange={(e) => {\n            setHasChanges(true);\n            setEmail(e.target.value ?? '');\n          }}\n          placeholder={copy?.placeholder ?? 'Email Address'}\n        />\n      </div>\n      <label\n        className={clsx(\n          'NotifiEmailInput__errorMessage',\n          classNames?.errorMessage,\n        )}\n      >\n        {emailErrorMessage}\n      </label>\n    </>\n  );\n};\n","import React from 'react';\n\nexport type Props = Readonly<{\n  className?: string;\n}>;\n\nexport const EmailIcon: React.FC<Props> = ({ className }: Props) => {\n  return (\n    <svg\n      width=\"13\"\n      height=\"11\"\n      viewBox=\"0 0 13 11\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        d=\"M11.5 0.499996H1.5C0.8125 0.499996 0.25625 1.0625 0.25625 1.75L0.25 9.25C0.25 9.9375 0.8125 10.5 1.5 10.5H11.5C12.1875 10.5 12.75 9.9375 12.75 9.25V1.75C12.75 1.0625 12.1875 0.499996 11.5 0.499996ZM11.5 3L6.5 6.125L1.5 3V1.75L6.5 4.875L11.5 1.75V3Z\"\n        fill=\"#B6B8D5\"\n      />\n    </svg>\n  );\n};\n","import { WalletWithSignParams } from '@notifi-network/notifi-frontend-client';\nimport {\n  AcalaSignMessageFunction,\n  AptosSignMessageFunction,\n  NotifiEnvironment,\n  Uint8SignMessageFunction,\n} from '@notifi-network/notifi-react-hooks';\nimport React from 'react';\n\nimport { HardwareLoginPlugin } from '../plugins';\nimport { AlertConfiguration } from '../utils';\nimport { NotifiClientContextProvider } from './NotifiClientContext';\nimport { NotifiFormProvider } from './NotifiFormContext';\nimport { NotifiSubscriptionContextProvider } from './NotifiSubscriptionContext';\n\nexport type SolanaParams = Readonly<{\n  walletBlockchain: 'SOLANA';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n  hardwareLoginPlugin: HardwareLoginPlugin;\n}>;\nexport type EthereumParams = Readonly<{\n  walletBlockchain: 'ETHEREUM';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\nexport type PolygonParams = Readonly<{\n  walletBlockchain: 'POLYGON';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\nexport type ArbitrumParams = Readonly<{\n  walletBlockchain: 'ARBITRUM';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\nexport type BinanceParams = Readonly<{\n  walletBlockchain: 'BINANCE';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type BaseParams = Readonly<{\n  walletBlockchain: 'BASE';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type AptosParams = Readonly<{\n  walletBlockchain: 'APTOS';\n  accountAddress: string;\n  walletPublicKey: string;\n  signMessage: AptosSignMessageFunction;\n}>;\nexport type ZksyncParams = Readonly<{\n  walletBlockchain: 'ZKSYNC';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type AcalaParams = Readonly<{\n  walletBlockchain: 'ACALA';\n  accountAddress: string;\n  walletPublicKey: string;\n  signMessage: AcalaSignMessageFunction;\n}>;\n\nexport type OptimismParams = Readonly<{\n  walletBlockchain: 'OPTIMISM';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type NearParams = Readonly<{\n  walletBlockchain: 'NEAR';\n  accountAddress: string;\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type InjectiveParams = Readonly<{\n  walletBlockchain: 'INJECTIVE';\n  accountAddress: string;\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type OsmosisParams = Readonly<{\n  walletBlockchain: 'OSMOSIS';\n  accountAddress: string;\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type NibiruParams = Readonly<{\n  walletBlockchain: 'NIBIRU';\n  accountAddress: string;\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type AvalancheParams = Readonly<{\n  walletBlockchain: 'AVALANCHE';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type SuiParams = Readonly<{\n  walletBlockchain: 'SUI';\n  accountAddress: string;\n  walletPublicKey: string; // The same as accountAddress\n  signMessage: Uint8SignMessageFunction;\n}>;\n\nexport type MultiWalletParams = Readonly<{\n  ownedWallets: ReadonlyArray<WalletWithSignParams>;\n}>;\n\ntype WalletParams =\n  | SolanaParams\n  | EthereumParams\n  | PolygonParams\n  | AvalancheParams\n  | ArbitrumParams\n  | BaseParams\n  | BinanceParams\n  | AptosParams\n  | AcalaParams\n  | NearParams\n  | AvalancheParams\n  | OptimismParams\n  | InjectiveParams\n  | OsmosisParams\n  | NibiruParams\n  | SuiParams\n  | ZksyncParams;\n\nexport type NotifiParams = Readonly<{\n  alertConfigurations?: Record<string, AlertConfiguration | null>;\n  dappAddress: string;\n  env: NotifiEnvironment;\n  keepSubscriptionData?: boolean;\n  multiWallet?: MultiWalletParams;\n  isUsingFrontendClient?: boolean; // default is true\n}> &\n  WalletParams;\n\nexport const NotifiContext: React.FC<React.PropsWithChildren<NotifiParams>> = ({\n  children,\n  ...params\n}: React.PropsWithChildren<NotifiParams>) => {\n  return (\n    <NotifiClientContextProvider {...params}>\n      <NotifiFormProvider>\n        <NotifiSubscriptionContextProvider {...params}>\n          {children}\n        </NotifiSubscriptionContextProvider>\n      </NotifiFormProvider>\n    </NotifiClientContextProvider>\n  );\n};\n","import {\n  ConfigFactoryInput,\n  NotifiFrontendClient,\n  newFrontendClient,\n} from '@notifi-network/notifi-frontend-client';\nimport { useNotifiClient } from '@notifi-network/notifi-react-hooks';\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { NotifiParams } from './NotifiContext';\n\nexport type NotifiClientContextData = Readonly<{\n  client: ReturnType<typeof useNotifiClient>;\n  frontendClient: NotifiFrontendClient;\n  isUsingFrontendClient: boolean;\n  params: NotifiParams;\n  frontendClientStatus: FrontendClientStatus;\n  updateFrontendClientStatus: () => void;\n}>;\n\nexport type FrontendClientStatus = {\n  isExpired: boolean;\n  isInitialized: boolean;\n  isAuthenticated: boolean;\n};\n\nconst NotifiClientContext = createContext<NotifiClientContextData>(\n  {} as unknown as NotifiClientContextData, // Intentially empty in default, use NotifiSubscriptionContextProvider\n);\n\nconst getFrontendConfigInput = (params: NotifiParams): ConfigFactoryInput => {\n  if ('accountAddress' in params) {\n    return {\n      account: {\n        address: params.accountAddress,\n        publicKey: params.walletPublicKey,\n      },\n      tenantId: params.dappAddress,\n      walletBlockchain: params.walletBlockchain,\n      env: params.env,\n    };\n  } else {\n    return {\n      account: {\n        publicKey: params.walletPublicKey,\n      },\n      tenantId: params.dappAddress,\n      walletBlockchain: params.walletBlockchain,\n      env: params.env,\n    };\n  }\n};\n\nexport const NotifiClientContextProvider: React.FC<NotifiParams> = ({\n  children,\n  ...params\n}: React.PropsWithChildren<NotifiParams>) => {\n  const [frontendClientStatus, setFrontendClientStatus] =\n    useState<FrontendClientStatus>({\n      isExpired: false,\n      isInitialized: false,\n      isAuthenticated: false,\n    });\n  const client = useNotifiClient(params);\n  const frontendClient = useMemo(() => {\n    const configInput = getFrontendConfigInput(params);\n    const updatedFrontendClient = newFrontendClient(configInput);\n    return updatedFrontendClient;\n  }, [\n    params.dappAddress,\n    params.env,\n    params.walletBlockchain,\n    params.walletPublicKey,\n  ]);\n\n  const updateFrontendClientStatus = useCallback(() => {\n    setFrontendClientStatus({\n      isExpired: frontendClient.userState?.status === 'expired',\n      isInitialized: !!frontendClient,\n      isAuthenticated: frontendClient.userState?.status === 'authenticated',\n    });\n  }, [frontendClient]);\n\n  const isClientInitialized = useMemo(() => {\n    return params.isUsingFrontendClient\n      ? !!frontendClient.userState\n      : client.isInitialized;\n  }, [params.isUsingFrontendClient, client, frontendClient]);\n\n  useEffect(() => {\n    frontendClient.initialize().then(() => updateFrontendClientStatus());\n  }, [frontendClient]);\n\n  if (!isClientInitialized) return null;\n\n  return (\n    <NotifiClientContext.Provider\n      value={{\n        client,\n        params,\n        isUsingFrontendClient: params.isUsingFrontendClient ?? true,\n        frontendClient,\n        frontendClientStatus,\n        updateFrontendClientStatus,\n      }}\n    >\n      {children}\n    </NotifiClientContext.Provider>\n  );\n};\n\nexport const useNotifiClientContext = () => useContext(NotifiClientContext);\n","import React, {\n  PropsWithChildren,\n  createContext,\n  useContext,\n  useState,\n} from 'react';\n\nimport { DestinationInputs, EditFormType } from '.';\n\nexport type FormErrorMessages = DestinationInputs;\n\nexport type NotifiFormData = Readonly<{\n  formState: DestinationInputs;\n  formErrorMessages: FormErrorMessages;\n  hasChanges: boolean;\n  setHasChanges: (value: boolean) => void;\n\n  setEmail: (value: string) => void;\n  setEmailErrorMessage: (value: string) => void;\n\n  setPhoneNumber: (value: string) => void;\n  setPhoneNumberErrorMessage: (value: string) => void;\n\n  setTelegram: (value: string) => void;\n  setTelegramErrorMessage: (value: string) => void;\n}>;\n\nconst NotifiFormContext = createContext<NotifiFormData>({} as NotifiFormData);\n\nexport const NotifiFormProvider: React.FC<PropsWithChildren<unknown>> = ({\n  children,\n}) => {\n  const [hasChanges, setHasChanges] = useState<boolean>(false);\n  const [formState, setFormInput] = useState<DestinationInputs>({\n    email: '',\n    phoneNumber: '',\n    telegram: '',\n    discord: '',\n  });\n\n  const [formErrorMessages, setInputErrorMessage] = useState<FormErrorMessages>(\n    {\n      email: '',\n      telegram: '',\n      phoneNumber: '',\n      discord: '',\n    },\n  );\n\n  const handleFormInput = ({ field, value }: EditFormType) => {\n    setFormInput((formErrorMessages) => ({\n      ...formErrorMessages,\n      [field]: value,\n    }));\n  };\n\n  const handleErrorMessage = ({ field, value }: EditFormType) => {\n    setInputErrorMessage((formErrorMessages) => ({\n      ...formErrorMessages,\n      [field]: value,\n    }));\n  };\n\n  const setEmail = (value: string) => {\n    handleFormInput({ field: 'email', value });\n  };\n\n  const setEmailErrorMessage = (value: string) => {\n    handleErrorMessage({ field: 'email', value });\n  };\n\n  const setTelegram = (value: string) => {\n    handleFormInput({ field: 'telegram', value });\n  };\n\n  const setTelegramErrorMessage = (value: string) => {\n    handleErrorMessage({ field: 'telegram', value });\n  };\n\n  const setPhoneNumber = (value: string) => {\n    handleFormInput({ field: 'phoneNumber', value });\n  };\n\n  const setPhoneNumberErrorMessage = (value: string) => {\n    handleErrorMessage({ field: 'phoneNumber', value });\n  };\n\n  const value = {\n    formState,\n    formErrorMessages,\n    hasChanges,\n    setHasChanges,\n    setEmail,\n    setEmailErrorMessage,\n    setTelegram,\n    setTelegramErrorMessage,\n    setPhoneNumber,\n    setPhoneNumberErrorMessage,\n  };\n\n  return (\n    <NotifiFormContext.Provider value={value}>\n      {children}\n    </NotifiFormContext.Provider>\n  );\n};\n\nexport const useNotifiForm: () => NotifiFormData = () => {\n  const data = useContext(NotifiFormContext);\n  return data;\n};\n","import { Types } from '@notifi-network/notifi-graphql';\nimport { PropsWithChildren, useMemo } from 'react';\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nimport {\n  FetchedCardViewState,\n  SubscriptionData,\n  useFetchedCardState,\n} from '../hooks';\nimport {\n  IntercomCardView,\n  useIntercomCardState,\n} from '../hooks/useIntercomCardState';\nimport { prefixTelegramWithSymbol } from '../utils/stringUtils';\nimport { useNotifiClientContext } from './NotifiClientContext';\nimport { NotifiParams } from './NotifiContext';\nimport { useNotifiForm } from './NotifiFormContext';\nimport {\n  DestinationError,\n  DestinationErrorMessageField,\n  DestinationErrors,\n} from './constants';\n\nexport type DestinationErrorMessages = DestinationErrors;\n\nexport enum FtuStage {\n  Destination = 3,\n  Alerts = 2,\n  Done = 1,\n}\n\nexport type NotifiSubscriptionData = Readonly<{\n  alerts: Readonly<Record<string, Types.AlertFragmentFragment | undefined>>;\n  connectedWallets: ReadonlyArray<Types.ConnectedWalletFragmentFragment>;\n  setConnectedWallets: React.Dispatch<\n    React.SetStateAction<ReadonlyArray<Types.ConnectedWalletFragmentFragment>>\n  >;\n  destinationErrorMessages: DestinationErrorMessages;\n  email: string;\n  params: NotifiParams;\n  phoneNumber: string;\n  telegramId: string;\n  telegramConfirmationUrl?: string;\n  useHardwareWallet: boolean;\n  useDiscord: boolean;\n  /**\n   * @deprecated Now this context can be consumed as long as the component is wrapped in NotifiContext\n   */\n  contextId: string;\n  cardView: FetchedCardViewState;\n  setCardView: React.Dispatch<React.SetStateAction<FetchedCardViewState>>;\n  intercomCardView: IntercomCardView;\n  setIntercomCardView: React.Dispatch<React.SetStateAction<IntercomCardView>>;\n  setAlerts: (\n    alerts: Record<string, Types.AlertFragmentFragment | undefined>,\n  ) => void;\n  setEmail: (email: string) => void;\n  setPhoneNumber: (phoneNumber: string) => void;\n  setTelegramId: (telegramId: string) => void;\n  setUseHardwareWallet: React.Dispatch<React.SetStateAction<boolean>>;\n  setUseDiscord: React.Dispatch<React.SetStateAction<boolean>>;\n  loading: boolean;\n  setLoading: (loading: boolean) => void;\n  hasChatAlert: boolean;\n  setHasChatAlert: (hasChatAlert: boolean) => void;\n  conversationId: string;\n  setConversationId: (conversationId: string) => void;\n  userId: string;\n  setUserId: (userId: string) => void;\n  setEmailErrorMessage: (value: DestinationError) => void;\n  setTelegramConfirmationUrl: (\n    telegramConfirmationUrl: string | undefined,\n  ) => void;\n  setPhoneNumberErrorMessage: (value: DestinationError) => void;\n  setDiscordErrorMessage: (value: DestinationError) => void;\n  setTelegramErrorMessage: (value: DestinationError) => void;\n  resetErrorMessageState: () => void;\n\n  discordTargetData: Types.DiscordTargetFragmentFragment | undefined;\n  setDiscordTargetData: React.Dispatch<\n    React.SetStateAction<Types.DiscordTargetFragmentFragment | undefined>\n  >;\n  ftuStage: FtuStage;\n  syncFtuStage: (isContactInfoRequired?: boolean) => Promise<void>;\n  updateFtuStage: (ftuConfigStep: FtuStage) => Promise<void>;\n  render: (newData: Types.FetchDataQuery) => SubscriptionData;\n}>;\n\nconst NotifiSubscriptionContext = createContext<NotifiSubscriptionData>(\n  {} as unknown as NotifiSubscriptionData, // Intentially empty in default, use NotifiSubscriptionContextProvider\n);\n\nconst hasKey = <K extends string>(\n  obj: object,\n  key: K,\n): obj is object & { [k in K]: unknown } => {\n  return typeof obj === 'object' && obj !== null && key in obj;\n};\n\nexport const NotifiSubscriptionContextProvider: React.FC<\n  PropsWithChildren<NotifiParams>\n> = ({ children, ...params }) => {\n  const { frontendClient, isUsingFrontendClient } = useNotifiClientContext();\n\n  const contextId = useMemo(() => {\n    return new Date().toISOString();\n  }, []);\n\n  const [conversationId, setConversationId] = useState<string>('');\n  const [userId, setUserId] = useState<string>('');\n\n  const [hasChatAlert, setHasChatAlert] = useState<boolean>(false);\n  const { cardView, setCardView } = useFetchedCardState();\n  const { intercomCardView, setIntercomCardView } = useIntercomCardState();\n\n  const [telegramConfirmationUrl, setTelegramConfirmationUrl] = useState<\n    string | undefined\n  >(undefined);\n\n  const [alerts, setAlerts] = useState<\n    Record<string, Types.AlertFragmentFragment | undefined>\n  >({});\n  const [connectedWallets, setConnectedWallets] = useState<\n    ReadonlyArray<Types.ConnectedWalletFragmentFragment>\n  >([]);\n  const [useHardwareWallet, setUseHardwareWallet] = useState<boolean>(false);\n  const [useDiscord, setUseDiscord] = useState<boolean>(false);\n  const [loading, setLoading] = useState(false);\n\n  const [email, setEmail] = useState<string>('');\n  const [phoneNumber, setPhoneNumber] = useState<string>('');\n  const [telegramId, setTelegramId] = useState<string>('');\n  const [ftuStage, setFtuStage] = useState<FtuStage>(FtuStage.Done);\n\n  const [discordTargetData, setDiscordTargetData] = useState<\n    Types.DiscordTargetFragmentFragment | undefined\n  >(undefined);\n\n  const [destinationErrorMessages, setDestinationErrorMessages] =\n    useState<DestinationErrorMessages>({\n      email: undefined,\n      telegram: undefined,\n      phoneNumber: undefined,\n      discord: undefined,\n    });\n\n  const handleErrorMessage = ({\n    field,\n    value,\n  }: DestinationErrorMessageField) => {\n    setDestinationErrorMessages((destinationErrorMessages) => ({\n      ...destinationErrorMessages,\n      [field]: value,\n    }));\n  };\n\n  const setEmailErrorMessage = (value: DestinationError) => {\n    handleErrorMessage({ field: 'email', value });\n  };\n\n  const setTelegramErrorMessage = (value: DestinationError) => {\n    handleErrorMessage({ field: 'telegram', value });\n  };\n\n  const setPhoneNumberErrorMessage = (value: DestinationError) => {\n    handleErrorMessage({ field: 'phoneNumber', value });\n  };\n  const setDiscordErrorMessage = (value: DestinationError) => {\n    handleErrorMessage({ field: 'discord', value });\n  };\n\n  const resetErrorMessageState = () => {\n    setDestinationErrorMessages({\n      email: undefined,\n      telegram: undefined,\n      phoneNumber: undefined,\n      discord: undefined,\n    });\n  };\n\n  const syncFtuStage = useCallback(\n    async (isContactInfoRequired?: boolean) => {\n      const userSettings = await frontendClient.getUserSettings();\n      if (!userSettings?.ftuStage) {\n        if (isContactInfoRequired) {\n          return await updateFtuStage(FtuStage.Destination);\n        }\n        return await updateFtuStage(FtuStage.Alerts);\n      }\n      setFtuStage(userSettings.ftuStage);\n    },\n    [frontendClient?.userState?.status],\n  );\n\n  const updateFtuStage = useCallback(\n    async (ftuConfigStep: FtuStage) => {\n      await frontendClient.updateUserSettings({\n        input: { ftuStage: ftuConfigStep },\n      });\n      setFtuStage(ftuConfigStep);\n    },\n    [frontendClient?.userState?.status],\n  );\n\n  const {\n    setEmail: setFormEmail,\n    setTelegram: setFormTelegram,\n    setPhoneNumber: setFormPhoneNumber,\n  } = useNotifiForm();\n\n  const didFetch = React.useRef(false);\n\n  useEffect(() => {\n    // Initial fetch data\n    if (\n      !didFetch.current &&\n      frontendClient.userState?.status === 'authenticated' &&\n      isUsingFrontendClient\n    ) {\n      frontendClient\n        .fetchData()\n        .then((data) => {\n          render(data);\n          copyAuths(data);\n        })\n        .catch((_e) => {\n          /* Intentionally empty */\n        })\n        .finally(() => {\n          didFetch.current = true;\n        });\n    }\n  }, [frontendClient.userState]);\n\n  const copyAuths = useCallback(\n    async (data: Types.FetchDataQuery) => {\n      if (params.multiWallet !== undefined) {\n        params.multiWallet.ownedWallets.forEach((wallet) => {\n          const key = 'accountAddress';\n          const address = hasKey(wallet, key)\n            ? wallet[key]\n            : wallet.walletPublicKey;\n          if (\n            data.connectedWallet?.find(\n              (cw) =>\n                cw?.address === address &&\n                cw?.walletBlockchain === wallet.walletBlockchain,\n            ) !== undefined\n          ) {\n            frontendClient\n              .copyAuthorization({\n                walletBlockchain: 'SOLANA',\n                walletPublicKey: wallet.walletPublicKey,\n                env: params.env,\n                tenantId: params.dappAddress,\n                storageOption: { driverType: 'LocalForage' },\n              })\n              .catch(console.log);\n          }\n        });\n      }\n    },\n    [frontendClient, params],\n  );\n\n  const render = useCallback(\n    (newData: Types.FetchDataQuery): SubscriptionData => {\n      const targetGroup = newData.targetGroup?.find(\n        (tg) => tg?.name === 'Default',\n      );\n      const alerts: Record<string, Types.AlertFragmentFragment> = {};\n      newData.alert?.forEach((alert) => {\n        if (alert?.name) {\n          alerts[alert.name] = alert;\n        }\n      });\n      setAlerts(alerts);\n\n      setConnectedWallets(\n        newData.connectedWallet?.filter(\n          (wallet): wallet is Types.ConnectedWalletFragmentFragment => !!wallet,\n        ) ?? [],\n      );\n      const emailTarget = targetGroup?.emailTargets?.[0] ?? null;\n      const emailToSet = emailTarget?.emailAddress ?? '';\n\n      if (!!emailTarget && !emailTarget.isConfirmed) {\n        setEmailErrorMessage({\n          type: 'recoverableError',\n          onClick: () =>\n            frontendClient.sendEmailTargetVerification({\n              targetId: emailTarget.id,\n            }),\n          message: 'Resend Link',\n        });\n      } else {\n        setEmailErrorMessage(undefined);\n      }\n      setEmail(emailToSet);\n      setFormEmail(emailToSet);\n\n      const phoneNumber = targetGroup?.smsTargets?.[0]?.phoneNumber ?? null;\n      const isPhoneNumberConfirmed =\n        targetGroup?.smsTargets?.[0]?.isConfirmed ?? false;\n      const phoneNumberToSet = phoneNumber ?? '';\n\n      if (!!phoneNumber && !isPhoneNumberConfirmed) {\n        setPhoneNumberErrorMessage({\n          type: 'unrecoverableError',\n          message: 'Messages stopped',\n          tooltip: `Please text 'start' to the following number:\\n${\n            params.env === 'Production' ? '+1 206 222 3465' : '+1 253 880 1477 '\n          }`,\n        });\n      }\n\n      setFormPhoneNumber(phoneNumberToSet || '');\n      setPhoneNumber(phoneNumberToSet || '');\n\n      const telegramTarget = targetGroup?.telegramTargets?.[0] ?? null;\n      const telegramId = telegramTarget?.telegramId;\n\n      const telegramIdWithSymbolAdded =\n        telegramId !== '' && telegramId?.length\n          ? prefixTelegramWithSymbol(telegramId)\n          : null;\n\n      setFormTelegram(telegramId ?? '');\n      setTelegramId(telegramIdWithSymbolAdded ?? '');\n\n      if (!!telegramTarget && !telegramTarget?.isConfirmed) {\n        setTelegramErrorMessage({\n          type: 'recoverableError',\n          onClick: () => {\n            if (!telegramTarget?.confirmationUrl) {\n              return;\n            }\n\n            window.open(telegramTarget?.confirmationUrl);\n          },\n          message: 'Verify ID',\n        });\n      } else {\n        setTelegramErrorMessage(undefined);\n      }\n\n      const discordTarget = targetGroup?.discordTargets?.find(\n        (it) => it?.name === 'Default',\n      );\n\n      if (!!discordTarget && !discordTarget.isConfirmed) {\n        setDiscordErrorMessage({\n          type: 'recoverableError',\n          onClick: () => window.open(discordTarget.verificationLink, '_blank'),\n          message: 'Enable Bot',\n        });\n        setUseDiscord(true);\n        setDiscordTargetData(discordTarget);\n      } else if (!!discordTarget && discordTarget.isConfirmed) {\n        switch (discordTarget.userStatus) {\n          case 'DISCORD_SERVER_NOT_JOINED':\n            setDiscordErrorMessage({\n              type: 'recoverableError',\n              onClick: () =>\n                window.open(discordTarget.discordServerInviteLink, '_blank'),\n              message: 'Join Server',\n            });\n            break;\n          case 'COMPLETE':\n            setDiscordErrorMessage(undefined);\n            break;\n          default: // UNVERIFIED: Should never get in this state\n            throw new Error('Discord target in unexpected state');\n        }\n        setUseDiscord(true);\n        setDiscordTargetData(discordTarget);\n      } else {\n        setDiscordTargetData(undefined);\n        setUseDiscord(false);\n      }\n\n      return {\n        alerts,\n        email: emailTarget?.emailAddress ?? null,\n        isPhoneNumberConfirmed,\n        phoneNumber,\n        telegramConfirmationUrl: telegramTarget?.confirmationUrl ?? null,\n        telegramId: telegramTarget?.telegramId ?? null,\n        discordId: discordTarget?.id ?? null,\n      };\n    },\n    [setAlerts, setEmail, setPhoneNumber, setTelegramId],\n  );\n\n  const value = {\n    alerts,\n    connectedWallets,\n    email,\n    loading,\n    params,\n    phoneNumber,\n    contextId,\n    telegramId,\n    cardView,\n    telegramConfirmationUrl,\n    useHardwareWallet,\n    destinationErrorMessages,\n    setAlerts,\n    setConnectedWallets,\n    setCardView,\n    setEmail,\n    setLoading,\n    setPhoneNumber,\n    setTelegramId,\n    setTelegramConfirmationUrl,\n    setUseHardwareWallet,\n    intercomCardView,\n    setIntercomCardView,\n    hasChatAlert,\n    setHasChatAlert,\n    conversationId,\n    setConversationId,\n    userId,\n    setUserId,\n    setEmailErrorMessage,\n    setTelegramErrorMessage,\n    setPhoneNumberErrorMessage,\n    resetErrorMessageState,\n    setDiscordErrorMessage,\n    useDiscord,\n    setUseDiscord,\n    discordTargetData,\n    setDiscordTargetData,\n    render,\n    ftuStage,\n    syncFtuStage,\n    updateFtuStage,\n  };\n\n  return (\n    <NotifiSubscriptionContext.Provider value={value}>\n      {children}\n    </NotifiSubscriptionContext.Provider>\n  );\n};\n\nexport const useNotifiSubscriptionContext: () => NotifiSubscriptionData =\n  () => {\n    const data = useContext(NotifiSubscriptionContext);\n    return data;\n  };\n","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([457]\\\\d{6})$|1\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2457]\\\\d{6})$|1\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"([267]\\\\d{6})$|1\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"(183[12])|0\",0,0,0,[[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|22\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"00800\\\\d{7}|[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9,12],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"[24-689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]]]],\"BL\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:395|76[018])\\\\d{5}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-46-9]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-8]\\\\d{6})$|1\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-9]|33|44|66|77|88)|622)[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"10(?:10|9[56])|2[0-57-9](?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"(1(?:[12]\\\\d|79)\\\\d\\\\d)|0\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:60\\\\d\\\\d|9101)\\\\d{6}|(?:1\\\\d|3)\\\\d{9}\",[10,11],[[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|91\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0(4(?:[14]4|56)|[579])?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[0-579])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-246-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"[56]94\\\\d{6}|(?:80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]|97\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[89]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"([25-9]\\\\d{5})$|0\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d\\\\d|606)\\\\d{5}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0-489]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:395|76[018])\\\\d{5}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-9]\\\\d{6})$|1\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"(?:[2-489]\\\\d|55)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([25-8]\\\\d{5})$|0\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([0-24-8]\\\\d{5})$|0\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-8]\\\\d{6})$|1\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"(1001)|0\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:[25]\\\\d|33|77|88)\\\\d{7}|(?:2\\\\d|[4-6])\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29[1289]|389)\",\"529(?:1[1-46-9]|2[013-8]|90)|5(?:298|389)[0-46-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5293[01]\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|9[0-289])|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[0189]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|2[0-2]|6[0-8]|8[0-3]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:395|76[018])\\\\d{5}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"([24-9]\\\\d{6})$|0\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"596\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"([34]\\\\d{6})$|1\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[57]|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57]\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[34679]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"1(?:(?:[27]2|44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[01]\\\\d|2[13-9]|[35][1-9]|4[0-35-9]|6[0-46-9]|7[013-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|59\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}|(?:708|80\\\\d)\\\\d{6}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|800)\\\\d{6}|(?:0080|[3-7])\\\\d{7}\",[7,8,9,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[16]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"00\",\"(?:26|[689]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"26(?:2\\\\d\\\\d|3(?:0\\\\d|1[0-3]))\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\\\d|5[0-5]|6[0-6]|7[0-27]|8[0-8]|9[0-479]))|9(?:399[0-2]|4790|76(?:2[27]|3[0-37]|9\\\\d)))\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,0,[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-6]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"(?:2|90)4|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"(5\\\\d{6})$|1\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-479]\\\\d{6})$|1\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:00|[1-57-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-46-8]\\\\d{6})$|1\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:47220[01]|5(?:05(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|4[46]))|57200))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[0-2]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:0004|4)\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[7,8,10,13],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"(?:33|[5-79]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-578]\\\\d{6})$|1\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[478]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7(?:[24-6]|8[0-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"(?:(?:(?:26|63)9|80\\\\d)\\\\d\\\\d|93980)\\\\d{4}\",[9],0,\"0\",0,0,0,0,\"269|63|9398\"],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[35-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[0-36-9]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|[19]\\\\d{7}|(?:[25]\\\\d\\\\d|4)\\\\d{7}(?:\\\\d{2})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"49\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1[36]|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"16\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|23|3(?:[15]|4[57])|4|51\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-35]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|(?:3(?:2|47|7\\\\d{3})|50\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:345\\\\d|9[89])\\\\d{6}|(?:10|2(?:3|85\\\\d)|3(?:[15]|[69]\\\\d\\\\d)|4[15-8]|51)\\\\d{8}\"]]],\"883\":[\"883\",0,\"(?:[1-4]\\\\d|51)\\\\d{6,10}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,8})\",\"$1 $2 $3\",[\"[14]|2[24-689]|3[02-689]|51[24-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[235]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:2(?:00\\\\d\\\\d|10)|(?:370[1-9]|51\\\\d0)\\\\d)\\\\d{7}|51(?:00\\\\d{5}|[24-9]0\\\\d{4,7})|(?:1[013-79]|2[24-689]|3[02-689]|4[0-4])0\\\\d{5,9}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nexport default function withMetadataArgument(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}","// https://stackoverflow.com/a/46971044/970769\r\n// \"Breaking changes in Typescript 2.1\"\r\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\r\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\r\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\nexport default class ParseError extends Error {\r\n  constructor(code) {\r\n    super(code)\r\n    // Set the prototype explicitly.\r\n    // Any subclass of FooError will have to manually set the prototype as well.\r\n    Object.setPrototypeOf(this, ParseError.prototype)\r\n    this.name = this.constructor.name\r\n  }\r\n}","// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\n//\r\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\r\nexport default function(a, b) {\r\n    a = a.split('-')\r\n    b = b.split('-')\r\n    var pa = a[0].split('.')\r\n    var pb = b[0].split('.')\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i])\r\n        var nb = Number(pb[i])\r\n        if (na > nb) return 1\r\n        if (nb > na) return -1\r\n        if (!isNaN(na) && isNaN(nb)) return 1\r\n        if (isNaN(na) && !isNaN(nb)) return -1\r\n    }\r\n    if (a[1] && b[1]) {\r\n        return a[1] > b[1] ? 1 : (a[1] < b[1] ? -1 : 0)\r\n    }\r\n    return !a[1] && b[1] ? 1 : (a[1] && !b[1] ? -1 : 0)\r\n}","import compare from './tools/semver-compare.js'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\t// The test case could be found by searching for \"nonGeographical\".\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\t// In that metadata, there was no concept of \"non-geographic\" metadata\r\n\t\t\t// so metadata for `001` country code was stored along with other countries.\r\n\t\t\t// The test case can be found by searching for:\r\n\t\t\t// \"should work around `nonGeographic` metadata not existing\".\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\t// Is always present.\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\t// Is only present when a country supports multiple IDD prefixes.\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\t// \"possible length\" data is always present in Google's metadata.\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif (!is_object(metadata) || !is_object(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }","import { VALID_DIGITS } from '../../constants.js'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\r\nconst getExtensionDigitsPattern = (maxLength) => `([${VALID_DIGITS}]{1,${maxLength}})`\r\n\r\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\r\nexport default function createExtensionPattern(purpose) {\r\n\t// We cap the maximum length of an extension based on the ambiguity of the way\r\n\t// the extension is prefixed. As per ITU, the officially allowed length for\r\n\t// extensions is actually 40, but we don't support this since we haven't seen real\r\n\t// examples and this introduces many false interpretations as the extension labels\r\n\t// are not standardized.\r\n\t/** @type {string} */\r\n\tvar extLimitAfterExplicitLabel = '20';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterLikelyLabel = '15';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterAmbiguousChar = '9';\r\n\t/** @type {string} */\r\n\tvar extLimitWhenNotSure = '6';\r\n\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\u00A0\\\\t,]*\";\r\n\t// Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\r\n\t/** @type {string} */\r\n\tvar possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*\";\r\n\t/** @type {string} */\r\n\tvar optionalExtnSuffix = \"#?\";\r\n\r\n\t// Here the extension is called out in more explicit way, i.e mentioning it obvious\r\n\t// patterns like \"ext.\".\r\n\t/** @type {string} */\r\n\tvar explicitExtLabels =\r\n\t  \"(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\";\r\n\t// One-character symbols that can be used to indicate an extension, and less\r\n\t// commonly used or more ambiguous extension labels.\r\n\t/** @type {string} */\r\n\tvar ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\";\r\n\t// When extension is not separated clearly.\r\n\t/** @type {string} */\r\n\tvar ambiguousSeparator = \"[- ]+\";\r\n\t// This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\r\n\t// comma as extension label may have it.\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsNumberExtLabelNoComma = \"[ \\u00A0\\\\t]*\";\r\n\t// \",,\" is commonly used for auto dialling the extension when connected. First\r\n\t// comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\r\n\t// not repeat it here. Semi-colon works in Iphone and Android also to pop up a\r\n\t// button with the extension number following.\r\n\t/** @type {string} */\r\n\tvar autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\r\n\r\n\t/** @type {string} */\r\n\tvar rfcExtn = RFC3966_EXTN_PREFIX\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\r\n\t/** @type {string} */\r\n\tvar explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel)\r\n\t     + optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t+ getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar americanStyleExtnWithSuffix = ambiguousSeparator\r\n\t+ getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\r\n\r\n\t/** @type {string} */\r\n\tvar autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t     + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterLikelyLabel)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t    + \"(?:,)+\" + possibleCharsAfterExtLabel\r\n\t    + getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t    + optionalExtnSuffix;\r\n\r\n\t// The first regular expression covers RFC 3966 format, where the extension is added\r\n\t// using \";ext=\". The second more generic where extension is mentioned with explicit\r\n\t// labels like \"ext:\". In both the above cases we allow more numbers in extension than\r\n\t// any other extension labels. The third one captures when single character extension\r\n\t// labels or less commonly used labels are used. In such cases we capture fewer\r\n\t// extension digits in order to reduce the chance of falsely interpreting two\r\n\t// numbers beside each other as a number + extension. The fourth one covers the\r\n\t// special case of American numbers where the extension is written with a hash\r\n\t// at the end, such as \"- 503#\". The fifth one is exclusively for extension\r\n\t// autodialling formats which are used when dialling and in this case we accept longer\r\n\t// extensions. The last one is more liberal on the number of commas that acts as\r\n\t// extension labels, so we have a strict cap on the number of digits in such extensions.\r\n\treturn rfcExtn + \"|\"\r\n\t       + explicitExtn + \"|\"\r\n\t       + ambiguousExtn + \"|\"\r\n\t       + americanStyleExtnWithSuffix + \"|\"\r\n\t       + autoDiallingExtn + \"|\"\r\n\t       + onlyCommasExtn;\r\n}","import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from '../constants.js'\r\n\r\nimport createExtensionPattern from './extension/createExtensionPattern.js'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nexport const VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// This regular expression isn't present in Google's `libphonenumber`\r\n// and is only used to determine whether the phone number being input\r\n// is too short for it to even consider it a \"valid\" number.\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nconst VALID_PHONE_NUMBER_START_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){1,2}' +\r\n\t'$'\r\n, 'i')\r\n\r\nexport const VALID_PHONE_NUMBER_WITH_EXTENSION =\r\n\tVALID_PHONE_NUMBER +\r\n\t// Phone number extensions\r\n\t'(?:' + createExtensionPattern() + ')?'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER_WITH_EXTENSION +\r\n\t'$'\r\n, 'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number) {\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}\r\n\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nexport function isViablePhoneNumberStart(number) {\r\n\treturn VALID_PHONE_NUMBER_START_REG_EXP.test(number)\r\n}","import createExtensionPattern from './createExtensionPattern.js'\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport default function extractExtension(number) {\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst numberWithoutExtension = number.slice(0, start)\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length) {\r\n\t\tif (matches[i]) {\r\n\t\t\treturn {\r\n\t\t\t\tnumber: numberWithoutExtension,\r\n\t\t\t\text: matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS = {\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character) {\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}","import { parseDigit } from './helpers/parseDigits.js'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+') {\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (prevParsedCharacters) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport default function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b) {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","import mergeArrays from './mergeArrays.js'\r\n\r\nexport default function checkNumberLength(nationalNumber, metadata) {\r\n\treturn checkNumberLengthForType(nationalNumber, undefined, metadata)\r\n}\r\n\r\n// Checks whether a number is possible for the country based on its length.\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE')) {\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\t\tif (mobile_type) {\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths) {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// } else {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info) {\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length) {\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}","import Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\t// Old metadata (< 1.0.18) had no \"possible length\" data.\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","import isViablePhoneNumber from './isViablePhoneNumber.js'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text) {\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';')) {\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name) {\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext }) {\r\n\tif (!number) {\r\n\t\treturn ''\r\n\t}\r\n\tif (number[0] !== '+') {\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\r\nexport default function matchesEntirely(text, regular_expression) {\r\n\t// If assigning the `''` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\ttext = text || ''\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}","import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES = [\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\r\n\t\t// For example, for \"US\" country.\r\n\t\t// Old metadata (< `1.0.18`) had a specific \"types\" data structure\r\n\t\t// that happened to be `undefined` for `MOBILE` in that case.\r\n\t\t// Newer metadata (>= `1.0.18`) has another data structure that is\r\n\t\t// not `undefined` for `MOBILE` in that case (it's just an empty array).\r\n\t\t// So this `if` is just for backwards compatibility with old metadata.\r\n\t\tif (!metadata.type('MOBILE')) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const type of NON_FIXED_LINE_PHONE_TYPES) {\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\r\n\ttype = metadata.type(type)\r\n\tif (!type || !type.pattern()) {\r\n\t\treturn false\r\n\t}\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0) {\r\n\t\treturn false\r\n\t}\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}","import Metadata from './metadata.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes()) {\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n}","import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\r\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\tlet possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn []\r\n\t}\r\n\treturn possibleCountries.filter((country) => {\r\n\t\treturn couldNationalNumberBelongToCountry(nationalNumber, country, metadata)\r\n\t})\r\n}\r\n\r\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\t_metadata.selectNumberingPlan(country)\r\n\tif (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}","import { VALID_PUNCTUATION } from '../constants.js'\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\r\n\treturn formattedNumber.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly. Therefore, we use `\\d`, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport default function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\t{\r\n\t\tuseInternationalFormat,\r\n\t\twithNationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tmetadata\r\n\t}\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat\r\n\t\t\t? format.internationalFormat()\r\n\t\t\t: (\r\n\t\t\t\t// This library doesn't use `domestic_carrier_code_formatting_rule`,\r\n\t\t\t\t// because that one is only used when formatting phone numbers\r\n\t\t\t\t// for dialing from a mobile phone, and this is not a dialing library.\r\n\t\t\t\t// carrierCode && format.domesticCarrierCodeFormattingRule()\r\n\t\t\t\t// \t// First, replace the $CC in the formatting rule with the desired carrier code.\r\n\t\t\t\t// \t// Then, replace the $FG in the formatting rule with the first group\r\n\t\t\t\t// \t// and the carrier code combined in the appropriate way.\r\n\t\t\t\t// \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\r\n\t\t\t\t// \t: (\r\n\t\t\t\t// \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t// \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t// \t\t\t: format.format()\r\n\t\t\t\t// \t)\r\n\t\t\t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t\t: format.format()\r\n\t\t\t)\r\n\t)\r\n\tif (useInternationalFormat) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}","import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport default function getIddPrefix(country, callingCode, metadata) {\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tif (countryMetadata.defaultIDDPrefix()) {\r\n\t\treturn countryMetadata.defaultIDDPrefix()\r\n\t}\r\n\tif (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n}\r\n","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\nimport Metadata, { getCountryCallingCode } from './metadata.js'\r\nimport getIddPrefix from './helpers/getIddPrefix.js'\r\nimport { formatRFC3966 } from './helpers/RFC3966.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits.\r\n\t\t// The test case for \"else path\" could be found by searching for\r\n\t\t// \"format.leadingDigitsPatterns().length === 0\".\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}","import Metadata from './metadata.js'\r\nimport isPossibleNumber from './isPossible.js'\r\nimport isValidNumber from './isValid.js'\r\n// import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js'\r\nimport formatNumber from './format.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryOrCountryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryOrCountryCallingCode) {\r\n\t\t\tthrow new TypeError('`country` or `countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\tif (!metadata) {\r\n\t\t\tthrow new TypeError('`metadata` not passed')\r\n\t\t}\r\n\t\tconst { country, countryCallingCode } = getCountryAndCountryCallingCode(\r\n\t\t\tcountryOrCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tthis.country = country\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tgetPossibleCountries() {\r\n\t\tif (this.country) {\r\n\t\t\treturn [this.country]\r\n\t\t}\r\n\t\treturn getPossibleCountriesForNumber(\r\n\t\t\tthis.countryCallingCode,\r\n\t\t\tthis.nationalNumber,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.metadata)\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\r\n\t// but later it was found out that it doesn't include the possible `TOO_SHORT` result\r\n\t// returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\r\n\t// so eventually I simply commented out this method from the `PhoneNumber` class\r\n\t// and just left the `validatePhoneNumberLength()` function, even though that one would require\r\n\t// and additional step to also validate the actual country / calling code of the phone number.\r\n\t// validateLength() {\r\n\t// \tconst metadata = new Metadata(this.metadata)\r\n\t// \tmetadata.selectNumberingPlan(this.countryCallingCode)\r\n\t// \tconst result = checkNumberLength(this.nationalNumber, metadata)\r\n\t// \tif (result !== 'IS_POSSIBLE') {\r\n\t// \t\treturn result\r\n\t// \t}\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)\r\n\r\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\r\n\tlet country\r\n\tlet countryCallingCode\r\n\r\n\tconst metadata = new Metadata(metadataJson)\r\n\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t// Also store the country code as `.country`.\r\n\tif (isCountryCode(countryOrCountryCallingCode)) {\r\n\t\tcountry = countryOrCountryCallingCode\r\n\t\tmetadata.selectNumberingPlan(country)\r\n\t\tcountryCallingCode = metadata.countryCallingCode()\r\n\t} else {\r\n\t\tcountryCallingCode = countryOrCountryCallingCode\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tif (metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\tcountry = '001'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode\r\n\t}\r\n}","import Metadata from '../metadata.js'\r\nimport { VALID_DIGITS } from '../constants.js'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\t// Check if the number is IDD-prefixed.\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\t// If there're any digits after an IDD prefix,\r\n\t// then those digits are a country calling code.\r\n\t// Since no country code starts with a `0`,\r\n\t// the code below validates that the next digit (if present) is not `0`.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\r\n\t\tif (matchedGroups[1] === '0') {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\r\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\r\n\tif (number && metadata.numberingPlan.nationalPrefixForParsing()) {\r\n\t\t// See METADATA.md for the description of\r\n\t\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\t\t// Attempt to parse the first digits as a national prefix.\r\n\t\tconst prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')')\r\n\t\tconst prefixMatch = prefixPattern.exec(number)\r\n\t\tif (prefixMatch) {\r\n\t\t\tlet nationalNumber\r\n\t\t\tlet carrierCode\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\t\t// If a `national_prefix_for_parsing` has any \"capturing groups\"\r\n\t\t\t// then it means that the national (significant) number is equal to\r\n\t\t\t// those \"capturing groups\" transformed via `national_prefix_transform_rule`,\r\n\t\t\t// and nothing could be said about the actual national prefix:\r\n\t\t\t// what is it and was it even there.\r\n\t\t\t// If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\r\n\t\t\t// then everything it matches is a national prefix.\r\n\t\t\t// To determine whether `national_prefix_for_parsing` matched any\r\n\t\t\t// \"capturing groups\", the value of the result of calling `.exec()`\r\n\t\t\t// is looked at, and if it has non-undefined values where there're\r\n\t\t\t// \"capturing groups\" in the regular expression, then it means\r\n\t\t\t// that \"capturing groups\" have been matched.\r\n\t\t\t// It's not possible to tell whether there'll be any \"capturing gropus\"\r\n\t\t\t// before the matching process, because a `national_prefix_for_parsing`\r\n\t\t\t// could exhibit both behaviors.\r\n\t\t\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\t\t\tconst hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]\r\n\t\t\tif (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\r\n\t\t\t\tnationalNumber = number.replace(\r\n\t\t\t\t\tprefixPattern,\r\n\t\t\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t\t\t)\r\n\t\t\t\t// If there's more than one captured group,\r\n\t\t\t\t// then carrier code is the second one.\r\n\t\t\t\tif (capturedGroupsCount > 1) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If there're no \"capturing groups\",\r\n\t\t\t// or if there're \"capturing groups\" but no\r\n\t\t\t// `national_prefix_transform_rule`,\r\n\t\t\t// then just strip the national prefix from the number,\r\n\t\t\t// and possibly a carrier code.\r\n\t\t\t// Seems like there could be more.\r\n\t\t\telse {\r\n\t\t\t\t// `prefixBeforeNationalNumber` is the whole substring matched by\r\n\t\t\t\t// the `national_prefix_for_parsing` regular expression.\r\n\t\t\t\t// There seem to be no guarantees that it's just a national prefix.\r\n\t\t\t\t// For example, if there's a carrier code, it's gonna be a\r\n\t\t\t\t// part of `prefixBeforeNationalNumber` too.\r\n\t\t\t\tconst prefixBeforeNationalNumber = prefixMatch[0]\r\n\t\t\t\tnationalNumber = number.slice(prefixBeforeNationalNumber.length)\r\n\t\t\t\t// If there's at least one captured group,\r\n\t\t\t\t// then carrier code is the first one.\r\n\t\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Tries to guess whether a national prefix was present in the input.\r\n\t\t\t// This is not something copy-pasted from Google's library:\r\n\t\t\t// they don't seem to have an equivalent for that.\r\n\t\t\t// So this isn't an \"officially approved\" way of doing something like that.\r\n\t\t\t// But since there seems no other existing method, this library uses it.\r\n\t\t\tlet nationalPrefix\r\n\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\tconst possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1])\r\n\t\t\t\tconst possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup)\r\n\t\t\t\t// Example: an Argentinian (AR) phone number `0111523456789`.\r\n\t\t\t\t// `prefixMatch[0]` is `01115`, and `$1` is `11`,\r\n\t\t\t\t// and the rest of the phone number is `23456789`.\r\n\t\t\t\t// The national number is transformed via `9$1` to `91123456789`.\r\n\t\t\t\t// National prefix `0` is detected being present at the start.\r\n\t\t\t\t// if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\r\n\t\t\t\tif (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\r\n\t\t\t\t\tnationalPrefix = metadata.numberingPlan.nationalPrefix()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnationalPrefix = prefixMatch[0]\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tnationalPrefix,\r\n\t\t\t\tcarrierCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   return {\r\n   \tnationalNumber: number\r\n   }\r\n}","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\n\r\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumber(number, metadata) {\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tcarrierCode,\r\n\t\tnationalNumber\r\n\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\tnumber,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (nationalNumber !== number) {\r\n\t\tif (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\r\n\t\t\t// Don't strip the national prefix.\r\n\t\t\treturn { nationalNumber: number }\r\n\t\t}\r\n\t\t// Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t\t// Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\r\n\t\tif (metadata.possibleLengths()) {\r\n\t\t\t// The number remaining after stripping the national prefix and carrier code\r\n\t\t\t// should be long enough to have a possible length for the country.\r\n\t\t\t// Otherwise, don't strip the national prefix and carrier code,\r\n\t\t\t// since the original number could be a valid number.\r\n\t\t\t// This check has been copy-pasted \"as is\" from Google's original library:\r\n\t\t\t// https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\r\n\t\t\t// It doesn't check for the \"possibility\" of the original `number`.\r\n\t\t\t// I guess it's fine not checking that one. It works as is anyway.\r\n\t\t\tif (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\r\n\t\t\t\t// Don't strip the national prefix.\r\n\t\t\t\treturn { nationalNumber: number }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { nationalNumber, carrierCode }\r\n}\r\n\r\n// In some countries, the same digit could be a national prefix\r\n// or a leading digit of a valid phone number.\r\n// For example, in Russia, national prefix is `8`,\r\n// and also `800 555 35 35` is a valid number\r\n// in which `8` is not a national prefix, but the first digit\r\n// of a national (significant) number.\r\n// Same's with Belarus:\r\n// `82004910060` is a valid national (significant) number,\r\n// but `2004910060` is not.\r\n// To support such cases (to prevent the code from always stripping\r\n// national prefix), a condition is imposed: a national prefix\r\n// is not extracted when the original number is \"viable\" and the\r\n// resultant number is not, a \"viable\" national number being the one\r\n// that matches `national_number_pattern`.\r\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\r\n\t// The equivalent in Google's code is:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\r\n\tif (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) &&\r\n\t\t!matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\r\n\t\treturn false\r\n\t}\r\n\t// This \"is possible\" national number (length) check has been commented out\r\n\t// because it's superceded by the (effectively) same check done in the\r\n\t// `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\r\n\t// In other words, why run the same check twice if it could only be run once.\r\n\t// // Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t// // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\r\n\t// // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\r\n\t// if (metadata.possibleLengths()) {\r\n\t// \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\r\n\t// \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\r\n\t// \t\treturn false\r\n\t// \t}\r\n\t// }\r\n\treturn true\r\n}\r\n\r\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'TOO_SHORT':\r\n\t\tcase 'INVALID_LENGTH':\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\treturn false\r\n\t\tdefault:\r\n\t\t\treturn true\r\n\t}\r\n}","import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport extractNationalNumber from './extractNationalNumber.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\nimport getCountryCallingCode from '../getCountryCallingCode.js'\r\n\r\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\r\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tconst countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode\r\n\tif (number.indexOf(countryCallingCode) === 0) {\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(country, callingCode)\r\n\t\tconst possibleShorterNumber = number.slice(countryCallingCode.length)\r\n\t\tconst {\r\n\t\t\tnationalNumber: possibleShorterNationalNumber,\r\n\t\t} = extractNationalNumber(\r\n\t\t\tpossibleShorterNumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tconst {\r\n\t\t\tnationalNumber\r\n\t\t} = extractNationalNumber(\r\n\t\t\tnumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// If the number was not valid before but is valid now,\r\n\t\t// or if it was too long before, we consider the number\r\n\t\t// with the country calling code stripped to be a better result\r\n\t\t// and keep that instead.\r\n\t\t// For example, in Germany (+49), `49` is a valid area code,\r\n\t\t// so if a number starts with `49`, it could be both a valid\r\n\t\t// national German number or an international number without\r\n\t\t// a leading `+`.\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t\t&&\r\n\t\t\t\tmatchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t)\r\n\t\t\t||\r\n\t\t\tcheckNumberLength(nationalNumber, metadata) === 'TOO_LONG'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: possibleShorterNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { number }\r\n}","import stripIddPrefix from './stripIddPrefix.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport Metadata from '../metadata.js'\r\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js'\r\n\r\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\r\nexport default function extractCountryCallingCode(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then either extract an \"IDD\" prefix, or extract a\r\n\t// country calling code from a number by autocorrecting it\r\n\t// by prepending a leading `+` in cases when it starts\r\n\t// with the country calling code.\r\n\t// https://wikitravel.org/en/International_dialling_prefix\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata)\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\t// Check to see if the number starts with the country calling code\r\n\t\t\t// for the default country. If so, we remove the country calling code,\r\n\t\t\t// and do some checks on the validity of the number before and after.\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\t\tnumber,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcallingCode,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t\tif (countryCallingCode) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}","import Metadata from '../metadata.js'\r\nimport getNumberType from './getNumberType.js'\r\n\r\nexport default function getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// \"Leading digits\" patterns are only defined for about 20% of all countries.\r\n\t\t// By definition, matching \"leading digits\" is a sufficient but not a necessary\r\n\t\t// condition for a phone number to belong to a country.\r\n\t\t// The point of \"leading digits\" check is that it's the fastest one to get a match.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}","import getCountryByNationalNumber from './getCountryByNationalNumber.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN\r\n} from './constants.js'\r\n\r\nimport ParseError from './ParseError.js'\r\nimport Metadata from './metadata.js'\r\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js'\r\nimport extractExtension from './helpers/extension/extractExtension.js'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js'\r\nimport getCountryCallingCode from './getCountryCallingCode.js'\r\nimport { isPossibleNumber } from './isPossible.js'\r\nimport { parseRFC3966 } from './helpers/RFC3966.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractNationalNumber from './helpers/extractNationalNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\r\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// Examples:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\n\r\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext, error } = parseInput(text, options.v2, options.extract)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tif (error === 'TOO_SHORT') {\r\n\t\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t\t}\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\t// isInternational: countryCallingCode !== undefined\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (throwOnError) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\tif (extract === false) {\r\n\t\treturn text\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2, extract) {\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0) {\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\tlet number = extractFormattedPhoneNumber(text, extract, v2)\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\tif (isViablePhoneNumberStart(number)) {\r\n\t\t\treturn { error: 'TOO_SHORT' }\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst withExtensionStripped = extractExtension(number)\r\n\tif (withExtensionStripped.ext) {\r\n\t\treturn withExtensionStripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, nationalNumber, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone: nationalNumber\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\t// Extract calling code from phone number.\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tparseIncompletePhoneNumber(formattedPhoneNumber),\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\t// Choose a country by `countryCallingCode`.\r\n\tlet country\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t}\r\n\t// If `formattedPhoneNumber` is passed in \"national\" format\r\n\t// then `number` is defined and `countryCallingCode` is `undefined`.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumber(\r\n\t\tparseIncompletePhoneNumber(number),\r\n\t\tmetadata\r\n\t)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata)\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}","import parse from './parse.js'\r\n\r\nexport default function parsePhoneNumberWithError(text, options, metadata) {\r\n\treturn parse(text, { ...options, v2: true }, metadata)\r\n}","// Extracts the following properties from function arguments:\r\n// * input `text`\r\n// * `options` object\r\n// * `metadata` JSON\r\nexport default function normalizeArguments(args) {\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'","import parsePhoneNumberWithError_ from './parsePhoneNumberWithError_.js'\r\nimport normalizeArguments from './normalizeArguments.js'\r\n\r\nexport default function parsePhoneNumberWithError() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberWithError_(text, options, metadata)\r\n}","import parsePhoneNumberWithError from './parsePhoneNumberWithError_.js'\r\nimport ParseError from './ParseError.js'\r\nimport { isSupportedCountry } from './metadata.js'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumberWithError(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber from './parsePhoneNumber_.js'\r\n\r\nexport default function isValidPhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isValid() || false\r\n}","import withMetadataArgument from './withMetadataArgument.js'\r\nimport { parsePhoneNumberWithError as _parsePhoneNumberWithError } from '../../core/index.js'\r\n\r\nexport function parsePhoneNumberWithError() {\r\n\treturn withMetadataArgument(_parsePhoneNumberWithError, arguments)\r\n}\r\n","import withMetadataArgument from './withMetadataArgument.js'\r\nimport { isValidPhoneNumber as _isValidPhoneNumber } from '../../core/index.js'\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn withMetadataArgument(_isValidPhoneNumber, arguments)\r\n}","import { ConnectWalletParams } from '@notifi-network/notifi-frontend-client';\nimport { Types } from '@notifi-network/notifi-graphql';\nimport { isValidPhoneNumber } from 'libphonenumber-js';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nimport {\n  defaultDemoConfigV1,\n  useNotifiDemoPreviewContext,\n  useNotifiSubscriptionContext,\n} from '../context';\nimport { useNotifiClientContext } from '../context/NotifiClientContext';\nimport {\n  formatTelegramForSubscription,\n  prefixTelegramWithSymbol,\n} from '../utils/stringUtils';\nimport { walletToSource } from '../utils/walletUtils';\nimport { useNotifiForm } from './../context/NotifiFormContext';\nimport { AlertConfiguration } from './../utils/AlertConfiguration';\n\nexport type ClientData = Readonly<{\n  alerts: ReadonlyArray<Types.AlertFragmentFragment>;\n  connectedWallets: ReadonlyArray<Types.ConnectedWallet>;\n  emailTargets: ReadonlyArray<Types.EmailTargetFragmentFragment>;\n  filters: ReadonlyArray<Types.FilterFragmentFragment>;\n  smsTargets: ReadonlyArray<Types.SmsTargetFragmentFragment>;\n  sources: ReadonlyArray<Types.SourceFragmentFragment>;\n  targetGroups: ReadonlyArray<Types.TargetGroupFragmentFragment>;\n  telegramTargets: ReadonlyArray<Types.TelegramTargetFragmentFragment>;\n  sourceGroups: ReadonlyArray<Types.SourceGroupFragmentFragment>;\n  discordTargets: ReadonlyArray<Types.DiscordTargetFragmentFragment>;\n}>;\n\nexport type SubscriptionData = Readonly<{\n  alerts: Readonly<Record<string, Types.AlertFragmentFragment>>;\n  email: string | null;\n  phoneNumber: string | null;\n  telegramId: string | null;\n  telegramConfirmationUrl: string | null;\n  isPhoneNumberConfirmed: boolean | null;\n  discordId: string | null;\n}>;\n\nexport type InstantSubscribe = Readonly<{\n  alertName: string;\n  alertConfiguration: AlertConfiguration | null;\n}>;\n\ntype useNotifiSubscribeProps = Readonly<{\n  targetGroupName?: string;\n}>;\n\nconst hasKey = <K extends string>(\n  obj: object,\n  key: K,\n): obj is object & { [k in K]: unknown } => {\n  return typeof obj === 'object' && obj !== null && key in obj;\n};\n\nexport const useNotifiSubscribe: ({\n  targetGroupName,\n}: useNotifiSubscribeProps) => Readonly<{\n  isAuthenticated: boolean;\n  isEmailConfirmationSent: boolean;\n  isInitialized: boolean;\n  isTokenExpired: boolean;\n  logIn: () => Promise<SubscriptionData>;\n  subscribe: (\n    alertConfigs: Record<string, AlertConfiguration | null>,\n  ) => Promise<SubscriptionData>;\n  subscribeWallet: (walletParams: ConnectWalletParams) => Promise<void>;\n  updateWallets: () => Promise<void>;\n  instantSubscribe: (\n    subscribeData: InstantSubscribe,\n  ) => Promise<SubscriptionData>;\n  updateTargetGroups: () => Promise<SubscriptionData>;\n  resendEmailVerificationLink: (emailId: string) => Promise<string>;\n  reload: () => Promise<SubscriptionData>;\n}> = ({ targetGroupName = 'Default' }: useNotifiSubscribeProps) => {\n  const { demoPreview } = useNotifiDemoPreviewContext();\n  const { isUsingFrontendClient } = useNotifiClientContext();\n\n  const { client } = useNotifiClientContext();\n\n  const {\n    formState,\n    setEmail: setFormEmail,\n    setTelegram: setFormTelegram,\n    setPhoneNumber: setFormPhoneNumber,\n  } = useNotifiForm();\n\n  const {\n    email: formEmail,\n    telegram: formTelegram,\n    phoneNumber: formPhoneNumber,\n  } = formState;\n\n  const {\n    params,\n    setAlerts,\n    setConnectedWallets,\n    setEmail,\n    setLoading,\n    setPhoneNumber,\n    setTelegramId,\n    setPhoneNumberErrorMessage,\n    useHardwareWallet,\n    resetErrorMessageState,\n    setTelegramErrorMessage,\n    setEmailErrorMessage,\n    setDiscordErrorMessage,\n    setUseDiscord,\n    useDiscord,\n    setDiscordTargetData,\n    discordTargetData: discordTargetDatafromSubscriptionContext,\n  } = useNotifiSubscriptionContext();\n\n  const { keepSubscriptionData = true, walletPublicKey } = params;\n\n  const [isEmailConfirmationSent, setIsEmailConfirmationSent] =\n    useState<boolean>(false);\n\n  const resendEmailVerificationLink = useCallback(\n    async (emailId: string) => {\n      const resend = await client.sendEmailTargetVerification({\n        targetId: emailId,\n      });\n\n      return resend;\n    },\n    [client.sendEmailTargetVerification],\n  );\n\n  const handleMissingDiscordTarget = (\n    discordTargets: ReadonlyArray<Types.DiscordTargetFragmentFragment>,\n  ): void => {\n    // Check for the default, and if none exists, use the first discord target.\n    const target =\n      discordTargets?.find((target) => target.name === 'Default') ||\n      discordTargets?.[0];\n\n    setDiscordTargetData(target);\n  };\n\n  const render = useCallback(\n    (newData: ClientData | null): SubscriptionData => {\n      const targetGroup = newData?.targetGroups.find(\n        (tg) => tg.name === targetGroupName,\n      );\n\n      const alerts: Record<string, Types.AlertFragmentFragment> = {};\n      newData?.alerts.forEach((alert) => {\n        if (alert?.name) {\n          alerts[alert.name] = alert;\n        }\n      });\n\n      setAlerts(alerts);\n      setConnectedWallets(newData?.connectedWallets ?? []);\n      const emailTarget = targetGroup?.emailTargets?.[0] ?? null;\n      const emailToSet = emailTarget?.emailAddress ?? '';\n\n      if (emailTarget !== null && emailTarget?.isConfirmed === false) {\n        setEmailErrorMessage({\n          type: 'recoverableError',\n          onClick: () => {\n            resendEmailVerificationLink(emailTarget.id ?? '');\n          },\n          message: 'Resend Link',\n        });\n      } else {\n        setEmailErrorMessage(undefined);\n      }\n\n      setFormEmail(emailToSet);\n      setEmail(emailToSet);\n\n      const phoneNumber = targetGroup?.smsTargets?.[0]?.phoneNumber ?? null;\n\n      const isPhoneNumberConfirmed =\n        targetGroup?.smsTargets?.[0]?.isConfirmed ?? null;\n\n      const phoneNumberToSet = phoneNumber ?? '';\n\n      if (!isPhoneNumberConfirmed) {\n        setPhoneNumberErrorMessage({\n          type: 'unrecoverableError',\n          message: 'Messages stopped',\n          tooltip: `Please text 'start' to the following number:\\n${\n            params.env === 'Production' ? '+1 206 222 3465' : '+1 253 880 1477 '\n          }`,\n        });\n      }\n\n      setFormPhoneNumber(phoneNumberToSet);\n      setPhoneNumber(phoneNumberToSet);\n\n      const telegramTarget = targetGroup?.telegramTargets?.[0];\n      const telegramId = telegramTarget?.telegramId;\n\n      const telegramIdWithSymbolAdded =\n        telegramId !== '' && telegramId?.length\n          ? prefixTelegramWithSymbol(telegramId)\n          : null;\n\n      setFormTelegram(telegramId ?? '');\n      setTelegramId(telegramIdWithSymbolAdded ?? '');\n\n      if (telegramTarget?.isConfirmed === false) {\n        setTelegramErrorMessage({\n          type: 'recoverableError',\n          onClick: () => {\n            if (!telegramTarget?.confirmationUrl) {\n              return;\n            }\n\n            window.open(telegramTarget?.confirmationUrl);\n          },\n          message: 'Verify ID',\n        });\n      } else {\n        setTelegramErrorMessage(undefined);\n      }\n\n      const discordTarget = targetGroup?.discordTargets?.find(\n        (it) => it?.name === 'Default',\n      );\n\n      const discordId = discordTarget?.id;\n\n      if (discordId) {\n        const {\n          isConfirmed,\n          userStatus,\n          verificationLink,\n          discordServerInviteLink,\n        } = discordTarget;\n\n        if (!isConfirmed) {\n          setDiscordErrorMessage({\n            type: 'recoverableError',\n            onClick: () => window.open(verificationLink, '_blank'),\n            message: 'Enable Bot',\n          });\n        } else if (userStatus === 'DISCORD_SERVER_NOT_JOINED') {\n          setDiscordErrorMessage({\n            type: 'recoverableError',\n            onClick: () => window.open(discordServerInviteLink, '_blank'),\n            message: 'Join Server',\n          });\n        } else {\n          setDiscordErrorMessage(undefined);\n        }\n        setUseDiscord(true);\n        setDiscordTargetData(discordTarget);\n      } else {\n        handleMissingDiscordTarget(newData?.discordTargets ?? []);\n        setUseDiscord(false);\n      }\n\n      return {\n        alerts,\n        email: emailTarget?.emailAddress ?? null,\n        isPhoneNumberConfirmed,\n        phoneNumber,\n        telegramConfirmationUrl: telegramTarget?.confirmationUrl ?? null,\n        telegramId: telegramTarget?.telegramId ?? null,\n        discordId: discordTarget?.id ?? null,\n      };\n    },\n    [\n      setAlerts,\n      setEmail,\n      setPhoneNumber,\n      setTelegramId,\n      setIsEmailConfirmationSent,\n    ],\n  );\n\n  const copyAuths = useCallback(\n    async (data: ClientData) => {\n      if (params.multiWallet !== undefined) {\n        params.multiWallet.ownedWallets.forEach((wallet) => {\n          const key = 'accountAddress';\n          const address = hasKey(wallet, key)\n            ? wallet[key]\n            : wallet.walletPublicKey;\n          if (\n            data.connectedWallets.find(\n              (cw) =>\n                cw?.address === address &&\n                cw?.walletBlockchain === wallet.walletBlockchain,\n            ) !== undefined\n          ) {\n            client.copyAuthorization(wallet.walletPublicKey).catch(console.log);\n          }\n        });\n      }\n    },\n    [client, params],\n  );\n\n  // Initial fetch\n  const didFetch = useRef(false);\n  useEffect(() => {\n    if (demoPreview) {\n      // Mockup info for demo preview card\n      setEmail(defaultDemoConfigV1.name);\n      setPhoneNumber('+101234567890');\n      setTelegramId(defaultDemoConfigV1.id ?? 'testTelegramId');\n      setUseDiscord(true);\n    }\n\n    if (client.isAuthenticated && !didFetch.current && !isUsingFrontendClient) {\n      didFetch.current = true;\n      client\n        .fetchData()\n        .then((data) => {\n          copyAuths(data);\n          render(data);\n        })\n        .catch((_e) => {\n          /* Intentionally empty */\n        });\n    }\n  }, [client.isAuthenticated]);\n\n  const logInViaHardwareWallet =\n    useCallback(async (): Promise<SubscriptionData> => {\n      if (demoPreview) {\n        throw new Error('Preview card does not support method call');\n      }\n      if (params.walletBlockchain !== 'SOLANA') {\n        throw new Error('Unsupported wallet blockchain');\n      }\n\n      const plugin = params.hardwareLoginPlugin;\n\n      // Obtain nonce from Notifi\n      const { logValue } = await client.beginLoginViaTransaction();\n\n      // Commit a transaction with the Memo program\n      const signature = await plugin.sendMessage(logValue);\n\n      // Inform Notifi of the signature so that we can complete login\n      await client.completeLoginViaTransaction({\n        transactionSignature: signature,\n      });\n\n      const newData = await client.fetchData();\n      return render(newData);\n    }, [walletPublicKey, client, params, render]);\n\n  const reload = useCallback(async (): Promise<SubscriptionData> => {\n    const newData = await client.fetchData(true);\n    copyAuths(newData);\n    const results = render(newData);\n    return results;\n  }, [client.fetchData, copyAuths, render]);\n\n  const logIn = useCallback(async (): Promise<SubscriptionData> => {\n    if (demoPreview)\n      throw new Error('Preview card does not support method call');\n    if (!client.isAuthenticated) {\n      if (useHardwareWallet) {\n        await logInViaHardwareWallet();\n      } else {\n        await client.logIn(params);\n      }\n    }\n\n    const newData = await client.fetchData();\n\n    copyAuths(newData);\n    const results = render(newData);\n    return results;\n  }, [\n    client.isAuthenticated,\n    client.logIn,\n    client.fetchData,\n    params,\n    useHardwareWallet,\n    logInViaHardwareWallet,\n    render,\n    setLoading,\n    copyAuths,\n  ]);\n\n  const updateAlertInternal = useCallback(\n    async (\n      alertParams: InstantSubscribe,\n      data: ClientData,\n      contacts: Readonly<{\n        finalEmail: string | undefined;\n        finalPhoneNumber: string | undefined;\n        finalTelegramId: string | undefined;\n        finalDiscordId: string | undefined;\n      }>,\n    ): Promise<Types.AlertFragmentFragment | null> => {\n      if (demoPreview) throw Error('Preview card does not support method call');\n      const { alertName, alertConfiguration } = alertParams;\n      const { finalEmail, finalPhoneNumber, finalTelegramId } = contacts;\n      const existingAlert = data.alerts.find(\n        (alert) => alert?.name === alertName,\n      );\n\n      const deleteThisAlert = async () => {\n        if (existingAlert !== undefined && existingAlert.id !== null) {\n          await client.deleteAlert({\n            alertId: existingAlert.id,\n            keepSourceGroup: keepSubscriptionData,\n            keepTargetGroup: keepSubscriptionData,\n          });\n        }\n      };\n\n      const ensureSource = async (\n        params: Types.CreateSourceInput,\n      ): Promise<Types.SourceFragmentFragment> => {\n        const existing = data.sources.find(\n          (s) =>\n            s.type === params.type &&\n            s.blockchainAddress === params.blockchainAddress &&\n            s.fusionEventTypeId === params.fusionEventTypeId,\n        );\n        if (existing !== undefined) {\n          return existing;\n        }\n\n        const created = await client.createSource(params);\n        return created;\n      };\n      if (alertConfiguration === null) {\n        await deleteThisAlert();\n        return null;\n      } else if (alertConfiguration.type === 'multiple') {\n        const {\n          filterOptions,\n          filterType,\n          sources: sourcesInput,\n          sourceGroupName,\n          maintainSourceGroup,\n        } = alertConfiguration;\n\n        const sources = await Promise.all(sourcesInput.map(ensureSource));\n        const filter = sources\n          .flatMap((s) => s.applicableFilters)\n          .find((f) => f?.filterType === filterType);\n        if (filter === undefined || filter.id === null) {\n          await deleteThisAlert();\n          throw new Error(\n            `No applicableFilters filter for sources: ${JSON.stringify(\n              sources,\n            )}`,\n          );\n        } else {\n          const sourceIds: string[] = [];\n          const existingSourceGroup = data.sourceGroups.find(\n            (sourceGroup) =>\n              sourceGroup?.name === (sourceGroupName ?? alertName),\n          );\n\n          if (maintainSourceGroup && existingSourceGroup) {\n            existingSourceGroup.sources?.forEach((s) => {\n              const id = s?.id;\n              if (id !== null && id !== undefined) {\n                sourceIds.push(id);\n              }\n            });\n          } else {\n            sources.forEach((s) => {\n              if (s.id !== null) {\n                sourceIds.push(s.id);\n              }\n            });\n          }\n\n          // Call serially because of limitations\n          await deleteThisAlert();\n\n          const alert = await client.createAlert({\n            emailAddress: finalEmail,\n            filterId: filter.id,\n            filterOptions: filterOptions ?? undefined,\n            groupName: 'managed',\n            name: alertName,\n            phoneNumber: finalPhoneNumber,\n            sourceId: '',\n            targetGroupName,\n            telegramId: finalTelegramId,\n            sourceIds,\n            includeDiscord: useDiscord,\n            sourceGroupName,\n          });\n\n          return alert;\n        }\n      } else {\n        const {\n          createSource: createSourceParam,\n          filterOptions,\n          filterType,\n          sourceType,\n          sourceGroupName,\n          maintainSourceGroup,\n        } = alertConfiguration;\n\n        let source: Types.Maybe<Types.SourceFragmentFragment>;\n\n        if (createSourceParam !== undefined) {\n          const eventTypeId = createSourceParam.fusionEventTypeId;\n          const address = createSourceParam.address;\n          const name =\n            eventTypeId !== undefined ? `${eventTypeId}:;:${address}` : address;\n          source = await ensureSource({\n            name,\n            blockchainAddress: address,\n            type: sourceType,\n            fusionEventTypeId: eventTypeId,\n          });\n        } else {\n          source = data.sources.find((s) => s.type === sourceType);\n        }\n\n        const filter = source?.applicableFilters?.find(\n          (f) => f?.filterType === filterType,\n        );\n\n        if (\n          source === undefined ||\n          source.id === null ||\n          filter === undefined ||\n          filter.id === null\n        ) {\n          await deleteThisAlert();\n          throw new Error(\n            `No applicableFilters filter for source: ${JSON.stringify(source)}`,\n          );\n        } else if (\n          existingAlert !== undefined &&\n          existingAlert.id !== null &&\n          existingAlert.filterOptions === JSON.stringify(filterOptions)\n        ) {\n          const alert = await client.updateAlert({\n            alertId: existingAlert.id,\n            emailAddress: finalEmail,\n            phoneNumber: finalPhoneNumber,\n            telegramId: finalTelegramId,\n            includeDiscord: useDiscord,\n          });\n\n          return alert;\n        } else {\n          // Call serially because of limitations\n\n          const sourceIds: string[] = [];\n\n          const existingSourceGroup = data.sourceGroups.find(\n            (sourceGroup) =>\n              sourceGroup?.name === (sourceGroupName ?? alertName),\n          );\n\n          if (maintainSourceGroup && existingSourceGroup) {\n            existingSourceGroup.sources?.forEach((s) => {\n              const id = s?.id;\n              if (id !== null && id !== undefined) {\n                sourceIds.push(id);\n              }\n            });\n          } else {\n            sourceIds.push(source.id);\n          }\n          await deleteThisAlert();\n          const alert = await client.createAlert({\n            emailAddress: finalEmail,\n            filterId: filter.id,\n            filterOptions: filterOptions ?? undefined,\n            groupName: 'managed',\n            name: alertName,\n            phoneNumber: finalPhoneNumber,\n            sourceId: '',\n            sourceIds,\n            targetGroupName,\n            telegramId: finalTelegramId,\n            sourceGroupName,\n            includeDiscord: useDiscord,\n          });\n\n          return alert;\n        }\n      }\n    },\n    [],\n  );\n\n  const subscribe = useCallback(\n    async (\n      alertConfigs: Record<string, AlertConfiguration | null>,\n    ): Promise<SubscriptionData> => {\n      if (demoPreview) {\n        throw new Error('Preview card does not support method call');\n      }\n      const configurations = { ...alertConfigs };\n\n      const names = Object.keys(configurations);\n\n      const finalEmail = formEmail === '' ? undefined : formEmail;\n      const finalTelegramId =\n        formTelegram === ''\n          ? undefined\n          : formatTelegramForSubscription(formTelegram);\n\n      let finalPhoneNumber = undefined;\n      if (isValidPhoneNumber(formPhoneNumber)) {\n        finalPhoneNumber = formPhoneNumber;\n      }\n\n      setLoading(true);\n\n      if (!client.isAuthenticated) {\n        await logIn();\n      }\n      const data = await client.fetchData();\n\n      //\n      // Yes, we're ignoring the server side values and just using whatever the client typed in\n      // We should eventually always start from a logged in state from client having called\n      // \"refresh\" or \"fetchData\" to obtain existing settings first\n      //\n\n      const existingDiscordTarget = data.discordTargets.find(\n        (target) => target.name === 'Default',\n      );\n\n      let finalDiscordId: string | undefined = undefined;\n\n      if (useDiscord === true) {\n        if (existingDiscordTarget !== undefined) {\n          finalDiscordId = existingDiscordTarget.id;\n        } else {\n          finalDiscordId = await client.createDiscordTarget('Default');\n        }\n      }\n\n      const newResults: Record<string, Types.AlertFragmentFragment> = {};\n      for (let i = 0; i < names.length; ++i) {\n        const name = names[i];\n\n        const config = configurations[name];\n\n        let alert = null;\n        try {\n          alert = await updateAlertInternal(\n            {\n              alertName: name,\n              alertConfiguration: config,\n            },\n            data,\n            {\n              finalEmail,\n              finalPhoneNumber,\n              finalTelegramId,\n              finalDiscordId,\n            },\n          );\n        } catch (e) {\n          console.log(`Error updating alert ${name}: ${e}`);\n        }\n\n        if (alert !== null) {\n          newResults[name] = alert;\n        }\n      }\n\n      if (\n        Object.getOwnPropertyNames(newResults).length === 0 &&\n        keepSubscriptionData\n      ) {\n        // We didn't create or update any alert, manually update the targets\n        await client.ensureTargetGroup({\n          emailAddress: finalEmail,\n          name: targetGroupName,\n          phoneNumber: finalPhoneNumber,\n          telegramId: finalTelegramId,\n          includeDiscord: useDiscord,\n        });\n      }\n\n      const newData = await client.fetchData();\n\n      const results = render(newData);\n      setLoading(false);\n      return results;\n    },\n    [client, formEmail, formPhoneNumber, formTelegram, logIn, setLoading],\n  );\n\n  const updateTargetGroups = useCallback(async () => {\n    resetErrorMessageState();\n\n    if (demoPreview) {\n      throw new Error('Preview card does not support method call');\n    }\n\n    const finalEmail = formEmail === '' ? undefined : formEmail;\n\n    const finalTelegramId =\n      formTelegram === ''\n        ? undefined\n        : formatTelegramForSubscription(formTelegram);\n\n    let finalPhoneNumber = undefined;\n\n    if (isValidPhoneNumber(formPhoneNumber)) {\n      finalPhoneNumber = formPhoneNumber;\n    }\n\n    setLoading(true);\n    if (!client.isAuthenticated) {\n      await logIn();\n    }\n\n    await client.ensureTargetGroup({\n      emailAddress: finalEmail,\n      name: targetGroupName,\n      phoneNumber: finalPhoneNumber,\n      telegramId: finalTelegramId,\n      includeDiscord: useDiscord,\n    });\n\n    const newData = await client.fetchData();\n\n    const results = render(newData);\n    setLoading(false);\n    return results;\n  }, [\n    client,\n    formEmail,\n    formPhoneNumber,\n    formTelegram,\n    render,\n    setLoading,\n    useDiscord,\n  ]);\n\n  const instantSubscribe = useCallback(\n    async (alertData: InstantSubscribe) => {\n      if (demoPreview)\n        throw new Error('Preview card does not support method call');\n      const finalEmail = formEmail === '' ? undefined : formEmail;\n\n      const finalTelegramId =\n        formTelegram === ''\n          ? undefined\n          : formatTelegramForSubscription(formTelegram);\n      let finalPhoneNumber = undefined;\n      if (isValidPhoneNumber(formPhoneNumber)) {\n        finalPhoneNumber = formPhoneNumber;\n      }\n\n      const finalDiscordId =\n        useDiscord === false || !discordTargetDatafromSubscriptionContext?.id\n          ? undefined\n          : discordTargetDatafromSubscriptionContext?.id;\n\n      try {\n        setLoading(true);\n        await logIn();\n        const data = await client.fetchData();\n\n        //\n        // Yes, we're ignoring the server side values and just using whatever the client typed in\n        // We should eventually always start from a logged in state from client having called\n        // \"refresh\" or \"fetchData\" to obtain existing settings first\n        //\n\n        const alert = await updateAlertInternal(alertData, data, {\n          finalEmail,\n          finalPhoneNumber,\n          finalTelegramId,\n          finalDiscordId,\n        });\n\n        if (alert === null && keepSubscriptionData) {\n          // We didn't create or update any alert, manually update the targets\n          await client.ensureTargetGroup({\n            emailAddress: finalEmail,\n            name: targetGroupName,\n            phoneNumber: finalPhoneNumber,\n            telegramId: finalTelegramId,\n            includeDiscord: useDiscord,\n          });\n        }\n      } catch (e) {\n        throw new Error(`Something went wrong: ${e}`);\n      } finally {\n        setLoading(false);\n      }\n      const newData = await client.fetchData();\n      const results = render(newData);\n      return results;\n    },\n    [\n      client,\n      formEmail,\n      formPhoneNumber,\n      formTelegram,\n      logIn,\n      setLoading,\n      subscribe,\n      render,\n    ],\n  );\n\n  const subscribeWallet = useCallback(\n    async (params: ConnectWalletParams) => {\n      if (demoPreview)\n        throw new Error('Preview card does not support method call');\n      setLoading(true);\n\n      try {\n        if (!client.isAuthenticated) {\n          await logIn();\n        }\n\n        await client.connectWallet(params);\n\n        const newData = await client.fetchData();\n\n        await client.ensureSourceGroup({\n          name: 'User Wallets',\n          sources: newData.connectedWallets.map(walletToSource),\n        });\n\n        const finalData = await client.fetchData();\n        copyAuths(finalData);\n        render(finalData);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [client, logIn, setLoading, setConnectedWallets],\n  );\n\n  const updateWallets = useCallback(async () => {\n    setLoading(true);\n    if (demoPreview)\n      throw new Error('Preview card does not support method call');\n    try {\n      if (!client.isAuthenticated) {\n        await logIn();\n      }\n\n      const newData = await client.fetchData();\n\n      await client.ensureSourceGroup({\n        name: 'User Wallets',\n        sources: newData.connectedWallets.map(walletToSource),\n      });\n\n      const finalData = await client.fetchData();\n      render(finalData);\n    } finally {\n      setLoading(false);\n    }\n  }, [client, logIn, setLoading, render]);\n\n  return {\n    isEmailConfirmationSent,\n    resendEmailVerificationLink,\n    instantSubscribe,\n    isAuthenticated: client.isAuthenticated,\n    isInitialized: client.isInitialized,\n    isTokenExpired: client.isTokenExpired,\n    logIn,\n    subscribe,\n    updateTargetGroups,\n    subscribeWallet,\n    updateWallets,\n    reload,\n  };\n};\n","export function addressEllipsis(\n  str: string | undefined,\n  index?: number,\n): string | undefined {\n  index = index || 6;\n\n  if (!str || str.length < 11) {\n    return str;\n  }\n\n  return str.slice(0, index) + '...' + str.slice(str.length - index);\n}\n\nexport function formatTelegramForSubscription(telegramId: string) {\n  if (telegramId.startsWith('@')) {\n    return telegramId.slice(1);\n  }\n  return telegramId;\n}\n\nexport function prefixCharacter(value: string, character: string) {\n  return character + value;\n}\n\nexport function prefixTelegramWithSymbol(telegramId: string) {\n  if (telegramId.startsWith('@')) {\n    return telegramId;\n  }\n  return prefixCharacter(telegramId, '@');\n}\n","import { Types } from '@notifi-network/notifi-graphql';\n\nexport const walletToSourceType = (\n  wallet: Types.ConnectedWallet,\n): Types.CreateSourceInput['type'] => {\n  switch (wallet?.walletBlockchain) {\n    case 'ACALA':\n      return 'ACALA_WALLET';\n    case 'APTOS':\n      return 'APTOS_WALLET';\n    case 'ARBITRUM':\n      return 'ARBITRUM_WALLET';\n    case 'AVALANCHE':\n      return 'AVALANCHE_WALLET';\n    case 'BINANCE':\n      return 'BINANCE_WALLET';\n    case 'ETHEREUM':\n      return 'ETHEREUM_WALLET';\n    case 'BASE':\n      return 'ETHEREUM_WALLET';\n    case 'POLYGON':\n      return 'POLYGON_WALLET';\n    case 'SOLANA':\n      return 'SOLANA_WALLET';\n    case 'OPTIMISM':\n      return 'OPTIMISM_WALLET';\n    case 'SUI':\n      return 'SUI_WALLET';\n    case 'ZKSYNC':\n      return 'ZKSYNC_WALLET';\n    default:\n      throw new Error('Unsupported walletType');\n  }\n};\n\nexport const walletToSourceAddress = (\n  wallet: Types.ConnectedWalletFragmentFragment,\n): Types.CreateSourceInput['blockchainAddress'] => {\n  if (wallet?.address === null) {\n    throw new Error('Invalid connected wallet');\n  }\n  return wallet?.address;\n};\n\nexport const walletToSource = (\n  wallet: Types.ConnectedWalletFragmentFragment,\n): Types.CreateSourceInput => {\n  const sourceAddress = walletToSourceAddress(wallet);\n  const sourceType = walletToSourceType(wallet);\n\n  return {\n    name: `${sourceType} ${sourceAddress}`,\n    blockchainAddress: sourceAddress,\n    type: sourceType,\n  };\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport { Types } from '@notifi-network/notifi-graphql';\nimport { useEffect, useState } from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiDemoPreviewContext,\n} from '../context';\nimport { ErrorViewState } from './useFetchedCardState';\n\ntype ClientFetchSubscriptionCardInput = Omit<\n  Types.FindTenantConfigInput,\n  'tenant'\n>;\n\nexport type LoadingState = Readonly<{\n  state: 'loading';\n}>;\n\nexport type Data = CardConfigItemV1;\n\nexport type FetchedState = Readonly<{\n  state: 'fetched';\n  data: Data;\n}>;\n\nexport type SubscriptionCardState =\n  | LoadingState\n  | FetchedState\n  | ErrorViewState;\n\nexport const useSubscriptionCard = (\n  input: ClientFetchSubscriptionCardInput,\n): SubscriptionCardState => {\n  const [state, setState] = useState<SubscriptionCardState>({\n    state: 'loading',\n  });\n  const { demoPreview } = useNotifiDemoPreviewContext();\n  const { client, isUsingFrontendClient, frontendClient } =\n    useNotifiClientContext();\n\n  useEffect(() => {\n    if (demoPreview) {\n      return setState(() => ({\n        state: 'fetched',\n        data: demoPreview.data,\n      }));\n    }\n\n    let card: CardConfigItemV1 | undefined;\n    setState({ state: 'loading' });\n    (isUsingFrontendClient ? frontendClient : client)\n      .fetchSubscriptionCard(input)\n      .then((result) => {\n        if ('dataJson' in result) {\n          if (!result.dataJson) {\n            return Promise.reject(new Error('Failed to fetch data'));\n          }\n          card = JSON.parse(result.dataJson);\n        } else if ('version' in result && result.version !== 'IntercomV1') {\n          card = result;\n        }\n\n        if (card?.version !== 'v1') {\n          return Promise.reject(new Error('Unsupported config format'));\n        }\n\n        setState({\n          state: 'fetched',\n          data: card,\n        });\n      })\n      .catch((error: unknown) => {\n        setState({\n          state: 'error',\n          reason: error,\n        });\n      });\n  }, [input.id, input.type, demoPreview, isUsingFrontendClient]);\n\n  return state;\n};\n","import { useState } from 'react';\n\nexport type PreviewViewState = Readonly<{\n  state: 'preview';\n}>;\nexport type AlertHistoryViewState = Readonly<{\n  state: 'history';\n}>;\nexport type EditInfoViewState = Readonly<{\n  state: 'edit';\n}>;\nexport type ExpiredTokenViewState = Readonly<{\n  state: 'expired';\n}>;\nexport type VerifyWalletViewState = Readonly<{\n  state: 'verify';\n}>;\nexport type SignUpViewState = Readonly<{\n  state: 'signup';\n}>;\nexport type VerifyOnboardingViewState = Readonly<{\n  state: 'verifyonboarding';\n}>;\n\nexport type ErrorViewState = Readonly<{\n  state: 'error';\n  reason: unknown;\n}>;\n\nexport type FetchedCardViewState =\n  | PreviewViewState\n  | AlertHistoryViewState\n  | EditInfoViewState\n  | VerifyWalletViewState\n  | ExpiredTokenViewState\n  | SignUpViewState\n  | VerifyOnboardingViewState\n  | ErrorViewState;\n\nexport const useFetchedCardState = () => {\n  const [cardView, setCardView] = useState<FetchedCardViewState>({\n    state: 'history',\n  });\n\n  return {\n    cardView,\n    setCardView,\n  };\n};\n","import { useEffect, useMemo, useState } from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../context';\n\nexport const useUnreadState = () => {\n  const { frontendClient, isUsingFrontendClient } = useNotifiClientContext();\n\n  if (!isUsingFrontendClient)\n    throw new Error(\n      'Number badge is only available when frontendClient is enabled',\n    );\n\n  const {\n    params: { walletPublicKey },\n  } = useNotifiSubscriptionContext();\n\n  const [unreadNotificationCount, setUnreadNotificationCount] = useState(0);\n  const hasUnreadNotification = useMemo(\n    () => (unreadNotificationCount > 0 ? true : false),\n    [unreadNotificationCount],\n  );\n  const { isClientAuthenticated } = useMemo(() => {\n    return {\n      isClientAuthenticated:\n        frontendClient.userState?.status === 'authenticated',\n    };\n  }, [frontendClient.userState?.status]);\n\n  useEffect(() => {\n    if (!walletPublicKey || !isClientAuthenticated) return;\n\n    frontendClient\n      .getUnreadNotificationHistoryCount()\n      .then((res) => {\n        const unreadNotificationCount = res.count;\n        setUnreadNotificationCount(unreadNotificationCount);\n      })\n      .catch((_e) => {\n        /* Intentionally empty (Concurrent can only possibly happens here instead of inside interval) */\n      });\n    const interval = setInterval(() => {\n      if (!walletPublicKey || !isClientAuthenticated) return;\n\n      frontendClient.getUnreadNotificationHistoryCount().then((res) => {\n        const unreadNotificationCount = res.count;\n        setUnreadNotificationCount(unreadNotificationCount);\n      });\n    }, Math.floor(Math.random() * 5000) + 5000); // a random interval between 5 and 10 seconds to avoid spamming the server\n\n    return () => clearInterval(interval);\n  }, [isClientAuthenticated, walletPublicKey, isUsingFrontendClient]);\n\n  return { hasUnreadNotification, unreadNotificationCount };\n};\n","import { Types } from '@notifi-network/notifi-graphql';\nimport { useCallback } from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../context';\n\nexport const useFrontendClientLogin = () => {\n  const { params, frontendClient, updateFrontendClientStatus } =\n    useNotifiClientContext();\n\n  const { useHardwareWallet } = useNotifiSubscriptionContext();\n\n  const logIn = useCallback(async (): Promise<Types.UserFragmentFragment> => {\n    if (useHardwareWallet && params.walletBlockchain === 'SOLANA') {\n      const plugin = params.hardwareLoginPlugin;\n      const { nonce } = await frontendClient.beginLoginViaTransaction({\n        walletAddress: params.walletPublicKey,\n        walletBlockchain: params.walletBlockchain,\n      });\n\n      const transactionSignature = await plugin.sendMessage(nonce);\n\n      const logInResult = await frontendClient.completeLoginViaTransaction({\n        walletAddress: params.walletPublicKey,\n        walletBlockchain: params.walletBlockchain,\n        transactionSignature,\n      });\n\n      if (logInResult?.completeLogInByTransaction === undefined) {\n        throw new Error('Log in failed');\n      }\n      updateFrontendClientStatus();\n      return logInResult.completeLogInByTransaction;\n    } else {\n      const result = await frontendClient.logIn(params);\n      updateFrontendClientStatus();\n      return result;\n    }\n  }, [useHardwareWallet, frontendClient, params]);\n\n  return logIn;\n};\n","import { useState } from 'react';\n\nexport type startChatView = Readonly<{\n  state: 'startChatView';\n}>;\n\nexport type chatWindowView = Readonly<{\n  state: 'chatWindowView';\n}>;\n\nexport type settingView = Readonly<{\n  state: 'settingView';\n}>;\n\nexport type loadingView = Readonly<{\n  state: 'loadingView';\n}>;\n\nexport type IntercomCardView =\n  | startChatView\n  | chatWindowView\n  | settingView\n  | loadingView;\n\nexport const useIntercomCardState = () => {\n  const [intercomCardView, setIntercomCardView] = useState<IntercomCardView>({\n    state: 'loadingView',\n  });\n\n  return {\n    intercomCardView,\n    setIntercomCardView,\n  };\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport React, {\n  PropsWithChildren,\n  createContext,\n  useContext,\n  useMemo,\n} from 'react';\n\nimport { FetchedCardViewState, WebhookContactInfo } from '../hooks';\n\nexport type DemoPreview = {\n  view: FetchedCardViewState['state'];\n  data: CardConfigItemV1;\n};\n\nexport const defaultDemoConfigV1: CardConfigItemV1 = {\n  version: 'v1',\n  id: '@notifi.network', // Shown as dummy telegram id\n  name: 'notifi@notifi.network', // Shown as dummy email field\n  eventTypes: [],\n  inputs: [],\n  contactInfo: {\n    sms: {\n      active: true,\n      supportedCountryCodes: ['+1', '+886'],\n    },\n    email: {\n      active: true,\n    },\n    telegram: {\n      active: true,\n    },\n    discord: {\n      active: false,\n    },\n    webhook: {} as unknown as WebhookContactInfo,\n  },\n};\n\nexport type NotifiDemoPreviewContextData = Readonly<{\n  demoPreview: DemoPreview;\n}>;\n\nconst NotifiDemoPreviewContext = createContext<NotifiDemoPreviewContextData>(\n  {} as unknown as NotifiDemoPreviewContextData, // Intentionally empty in default\n);\n\nexport const NotifiDemoPreviewContextProvider: React.FC<\n  PropsWithChildren<DemoPreview>\n> = ({ children, view, data }) => {\n  const demoPreview = useMemo(() => ({ view, data }), [view, data]);\n\n  return (\n    <NotifiDemoPreviewContext.Provider value={{ demoPreview }}>\n      {children}\n    </NotifiDemoPreviewContext.Provider>\n  );\n};\n\nexport const useNotifiDemoPreviewContext = () =>\n  useContext(NotifiDemoPreviewContext);\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport type { DeepPartialReadonly } from '../utils';\nimport {\n  NotifiDisclosureStatement,\n  NotifiDisclosureStatementProps,\n} from './NotifiDisclosureStatement';\nimport { NotifiLogo } from './NotifiLogo';\n\nexport type NotifiFooterProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    poweredBy: string;\n    logoSvg: string;\n    link: string;\n    spacer: string;\n    disclosure: NotifiDisclosureStatementProps['classNames'];\n  }>;\n  copy?: DeepPartialReadonly<{\n    poweredBy: string;\n    learnMore: string;\n    disclosure: string;\n  }>;\n}>;\n\nexport const NotifiFooter: React.FC<NotifiFooterProps> = ({\n  classNames,\n  copy,\n}: NotifiFooterProps) => {\n  return (\n    <div className={clsx('NotifiFooter__container', classNames?.container)}>\n      {copy?.disclosure ? (\n        <NotifiDisclosureStatement\n          disclosureCopy={copy?.disclosure}\n          classNames={classNames?.disclosure}\n        />\n      ) : null}\n      <a\n        href=\"https://notifi.network\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className={clsx(\n          'NotifiFooter__poweredByContainer',\n          classNames?.container,\n        )}\n      >\n        <span\n          className={clsx('NotifiFooter__poweredBy', classNames?.poweredBy)}\n        >\n          {copy?.poweredBy ?? 'Powered by'}\n        </span>\n        <NotifiLogo\n          className={clsx('NotifiFooter__logoSvg', classNames?.logoSvg)}\n        />\n      </a>\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { DeepPartialReadonly } from '../utils';\n\nexport type NotifiDisclosureStatementProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    hyperlink: string;\n  }>;\n  disclosureCopy: string;\n}>;\nexport const NotifiDisclosureStatement: React.FC<\n  NotifiDisclosureStatementProps\n> = ({ classNames, disclosureCopy }) => {\n  return (\n    <div className={clsx('NotifiDisclosure__container', classNames?.container)}>\n      <label className={clsx('NotifiDisclosure__label', classNames?.label)}>\n        {disclosureCopy}{' '}\n      </label>\n      <a\n        className={clsx('NotifiDisclosure__hyperlink', classNames?.hyperlink)}\n        href=\"https://notifi.network\"\n        target=\"_blank\"\n      >\n        Learn more\n      </a>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const NotifiLogo: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      {...props}\n      width=\"39\"\n      height=\"9\"\n      viewBox=\"0 0 39 9\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.92661 5.02549C7.68505 5.09427 7.43002 5.1311 7.16639 5.1311C5.63641 5.1311 4.39611 3.8908 4.39611 2.36082C4.39611 2.0878 4.43561 1.824 4.50919 1.57483H1.63872C1.19751 1.57483 0.839844 1.9325 0.839844 2.3737V7.86272C0.839844 8.30393 1.19751 8.66159 1.63872 8.66159H7.12774C7.56894 8.66159 7.92661 8.30393 7.92661 7.86272V5.02549Z\"\n        fill=\"white\"\n        className=\"notifiLogo-letters\"\n      />\n      <path\n        d=\"M9.5013 1.96855C9.5013 3.05574 8.61995 3.93709 7.53275 3.93709C6.44556 3.93709 5.56421 3.05574 5.56421 1.96855C5.56421 0.881348 6.44556 0 7.53275 0C8.61995 0 9.5013 0.881348 9.5013 1.96855Z\"\n        fill=\"url(#paint0_linear_872_5572)\"\n      />\n      <path\n        d=\"M17.9031 5.61338V8.60198H19.1442V5.61338C19.1442 3.77653 18.1911 2.57513 16.6819 2.57513C15.9471 2.57513 15.2918 3.012 15.0734 3.61766V2.64463H13.8323V8.60198H15.0734V5.6233C15.0734 4.57084 15.6592 3.81624 16.4634 3.81624C17.3372 3.81624 17.9031 4.52119 17.9031 5.61338Z\"\n        fill=\"black\"\n        className=\"notifiLogo-letters\"\n      />\n      <path\n        d=\"M19.9738 5.61338C19.9738 7.34101 21.2546 8.66155 22.9028 8.66155C24.551 8.66155 25.8219 7.34101 25.8219 5.61338C25.8219 3.89567 24.551 2.57513 22.9028 2.57513C21.2546 2.57513 19.9738 3.89567 19.9738 5.61338ZM22.9028 3.81624C23.856 3.81624 24.5808 4.5907 24.5808 5.61338C24.5808 6.64598 23.856 7.42044 22.9028 7.42044C21.9496 7.42044 21.2149 6.64598 21.2149 5.61338C21.2149 4.5907 21.9496 3.81624 22.9028 3.81624Z\"\n        fill=\"black\"\n        className=\"notifiLogo-letters\"\n      />\n      <path\n        d=\"M27.5834 1.38365L27.2855 2.64463H26.4019V3.81624H27.2855V6.55662C27.2855 8.01617 27.8813 8.60198 29.3011 8.60198H29.8174V7.37079H29.4203C28.8047 7.37079 28.5267 7.10271 28.5267 6.48712V3.81624H29.8174V2.64463H28.5267V1.38365H27.5834Z\"\n        fill=\"black\"\n        className=\"notifiLogo-letters\"\n      />\n      <path\n        d=\"M31.9217 8.60198V2.64463H30.6806V8.60198H31.9217Z\"\n        fill=\"black\"\n        className=\"notifiLogo-letters\"\n      />\n      <path\n        d=\"M38.2799 8.60198V2.64463H34.8644V2.20776C34.8644 1.59217 35.1424 1.31415 35.758 1.31415H36.1551V0.0928955H35.6388C34.219 0.0928955 33.6233 0.668778 33.6233 2.13826V2.64463H32.7495V3.81624H33.6233V8.60198H34.8644V3.81624H37.0388V8.60198H38.2799Z\"\n        fill=\"black\"\n        className=\"notifiLogo-letters\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M31.1573 0C30.8066 0 30.6804 0.192486 30.6804 0.466236V1.46139H31.6535C31.9914 1.46139 32.1418 1.34309 32.1418 1.00946V0.466236C32.1418 0.15399 31.9358 0 31.6193 0H31.1573Z\"\n        fill=\"black\"\n        className=\"notifiLogo-letters\"\n      />\n      <defs>\n        <linearGradient\n          id=\"paint0_linear_872_5572\"\n          x1=\"8.72155\"\n          y1=\"0.306786\"\n          x2=\"6.8297\"\n          y2=\"3.93709\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"#FE7970\" />\n          <stop offset=\"1\" stopColor=\"#FEB776\" />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\n","import clsx from 'clsx';\nimport { isValidPhoneNumber } from 'libphonenumber-js';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { SmsIcon } from '../assets/SmsIcon';\nimport { DialCode, countryMap } from '../constants/countryData';\nimport { useNotifiForm } from '../context';\nimport type { DeepPartialReadonly } from '../utils';\nimport { splitPhoneNumber } from '../utils/phoneUtils';\nimport NotifiSmsDropdownOption from './NotifiSmsDropdownOption';\n\nexport type NotifiSmsInputProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    input: string;\n    dropdownContainer: string;\n    dropdownOption: string;\n    dropdownSelectField: string;\n    label: string;\n    errorMessage: string;\n  }>;\n  copy?: DeepPartialReadonly<{\n    placeholder: string;\n    label: string;\n  }>;\n  disabled: boolean;\n  allowedCountryCodes: string[];\n  intercomSmsInputStyle?: string;\n  intercomSmsDropdownContainerStyle?: string;\n  intercomSmsDropdownSelectStyle?: string;\n  intercomSmsInputContainerStyle?: string;\n  intercomView?: boolean;\n}>;\n\nexport const NotifiSmsInput: React.FC<NotifiSmsInputProps> = ({\n  allowedCountryCodes,\n  classNames,\n  copy,\n  disabled,\n  intercomSmsDropdownContainerStyle,\n  intercomSmsDropdownSelectStyle,\n  intercomSmsInputContainerStyle,\n  intercomSmsInputStyle,\n  intercomView,\n}: NotifiSmsInputProps) => {\n  const {\n    formErrorMessages,\n    formState,\n    setPhoneNumber,\n    setPhoneNumberErrorMessage,\n    setHasChanges,\n  } = useNotifiForm();\n\n  const { phoneNumber: phoneNumberErrorMessage } = formErrorMessages;\n\n  const { phoneNumber } = formState;\n\n  const [phoneValues, setPhoneValues] = useState({\n    baseNumber: '',\n    dialCode: '+1',\n  });\n  const [isShowOption, setShowOption] = useState(false);\n\n  const handleShowOption = () => {\n    setShowOption(!isShowOption);\n  };\n\n  const handleSelected = useCallback(\n    (dialCode: string) => {\n      setPhoneValues({ ...phoneValues, dialCode });\n      setPhoneNumber(dialCode + phoneValues.baseNumber);\n      setShowOption(false);\n    },\n    [phoneValues, setPhoneNumber, setPhoneValues],\n  );\n\n  const handleBaseNumberChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n      const onlyNumberInput = event.target.value.replace(/[^\\d]/g, '');\n\n      setPhoneValues({ ...phoneValues, baseNumber: onlyNumberInput });\n      setPhoneNumber(phoneValues.dialCode + event.target.value);\n    },\n    [phoneValues, setPhoneNumber, setPhoneValues],\n  );\n\n  const splitPhoneValues = useCallback(() => {\n    if (!phoneNumber) {\n      return;\n    }\n\n    if (isValidPhoneNumber(phoneNumber)) {\n      const { baseNumber: number, countryCallingCode } =\n        splitPhoneNumber(phoneNumber);\n      if (!countryCallingCode || !number) {\n        throw new Error('Improper phone');\n      }\n\n      setPhoneValues({\n        baseNumber: number,\n        dialCode: `+${countryCallingCode}`,\n      });\n      return;\n    }\n  }, [phoneNumber, handleSelected]);\n\n  useEffect(() => {\n    if (phoneNumber) {\n      splitPhoneValues();\n    }\n  }, [phoneNumber]);\n\n  useEffect(() => {\n    if (phoneValues.baseNumber === '' && phoneNumber !== '') {\n      setPhoneNumber('');\n    }\n  }, [phoneValues.baseNumber, setPhoneNumber, phoneNumber]);\n\n  const validateSmsInput = useCallback(() => {\n    if (phoneNumber === '') {\n      return;\n    }\n\n    if (!isValidPhoneNumber(phoneNumber)) {\n      setPhoneNumberErrorMessage(\n        'The phone number is invalid. Please try again',\n      );\n    }\n  }, [phoneNumber, setPhoneNumberErrorMessage]);\n\n  return (\n    <>\n      {intercomView ? null : (\n        <label className={clsx('NotifiSmsInput__label', classNames?.label)}>\n          {copy?.label}\n        </label>\n      )}\n      <div\n        className={clsx(\n          'NotifiSmsInput__container',\n          intercomSmsInputContainerStyle,\n          classNames?.container,\n        )}\n      >\n        <SmsIcon className={'NotifiInput__icon'} />\n        <div\n          className={clsx(\n            'NotifiSmsInput__dropdownContainer',\n            intercomSmsDropdownContainerStyle,\n            classNames?.dropdownContainer,\n          )}\n        >\n          <div\n            className={clsx(\n              'NotifiSmsInput__dropdownSelect',\n              intercomSmsDropdownSelectStyle,\n              classNames?.dropdownSelectField,\n            )}\n            tabIndex={0}\n            onBlur={() => {\n              setShowOption(false);\n            }}\n          >\n            <div\n              className=\"NotifiSmsInput__dropdownSelected\"\n              onClick={handleShowOption}\n            >\n              <div className=\"NotifiSmsInput__dropdownSelectValue\">\n                {phoneValues.dialCode}\n              </div>\n              <input\n                className=\"NotifiSmsInput__dropdownInput\"\n                type=\"hidden\"\n                value={phoneValues.dialCode}\n                onChange={(e) => {\n                  setHasChanges(true);\n                  handleBaseNumberChange(e);\n                }}\n              />\n              <svg\n                className=\"NotifiSmsInput__dropdownSelectIcon\"\n                viewBox=\"0 0 9 5\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M0.539062 0.916016L4.4974 4.87435L8.45573 0.916016H0.539062Z\"\n                  fill=\"inherit\"\n                />\n              </svg>\n            </div>\n            {isShowOption && (\n              <ul className=\"NotifiSmsInput__dropdownOptionList\">\n                {allowedCountryCodes.map((code) => {\n                  const countryData = countryMap[code as DialCode];\n                  return (\n                    <NotifiSmsDropdownOption\n                      key={code}\n                      countryData={countryData}\n                      phoneValues={phoneValues}\n                      onSelected={(dialCode) => handleSelected(dialCode)}\n                    />\n                  );\n                })}\n              </ul>\n            )}\n          </div>\n        </div>\n        <input\n          className={clsx(\n            'NotifiSmsInput__input',\n            intercomSmsInputStyle,\n            classNames?.input,\n          )}\n          disabled={disabled}\n          name=\"notifi-sms\"\n          onBlur={validateSmsInput}\n          onChange={(e) => {\n            setHasChanges(true);\n            handleBaseNumberChange(e);\n          }}\n          onFocus={() => setPhoneNumberErrorMessage('')}\n          placeholder={copy?.placeholder ?? 'Phone Number'}\n          type=\"tel\"\n          value={phoneValues.baseNumber}\n        />\n      </div>\n      <label\n        className={clsx(\n          'NotifiSmsInput__errorMessage',\n          classNames?.errorMessage,\n        )}\n      >\n        {phoneNumberErrorMessage}\n      </label>\n    </>\n  );\n};\n","import React from 'react';\n\nexport type Props = Readonly<{\n  className?: string;\n}>;\n\nexport const SmsIcon: React.FC<Props> = ({ className }: Props) => {\n  return (\n    <svg\n      width=\"11\"\n      height=\"17\"\n      viewBox=\"0 0 11 17\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        d=\"M8.33335 0.708328H2.66669C1.49085 0.708328 0.541687 1.65749 0.541687 2.83333V14.1667C0.541687 15.3425 1.49085 16.2917 2.66669 16.2917H8.33335C9.50919 16.2917 10.4584 15.3425 10.4584 14.1667V2.83333C10.4584 1.65749 9.50919 0.708328 8.33335 0.708328ZM6.91669 14.875H4.08335V14.1667H6.91669V14.875ZM9.21877 12.75H1.78127V2.83333H9.21877V12.75Z\"\n        fill=\"#B6B8D5\"\n      />\n    </svg>\n  );\n};\n","export type CountryMap = typeof countryMap;\n\nexport type DialCode = keyof CountryMap;\nexport type CountryMetadata = CountryMap[keyof CountryMap];\n\nexport const countryMap = {\n  '+1': {\n    dialCode: '+1',\n    flag: '🇺🇸',\n    name: 'United States/Canada',\n  },\n  '+61': {\n    dialCode: '+61',\n    flag: '🇦🇺',\n    name: 'Australia',\n  },\n  '+43': {\n    dialCode: '+43',\n    flag: '🇦🇹',\n    name: 'Austria',\n  },\n  '+32': {\n    dialCode: '+32',\n    flag: '🇧🇪',\n    name: 'Belgium',\n  },\n  '+55': {\n    dialCode: '+55',\n    flag: '🇧🇷',\n    name: 'Brazil',\n  },\n  '+45': {\n    dialCode: '+45',\n    flag: '🇩🇰',\n    name: 'Denmark',\n  },\n  '+358': {\n    dialCode: '+358',\n    flag: '🇫🇮',\n    name: 'Finland',\n  },\n  '+33': {\n    dialCode: '+33',\n    flag: '🇫🇷',\n    name: 'France',\n  },\n  '+49': {\n    dialCode: '+49',\n    flag: '🇩🇪',\n    name: 'Germany',\n  },\n  '+852': {\n    dialCode: '+852',\n    flag: '🇭🇰',\n    name: 'Hong Kong',\n  },\n  '+36': {\n    dialCode: '+36',\n    flag: '🇭🇺',\n    name: 'Hungary',\n  },\n  '+354': {\n    dialCode: '+354',\n    flag: '🇮🇸',\n    name: 'Iceland',\n  },\n  '+60': {\n    dialCode: '+60',\n    flag: '🇲🇾',\n    name: 'Malaysia',\n  },\n  '+47': {\n    dialCode: '+47',\n    flag: '🇳🇴',\n    name: 'Norway',\n  },\n  '+63': {\n    dialCode: '+63',\n    flag: '🇵🇭',\n    name: 'Philippines',\n  },\n  '+48': {\n    dialCode: '+48',\n    flag: '🇵🇱',\n    name: 'Poland',\n  },\n  '+351': {\n    dialCode: '+351',\n    flag: '🇵🇹',\n    name: 'Portugal',\n  },\n  '+65': {\n    dialCode: '+65',\n    flag: '🇸🇬',\n    name: 'Singapore',\n  },\n  '+82': {\n    dialCode: '+82',\n    flag: '🇰🇷',\n    name: 'Korea, Republic of South Korea',\n  },\n  '+34': {\n    dialCode: '+34',\n    flag: '🇪🇸',\n    name: 'Spain',\n  },\n  '+46': {\n    dialCode: '+46',\n    flag: '🇸🇪',\n    name: 'Sweden',\n  },\n  '+41': {\n    dialCode: '+41',\n    flag: '🇨🇭',\n    name: 'Switzerland',\n  },\n  '+886': {\n    dialCode: '+886',\n    flag: '🇹🇼',\n    name: 'Taiwan',\n  },\n  '+44': {\n    dialCode: '+44',\n    flag: '🇬🇧',\n    name: 'United Kingdom',\n  },\n} as const;\n","import { parsePhoneNumber } from 'libphonenumber-js';\n\ntype PhoneData = {\n  countryCallingCode: string;\n  baseNumber: string;\n};\n\nexport const splitPhoneNumber = (phoneNumber: string): PhoneData => {\n  const { countryCallingCode, nationalNumber: baseNumber } =\n    parsePhoneNumber(phoneNumber);\n  if (!countryCallingCode || !baseNumber) {\n    throw new Error('No country or phone found');\n  }\n\n  return { baseNumber, countryCallingCode };\n};\n\nexport const formatPhoneNumber = (phoneNumber: string) => {\n  if (!phoneNumber) {\n    throw new Error('No phone data found!');\n  }\n\n  return parsePhoneNumber(phoneNumber)\n    .formatInternational()\n    .replaceAll(' ', '-');\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { CountryMetadata } from '../constants/countryData';\nimport type { DeepPartialReadonly } from '../utils';\n\ntype DropdownOptionType = {\n  countryData: CountryMetadata;\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    input: string;\n    dropdownContainer: string;\n    dropdownOption: string;\n    dropdownSelectField: string;\n    label: string;\n    errorMessage: string;\n  }>;\n  phoneValues: {\n    baseNumber: string;\n    dialCode: string;\n  };\n  onSelected: (dialCode: string) => void;\n};\n\nconst NotifiSmsDropdownOption: React.FC<DropdownOptionType> = ({\n  countryData,\n  classNames,\n  phoneValues,\n  onSelected,\n}) => {\n  const { name, dialCode, flag } = countryData;\n\n  return (\n    <li\n      className={clsx(\n        'NotifiSmsInput__dropdownOption',\n        classNames?.dropdownOption,\n        {\n          'NotifiSmsInput__dropdownOption-selected':\n            phoneValues.dialCode === dialCode,\n        },\n      )}\n      onClick={() => onSelected(dialCode)}\n    >\n      <div className=\"NotifiSmsInput__dropdownCountry\">\n        <p className=\"NotifiSmsInput__dropdownFlag\">{flag} </p>\n        <p className=\"NotifiSmsInput__dropdownName\">{name}</p>\n      </div>\n      <span className=\"NotifiSmsInput__dropdownCode\">{dialCode}</span>\n    </li>\n  );\n};\n\nexport default NotifiSmsDropdownOption;\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { TelegramIcon } from '../assets/TelegramIcon';\nimport { useNotifiForm, useNotifiSubscriptionContext } from '../context';\nimport type { DeepPartialReadonly } from '../utils';\n\nexport type NotifiTelegramInputProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    input: string;\n    label: string;\n    button: string;\n    errorMessage: string;\n  }>;\n  copy?: DeepPartialReadonly<{\n    placeholder: string;\n    label: string;\n  }>;\n  disabled: boolean;\n  intercomTelegramInputStyle?: string;\n  intercomTelegramInputContainerStyle?: string;\n  intercomView?: boolean;\n  hasChatAlert?: boolean;\n}>;\n\nexport const NotifiTelegramInput: React.FC<NotifiTelegramInputProps> = ({\n  classNames,\n  copy,\n  disabled,\n  intercomTelegramInputStyle,\n  intercomTelegramInputContainerStyle,\n  intercomView,\n}: NotifiTelegramInputProps) => {\n  const { telegramConfirmationUrl, intercomCardView } =\n    useNotifiSubscriptionContext();\n\n  const {\n    formState,\n    formErrorMessages,\n    setTelegram,\n    setTelegramErrorMessage,\n    setHasChanges,\n  } = useNotifiForm();\n\n  const { telegram } = formState;\n\n  const { telegram: telegramErrorMessage } = formErrorMessages;\n\n  const validateTelegram = () => {\n    if (telegram === '') {\n      return;\n    }\n\n    const TelegramRegex =\n      /^@?(?=\\w{5,32}\\b)[a-zA-Z0-9]+(?:[a-zA-Z0-9_ ]+[a-zA-Z0-9])*$/;\n\n    if (TelegramRegex.test(telegram)) {\n      setTelegramErrorMessage('');\n    } else {\n      setTelegramErrorMessage('The telegram is invalid. Please try again.');\n    }\n  };\n\n  const handleClick = () => {\n    window.open(telegramConfirmationUrl, '_blank');\n  };\n\n  return (\n    <>\n      {intercomView ? (\n        intercomCardView.state === 'settingView' &&\n        telegramConfirmationUrl != null ? (\n          <div\n            onClick={handleClick}\n            className={clsx(\n              'NotifiTelegramVerification__button',\n              classNames?.button,\n            )}\n          >\n            Verify ID\n          </div>\n        ) : null\n      ) : (\n        <label className={clsx('NotifiTelegramInput__label', classNames?.label)}>\n          {copy?.label}\n        </label>\n      )}\n      <div\n        className={clsx(\n          'NotifiTelegramInput__container',\n          intercomTelegramInputContainerStyle,\n          classNames?.container,\n        )}\n      >\n        <TelegramIcon className={'NotifiInput__icon'} />\n        <input\n          data-cy=\"notifiTelegramInput\"\n          onBlur={validateTelegram}\n          className={clsx(\n            'NotifiTelegramInput__input',\n            intercomTelegramInputStyle,\n            classNames?.input,\n          )}\n          disabled={disabled}\n          name=\"notifi-telegram\"\n          type=\"text\"\n          value={telegram}\n          onFocus={() => setTelegramErrorMessage('')}\n          onChange={(e) => {\n            setHasChanges(true);\n            setTelegram(e.target.value ?? '');\n          }}\n          placeholder={copy?.placeholder ?? 'Telegram ID'}\n        />\n      </div>\n      <label\n        className={clsx(\n          'NotifiTelegramInput__errorMessage',\n          classNames?.errorMessage,\n        )}\n      >\n        {telegramErrorMessage}\n      </label>\n    </>\n  );\n};\n","import React from 'react';\n\nexport type Props = Readonly<{\n  className?: string;\n}>;\n\nexport const TelegramIcon: React.FC<Props> = ({ className }: Props) => {\n  return (\n    <svg\n      width=\"17\"\n      height=\"16\"\n      viewBox=\"0 0 17 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        d=\"M8.63846 15.4458L16.4253 0.189566L0.00576619 5.06668L3.35716 9.10781L12.9656 3.06713L5.27554 11.4143L8.63846 15.4458Z\"\n        fill=\"#B6B8D5\"\n      />\n    </svg>\n  );\n};\n","import {\n  BroadcastEventTypeItem,\n  EventTypeItem,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { SubscriptionData, useNotifiSubscribe } from '../../hooks';\nimport {\n  AlertConfiguration,\n  DeepPartialReadonly,\n  broadcastMessageConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\nimport { resolveStringRef } from './resolveRef';\n\nexport type EventTypeBroadcastRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: BroadcastEventTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EventTypeBroadcastRow: React.FC<EventTypeBroadcastRowProps> = ({\n  classNames,\n  config,\n  disabled,\n  inputs,\n}: EventTypeBroadcastRowProps) => {\n  const { alerts, loading, render } = useNotifiSubscriptionContext();\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const [enabled, setEnabled] = useState(false);\n  const [isNotificationLoading, setIsNotificationLoading] =\n    useState<boolean>(false);\n\n  const broadcastId = useMemo(\n    () => resolveStringRef(config.name, config.broadcastId, inputs),\n    [config, inputs],\n  );\n\n  const alertName = useMemo<string>(() => {\n    if (config.broadcastId.type === 'value') {\n      return config.name;\n    }\n    return `${config.name}:${broadcastId}`;\n  }, [config, broadcastId]);\n\n  const alertConfiguration = useMemo<AlertConfiguration>(() => {\n    return broadcastMessageConfiguration({\n      topicName: broadcastId,\n    });\n  }, [alertName, config, inputs]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: alertConfiguration,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, alertConfiguration],\n  );\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, alertConfiguration],\n  );\n\n  const tooltipContent = config.tooltipContent;\n\n  const didFetch = useRef(false);\n\n  useEffect(() => {\n    if (didFetch.current) {\n      return;\n    }\n\n    const hasAlert = alerts[alertName] !== undefined;\n    setEnabled(hasAlert);\n    didFetch.current = true;\n  }, [alertName, alerts]);\n\n  const handleNewSubscription = useCallback(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setIsNotificationLoading(true);\n\n    if (!enabled) {\n      setEnabled(true);\n      subscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          const responseHasAlert = res.alerts[alertName] !== undefined;\n          if (responseHasAlert !== true) {\n            setEnabled(false);\n          }\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(false);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setEnabled(false);\n      unSubscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          if (res) {\n            const responseHasAlert = res.alerts[alertName] !== undefined;\n            if (responseHasAlert !== false) {\n              setEnabled(true);\n            }\n          }\n          // Else, ensured by frontendClient\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(false);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    }\n  }, [\n    loading,\n    enabled,\n    instantSubscribe,\n    alertConfiguration,\n    alertName,\n    isNotificationLoading,\n    setIsNotificationLoading,\n  ]);\n\n  return (\n    <div\n      className={clsx(\n        'EventTypeBroadcastRow__container',\n        classNames?.container,\n      )}\n    >\n      <div className={clsx('EventTypeBroadcastRow__label', classNames?.label)}>\n        {config.displayNameOverride ?? config.name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n      <NotifiToggle\n        checked={enabled}\n        classNames={classNames?.toggle}\n        disabled={disabled || isNotificationLoading}\n        setChecked={handleNewSubscription}\n      />\n    </div>\n  );\n};\n","import { ValueOrRef } from '../../hooks';\n\ntype Validator<T> = (item: unknown) => item is T;\ntype ResolveFunc<T> = (\n  name: string,\n  valueOrRef: ValueOrRef<T>,\n  inputs: Record<string, unknown>,\n) => T;\n\nconst createRefResolver = <T>(validator: Validator<T>): ResolveFunc<T> => {\n  return (\n    name: string,\n    valueOrRef: ValueOrRef<T>,\n    inputs: Record<string, unknown>,\n  ) => {\n    if (valueOrRef.type === 'value') {\n      return valueOrRef.value;\n    } else {\n      if (valueOrRef.ref === null) {\n        throw new Error(`Invalid configuration: Ref ${name} is null`);\n      }\n\n      const runtimeInput = inputs[valueOrRef.ref];\n      if (validator(runtimeInput)) {\n        return runtimeInput;\n      } else {\n        throw new Error(`Invalid value provided for ${name}: ${runtimeInput}`);\n      }\n    }\n  };\n};\n\nexport const resolveStringRef = createRefResolver(\n  (item: unknown): item is string => {\n    return typeof item === 'string';\n  },\n);\n\nexport const resolveStringArrayRef = createRefResolver(\n  (item: unknown): item is ReadonlyArray<string> => {\n    return (\n      Array.isArray(item) &&\n      item.every((element) => typeof element === 'string')\n    );\n  },\n);\n","import {\n  EventTypeConfig,\n  FilterOptions,\n} from '@notifi-network/notifi-frontend-client';\nimport type { Types } from '@notifi-network/notifi-graphql';\n\nimport { resolveStringRef } from '../components/subscription/resolveRef';\nimport { NotifiSubscriptionData } from '../context';\nimport { walletToSource } from './walletUtils';\n\nexport type SingleSourceAlertConfiguration = Readonly<{\n  type: 'single';\n  sourceType: Types.CreateSourceInput['type'];\n  createSource?: Readonly<{\n    address: string;\n    fusionEventTypeId?: string;\n  }>;\n  filterType: string;\n  filterOptions: FilterOptions | null;\n  sourceGroupName?: string;\n  maintainSourceGroup?: boolean;\n}>;\n\nexport type MultipleSourceAlertConfiguration = Readonly<{\n  type: 'multiple';\n  sources: ReadonlyArray<Types.CreateSourceInput>;\n  filterType: string;\n  filterOptions: FilterOptions | null;\n  sourceGroupName?: string;\n  maintainSourceGroup?: boolean;\n}>;\n\nexport type AlertConfiguration =\n  | SingleSourceAlertConfiguration\n  | MultipleSourceAlertConfiguration;\n\nexport const chatConfiguration = (): AlertConfiguration => {\n  return {\n    type: 'single',\n    filterType: 'NOTIFI_CHAT_MESSAGES',\n    filterOptions: {\n      alertFrequency: 'THREE_MINUTES',\n    },\n    sourceType: 'NOTIFI_CHAT',\n    createSource: {\n      address: '*',\n    },\n  };\n};\n\nexport const customThresholdConfiguration = ({\n  alertFrequency,\n  threshold,\n  filterType,\n  thresholdDirection,\n  sourceType,\n  sourceAddress,\n}: Readonly<{\n  alertFrequency: FilterOptions['alertFrequency'];\n  threshold: number;\n  filterType: string;\n  thresholdDirection: FilterOptions['thresholdDirection'];\n  sourceType: Types.CreateSourceInput['type'];\n  sourceAddress: string;\n}>): AlertConfiguration => {\n  return {\n    type: 'single',\n    sourceType,\n    filterType,\n    filterOptions: {\n      alertFrequency,\n      threshold,\n      thresholdDirection,\n    },\n    createSource: {\n      address: sourceAddress,\n    },\n  };\n};\n\nexport const customToggleConfiguration = ({\n  filterType,\n  filterOptions,\n  sourceType,\n  sourceAddress,\n}: Readonly<{\n  filterType: string;\n  filterOptions: FilterOptions;\n  sourceType: Types.CreateSourceInput['type'];\n  sourceAddress: string;\n}>): AlertConfiguration => {\n  return {\n    type: 'single',\n    sourceType,\n    filterType,\n    filterOptions,\n    createSource: {\n      address: sourceAddress,\n    },\n  };\n};\n\nexport type XMTPTopic = Readonly<{\n  address: string | null;\n  walletBlockchain: string;\n}>;\n\nconst topicToSource = (topic: string): Types.CreateSourceInput => {\n  return {\n    name: topic,\n    blockchainAddress: topic,\n    type: 'XMTP',\n  };\n};\n\nexport const XMTPToggleConfiguration = ({\n  XMTPTopics,\n}: Readonly<{\n  XMTPTopics: ReadonlyArray<string>;\n}>): AlertConfiguration => {\n  return {\n    type: 'multiple',\n    filterType: 'WEB3_CHAT_MESSAGES',\n    filterOptions: {},\n    sources: XMTPTopics.map(topicToSource),\n  };\n};\n\nexport const broadcastMessageConfiguration = ({\n  topicName,\n}: Readonly<{\n  topicName: string;\n}>): AlertConfiguration => {\n  return {\n    type: 'single',\n    filterType: 'BROADCAST_MESSAGES',\n    filterOptions: {},\n    sourceType: 'BROADCAST',\n    createSource: {\n      address: topicName,\n    },\n  };\n};\n\nexport const fusionToggleConfiguration = ({\n  fusionId,\n  fusionSourceAddress,\n  maintainSourceGroup,\n  alertFrequency,\n}: Readonly<{\n  fusionId: string;\n  fusionSourceAddress: string;\n  maintainSourceGroup?: boolean;\n  alertFrequency: FilterOptions['alertFrequency'] | undefined;\n}>): AlertConfiguration => {\n  return {\n    type: 'single',\n    maintainSourceGroup,\n    filterType: 'FUSION_SOURCE',\n    filterOptions: alertFrequency === undefined ? {} : { alertFrequency },\n    sourceType: 'FUSION_SOURCE',\n    createSource: {\n      address: fusionSourceAddress,\n      fusionEventTypeId: fusionId,\n    },\n  };\n};\n\ntype FusionToggleConfiguration = {\n  fusionId: string;\n  fusionSourceAddress: string;\n  maintainSourceGroup?: boolean;\n  alertFrequency: FilterOptions['alertFrequency'];\n  threshold: number;\n  thresholdDirection: FilterOptions['thresholdDirection'];\n};\nexport const fusionHealthCheckConfiguration = (\n  props: FusionToggleConfiguration,\n): AlertConfiguration => {\n  return {\n    type: 'single',\n    maintainSourceGroup: props.maintainSourceGroup,\n    filterType: 'FUSION_SOURCE',\n    filterOptions: {\n      alertFrequency: props.alertFrequency,\n      threshold: props.threshold,\n      thresholdDirection: props.thresholdDirection,\n    },\n    sourceType: 'FUSION_SOURCE',\n    createSource: {\n      address: props.fusionSourceAddress,\n      fusionEventTypeId: props.fusionId,\n    },\n  };\n};\n\nexport const directMessageConfiguration = (\n  params?: Readonly<{\n    type?: string;\n  }>,\n): AlertConfiguration => {\n  const type = params?.type;\n  return {\n    type: 'single',\n    sourceType: 'DIRECT_PUSH',\n    filterType: 'DIRECT_TENANT_MESSAGES',\n    filterOptions: type === undefined ? null : { directMessageType: type },\n  };\n};\n\nexport const healthThresholdConfiguration = ({\n  alertFrequency,\n  percentage,\n  thresholdDirection,\n}: Readonly<{\n  alertFrequency: FilterOptions['alertFrequency'];\n  percentage: number;\n  thresholdDirection: FilterOptions['thresholdDirection'];\n}>): AlertConfiguration => {\n  return {\n    type: 'single',\n    sourceType: 'DIRECT_PUSH',\n    filterType: 'VALUE_THRESHOLD',\n    filterOptions: {\n      alertFrequency,\n      threshold: percentage,\n      thresholdDirection,\n    },\n  };\n};\n\nexport const hedgeProtocolConfiguration = ({\n  walletAddress,\n}: Readonly<{\n  walletAddress: string;\n}>): AlertConfiguration => {\n  return {\n    type: 'single',\n    filterType: 'LIQUIDATIONS',\n    filterOptions: {},\n    sourceType: 'HEDGE_PROTOCOL',\n    createSource: {\n      address: walletAddress,\n    },\n  };\n};\n\nexport const tradingPairConfiguration = ({\n  tradingPair,\n  above,\n  price,\n}: Readonly<{\n  tradingPair: string;\n  above: boolean;\n  price: number;\n}>): AlertConfiguration => {\n  return {\n    type: 'single',\n    sourceType: 'DIRECT_PUSH',\n    filterType: 'DIRECT_TENANT_MESSAGES',\n    filterOptions: {\n      tradingPair,\n      values: {\n        and: [\n          {\n            key: 'spotPrice',\n            op: above ? 'gt' : 'lt',\n            value: price.toFixed(8),\n          },\n        ],\n      },\n    },\n  };\n};\n\nexport const walletBalanceConfiguration = ({\n  connectedWallets,\n}: Readonly<{\n  connectedWallets: ReadonlyArray<Types.ConnectedWalletFragmentFragment>;\n}>): AlertConfiguration => {\n  return {\n    type: 'multiple',\n    filterType: 'BALANCE',\n    filterOptions: null,\n    sources: connectedWallets\n      .filter(\n        (wallet): wallet is Types.ConnectedWalletFragmentFragment => !!wallet,\n      )\n      .map(walletToSource),\n    sourceGroupName: 'User Wallets',\n  };\n};\n\nexport const priceChangeConfiguration = ({\n  tokenIds,\n}: Readonly<{\n  tokenIds: ReadonlyArray<string>;\n}>): AlertConfiguration => {\n  return {\n    type: 'multiple',\n    filterType: 'COIN_PRICE_CHANGE_EVENTS',\n    filterOptions: null,\n    sources: tokenIds.map((tokenId) => {\n      return {\n        name: tokenId,\n        type: 'COIN_PRICE_CHANGES',\n        blockchainAddress: tokenId,\n      };\n    }),\n  };\n};\n\nexport const createConfigurations = (\n  eventTypes: EventTypeConfig,\n  inputs: Record<string, unknown>,\n  connectedWallets: NotifiSubscriptionData['connectedWallets'],\n): Record<string, AlertConfiguration> => {\n  const configs: Record<string, AlertConfiguration> = {};\n  eventTypes.forEach((eventType) => {\n    switch (eventType.type) {\n      case 'broadcast': {\n        const broadcastId = resolveStringRef(\n          eventType.name,\n          eventType.broadcastId,\n          {},\n        );\n\n        configs[eventType.name] = broadcastMessageConfiguration({\n          topicName: broadcastId,\n        });\n        break;\n      }\n      case 'custom': {\n        switch (eventType.selectedUIType) {\n          case 'HEALTH_CHECK': {\n            const thresholdDirection = eventType.checkRatios[0].type ?? 'below';\n            const ratioNumber = eventType.checkRatios[1].ratio;\n            configs[eventType.name] = customThresholdConfiguration({\n              sourceType: eventType.sourceType,\n              filterType: eventType.filterType,\n              alertFrequency: eventType.alertFrequency,\n              sourceAddress: resolveStringRef(\n                eventType.name,\n                eventType.sourceAddress,\n                inputs,\n              ),\n              thresholdDirection: thresholdDirection,\n              threshold:\n                eventType.numberType === 'percentage'\n                  ? ratioNumber / 100\n                  : ratioNumber,\n            });\n            break;\n          }\n          case 'TOGGLE': {\n            configs[eventType.name] = customToggleConfiguration({\n              sourceType: eventType.sourceType,\n              filterType: eventType.filterType,\n              filterOptions: eventType.filterOptions,\n              sourceAddress: resolveStringRef(\n                eventType.name,\n                eventType.sourceAddress,\n                inputs,\n              ),\n            });\n            break;\n          }\n        }\n        break;\n      }\n      case 'directPush': {\n        const pushId = resolveStringRef(\n          eventType.name,\n          eventType.directPushId,\n          {},\n        );\n\n        configs[eventType.name] = directMessageConfiguration({\n          type: pushId,\n        });\n\n        break;\n      }\n      case 'walletBalance': {\n        configs[eventType.name] = walletBalanceConfiguration({\n          connectedWallets: connectedWallets.filter(\n            (wallet): wallet is Types.ConnectedWalletFragmentFragment =>\n              !!wallet,\n          ),\n        });\n        break;\n      }\n      case 'priceChange': {\n        configs[eventType.name] = priceChangeConfiguration({\n          tokenIds: eventType.tokenIds,\n        });\n        break;\n      }\n      case 'fusionToggle': // fusionToggle is deprecated (use 'fusion' type with 'selectedUIType = TOGGLE' instead )\n        configs[eventType.name] = fusionToggleConfiguration({\n          maintainSourceGroup: eventType.maintainSourceGroup,\n          fusionId: resolveStringRef(\n            eventType.name,\n            eventType.fusionEventId,\n            inputs,\n          ),\n          fusionSourceAddress: resolveStringRef(\n            eventType.name,\n            eventType.sourceAddress,\n            inputs,\n          ),\n          alertFrequency: eventType.alertFrequency,\n        });\n        break;\n      case 'fusion': {\n        switch (eventType.selectedUIType) {\n          case 'TOGGLE':\n            configs[eventType.name] = fusionToggleConfiguration({\n              maintainSourceGroup: eventType.maintainSourceGroup,\n              fusionId: resolveStringRef(\n                eventType.name,\n                eventType.fusionEventId,\n                inputs,\n              ),\n              fusionSourceAddress: resolveStringRef(\n                eventType.name,\n                eventType.sourceAddress,\n                inputs,\n              ),\n              alertFrequency: eventType.alertFrequency,\n            });\n            break;\n          case 'HEALTH_CHECK':\n            configs[eventType.name] = fusionHealthCheckConfiguration({\n              maintainSourceGroup: eventType.maintainSourceGroup,\n              fusionId: resolveStringRef(\n                eventType.name,\n                eventType.fusionEventId,\n                inputs,\n              ),\n              fusionSourceAddress: resolveStringRef(\n                eventType.name,\n                eventType.sourceAddress,\n                inputs,\n              ),\n              alertFrequency: eventType.alertFrequency,\n              thresholdDirection: eventType.checkRatios[0].type ?? 'below',\n              threshold:\n                eventType.numberType === 'percentage'\n                  ? eventType.checkRatios[1].ratio / 100\n                  : eventType.checkRatios[1].ratio,\n            });\n        }\n      }\n    }\n  });\n\n  return configs;\n};\n","import { Types } from '@notifi-network/notifi-graphql';\nimport React from 'react';\n\nimport { AnnouncementIcon } from '../assets/AnnouncementIcon';\nimport { ChatAlertIcon } from '../assets/ChatAlertIcon';\nimport { RatioCheckIcon } from '../assets/RatioCheckIcon';\nimport { SwapIcon } from '../assets/SwapIcon';\nimport { AlertIcon } from '../components/AlertHistory/AlertIcon';\nimport { AlertNotificationViewProps } from '../components/AlertHistory/AlertNotificationRow';\nimport { NotificationHistoryEntry } from '../components/subscription';\nimport { formatAmount } from './AlertHistoryUtils';\n\ntype AccountBalanceChangedEventDetails = Extract<\n  Types.NotificationHistoryEntryFragmentFragment['detail'],\n  { __typename: 'AccountBalanceChangedEventDetails' }\n>;\n\ntype DirectTenantMessageEventDetails = Extract<\n  Types.NotificationHistoryEntryFragmentFragment['detail'],\n  { __typename: 'DirectTenantMessageEventDetails' }\n>;\n\ntype BroadcastMessageEventDetails = Extract<\n  | Types.NotificationHistoryEntryFragmentFragment['detail']\n  | Types.FusionNotificationHistoryEntryFragmentFragment['detail'],\n  { __typename: 'BroadcastMessageEventDetails' }\n>;\n\ntype ChatMessageReceivedEventDetails = Extract<\n  Types.NotificationHistoryEntryFragmentFragment['detail'],\n  { __typename: 'ChatMessageReceivedEventDetails' }\n>;\n\ntype HealthValueOverThresholdEventDetails = Extract<\n  Types.NotificationHistoryEntryFragmentFragment['detail'],\n  { __typename: 'HealthValueOverThresholdEventDetails' }\n>;\n\ntype GenericEventDetails = Extract<\n  Types.NotificationHistoryEntryFragmentFragment['detail'],\n  { __typename: 'GenericEventDetails' }\n>;\n\ntype AlertDetailsContents = {\n  topContent: string;\n  bottomContent: string;\n  bottomContentHtml?: string;\n  otherContent?: string;\n};\n\ntype SupportedEventDetailPropsMap = Map<\n  string,\n  {\n    getViewProps: (\n      notification: NotificationHistoryEntry,\n    ) => AlertNotificationViewProps;\n    getAlertDetailsContents: (\n      notification: NotificationHistoryEntry,\n    ) => AlertDetailsContents;\n  }\n>;\n\nconst supportedEventDetails: SupportedEventDetailPropsMap = new Map();\n\nsupportedEventDetails.set('DirectTenantMessageEventDetails', {\n  getViewProps: (notification: NotificationHistoryEntry) => {\n    const detail = notification.detail as DirectTenantMessageEventDetails;\n    const templateVariablesJson: Record<string, string> = JSON.parse(\n      detail.templateVariablesJson || '{}',\n    );\n    return {\n      notificationTitle: templateVariablesJson.title ?? 'Announcement',\n      notificationImage: <AnnouncementIcon />,\n      notificationSubject: templateVariablesJson.subject ?? '',\n      notificationDate: notification.createdDate,\n      notificationMessage: templateVariablesJson.message ?? '',\n    };\n  },\n  getAlertDetailsContents: (notification: NotificationHistoryEntry) => {\n    const detail = notification.detail as DirectTenantMessageEventDetails;\n    const templateVariablesJson: Record<string, string> = JSON.parse(\n      detail.templateVariablesJson || '{}',\n    );\n    return {\n      topContent: templateVariablesJson.subject ?? '',\n      bottomContent: templateVariablesJson.message ?? '',\n    };\n  },\n});\n\nsupportedEventDetails.set('BroadcastMessageEventDetails', {\n  getViewProps: (notification: NotificationHistoryEntry) => {\n    const detail = notification.detail as BroadcastMessageEventDetails;\n    return {\n      notificationTitle: 'Announcement',\n      notificationImage: <AnnouncementIcon />,\n      notificationSubject: detail.subject ?? '',\n      notificationDate: notification.createdDate,\n      notificationMessage: detail.message ?? '',\n    };\n  },\n  getAlertDetailsContents: (notification: NotificationHistoryEntry) => {\n    const detail = notification.detail as BroadcastMessageEventDetails;\n    return {\n      topContent: detail.subject ?? '',\n      bottomContent: detail.message ?? '',\n      bottomContentHtml: detail.messageHtml ?? '',\n    };\n  },\n});\n\nsupportedEventDetails.set('HealthValueOverThresholdEventDetails', {\n  getViewProps: (notification: NotificationHistoryEntry) => {\n    const detail = notification.detail as HealthValueOverThresholdEventDetails;\n    const threshold = detail.threshold ?? '';\n    const name = detail.name ?? '';\n    const value = detail.value ?? '';\n    let thresholdDirection = '';\n    if (parseFloat(value) > parseFloat(threshold)) {\n      thresholdDirection = 'under';\n    } else {\n      thresholdDirection = 'over';\n    }\n    return {\n      notificationTitle: 'Health Check',\n      notificationImage: <RatioCheckIcon />,\n      notificationSubject: `${name} ${thresholdDirection} ${threshold}`,\n      notificationDate: notification.createdDate,\n      notificationMessage: undefined,\n    };\n  },\n  getAlertDetailsContents: (notification: NotificationHistoryEntry) => {\n    const detail = notification.detail as HealthValueOverThresholdEventDetails;\n    return {\n      topContent: detail.name,\n      bottomContent: `value: ${detail.value}`,\n      otherContent: `threshold: ${detail.threshold}`,\n    };\n  },\n});\n\nsupportedEventDetails.set('GenericEventDetails', {\n  getViewProps: (notification) => {\n    const detail = notification.detail as GenericEventDetails;\n    return {\n      notificationTitle: detail.sourceName,\n      notificationImage: <AlertIcon icon={detail.icon} />,\n      notificationSubject: detail.notificationTypeName,\n      notificationDate: notification.createdDate,\n      notificationMessage: detail.genericMessage,\n    };\n  },\n  getAlertDetailsContents: (notification: NotificationHistoryEntry) => {\n    const detail = notification.detail as GenericEventDetails;\n    return {\n      topContent: detail.notificationTypeName,\n      bottomContent: detail.genericMessage,\n      bottomContentHtml: detail.genericMessageHtml ?? '',\n    };\n  },\n});\n\nsupportedEventDetails.set('ChatMessageReceivedEventDetails', {\n  getViewProps: (notification) => {\n    const detail = notification.detail as ChatMessageReceivedEventDetails;\n    return {\n      notificationTitle: `New Message from ${detail.senderName}`,\n      notificationSubject: `New Message from ${detail.senderName}`,\n      notificationDate: notification.createdDate,\n      notificationMessage: detail.messageBody,\n      notificationImage: <ChatAlertIcon width={17} height={17} />,\n    };\n  },\n  getAlertDetailsContents: (notification: NotificationHistoryEntry) => {\n    const detail = notification.detail as ChatMessageReceivedEventDetails;\n    return {\n      topContent: `New Message from ${detail.senderName}`,\n      bottomContent: detail.messageBody,\n    };\n  },\n});\n\nsupportedEventDetails.set('AccountBalanceChangedEventDetails', {\n  getViewProps: (notification) => {\n    const detail = notification.detail as AccountBalanceChangedEventDetails;\n    const changeAmount = formatAmount(\n      Math.abs(detail.previousValue - detail.newValue),\n    );\n\n    const getTitle = () => {\n      return detail.direction === 'INCOMING'\n        ? `Incoming Transaction: ${changeAmount} ${detail.tokenSymbol}`\n        : `Outgoing Transaction: -${changeAmount} ${detail.tokenSymbol}`;\n    };\n\n    const walletBlockchain = detail.walletBlockchain;\n    const direction = detail.direction === 'INCOMING' ? '' : '-';\n    const message = `${walletBlockchain} Wallet account balance changed by ${direction}${changeAmount} ${detail.tokenSymbol}`;\n    return {\n      notificationImage: <SwapIcon />,\n      notificationTitle: 'Wallet Balance Change',\n      notificationSubject: getTitle(),\n      notificationDate: notification.createdDate,\n      notificationMessage: message,\n    };\n  },\n  getAlertDetailsContents: (notification: NotificationHistoryEntry) => {\n    const detail = notification.detail as AccountBalanceChangedEventDetails;\n    const changeAmount = `${formatAmount(\n      Math.abs(detail.previousValue - detail.newValue),\n    )}`;\n\n    const topContent =\n      detail.direction === 'INCOMING'\n        ? `Incoming Transaction: ${changeAmount}  ${detail.tokenSymbol}`\n        : `Outgoing Transaction: -${changeAmount}  ${detail.tokenSymbol}`;\n\n    const direction = detail.direction === 'INCOMING' ? '' : '-';\n    const bottomContent = ` ${detail.walletBlockchain} wallet account balance changed by ${direction}${changeAmount} ${detail.tokenSymbol}`;\n    return {\n      topContent,\n      bottomContent: bottomContent,\n    };\n  },\n});\n\nconst validateIsSupported = (entry?: NotificationHistoryEntry): boolean => {\n  if (supportedEventDetails.get(entry?.detail?.__typename ?? '')) return true;\n  return false;\n};\n\nconst getAlertNotificationViewBaseProps = (\n  notification: NotificationHistoryEntry,\n): AlertNotificationViewProps => {\n  const genProps = supportedEventDetails.get(\n    notification.detail?.__typename ?? '',\n  )?.getViewProps;\n  return !!notification.detail && !!genProps\n    ? genProps(notification)\n    : // It should never come here: exception should be filtered out before. https://virtuoso.dev/troubleshooting\n      {\n        notificationTitle: 'Unsupported notification',\n        notificationImage: <AlertIcon icon={'INFO'} />,\n        notificationSubject: 'Alert not supported yet',\n        notificationDate: notification.createdDate,\n        notificationMessage: 'Unsupported notification',\n      };\n};\n\nconst getAlertDetailsContents = (\n  notification: NotificationHistoryEntry,\n): AlertDetailsContents => {\n  const getContents = supportedEventDetails.get(\n    notification.detail?.__typename ?? '',\n  )?.getAlertDetailsContents;\n  return !!notification && !!getContents\n    ? getContents(notification)\n    : // It should never come here: exception should be filtered out before. https://virtuoso.dev/troubleshooting\n      {\n        topContent: 'Unsupported notification',\n        bottomContent: 'Alert not supported yet',\n      };\n};\n\nexport {\n  getAlertDetailsContents,\n  getAlertNotificationViewBaseProps,\n  validateIsSupported,\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const AnnouncementIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M16.7498 10.7917V12.2084H19.5832V10.7917H16.7498ZM15.3332 15.4738C16.0132 15.9767 16.8986 16.6425 17.5998 17.1667C17.8832 16.7913 18.1665 16.4088 18.4498 16.0334C17.7486 15.5092 16.8632 14.8434 16.1832 14.3334C15.8998 14.7159 15.6165 15.0984 15.3332 15.4738ZM18.4498 6.96671C18.1665 6.59129 17.8832 6.20879 17.5998 5.83337C16.8986 6.35754 16.0132 7.02337 15.3332 7.53337C15.6165 7.90879 15.8998 8.29129 16.1832 8.66671C16.8632 8.15671 17.7486 7.49796 18.4498 6.96671ZM6.83317 9.37504C6.054 9.37504 5.4165 10.0125 5.4165 10.7917V12.2084C5.4165 12.9875 6.054 13.625 6.83317 13.625H7.5415V16.4584H8.95817V13.625H9.6665L13.2082 15.75V7.25004L9.6665 9.37504H6.83317ZM14.979 11.5C14.979 10.558 14.5682 9.70796 13.9165 9.12712V13.8659C14.5682 13.2921 14.979 12.4421 14.979 11.5Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const ChatAlertIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"22\"\n      height=\"22\"\n      viewBox=\"0 0 22 22\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <g clipPath=\"url(#chat_alert_icon_clip0_13256_1794)\">\n        <path\n          d=\"M18.332 1.83203H3.66536C2.65703 1.83203 1.83203 2.65703 1.83203 3.66536V20.1654L5.4987 16.4987H18.332C19.3404 16.4987 20.1654 15.6737 20.1654 14.6654V3.66536C20.1654 2.65703 19.3404 1.83203 18.332 1.83203ZM18.332 14.6654H5.4987L3.66536 16.4987V3.66536H18.332V14.6654Z\"\n          fill=\"currentColor\"\n        />\n      </g>\n      <defs>\n        <clipPath id=\"chat_alert_icon_clip0_13256_1794\">\n          <rect width=\"22\" height=\"22\" fill=\"currentColor\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const RatioCheckIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <circle cx=\"8\" cy=\"9\" r=\"1.75\" stroke=\"currentColor\" strokeWidth=\"1.5\" />\n      <circle\n        cx=\"16\"\n        cy=\"14\"\n        r=\"1.75\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n      <line\n        x1=\"9.22548\"\n        y1=\"16.4982\"\n        x2=\"14.8394\"\n        y2=\"6.77452\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const SwapIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M7.32357 17.9999L4.50007 14.7999M4.50007 14.7999L7.32357 11.5999M4.50007 14.7999H12.5\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M16.6764 12.4L19.4999 9.20003M19.4999 9.20003L16.6764 6.00004M19.4999 9.20003H11.5\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const BellIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"25\"\n      height=\"25\"\n      viewBox=\"-6 -6 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M5.49013 11.1875C6.12122 11.1875 6.63757 10.6712 6.63757 10.0401H4.3427C4.3427 10.6712 4.85331 11.1875 5.49013 11.1875ZM8.93244 7.74519V4.8766C8.93244 3.11529 7.99154 1.64083 6.35071 1.25071V0.860577C6.35071 0.384391 5.96632 0 5.49013 0C5.01395 0 4.62956 0.384391 4.62956 0.860577V1.25071C2.98299 1.64083 2.04783 3.10955 2.04783 4.8766V7.74519L0.900391 8.89263V9.46635H10.0799V8.89263L8.93244 7.74519Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import { BellIcon } from 'notifi-react-card/lib/assets/BellIcon';\nimport React from 'react';\n\nimport { AnnouncementIcon } from '../../assets/AnnouncementIcon';\nimport { ChartIcon } from '../../assets/ChartIcon';\nimport { CheckIcon } from '../../assets/CheckIcon';\nimport { ClockIcon } from '../../assets/ClockIcon';\nimport { DaoIcon } from '../../assets/DaoIcon';\nimport { DownArrowIcon } from '../../assets/DownArrowIcon';\nimport { FlagIcon } from '../../assets/FlagIcon';\nimport { GraphIcon } from '../../assets/GraphIcon';\nimport { InfoIcon } from '../../assets/InfoIcon';\nimport { RatioCheckIcon } from '../../assets/RatioCheckIcon';\nimport { StarIcon } from '../../assets/StarIcon';\nimport { SwapIcon } from '../../assets/SwapIcon';\nimport { UpArrowIcon } from '../../assets/UpArrowIcon';\nimport { UrgentIcon } from '../../assets/UrgentIcon';\nimport { WatchIcon } from '../../assets/WatchIcon';\n\nconst icons: Record<string, React.FC<React.SVGProps<SVGSVGElement>>> = {\n  UP_ARROW: UpArrowIcon,\n  DOWN_ARROW: DownArrowIcon,\n  PERCENT: RatioCheckIcon,\n  CLOCK: ClockIcon,\n  CHECKMARK: CheckIcon,\n  STAR: StarIcon,\n  MEGAPHONE: AnnouncementIcon,\n  CHART: ChartIcon,\n  DAO: DaoIcon,\n  FLAG: FlagIcon,\n  GRAPH: GraphIcon,\n  INFO: InfoIcon,\n  SWAP: SwapIcon,\n  URGENT: UrgentIcon,\n  WATCH: WatchIcon,\n  BELL: BellIcon,\n};\n\nexport type Props = React.SVGProps<SVGSVGElement> & Readonly<{ icon: string }>;\n\nexport const AlertIcon: React.FC<Props> = ({ icon, ...props }: Props) => {\n  const Renderer = icons[icon] ?? AnnouncementIcon;\n  return <Renderer {...props} />;\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const ChartIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M17.0556 5.5H6.94444C6.15 5.5 5.5 6.15 5.5 6.94444V17.0556C5.5 17.85 6.15 18.5 6.94444 18.5H17.0556C17.85 18.5 18.5 17.85 18.5 17.0556V6.94444C18.5 6.15 17.85 5.5 17.0556 5.5ZM9.83333 15.6111H8.38889V10.5556H9.83333V15.6111ZM12.7222 15.6111H11.2778V8.38889H12.7222V15.6111ZM15.6111 15.6111H14.1667V12.7222H15.6111V15.6111Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = Readonly<\n  {\n    className?: string;\n  } & React.SVGProps<SVGSVGElement>\n>;\n\nexport const CheckIcon: React.FC<Props> = ({ className, ...svgProps }) => {\n  return (\n    <svg\n      className={className}\n      {...svgProps}\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M6 12.5L9.84 16L18 8\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const ClockIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18ZM12.75 8C12.75 7.58579 12.4142 7.25 12 7.25C11.5858 7.25 11.25 7.58579 11.25 8V12.5V12.8107L11.4697 13.0303L13.9697 15.5303C14.2626 15.8232 14.7374 15.8232 15.0303 15.5303C15.3232 15.2374 15.3232 14.7626 15.0303 14.4697L12.75 12.1893V8Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const DaoIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M17.0623 7.92265L12.0002 5L6.93799 7.92265L12.0002 10.8453L17.0623 7.92265ZM12.0002 12L5.93799 8.5V15.5L12.0002 19L18.0623 15.5V8.5L12.0002 12Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const DownArrowIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M8 13.4705L12 16.9999M12 16.9999L16 13.4705M12 16.9999V7\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const FlagIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M14.1882 7.52941L13.8824 6H7V19H8.52941V13.6471H12.8118L13.1176 15.1765H18.4706V7.52941H14.1882Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const GraphIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M7 16.5L10.5 11L13 14L17 8\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const InfoIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M11.3335 8.66671H12.6668V10H11.3335V8.66671ZM11.3335 11.3334H12.6668V15.3334H11.3335V11.3334ZM12.0002 5.33337C8.32016 5.33337 5.3335 8.32004 5.3335 12C5.3335 15.68 8.32016 18.6667 12.0002 18.6667C15.6802 18.6667 18.6668 15.68 18.6668 12C18.6668 8.32004 15.6802 5.33337 12.0002 5.33337ZM12.0002 17.3334C9.06016 17.3334 6.66683 14.94 6.66683 12C6.66683 9.06004 9.06016 6.66671 12.0002 6.66671C14.9402 6.66671 17.3335 9.06004 17.3335 12C17.3335 14.94 14.9402 17.3334 12.0002 17.3334Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const StarIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M12 5L13.5716 9.83688H18.6574L14.5429 12.8262L16.1145 17.6631L12 14.6738L7.8855 17.6631L9.4571 12.8262L5.3426 9.83688H10.4284L12 5Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const UpArrowIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M8 10.5293L12 6.99995M12 6.99995L16 10.5293M12 6.99995V16.9999\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const UrgentIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fill-rule=\"evenodd\"\n        clip-rule=\"evenodd\"\n        d=\"M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18ZM11.25 9.25C11.25 8.83579 11.5858 8.5 12 8.5C12.4142 8.5 12.75 8.83579 12.75 9.25V13.25C12.75 13.6642 12.4142 14 12 14C11.5858 14 11.25 13.6642 11.25 13.25V9.25ZM11.25 15.25C11.25 14.8358 11.5858 14.5 12 14.5C12.4142 14.5 12.75 14.8358 12.75 15.25C12.75 15.6642 12.4142 16 12 16C11.5858 16 11.25 15.6642 11.25 15.25Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const WatchIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M11.9998 7C8.6665 7 5.81984 9.07333 4.6665 12C5.81984 14.9267 8.6665 17 11.9998 17C15.3332 17 18.1798 14.9267 19.3332 12C18.1798 9.07333 15.3332 7 11.9998 7ZM11.9998 15.3333C10.1598 15.3333 8.6665 13.84 8.6665 12C8.6665 10.16 10.1598 8.66667 11.9998 8.66667C13.8398 8.66667 15.3332 10.16 15.3332 12C15.3332 13.84 13.8398 15.3333 11.9998 15.3333ZM11.9998 10C10.8932 10 9.99984 10.8933 9.99984 12C9.99984 13.1067 10.8932 14 11.9998 14C13.1065 14 13.9998 13.1067 13.9998 12C13.9998 10.8933 13.1065 10 11.9998 10Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import { format, parseISO } from 'date-fns';\n\nexport const isDateInThisWeek = (date: string) => {\n  const passedInDate = new Date(date);\n  const todayObj = new Date();\n  const todayDate = todayObj.getDate();\n\n  const firstDayOfWeek = new Date(todayObj.setDate(todayDate - 6));\n\n  return passedInDate >= firstDayOfWeek;\n};\n\nexport const getDayName = (date: string) => {\n  const weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][\n    new Date(date).getDay()\n  ];\n  return weekday;\n};\n\nexport const formatAmount = (amount: number): string =>\n  parseFloat(amount.toFixed(9)).toString();\n\nexport const isToday = (date: Date) => {\n  const today = new Date();\n\n  return (\n    date.getDate() == today.getDate() &&\n    date.getMonth() == today.getMonth() &&\n    date.getFullYear() == today.getFullYear()\n  );\n};\nexport const formatAlertDetailsTimestamp = (date: string) => {\n  try {\n    const parsedDate = parseISO(date);\n\n    const month = parsedDate.toLocaleString('default', { month: 'short' });\n    const clockTime = format(parsedDate, 'HH:mm');\n    const dateTime = format(parsedDate, 'dd');\n    const finalDate = `${month} ${dateTime} at ${clockTime} `;\n\n    return finalDate;\n  } catch {\n    return '-';\n  }\n};\n\nexport const formatTimestamp = (date: string): string => {\n  try {\n    const parsedDate = parseISO(date);\n\n    const month = parsedDate.toLocaleString('default', { month: 'short' });\n    const clockTime = format(parsedDate, 'HH:mm');\n    const dateTime = format(parsedDate, 'dd');\n    const finalDate = `${month} ${dateTime}`;\n\n    if (isToday(parsedDate)) {\n      return clockTime;\n    }\n\n    if (isDateInThisWeek(date)) {\n      return getDayName(date);\n    }\n    return finalDate;\n  } catch {\n    return '-';\n  }\n};\n","import {\n  EventTypeConfig,\n  EventTypeItem,\n  NotifiFrontendClient,\n} from '@notifi-network/notifi-frontend-client';\nimport { Types } from '@notifi-network/notifi-graphql';\n\nimport { SubscriptionData } from '../hooks';\n\nexport const subscribeAlertByFrontendClient = async (\n  frontendClient: NotifiFrontendClient,\n  alertDetail: Readonly<{\n    eventType: EventTypeItem;\n    inputs: Record<string, unknown>;\n  }>,\n): Promise<SubscriptionData> => {\n  await frontendClient.ensureAlert(alertDetail);\n  const updatedData = await frontendClient.fetchData();\n  const updatedTgs = updatedData.targetGroup;\n  if (!(updatedTgs && updatedTgs.length > 0)) {\n    throw new Error('No target groups found');\n  }\n  const updatedTg = {\n    // adopt the first target group\n    ...updatedTgs[0],\n    name: updatedTgs[0]?.name ?? '',\n  };\n\n  const alerts: Record<string, Types.AlertFragmentFragment> = {};\n\n  updatedData.alert?.forEach((alert) => {\n    if (alert && alert.name) {\n      alerts[alert.name] = alert;\n    }\n  });\n\n  return {\n    alerts,\n    email: updatedTg.emailTargets?.[0]?.emailAddress ?? '',\n    phoneNumber: updatedTg.smsTargets?.[0]?.phoneNumber ?? '',\n    isPhoneNumberConfirmed: updatedTg.smsTargets?.[0]?.isConfirmed ?? false,\n    telegramId: updatedTg.telegramTargets?.[0]?.telegramId ?? '',\n    telegramConfirmationUrl:\n      updatedTg.telegramTargets?.[0]?.confirmationUrl ?? '',\n    discordId: updatedTg.discordTargets?.[0]?.id ?? '',\n  };\n};\n\nexport const unsubscribeAlertByFrontendClient = async (\n  frontendClient: NotifiFrontendClient,\n  alertDetail: Readonly<{\n    eventType: EventTypeItem;\n    inputs: Record<string, unknown>;\n  }>,\n): Promise<void> => {\n  const alerts = await frontendClient.getAlerts();\n  const existing = alerts.find(\n    (alert) => alert.name === alertDetail.eventType.name,\n  );\n  if (!existing || !existing?.id) throw new Error('Alert not found');\n  await frontendClient.deleteAlert({ id: existing.id });\n};\n\nexport const subscribeAlertsByFrontendClient = async (\n  frontendClient: NotifiFrontendClient,\n  eventTypes: EventTypeConfig,\n  inputs: Record<string, unknown>,\n): Promise<SubscriptionData> => {\n  for (const eventType of eventTypes) {\n    try {\n      await frontendClient.ensureAlert({ eventType, inputs });\n    } catch (e) {\n      console.log(\n        `EventType ${eventType.type} does not support default subscribe: ${e}`,\n      );\n    }\n  }\n\n  const updatedData = await frontendClient.fetchData();\n  const updatedTgs = updatedData.targetGroup;\n  if (!(updatedTgs && updatedTgs.length > 0)) {\n    throw new Error('No target groups found');\n  }\n  const updatedTg = {\n    // adopt the first target group\n    ...updatedTgs[0],\n    name: updatedTgs[0]?.name ?? '',\n  };\n\n  const alerts: Record<string, Types.AlertFragmentFragment> = {};\n\n  updatedData.alert?.forEach((alert) => {\n    if (alert && alert.name) {\n      alerts[alert.name] = alert;\n    }\n  });\n\n  return {\n    alerts,\n    email: updatedTg.emailTargets?.[0]?.emailAddress ?? '',\n    phoneNumber: updatedTg.smsTargets?.[0]?.phoneNumber ?? '',\n    isPhoneNumberConfirmed: updatedTg.smsTargets?.[0]?.isConfirmed ?? false,\n    telegramId: updatedTg.telegramTargets?.[0]?.telegramId ?? '',\n    telegramConfirmationUrl:\n      updatedTg.telegramTargets?.[0]?.confirmationUrl ?? '',\n    discordId: updatedTg.discordTargets?.[0]?.id ?? '',\n  };\n};\n","/**\n * @description Returns an array of the object's keys with the correct type.\n * @example\n * const destinations: Record<FormField, string> = { email: 'email', phoneNumber: 'phoneNumber' };\n * const keys = objectKeys(destinations); // type of Keys is FormField[] instead of string[] (which is the default type of Object.keys)\n */\nexport const objectKeys = <T extends Record<keyof T, unknown>>(\n  object: T,\n): (keyof T)[] => {\n  return Object?.keys(object) as (keyof T)[];\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nexport type NotifiToggleProps = Readonly<{\n  classNames?: Readonly<{\n    container?: string;\n    input?: string;\n    slider?: string;\n  }>;\n  disabled: boolean;\n  checked: boolean;\n  setChecked: React.Dispatch<React.SetStateAction<boolean>>;\n  intercomToggleStyle?: string;\n}>;\n\nexport const NotifiToggle: React.FC<NotifiToggleProps> = ({\n  classNames,\n  disabled,\n  checked,\n  setChecked,\n  intercomToggleStyle,\n}: NotifiToggleProps) => {\n  return (\n    <label className={clsx('NotifiToggle__container', classNames?.container)}>\n      <input\n        className={clsx(\n          'NotifiToggle__input',\n          intercomToggleStyle,\n          classNames?.input,\n        )}\n        disabled={disabled}\n        type=\"checkbox\"\n        checked={checked}\n        onChange={(e) => {\n          setChecked(e.target.checked);\n        }}\n      />\n      <span\n        className={clsx('NotifiToggle__slider', classNames?.slider, {\n          'NotifiToggleSlider--disabled': disabled,\n        })}\n      ></span>\n    </label>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nexport type NotifiTooltipProps = Readonly<{\n  classNames?: Readonly<{\n    container?: string;\n    icon?: string;\n    tooltip?: string;\n    tooltipLabel?: string;\n  }>;\n  content: string;\n}>;\n\nexport const NotifiTooltip: React.FC<NotifiTooltipProps> = ({\n  classNames,\n  content,\n}: NotifiTooltipProps) => {\n  return (\n    <div className={clsx('NotifiTooltip__container', classNames?.container)}>\n      <svg\n        className={clsx('NotifiTooltip__infoIcon', classNames?.icon)}\n        width=\"20\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M9 7H11V5H9V7ZM10 18C5.59 18 2 14.41 2 10C2 5.59 5.59 2 10 2C14.41 2 18 5.59 18 10C18 14.41 14.41 18 10 18ZM10 0C8.68678 0 7.38642 0.258658 6.17317 0.761205C4.95991 1.26375 3.85752 2.00035 2.92893 2.92893C1.05357 4.8043 0 7.34784 0 10C0 12.6522 1.05357 15.1957 2.92893 17.0711C3.85752 17.9997 4.95991 18.7362 6.17317 19.2388C7.38642 19.7413 8.68678 20 10 20C12.6522 20 15.1957 18.9464 17.0711 17.0711C18.9464 15.1957 20 12.6522 20 10C20 8.68678 19.7413 7.38642 19.2388 6.17317C18.7362 4.95991 17.9997 3.85752 17.0711 2.92893C16.1425 2.00035 15.0401 1.26375 13.8268 0.761205C12.6136 0.258658 11.3132 0 10 0ZM9 15H11V9H9V15Z\"\n          fill=\"inherit\"\n        />\n      </svg>\n      <div className={clsx('NotifiTooltip__body', classNames?.tooltip)}>\n        <div className={clsx('NotifiTooltip__label', classNames?.tooltipLabel)}>\n          {content}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { ThresholdDirection } from '@notifi-network/notifi-frontend-client';\nimport {\n  CustomTopicTypeItem,\n  EventTypeItem,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { SubscriptionData, useNotifiSubscribe } from '../../hooks';\nimport {\n  DeepPartialReadonly,\n  customThresholdConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\nimport { resolveStringRef } from './resolveRef';\n\nexport type EventTypeCustomHealthCheckRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    content: string;\n    button: string;\n    toggle: NotifiToggleProps['classNames'];\n    buttonContainer: string;\n    errorMessage: string;\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: CustomTopicTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nconst getParsedPercentage = (input: string): number | null => {\n  if (input.indexOf('%') === input.length - 1) {\n    return parseFloat(input.slice(0, -1)) ?? null;\n  }\n  return null;\n};\n\nconst getParsedPrice = (input: string): number | null => {\n  if (input.indexOf('$') === 0) {\n    return parseFloat(input.slice(1)) ?? null;\n  }\n  return null;\n};\n\nexport const EventTypeCustomHealthCheckRow: React.FC<\n  EventTypeCustomHealthCheckRowProps\n> = ({\n  classNames,\n  config,\n  disabled,\n  inputs,\n}: EventTypeCustomHealthCheckRowProps) => {\n  const { alerts, loading, render } = useNotifiSubscriptionContext();\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const handleSuffixPercentage = (value: string) => {\n    value = value.replace('%', '');\n    setCustomValue(value + '%');\n  };\n\n  const handlePrefixDollar = (value: string) => {\n    value = value.replace('$', '');\n    setCustomValue('$' + value);\n  };\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const [enabled, setEnabled] = useState(false);\n  // This indicates which box to select\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\n  const [isNotificationLoading, setIsNotificationLoading] =\n    useState<boolean>(false);\n\n  const [customValue, setCustomValue] = useState<string>('');\n  const customInputRef = useRef<HTMLInputElement>(null);\n  const thresholdDirection: ThresholdDirection = 'below';\n\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const alertName = useMemo<string>(() => config.name, [config]);\n\n  const tooltipContent = config.tooltipContent;\n\n  const UNABLE_TO_SUBSCRIBE = 'Unable to subscribe, please try again';\n  const UNABLE_TO_UNSUBSCRIBE = 'Unable to unsubscribe, please try again';\n  const INVALID_NUMBER = 'Please enter a valid number';\n\n  if (config.selectedUIType !== 'HEALTH_CHECK') {\n    return null;\n  }\n\n  const subscribingRatioValue = useMemo(() => {\n    const alert = alerts[alertName];\n    if (!alert || !alert.filterOptions) return null;\n    let alertRatioValue: number | null = null;\n    switch (config.numberType) {\n      case 'percentage':\n        alertRatioValue = JSON.parse(alert.filterOptions).threshold * 100;\n        break;\n      default: // 'integer' | 'price'\n        alertRatioValue = JSON.parse(alert.filterOptions).threshold;\n    }\n    return alertRatioValue;\n  }, [alerts]);\n\n  const defaultRatios = useMemo(() => {\n    const ratios = config.checkRatios ?? [];\n    return ratios.map((ratio) => ratio.ratio);\n  }, [config]);\n\n  useEffect(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n\n    if (!subscribingRatioValue) {\n      setEnabled(false);\n      setSelectedIndex(defaultRatios.length - 1);\n      return;\n    }\n    setEnabled(true);\n\n    const selectedRatioIndex = defaultRatios.findIndex(\n      (ratio) => ratio === subscribingRatioValue,\n    );\n\n    if (selectedRatioIndex !== -1 && customValue === '') {\n      setSelectedIndex(selectedRatioIndex);\n    }\n\n    if (!defaultRatios.includes(subscribingRatioValue) && customValue === '') {\n      setSelectedIndex(3);\n      setCustomValue(() => {\n        switch (config.numberType) {\n          case 'percentage':\n            return subscribingRatioValue + '%';\n          case 'price':\n            return '$' + subscribingRatioValue;\n          default: // 'integer'\n            return subscribingRatioValue.toString();\n        }\n      });\n    }\n  }, [alertName, alerts, loading, enabled, setEnabled, isNotificationLoading]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n      ratioNumber: number,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        alertDetail.inputs[`${alertDetail.eventType.name}__healthRatio`] =\n          ratioNumber;\n        alertDetail.inputs[\n          `${alertDetail.eventType.name}__healthThresholdDirection`\n        ] = config.checkRatios[0].type ?? thresholdDirection;\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertConfiguration: customThresholdConfiguration({\n            sourceType: config.sourceType,\n            filterType: config.filterType,\n            alertFrequency: config.alertFrequency,\n            sourceAddress: resolveStringRef(\n              alertName,\n              config.sourceAddress,\n              inputs,\n            ),\n            thresholdDirection:\n              config.checkRatios[0].type ?? thresholdDirection,\n            threshold:\n              config.numberType === 'percentage'\n                ? ratioNumber / 100\n                : ratioNumber,\n          }),\n          alertName,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const handleCustomRatioButtonNewSubscription = () => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n\n    let regex = new RegExp(/^[0-9.]+$/);\n    switch (config.numberType) {\n      case 'percentage':\n        regex = new RegExp(/^[0-9.%]+$/);\n        break;\n      case 'price':\n        regex = new RegExp(/^[0-9.$]+$/);\n        break;\n    }\n\n    if (!customInputRef.current || !regex.test(customInputRef.current.value)) {\n      return setErrorMessage(INVALID_NUMBER);\n    }\n\n    setErrorMessage('');\n    setIsNotificationLoading(true);\n\n    customInputRef.current.placeholder = 'Custom';\n    let ratioNumber = null;\n    switch (config.numberType) {\n      case 'percentage':\n        ratioNumber = getParsedPercentage(customInputRef.current.value);\n        break;\n      case 'price':\n        ratioNumber = getParsedPrice(customInputRef.current.value);\n        break;\n      default: // 'integer'\n        ratioNumber = parseFloat(customInputRef.current.value);\n    }\n\n    if (ratioNumber && customValue) {\n      subscribeAlert({ eventType: config, inputs }, ratioNumber)\n        .then(() => {\n          setSelectedIndex(3);\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => setErrorMessage(UNABLE_TO_UNSUBSCRIBE))\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setErrorMessage(INVALID_NUMBER);\n      setSelectedIndex(defaultRatios[defaultRatios.length - 1]);\n      setIsNotificationLoading(false);\n    }\n  };\n\n  const handleKeypressUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      if (customInputRef.current) {\n        customInputRef.current.blur();\n        event.preventDefault();\n      }\n    }\n  };\n  const handleRatioButtonNewSubscription = (value: number, index: number) => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setIsNotificationLoading(true);\n\n    setErrorMessage('');\n    if (value) {\n      subscribeAlert({ eventType: config, inputs }, value)\n        .then(() => {\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n          setSelectedIndex(index);\n          setCustomValue('');\n        })\n        .catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE))\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setErrorMessage(INVALID_NUMBER);\n      setIsNotificationLoading(false);\n    }\n  };\n\n  const handleHealthCheckSubscription = useCallback(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setIsNotificationLoading(true);\n    setErrorMessage('');\n    if (!enabled && !subscribingRatioValue) {\n      setEnabled(true);\n      subscribeAlert(\n        { eventType: config, inputs },\n        defaultRatios[defaultRatios.length - 1],\n      )\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          const responseHasAlert = res.alerts[alertName] !== undefined;\n          if (responseHasAlert !== true) {\n            setEnabled(false);\n          }\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch((e) => {\n          setErrorMessage(UNABLE_TO_SUBSCRIBE);\n          setEnabled(false);\n          throw e;\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setEnabled(false);\n      unSubscribeAlert({ eventType: config, inputs })\n        .then((res) => {\n          setCustomValue('');\n          if (res) {\n            const responseHasAlert = res.alerts[alertName] !== undefined;\n            if (responseHasAlert !== false) {\n              setEnabled(true);\n            }\n          }\n          // Else, ensured by frontendClient\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch((e) => {\n          setErrorMessage(UNABLE_TO_SUBSCRIBE);\n          setEnabled(true);\n          throw e;\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    }\n  }, [\n    subscribingRatioValue,\n    enabled,\n    isNotificationLoading,\n    setIsNotificationLoading,\n  ]);\n\n  return (\n    <div>\n      <div\n        className={clsx(\n          'EventTypeCustomHealthCheckRow__container',\n          classNames?.container,\n        )}\n      >\n        <div\n          className={clsx('EventTypeHealthCheckRow__label', classNames?.label)}\n        >\n          {config.name}\n          {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n            <NotifiTooltip\n              classNames={classNames?.tooltip}\n              content={tooltipContent}\n            />\n          ) : null}\n        </div>\n        <NotifiToggle\n          checked={enabled}\n          classNames={classNames?.toggle}\n          disabled={disabled || isNotificationLoading}\n          setChecked={handleHealthCheckSubscription}\n        />\n      </div>\n      {enabled && config.checkRatios?.length ? (\n        <>\n          <div\n            className={clsx(\n              'EventTypeHealthCheckRow__content',\n              classNames?.content,\n            )}\n          >\n            {config.healthCheckSubtitle\n              ? config.healthCheckSubtitle\n              : `Alert me when my margin ratio is ${config.checkRatios[0]?.type}`}\n          </div>\n          <div\n            className={clsx(\n              'EventTypeHealthCheckRow__buttonContainer',\n              classNames?.buttonContainer,\n            )}\n          >\n            {config.checkRatios.map((value, index) => {\n              const numberType = config.numberType;\n\n              let valueToShow = null;\n              switch (numberType) {\n                case 'percentage':\n                  valueToShow = value.ratio + '%';\n                  break;\n                case 'price':\n                  valueToShow = '$' + value.ratio;\n                  break;\n                default: // 'integer'\n                  valueToShow = value.ratio;\n              }\n              return (\n                <div\n                  key={index}\n                  className={clsx(\n                    'EventTypeHealthCheckRow__button',\n                    `${\n                      index === selectedIndex\n                        ? ' EventTypeHealthCheckRow__buttonSelected'\n                        : undefined\n                    }`,\n                    isNotificationLoading ? 'buttonDisabled' : undefined,\n                    classNames?.button,\n                  )}\n                  onClick={() => {\n                    if (\n                      isNotificationLoading === true ||\n                      selectedIndex === index\n                    ) {\n                      return;\n                    }\n\n                    handleRatioButtonNewSubscription(value.ratio, index);\n                  }}\n                >\n                  {valueToShow}\n                </div>\n              );\n            })}\n\n            <input\n              ref={customInputRef}\n              onKeyUp={(e) => handleKeypressUp(e)}\n              onFocus={(e) =>\n                (e.target.placeholder =\n                  config.numberType === 'percentage' ? '0.00' : '0')\n              }\n              onClick={() => {\n                setErrorMessage('');\n                setSelectedIndex(null);\n              }}\n              disabled={isNotificationLoading}\n              onBlur={handleCustomRatioButtonNewSubscription}\n              value={customValue}\n              placeholder=\"Custom\"\n              className={clsx(\n                'EventTypeHealthCheckRow__button',\n                'EventTypeHealthCheckRow__customButton',\n                `${\n                  selectedIndex === 3\n                    ? ' EventTypeHealthCheckRow__buttonSelected'\n                    : undefined\n                }`,\n                classNames?.button,\n              )}\n              onChange={(e) => {\n                if (config.numberType === 'percentage') {\n                  handleSuffixPercentage(e.target.value);\n                } else if (config.numberType === 'price') {\n                  handlePrefixDollar(e.target.value);\n                } else {\n                  setCustomValue(e.target.value ?? '');\n                }\n              }}\n            />\n          </div>\n          <label\n            className={clsx(\n              'NotifiEmailInput__errorMessage',\n              classNames?.errorMessage,\n            )}\n          >\n            {errorMessage}\n          </label>\n        </>\n      ) : null}\n    </div>\n  );\n};\n","import {\n  CustomTopicTypeItem,\n  EventTypeItem,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { SubscriptionData, useNotifiSubscribe } from '../../hooks';\nimport {\n  DeepPartialReadonly,\n  customToggleConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\nimport { resolveStringRef } from './resolveRef';\n\nexport type EventTypeCustomToggleRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: CustomTopicTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EventTypeCustomToggleRow: React.FC<\n  EventTypeCustomToggleRowProps\n> = ({\n  classNames,\n  disabled,\n  config,\n  inputs,\n}: EventTypeCustomToggleRowProps) => {\n  const { alerts, loading, render } = useNotifiSubscriptionContext();\n\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const [enabled, setEnabled] = useState(false);\n  const [isNotificationLoading, setIsNotificationLoading] =\n    useState<boolean>(false);\n\n  const alertName = useMemo<string>(() => config.name, [config]);\n\n  if (config.selectedUIType !== 'TOGGLE') {\n    return null;\n  }\n\n  const tooltipContent = config.tooltipContent;\n  const didFetch = useRef(false);\n\n  useEffect(() => {\n    if (didFetch.current) {\n      return;\n    }\n\n    const hasAlert = alerts[alertName] !== undefined;\n    setEnabled(hasAlert);\n    didFetch.current = true;\n  }, [alertName, alerts]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertConfiguration: customToggleConfiguration({\n            sourceType: config.sourceType,\n            filterType: config.filterType,\n            filterOptions: config.filterOptions,\n            sourceAddress: resolveStringRef(\n              alertName,\n              config.sourceAddress,\n              inputs,\n            ),\n          }),\n          alertName: alertName,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, config],\n  );\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const handleNewSubscription = useCallback(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setIsNotificationLoading(true);\n\n    if (!enabled) {\n      setEnabled(true);\n      subscribeAlert({\n        eventType: config,\n        inputs: inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          const responseHasAlert = res.alerts[alertName] !== undefined;\n\n          if (responseHasAlert !== true) {\n            setEnabled(false);\n          }\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(false);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setEnabled(false);\n\n      unSubscribeAlert({\n        eventType: config,\n        inputs: inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          if (res) {\n            const responseHasAlert = res.alerts[alertName] !== undefined;\n            if (responseHasAlert !== false) {\n              setEnabled(true);\n            }\n          }\n          // Else, ensured by frontendClient\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(true);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    }\n  }, [\n    enabled,\n    alerts,\n    instantSubscribe,\n    alertName,\n    isNotificationLoading,\n    setEnabled,\n    setIsNotificationLoading,\n  ]);\n\n  return (\n    <div\n      className={clsx(\n        'EventTypeCustomToggleRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx('EventTypeCustomToggleRow__label', classNames?.label)}\n      >\n        {config.name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n      <NotifiToggle\n        classNames={classNames?.toggle}\n        disabled={disabled || isNotificationLoading}\n        checked={enabled}\n        setChecked={handleNewSubscription}\n      />\n    </div>\n  );\n};\n","import { EventTypeItem } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport {\n  DirectPushEventTypeItem,\n  SubscriptionData,\n  useNotifiSubscribe,\n} from '../../hooks';\nimport {\n  AlertConfiguration,\n  DeepPartialReadonly,\n  directMessageConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\nimport { resolveStringRef } from './resolveRef';\n\nexport type EventTypeDirectPushRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: DirectPushEventTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EventTypeDirectPushRow: React.FC<EventTypeDirectPushRowProps> = ({\n  classNames,\n  disabled,\n  config,\n  inputs,\n}: EventTypeDirectPushRowProps) => {\n  const { alerts, loading, setLoading, render } =\n    useNotifiSubscriptionContext();\n\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n  const [enabled, setEnabled] = useState(false);\n\n  const pushId = useMemo(\n    () => resolveStringRef(config.name, config.directPushId, inputs),\n    [config, inputs],\n  );\n  const alertName = useMemo<string>(() => {\n    if (config.directPushId.type === 'value') {\n      return config.name;\n    }\n\n    return `${config.name}:${pushId}`;\n  }, [config, pushId]);\n  const alertConfiguration = useMemo<AlertConfiguration>(() => {\n    return directMessageConfiguration({\n      type: pushId,\n    });\n  }, [alertName, config, inputs]);\n  const tooltipContent = config.tooltipContent;\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: alertConfiguration,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, alertConfiguration],\n  );\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, alertConfiguration],\n  );\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    const hasAlert = alerts[alertName] !== undefined;\n    setEnabled(hasAlert);\n  }, [alertName, alerts]);\n\n  const handleNewSubscription = useCallback(() => {\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n    if (!enabled) {\n      subscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then(() => {\n          setEnabled(true);\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => setEnabled(false))\n        .finally(() => setLoading(false));\n    } else {\n      unSubscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then(() => {\n          setEnabled(false);\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => setEnabled(true))\n        .finally(() => setLoading(false));\n    }\n  }, [enabled, instantSubscribe, alertConfiguration, alertName]);\n\n  return (\n    <div\n      className={clsx(\n        'EventTypeDirectPushRow__container',\n        classNames?.container,\n      )}\n    >\n      <div className={clsx('EventTypeDirectPushRow__label', classNames?.label)}>\n        {config.name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n      <NotifiToggle\n        classNames={classNames?.toggle}\n        disabled={disabled}\n        checked={enabled}\n        setChecked={handleNewSubscription}\n      />\n    </div>\n  );\n};\n","import { ThresholdDirection } from '@notifi-network/notifi-frontend-client';\nimport {\n  EventTypeItem,\n  HealthCheckEventInputsWithCustomPercentage,\n  HealthCheckEventInputsWithIndex,\n  HealthCheckInputs,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport {\n  CheckRatio,\n  HealthCheckEventTypeItem,\n  SubscriptionData,\n  useNotifiSubscribe,\n} from '../../hooks';\nimport {\n  DeepPartialReadonly,\n  healthThresholdConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\n\nconst getParsedInputNumber = (input: string): number | null => {\n  if (input.indexOf('%') === input.length - 1) {\n    return parseFloat(input.slice(0, -1)) ?? null;\n  }\n  return null;\n};\n\nconst UNABLE_TO_SUBSCRIBE = 'Unable to subscribe, please try again';\nconst INVALID_NUMBER = 'Please enter a valid number';\n\nexport type EventTypeHealthCheckRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    content: string;\n    button: string;\n    buttonContainer: string;\n    errorMessage: string;\n    toggle: NotifiToggleProps['classNames'];\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: HealthCheckEventTypeItem;\n}>;\n\nconst inputsValidator = (\n  inputs: HealthCheckInputs,\n): inputs is HealthCheckEventInputsWithIndex => {\n  return 'index' in inputs;\n};\n\nexport const EventTypeHealthCheckRow: React.FC<\n  EventTypeHealthCheckRowProps\n> = ({ classNames, config, disabled }: EventTypeHealthCheckRowProps) => {\n  const customInputRef = useRef<HTMLInputElement>(null);\n  const { alerts, loading, setLoading, render } =\n    useNotifiSubscriptionContext();\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const handleSuffixPercentage = (value: string) => {\n    value = value.replace('%', '');\n    setCustomValue(value + '%');\n  };\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const [enabled, setEnabled] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\n  const [initialRatio, setInitialRatio] = useState<number | null>(null);\n  const [customValue, setCustomValue] = useState<string>('');\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const alertName = useMemo<string>(() => config.name, [config]);\n  const tooltipContent = config.tooltipContent;\n\n  const isValueType = config && config.checkRatios.type === 'value';\n  let ratios: CheckRatio[] = [];\n  let thresholdDirection: ThresholdDirection = 'below';\n  if (isValueType) {\n    ratios = config.checkRatios.value;\n    thresholdDirection = ratios[0].type;\n  }\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    const alert = alerts[alertName];\n    const checkRatios = ratios.map((ratio) => ratio.ratio);\n    if (alert) {\n      let alertRatioValue: number | null = null;\n      if (alert.filterOptions) {\n        alertRatioValue = JSON.parse(alert.filterOptions).threshold;\n      }\n      setEnabled(true);\n      if (alertRatioValue) {\n        ratios.forEach((ratio, index) => {\n          if (ratio.ratio === alertRatioValue && customValue === '') {\n            setSelectedIndex(index);\n          }\n        });\n        setInitialRatio(alertRatioValue);\n        if (!checkRatios.includes(alertRatioValue) && customValue === '') {\n          setSelectedIndex(3);\n          setCustomValue(alertRatioValue * 100 + '%');\n        }\n      }\n    } else {\n      setEnabled(false);\n      setSelectedIndex(ratios.length - 1);\n      setInitialRatio(ratios[ratios.length - 1]?.ratio);\n    }\n  }, [\n    alertName,\n    alerts,\n    loading,\n    ratios,\n    setEnabled,\n    setCustomValue,\n    setSelectedIndex,\n  ]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs:\n          | HealthCheckEventInputsWithIndex\n          | HealthCheckEventInputsWithCustomPercentage;\n      }>,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertConfiguration: healthThresholdConfiguration({\n            alertFrequency: config.alertFrequency,\n            percentage: inputsValidator(alertDetail.inputs)\n              ? ratios[alertDetail.inputs.index].ratio\n              : alertDetail.inputs.customPercentage,\n            thresholdDirection: inputsValidator(alertDetail.inputs)\n              ? thresholdDirection\n              : alertDetail.inputs.thresholdDirection,\n          }),\n          alertName: alertName,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, config],\n  );\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const handleToggleNewSubscription = useCallback(() => {\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n    setErrorMessage('');\n    if (!enabled && initialRatio !== null) {\n      subscribeAlert({\n        eventType: config,\n        inputs: {\n          index: 0,\n        },\n      })\n        .then(() => {\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE))\n        .finally(() => setLoading(false));\n    } else {\n      unSubscribeAlert({\n        eventType: config,\n        inputs: {},\n      })\n        .then(() => {\n          setCustomValue('');\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE))\n        .finally(() => setLoading(false));\n    }\n  }, [initialRatio, enabled, isValueType]);\n\n  const handleRatioButtonNewSubscription = (value: number, index: number) => {\n    if (loading) {\n      return;\n    }\n    setErrorMessage('');\n    if (value) {\n      subscribeAlert({\n        eventType: config,\n        inputs: {\n          index: index,\n        },\n      })\n        .then(() => {\n          setSelectedIndex(index);\n          setCustomValue('');\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE));\n    } else {\n      setErrorMessage(INVALID_NUMBER);\n    }\n  };\n\n  const handleCustomRatioButtonNewSubscription = () => {\n    if (loading) {\n      return;\n    }\n    setErrorMessage('');\n    if (customInputRef.current) {\n      customInputRef.current.placeholder = 'Custom';\n      const ratioNumber = getParsedInputNumber(customInputRef.current.value);\n      if (\n        ratioNumber &&\n        ratioNumber >= 0 &&\n        ratioNumber <= 100 &&\n        customValue\n      ) {\n        subscribeAlert({\n          eventType: config,\n          inputs: {\n            customPercentage: ratioNumber / 100,\n            thresholdDirection,\n          },\n        })\n          .then(() => {\n            setSelectedIndex(3);\n            isUsingFrontendClient && frontendClient.fetchData().then(render);\n          })\n          .catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE));\n      } else {\n        setErrorMessage(INVALID_NUMBER);\n      }\n    }\n  };\n\n  const handleKeypressUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      if (customInputRef.current) {\n        customInputRef.current.blur();\n        event.preventDefault();\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className={clsx(\n          'EventTypeHealthCheckRow__container',\n          classNames?.container,\n        )}\n      >\n        <div\n          className={clsx('EventTypeHealthCheckRow__label', classNames?.label)}\n        >\n          {config.name}\n          {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n            <NotifiTooltip\n              classNames={classNames?.tooltip}\n              content={tooltipContent}\n            />\n          ) : null}\n        </div>\n        <NotifiToggle\n          checked={enabled}\n          classNames={classNames?.toggle}\n          disabled={disabled}\n          setChecked={handleToggleNewSubscription}\n        />\n      </div>\n      {enabled ? (\n        <>\n          <div\n            className={clsx(\n              'EventTypeHealthCheckRow__content',\n              classNames?.content,\n            )}\n          >\n            Alert me when my margin ratio is {ratios[0]?.type}\n          </div>\n          <div\n            className={clsx(\n              'EventTypeHealthCheckRow__buttonContainer',\n              classNames?.buttonContainer,\n            )}\n          >\n            {ratios.map((value, index) => {\n              const percentage = value.ratio * 100 + '%';\n              return (\n                <div\n                  key={index}\n                  className={clsx(\n                    'EventTypeHealthCheckRow__button',\n                    `${\n                      index === selectedIndex\n                        ? ' EventTypeHealthCheckRow__buttonSelected'\n                        : undefined\n                    }`,\n                    classNames?.button,\n                  )}\n                  onClick={() => {\n                    handleRatioButtonNewSubscription(value.ratio, index);\n                  }}\n                >\n                  {percentage}\n                </div>\n              );\n            })}\n            <input\n              ref={customInputRef}\n              onKeyUp={(e) => handleKeypressUp(e)}\n              onFocus={(e) => (e.target.placeholder = '0.00%')}\n              onClick={() => {\n                setErrorMessage('');\n                setSelectedIndex(null);\n              }}\n              onBlur={handleCustomRatioButtonNewSubscription}\n              value={customValue}\n              placeholder=\"Custom\"\n              className={clsx(\n                'EventTypeHealthCheckRow__button',\n                'EventTypeHealthCheckRow__customButton',\n                `${\n                  selectedIndex === 3\n                    ? ' EventTypeHealthCheckRow__buttonSelected'\n                    : undefined\n                }`,\n                classNames?.button,\n              )}\n              onChange={(e) => {\n                handleSuffixPercentage(e.target.value ?? '');\n              }}\n            />\n          </div>\n          <label\n            className={clsx(\n              'NotifiEmailInput__errorMessage',\n              classNames?.errorMessage,\n            )}\n          >\n            {errorMessage}\n          </label>\n        </>\n      ) : null}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { LabelEventTypeItem } from '../../hooks';\nimport { DeepPartialReadonly } from '../../utils';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\n\nexport type EventTypeLabelRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  config: LabelEventTypeItem;\n}>;\n\nexport const EventTypeLabelRow: React.FC<EventTypeLabelRowProps> = ({\n  classNames,\n  config,\n}: EventTypeLabelRowProps) => {\n  const { name, tooltipContent } = config;\n\n  return (\n    <div\n      className={clsx('EventTypeLabelRow__container', classNames?.container)}\n    >\n      <div className={clsx('EventTypeLabelRow__label', classNames?.label)}>\n        {name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n    </div>\n  );\n};\n","import { EventTypeItem } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport {\n  PriceChangeEventTypeItem,\n  SubscriptionData,\n  useNotifiSubscribe,\n} from '../../hooks';\nimport {\n  AlertConfiguration,\n  DeepPartialReadonly,\n  priceChangeConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\n\nexport type EventTypePriceChangeRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: PriceChangeEventTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EventTypePriceChangeRow: React.FC<\n  EventTypePriceChangeRowProps\n> = ({\n  classNames,\n  disabled,\n  config,\n  inputs,\n}: EventTypePriceChangeRowProps) => {\n  const { alerts, loading, render } = useNotifiSubscriptionContext();\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const [enabled, setEnabled] = useState(false);\n  const [isNotificationLoading, setIsNotificationLoading] =\n    useState<boolean>(false);\n\n  const alertName = useMemo<string>(() => config.name, [config]);\n  const alertConfiguration = useMemo<AlertConfiguration>(() => {\n    return priceChangeConfiguration({\n      tokenIds: config.tokenIds,\n    });\n  }, [alertName, config]);\n  const tooltipContent = config.tooltipContent;\n\n  const didFetch = useRef(false);\n\n  useEffect(() => {\n    if (didFetch.current) {\n      return;\n    }\n\n    const hasAlert = alerts[alertName] !== undefined;\n    setEnabled(hasAlert);\n    didFetch.current = true;\n  }, [alertName, alerts]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertConfiguration: alertConfiguration,\n          alertName: alertName,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, config],\n  );\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const handleNewSubscription = useCallback(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setIsNotificationLoading(true);\n\n    if (!enabled) {\n      setEnabled(true);\n      subscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          const responseHasAlert = res.alerts[alertName] !== undefined;\n          if (responseHasAlert !== true) {\n            setEnabled(false);\n          }\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(false);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setEnabled(false);\n      unSubscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          if (res) {\n            const responseHasAlert = res.alerts[alertName] !== undefined;\n            if (responseHasAlert !== false) {\n              setEnabled(true);\n            }\n          }\n          // Else, ensured by frontendClient\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(false);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    }\n  }, [\n    loading,\n    enabled,\n    instantSubscribe,\n    alertConfiguration,\n    alertName,\n    isNotificationLoading,\n    setIsNotificationLoading,\n  ]);\n\n  return (\n    <div\n      className={clsx(\n        'EventTypePriceChangeRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx('EventTypePriceChangeRow__label', classNames?.label)}\n      >\n        {config.name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n      <NotifiToggle\n        checked={enabled}\n        classNames={classNames?.toggle}\n        disabled={disabled || isNotificationLoading}\n        setChecked={handleNewSubscription}\n      />\n    </div>\n  );\n};\n","import {\n  EventTypeItem,\n  TradingPairInputs,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { DeleteIcon } from '../../assets/DeleteIcon';\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport {\n  SubscriptionData,\n  TradingPairEventTypeItem,\n  useNotifiSubscribe,\n} from '../../hooks';\nimport {\n  DeepPartialReadonly,\n  subscribeAlertByFrontendClient,\n  tradingPairConfiguration,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\nimport { resolveStringArrayRef } from './resolveRef';\n\nexport type EventTypeTradingPairsRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    addPair: string;\n    tooltip: NotifiTooltipProps['classNames'];\n    tradingPairAlertRow: TradingPairAlertRowProps['classNames'];\n    tradingPairSettingsRow: TradingPairSettingsRowProps['classNames'];\n  }>;\n  config: TradingPairEventTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EventTypeTradingPairsRow: React.FC<\n  EventTypeTradingPairsRowProps\n> = ({ classNames, config, inputs }: EventTypeTradingPairsRowProps) => {\n  const { name, tooltipContent } = config;\n  const { alerts } = useNotifiSubscriptionContext();\n\n  const tradingPairAlertNames = useMemo(() => {\n    if (alerts === undefined) {\n      return [];\n    }\n\n    return Object.keys(alerts)\n      .filter((alertName) => alertName.indexOf(config.name) >= 0)\n      .sort((a, b) => {\n        const getTime = (alertName: string) => {\n          const [, time] = alertName.split(':;:');\n          const date = new Date(time);\n          return date.getTime();\n        };\n\n        return getTime(a) - getTime(b);\n      });\n  }, [alerts, config.name]);\n\n  const [showInput, setShowInput] = useState(false);\n  const hasSetInput = useRef(false);\n  useEffect(() => {\n    if (!hasSetInput.current && alerts !== undefined) {\n      hasSetInput.current = true;\n      setShowInput(tradingPairAlertNames.length === 0);\n    }\n  }, [alerts, tradingPairAlertNames]);\n\n  return (\n    <div\n      className={clsx(\n        'EventTypeTradingPairsRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx('EventTypeTradingPairsRow__label', classNames?.label)}\n      >\n        {name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n      {tradingPairAlertNames.map((alertName) => {\n        return (\n          <TradingPairAlertRow\n            key={alertName}\n            classNames={classNames?.tradingPairAlertRow}\n            alertName={alertName}\n            inputs={inputs}\n          />\n        );\n      })}\n      {showInput ? (\n        <TradingPairSettingsRow\n          classNames={classNames?.tradingPairSettingsRow}\n          config={config}\n          inputs={inputs}\n          onSave={() => {\n            setShowInput(false);\n          }}\n        />\n      ) : null}\n      <button\n        className={clsx(\n          'EventTypeTradingPairsRow__addPair',\n          classNames?.addPair,\n        )}\n        disabled={showInput}\n        onClick={() => {\n          setShowInput(true);\n        }}\n      >\n        Add pair\n      </button>\n    </div>\n  );\n};\n\nexport type TradingPairAlertRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    textContainer: string;\n    name: string;\n    description: string;\n    deleteIcon: string;\n  }>;\n  alertName: string;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const TradingPairAlertRow: React.FC<TradingPairAlertRowProps> = ({\n  classNames,\n  alertName,\n  inputs,\n}: TradingPairAlertRowProps) => {\n  const { render } = useNotifiSubscriptionContext();\n\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const { name, description } = useMemo(() => {\n    // const alertName = `${config.name}:;:${now}:;:${selectedPair}:;:${\n    //   above ? 'above' : 'below'\n    // }:;:${price}`;\n    const [, , name, above, price] = alertName.split(':;:');\n    const description = `Alert me when trade price is ${above}: ${price}`;\n    return {\n      name,\n      description,\n    };\n  }, [alertName]);\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  return (\n    <div\n      className={clsx('TradingPairAlertRow__container', classNames?.container)}\n    >\n      <div\n        className={clsx(\n          'TradingPairAlertRow__textContainer',\n          classNames?.textContainer,\n        )}\n      >\n        <span className={clsx('TradingPairAlertRow__name', classNames?.name)}>\n          {name}\n        </span>\n        <span\n          className={clsx(\n            'TradingPairAlertRow__description',\n            classNames?.description,\n          )}\n        >\n          {description}\n        </span>\n      </div>\n      <div\n        className={clsx(\n          'TradingPairAlertRow__deleteIcon',\n          classNames?.deleteIcon,\n        )}\n        onClick={() => {\n          unSubscribeAlert({\n            eventType: {\n              name: alertName,\n            } as EventTypeItem, // We only need alertName to unsubscribe\n            inputs,\n          }).then(() => {\n            isUsingFrontendClient && frontendClient.fetchData().then(render);\n          });\n        }}\n      >\n        <DeleteIcon />\n      </div>\n    </div>\n  );\n};\nexport type TradingPairSettingsRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    buttonContainer: string;\n    radioButton: string;\n    container: string;\n    dropdown: string;\n    dropdownContainer: string;\n    label: string;\n    option: string;\n    priceInput: string;\n    priceInputContainer: string;\n    saveButton: string;\n  }>;\n  config: TradingPairEventTypeItem;\n  inputs: Record<string, unknown>;\n  onSave: () => void;\n}>;\n\nexport const TradingPairSettingsRow: React.FC<TradingPairSettingsRowProps> = ({\n  classNames,\n  config,\n  inputs,\n  onSave,\n}: TradingPairSettingsRowProps) => {\n  const tradingPairs = resolveStringArrayRef(\n    config.name,\n    config.tradingPairs,\n    inputs,\n  );\n\n  const [selectedPair, setSelectedPair] = useState<string | undefined>(\n    undefined,\n  );\n  const [above, setAbove] = useState<boolean>(true);\n  const [price, setPrice] = useState<number>(0.0);\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n  const { render } = useNotifiSubscriptionContext();\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const alertConfiguration = useMemo(() => {\n    return selectedPair\n      ? tradingPairConfiguration({\n          tradingPair: selectedPair,\n          above,\n          price,\n        })\n      : undefined;\n  }, [selectedPair, above, price]);\n\n  const alertName = useMemo(() => {\n    const now = new Date().toISOString();\n\n    return `${config.name}:;:${now}:;:${selectedPair}:;:${\n      above ? 'above' : 'below'\n    }:;:${price}`;\n  }, [config, selectedPair, above, price]);\n\n  const subscribeAlert = async (\n    alertDetail: Readonly<{\n      eventType: EventTypeItem;\n      inputs: TradingPairInputs;\n    }>,\n  ): Promise<SubscriptionData> => {\n    if (isUsingFrontendClient) {\n      return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n    }\n    if (!alertConfiguration)\n      throw new Error('alertConfiguration is undefinded');\n\n    return instantSubscribe({\n      alertName,\n      alertConfiguration,\n    });\n  };\n\n  return (\n    <div\n      className={clsx(\n        'TradingPairSettingsRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx(\n          'TradingPairSettingsRow__dropdownContainer',\n          classNames?.dropdownContainer,\n        )}\n      >\n        <select\n          className={clsx(\n            'TradingPairSettingsRow__dropdown',\n            classNames?.dropdown,\n          )}\n          onChange={(e) => setSelectedPair(e.target.value)}\n          value={selectedPair}\n        >\n          <option\n            className={clsx(\n              'TradingPairSettingsRow__option',\n              classNames?.option,\n            )}\n            key=\"unselected\"\n            value={undefined}\n          >\n            Select a trading pair\n          </option>\n          {tradingPairs.map((pair) => (\n            <option\n              className={clsx(\n                'TradingPairSettingsRow__option',\n                classNames?.option,\n              )}\n              key={pair}\n              value={pair}\n            >\n              {pair}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div\n        className={clsx(\n          'TradingPairSettingsRow__buttonContainer',\n          classNames?.buttonContainer,\n        )}\n      >\n        <button\n          className={clsx(\n            'TradingPairSettingsRow__radioButton',\n            classNames?.radioButton,\n            { TradingPairSettingsRow__radioSelected: above },\n          )}\n          onClick={() => setAbove(true)}\n        >\n          Above\n        </button>\n        <button\n          className={clsx(\n            'TradingPairSettingsRow__radioButton',\n            classNames?.radioButton,\n            { TradingPairSettingsRow__radioSelected: !above },\n          )}\n          onClick={() => setAbove(false)}\n        >\n          Below\n        </button>\n      </div>\n      <div\n        className={clsx(\n          'TradingPairSettingsRow__priceInputContainer',\n          classNames?.priceInputContainer,\n        )}\n      >\n        <input\n          className={clsx(\n            'TradingPairSettingsRow__priceInput',\n            classNames?.priceInput,\n          )}\n          name=\"notifi-tradingpair-price\"\n          type=\"number\"\n          inputMode=\"decimal\"\n          value={price}\n          onChange={(e) => {\n            setPrice(e.target.valueAsNumber);\n          }}\n        />\n      </div>\n      <button\n        className={clsx(\n          'TradingPairSettingsRow__saveButton',\n          classNames?.saveButton,\n        )}\n        disabled={selectedPair === undefined}\n        onClick={async () => {\n          if (selectedPair !== undefined) {\n            await subscribeAlert({\n              eventType: { ...config, name: alertName },\n              inputs: {\n                price,\n                direction: above ? 'above' : 'below',\n                pair: selectedPair,\n                ...inputs,\n              },\n            });\n            frontendClient.fetchData().then(render);\n            setSelectedPair(undefined);\n            setAbove(true);\n            setPrice(0.0);\n            onSave();\n          }\n        }}\n      >\n        Save\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const DeleteIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      {...props}\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"inherit\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M7.5 17.4444C7.5 18.3 8.175 19 9 19H15C15.825 19 16.5 18.3 16.5 17.4444V8.11111H7.5V17.4444ZM17.25 5.77778H14.625L13.875 5H10.125L9.375 5.77778H6.75V7.33333H17.25V5.77778Z\"\n        fill=\"#inherit\"\n      />\n    </svg>\n  );\n};\n","import {\n  EventTypeItem,\n  FusionEventTypeItem,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { DeleteIcon } from '../../assets/DeleteIcon';\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport {\n  FusionMultiThresholdEventTypeItem,\n  SubscriptionData,\n  useNotifiSubscribe,\n} from '../../hooks';\nimport {\n  DeepPartialReadonly,\n  fusionHealthCheckConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\nimport { resolveStringRef } from './resolveRef';\n\nexport type EventTypeFusionMultiThresholdRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    content: string;\n    label: string;\n    addThreshold: string;\n    tooltip: NotifiTooltipProps['classNames'];\n    fusionMultiThresholdAlertRow: FusionMultiThresholdAlertRowProps['classNames'];\n    fusionMultiThresholdSettingsRow: FusionMultiThresholdSettingsRowProps['classNames'];\n  }>;\n  config: FusionMultiThresholdEventTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EventTypeFusionMultiThresholdRow: React.FC<\n  EventTypeFusionMultiThresholdRowProps\n> = ({ classNames, config, inputs }: EventTypeFusionMultiThresholdRowProps) => {\n  const { displayNameOverride, name, tooltipContent } = config;\n  const { alerts } = useNotifiSubscriptionContext();\n\n  const fusionMultiThresholdAlertNames = useMemo(() => {\n    if (alerts === undefined) {\n      return [];\n    }\n\n    return Object.keys(alerts)\n      .filter((alertName) => alertName.indexOf(config.name) >= 0)\n      .sort((a, b) => {\n        const getTime = (alertName: string) => {\n          const [, time] = alertName.split(':;:');\n          const date = new Date(time);\n          return date.getTime();\n        };\n\n        return getTime(a) - getTime(b);\n      });\n  }, [alerts, config.name]);\n\n  const [showInput, setShowInput] = useState(false);\n  const hasSetInput = useRef(false);\n  useEffect(() => {\n    if (!hasSetInput.current && alerts !== undefined) {\n      hasSetInput.current = true;\n      setShowInput(fusionMultiThresholdAlertNames.length === 0);\n    }\n  }, [alerts, fusionMultiThresholdAlertNames]);\n\n  return (\n    <div\n      className={clsx(\n        'EventTypeFusionMultiThresholdRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx(\n          'EventTypeFusionMultiThresholdRow__label',\n          classNames?.label,\n        )}\n      >\n        {displayNameOverride ?? name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n      <div\n        className={clsx(\n          'EventTypeFusionMultiThresholdRow__content',\n          classNames?.content,\n        )}\n      >\n        {config.subtitle\n          ? config.subtitle\n          : `Alert me when my margin ratio is:`}\n      </div>\n      {fusionMultiThresholdAlertNames.map((alertName) => {\n        return (\n          <FusionMultiThresholdAlertRow\n            key={alertName}\n            classNames={classNames?.fusionMultiThresholdAlertRow}\n            alertName={alertName}\n            inputs={inputs}\n          />\n        );\n      })}\n      {showInput ? (\n        <FusionMultiThresholdSettingsRow\n          classNames={classNames?.fusionMultiThresholdSettingsRow}\n          config={config}\n          inputs={inputs}\n          onSave={() => {\n            setShowInput(false);\n          }}\n        />\n      ) : null}\n      <button\n        className={clsx(\n          'EventTypeFusionMultiThresholdRow__addThreshold',\n          classNames?.addThreshold,\n        )}\n        disabled={showInput}\n        onClick={() => {\n          setShowInput(true);\n        }}\n      >\n        {config.addThresholdTitle ? config.addThresholdTitle : 'Add alert'}\n      </button>\n    </div>\n  );\n};\n\nexport type FusionMultiThresholdAlertRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    textContainer: string;\n    name: string;\n    description: string;\n    deleteIcon: string;\n  }>;\n  alertName: string;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const FusionMultiThresholdAlertRow: React.FC<\n  FusionMultiThresholdAlertRowProps\n> = ({ classNames, alertName, inputs }: FusionMultiThresholdAlertRowProps) => {\n  const { render } = useNotifiSubscriptionContext();\n\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const name = useMemo(() => {\n    const [, , above, threshold] = alertName.split(':;:');\n    return above + ' ' + threshold;\n  }, [alertName]);\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  return (\n    <div\n      className={clsx(\n        'FusionMultiThresholdAlertRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx(\n          'FusionMultiThresholdAlertRow__textContainer',\n          classNames?.textContainer,\n        )}\n      >\n        <span\n          className={clsx(\n            'FusionMultiThresholdAlertRow__name',\n            classNames?.name,\n          )}\n        >\n          {name}\n        </span>\n      </div>\n      <div\n        className={clsx(\n          'FusionMultiThresholdAlertRow__deleteIcon',\n          classNames?.deleteIcon,\n        )}\n        onClick={() => {\n          unSubscribeAlert({\n            eventType: {\n              name: alertName,\n            } as EventTypeItem, // We only need alertName to unsubscribe\n            inputs,\n          }).then(() => {\n            isUsingFrontendClient && frontendClient.fetchData().then(render);\n          });\n        }}\n      >\n        <DeleteIcon />\n      </div>\n    </div>\n  );\n};\nexport type FusionMultiThresholdSettingsRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    buttonContainer: string;\n    radioButton: string;\n    container: string;\n    label: string;\n    option: string;\n    thresholdInput: string;\n    thresholdInputContainer: string;\n    saveButton: string;\n  }>;\n  config: FusionMultiThresholdEventTypeItem;\n  inputs: Record<string, unknown>;\n  onSave: () => void;\n}>;\n\nexport const FusionMultiThresholdSettingsRow: React.FC<\n  FusionMultiThresholdSettingsRowProps\n> = ({\n  classNames,\n  config,\n  inputs,\n  onSave,\n}: FusionMultiThresholdSettingsRowProps) => {\n  const [above, setAbove] = useState<boolean>(true);\n  const [threshold, setThreshold] = useState<number>(0.0);\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n  const { render } = useNotifiSubscriptionContext();\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const fusionEventId = useMemo(\n    () => resolveStringRef(config.name, config.fusionEventId, inputs),\n    [config, inputs],\n  );\n\n  const fusionSourceAddress = useMemo(\n    () => resolveStringRef(config.name, config.sourceAddress, inputs),\n    [config, inputs],\n  );\n\n  const alertConfiguration = useMemo(() => {\n    return fusionHealthCheckConfiguration({\n      maintainSourceGroup: config?.maintainSourceGroup,\n      fusionId: fusionEventId,\n      fusionSourceAddress,\n      alertFrequency: config.alertFrequency,\n      thresholdDirection: above ? 'above' : 'below',\n      threshold:\n        config.numberType === 'percentage' ? threshold / 100 : threshold,\n    });\n  }, [above, threshold]);\n\n  const alertName = useMemo(() => {\n    const now = new Date().toISOString();\n\n    return `${config.name}:;:${now}:;:${\n      above ? 'Above' : 'Below'\n    }:;:${threshold.toFixed(2)}${\n      config.numberType === 'percentage' ? '%' : ''\n    }`;\n  }, [config, above, threshold]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: FusionMultiThresholdEventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n      threshold: number,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        const fusionEventType: FusionEventTypeItem = {\n          name: alertDetail.eventType.name,\n          type: 'fusion',\n          fusionEventId: alertDetail.eventType.fusionEventId,\n          sourceAddress: alertDetail.eventType.sourceAddress,\n          maintainSourceGroup: alertDetail.eventType.maintainSourceGroup,\n          alertFrequency: alertDetail.eventType.alertFrequency,\n          selectedUIType: 'HEALTH_CHECK',\n          numberType: alertDetail.eventType.numberType,\n          healthCheckSubtitle: '',\n          checkRatios: [{ type: above ? 'above' : 'below', ratio: threshold }],\n        };\n        alertDetail.inputs[`${alertDetail.eventType.name}__healthRatio`] =\n          threshold;\n        alertDetail.inputs[\n          `${alertDetail.eventType.name}__healthThresholdDirection`\n        ] = above ? 'above' : 'below';\n        return subscribeAlertByFrontendClient(frontendClient, {\n          eventType: fusionEventType,\n          inputs: alertDetail.inputs,\n        });\n      }\n      if (!alertConfiguration)\n        throw new Error('alertConfiguration is undefinded');\n\n      return instantSubscribe({\n        alertName,\n        alertConfiguration,\n      });\n    },\n    [isUsingFrontendClient, frontendClient, above, alertConfiguration],\n  );\n\n  return (\n    <div\n      className={clsx(\n        'FusionMultiThresholdSettingsRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx(\n          'FusionMultiThresholdSettingsRow__buttonContainer',\n          classNames?.buttonContainer,\n        )}\n      >\n        <button\n          className={clsx(\n            'FusionMultiThresholdSettingsRow__radioButton',\n            classNames?.radioButton,\n            { FusionMultiThresholdSettingsRow__radioSelected: above },\n          )}\n          onClick={() => setAbove(true)}\n        >\n          Above\n        </button>\n        <button\n          className={clsx(\n            'FusionMultiThresholdSettingsRow__radioButton',\n            classNames?.radioButton,\n            { FusionMultiThresholdSettingsRow__radioSelected: !above },\n          )}\n          onClick={() => setAbove(false)}\n        >\n          Below\n        </button>\n      </div>\n      <div\n        className={clsx(\n          'FusionMultiThresholdSettingsRow__thresholdInputContainer',\n          classNames?.thresholdInputContainer,\n        )}\n      >\n        <input\n          className={clsx(\n            'FusionMultiThresholdSettingsRow__thresholdInput',\n            classNames?.thresholdInput,\n          )}\n          name=\"notifi-fusionmultithreshold-threshold\"\n          type=\"number\"\n          inputMode=\"decimal\"\n          value={threshold}\n          onChange={(e) => {\n            setThreshold(e.target.valueAsNumber);\n          }}\n        />\n      </div>\n      <button\n        className={clsx(\n          'FusionMultiThresholdSettingsRow__saveButton',\n          classNames?.saveButton,\n        )}\n        disabled={threshold === undefined}\n        onClick={async () => {\n          await subscribeAlert(\n            {\n              eventType: { ...config, name: alertName },\n              inputs: inputs,\n            },\n            threshold,\n          );\n          frontendClient.fetchData().then(render);\n          setAbove(true);\n          setThreshold(0.0);\n          onSave();\n        }}\n      >\n        Save\n      </button>\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { DeepPartialReadonly } from '../../utils';\n\nexport type EventTypeUnsupportedRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n  }>;\n}>;\n\nexport const EventTypeUnsupportedRow: React.FC<\n  EventTypeUnsupportedRowProps\n> = ({ classNames }: EventTypeUnsupportedRowProps) => {\n  return (\n    <div\n      className={clsx(\n        'EventTypeUnsupportedRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx('EventTypeUnsupportedRow__label', classNames?.label)}\n      >\n        Unsupported Event Type\n      </div>\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport {\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from 'notifi-react-card/lib/utils/frontendClient';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport {\n  EventTypeItem,\n  SubscriptionData,\n  WalletBalanceEventTypeItem,\n  useNotifiSubscribe,\n} from '../../hooks';\nimport { DeepPartialReadonly, walletBalanceConfiguration } from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\n\nexport type EventTypeWalletBalanceRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: WalletBalanceEventTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EventTypeWalletBalanceRow: React.FC<\n  EventTypeWalletBalanceRowProps\n> = ({\n  classNames,\n  disabled,\n  config,\n  inputs,\n}: EventTypeWalletBalanceRowProps) => {\n  const { alerts, loading, connectedWallets, render, setLoading } =\n    useNotifiSubscriptionContext();\n  const [isNotificationLoading, setIsNotificationLoading] =\n    useState<boolean>(false);\n\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const [enabled, setEnabled] = useState(false);\n\n  const alertName = useMemo<string>(() => config.name, [config]);\n\n  const tooltipContent = config.tooltipContent;\n  const didFetch = useRef(false);\n  useEffect(() => {\n    if (didFetch.current) {\n      return;\n    }\n\n    const hasAlert = alerts[alertName] !== undefined;\n    setEnabled(hasAlert);\n    didFetch.current = true;\n  }, [alertName, alerts]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertConfiguration: walletBalanceConfiguration({ connectedWallets }),\n          alertName: alertName,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, config],\n  );\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const handleNewSubscription = useCallback(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setLoading(true);\n\n    if (!enabled) {\n      subscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then(() => {\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n          setEnabled(true);\n        })\n        .catch(() => {\n          setEnabled(false);\n        })\n        .finally(() => setLoading(false));\n    } else {\n      setEnabled(false);\n      unSubscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          if (res) {\n            const responseHasAlert = res.alerts[alertName] !== undefined;\n\n            if (responseHasAlert !== true) {\n              setEnabled(false);\n            }\n          }\n          // Else, ensured by frontendClient\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(true);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n          setLoading(false);\n        });\n    }\n  }, [\n    enabled,\n    instantSubscribe,\n    alertName,\n    setIsNotificationLoading,\n    isNotificationLoading,\n    setEnabled,\n  ]);\n\n  return (\n    <div\n      className={clsx(\n        'EventTypeWalletBalanceRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx('EventTypeWalletBalanceRow__label', classNames?.label)}\n      >\n        {config.name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n      <NotifiToggle\n        classNames={classNames?.toggle}\n        disabled={disabled || isNotificationLoading}\n        checked={enabled}\n        setChecked={handleNewSubscription}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { FetchedState } from '../../hooks';\nimport {\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n} from './NotifiSubscriptionCard';\nimport { SubscriptionCardUnsupported } from './SubscriptionCardUnsupported';\nimport type { SubscriptionCardV1Props } from './SubscriptionCardV1';\nimport { SubscriptionCardV1 } from './SubscriptionCardV1';\n\nexport type FetchedStateCardProps = Readonly<{\n  classNames?: Readonly<{\n    SubscriptionCardV1?: SubscriptionCardV1Props['classNames'];\n  }>;\n  copy?: Readonly<{\n    SubscriptionCardV1?: SubscriptionCardV1Props['copy'];\n  }>;\n  card: FetchedState;\n  inputDisabled: boolean;\n  inputs: Record<string, unknown>;\n  inputLabels?: NotifiInputFieldsText;\n  inputSeparators?: NotifiInputSeparators;\n  onClose?: () => void;\n}>;\n\nexport const FetchedStateCard: React.FC<FetchedStateCardProps> = ({\n  inputDisabled,\n  classNames,\n  copy,\n  card,\n  inputs,\n  inputLabels,\n  inputSeparators,\n  onClose,\n}) => {\n  let contents: React.ReactNode = <SubscriptionCardUnsupported />;\n  switch (card.data.version) {\n    case 'v1':\n      contents = (\n        <SubscriptionCardV1\n          classNames={classNames?.SubscriptionCardV1}\n          copy={copy?.SubscriptionCardV1}\n          data={card.data}\n          inputs={inputs}\n          inputDisabled={inputDisabled}\n          inputLabels={inputLabels}\n          inputSeparators={inputSeparators}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return <>{contents}</>;\n};\n","import React from 'react';\n\nexport const SubscriptionCardUnsupported: React.FC = () => {\n  return (\n    <>\n      <div>Unsupported configuration</div>\n    </>\n  );\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport { useDestinationState } from 'notifi-react-card/lib/hooks/useDestinationState';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n  FtuStage,\n  useNotifiClientContext,\n  useNotifiDemoPreviewContext,\n  useNotifiForm,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { useNotifiSubscribe } from '../../hooks';\nimport { DeepPartialReadonly } from '../../utils';\nimport {\n  AlertDetailsCard,\n  AlertDetailsProps,\n} from '../AlertHistory/AlertDetailsCard';\nimport { ConfigAlertModal, ConfigAlertModalProps } from '../ConfigAlertModal';\nimport {\n  ConfigDestinationModal,\n  ConfigDestinationModalProps,\n} from '../ConfigDestinationModal';\nimport NotifiAlertBox, {\n  NotifiAlertBoxButtonProps,\n  NotifiAlertBoxProps,\n} from '../NotifiAlertBox';\nimport { SignupBanner, SignupBannerProps } from '../SignupBanner';\nimport { VerifyBanner, VerifyBannerProps } from '../VerifyBanner';\nimport { ErrorStateCard, LoadingStateCard } from '../common';\nimport {\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n} from './NotifiSubscriptionCard';\nimport {\n  EditCardView,\n  EditCardViewProps,\n} from './subscription-card-views/EditCardView';\nimport {\n  ExpiredTokenView,\n  ExpiredTokenViewCardProps,\n} from './subscription-card-views/ExpiredTokenViewCard';\nimport {\n  AlertHistoryView,\n  AlertHistoryViewProps,\n  NotificationHistoryEntry,\n} from './subscription-card-views/HistoryCardView';\nimport {\n  PreviewCard,\n  PreviewCardProps,\n} from './subscription-card-views/PreviewCard';\nimport VerifyWalletView, {\n  VerifyWalletViewProps,\n} from './subscription-card-views/VerifyWalletView';\n\nexport type SubscriptionCardV1Props = Readonly<{\n  copy?: DeepPartialReadonly<{\n    EditCard: EditCardViewProps['copy'];\n    AlertHistory: AlertHistoryViewProps['copy'];\n    expiredHeader: string;\n    manageAlertsHeader: string;\n    signUpHeader: string;\n    editHeader: string;\n    verifyWalletsHeader: string;\n    historyHeader: string;\n    detailHeader: string;\n  }>;\n  classNames?: DeepPartialReadonly<{\n    alertContainer: string;\n    AlertHistoryView: AlertHistoryViewProps['classNames'];\n    AlertDetailsCard: AlertDetailsProps['classNames'];\n    PreviewCard: PreviewCardProps['classNames'];\n    HistoryCard?: AlertHistoryViewProps['classNames'];\n    EditCard: EditCardViewProps['classNames'];\n    ExpiredTokenView: ExpiredTokenViewCardProps['classNames'];\n    VerifyWalletView: VerifyWalletViewProps['classNames'];\n    NotifiAlertBox: NotifiAlertBoxProps['classNames'];\n    ErrorStateCard: string;\n    ConfigDestinationModal: ConfigDestinationModalProps['classNames'];\n    signupBanner: SignupBannerProps['classNames'];\n    ConfigAlertModal: ConfigAlertModalProps['classNames'];\n    dividerLine: string;\n    verifyBanner: VerifyBannerProps['classNames'];\n  }>;\n  inputDisabled: boolean;\n  data: CardConfigItemV1;\n  inputs: Record<string, unknown>;\n  inputLabels?: NotifiInputFieldsText;\n  inputSeparators?: NotifiInputSeparators;\n  onClose?: () => void;\n}>;\n\nexport const SubscriptionCardV1: React.FC<SubscriptionCardV1Props> = ({\n  classNames,\n  copy,\n  data,\n  inputDisabled,\n  inputs,\n  inputLabels,\n  inputSeparators,\n  onClose,\n}) => {\n  const allowedCountryCodes = [...data.contactInfo.sms.supportedCountryCodes];\n  const {\n    cardView,\n    email,\n    phoneNumber,\n    telegramId,\n    setCardView,\n    ftuStage,\n    syncFtuStage,\n    updateFtuStage,\n    loading,\n    setLoading,\n  } = useNotifiSubscriptionContext();\n  const { demoPreview } = useNotifiDemoPreviewContext();\n\n  const {\n    setEmail,\n    setTelegram,\n    setPhoneNumber,\n    setEmailErrorMessage,\n    setTelegramErrorMessage,\n    setPhoneNumberErrorMessage,\n  } = useNotifiForm();\n\n  const { isAuthenticated, isTokenExpired } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const { isClientTokenExpired, isClientAuthenticated } = useMemo(() => {\n    let isClientTokenExpired = false;\n    let isClientAuthenticated = false;\n    if (isUsingFrontendClient) {\n      isClientTokenExpired = frontendClient.userState?.status === 'expired';\n      isClientAuthenticated =\n        frontendClient.userState?.status === 'authenticated';\n    } else {\n      isClientTokenExpired = isTokenExpired;\n      isClientAuthenticated = isAuthenticated;\n    }\n    return { isClientTokenExpired, isClientAuthenticated };\n  }, [\n    frontendClient.userState?.status,\n    isTokenExpired,\n    isAuthenticated,\n    isUsingFrontendClient,\n  ]);\n\n  const { unverifiedDestinations, isTargetsExist } = useDestinationState();\n\n  const [selectedAlertEntry, setAlertEntry] = useState<\n    NotificationHistoryEntry | undefined\n  >(undefined);\n\n  let view = null;\n\n  const resetFormState = useCallback(() => {\n    setEmail(email);\n    setPhoneNumber(phoneNumber);\n    setTelegram(telegramId);\n    setEmailErrorMessage('');\n    setTelegramErrorMessage('');\n    setPhoneNumberErrorMessage('');\n  }, [email, phoneNumber, telegramId]);\n\n  useEffect(() => {\n    setCardView(() => {\n      if (demoPreview) {\n        return {\n          state: demoPreview.view,\n          reason:\n            demoPreview.view === 'error' ? 'test example reason' : undefined,\n        };\n      }\n      if (isClientTokenExpired) {\n        return { state: 'expired' };\n      }\n\n      if (!isClientAuthenticated) {\n        return { state: 'signup' };\n      }\n      setLoading(true);\n      syncFtuStage(data.isContactInfoRequired)\n        .catch((e) => {\n          console.log(`Failed to syncFtuStage: ${e}`);\n        })\n        .finally(() => setLoading(false));\n\n      return { state: 'history' };\n    });\n  }, []);\n\n  const rightIcon: NotifiAlertBoxButtonProps | undefined = useMemo(() => {\n    if (onClose === undefined) {\n      return undefined;\n    }\n\n    return {\n      name: 'close',\n      onClick: onClose,\n    };\n  }, [onClose]);\n\n  const useCustomTitles = data?.titles?.active === true;\n\n  const expiredHeader = () => {\n    return useCustomTitles && data?.titles.expiredView !== ''\n      ? data?.titles.expiredView\n      : copy?.expiredHeader ?? 'Welcome Back';\n  };\n\n  const previewHeader = () => {\n    return useCustomTitles && data?.titles.previewView !== ''\n      ? data?.titles.previewView\n      : copy?.manageAlertsHeader ?? 'Manage Alerts';\n  };\n\n  const signUpHeader = () => {\n    return useCustomTitles && data?.titles.signupView !== ''\n      ? data?.titles.signupView\n      : copy?.signUpHeader ?? 'Get Notified';\n  };\n\n  const editHeader = () => {\n    return useCustomTitles && data?.titles.editView !== ''\n      ? data?.titles.editView\n      : copy?.editHeader ?? 'Update Settings';\n  };\n\n  const verifyOnboardingHeader = () => {\n    return useCustomTitles && data?.titles.verifyWalletsView !== ''\n      ? data?.titles.verifyWalletsView\n      : copy?.verifyWalletsHeader ?? 'Verify Wallets';\n  };\n\n  const historyView = () => {\n    if (!useCustomTitles) {\n      return selectedAlertEntry ? 'Alert Details' : 'Alert History';\n    }\n\n    return selectedAlertEntry\n      ? data?.titles.alertDetailsView || 'Alert Details'\n      : data?.titles.historyView || 'Alert History';\n  };\n  switch (cardView.state) {\n    case 'expired':\n      view = (\n        <>\n          <NotifiAlertBox\n            classNames={classNames?.NotifiAlertBox}\n            rightIcon={rightIcon}\n          >\n            <h2>{expiredHeader()}</h2>\n          </NotifiAlertBox>\n          <div\n            className={clsx('DividerLine expired', classNames?.dividerLine)}\n          />\n          <ExpiredTokenView classNames={classNames?.ExpiredTokenView} />\n        </>\n      );\n      break;\n    case 'preview':\n      view = (\n        <>\n          <NotifiAlertBox\n            classNames={classNames?.NotifiAlertBox}\n            leftIcon={{\n              name: 'back',\n              onClick: () => setCardView({ state: 'history' }),\n            }}\n            rightIcon={rightIcon}\n          >\n            <h2>{previewHeader()}</h2>\n          </NotifiAlertBox>\n          <div\n            className={clsx('DividerLine preview', classNames?.dividerLine)}\n          />\n\n          {!isTargetsExist ? (\n            <SignupBanner data={data} classNames={classNames?.signupBanner} />\n          ) : null}\n          <PreviewCard\n            data={data}\n            inputs={inputs}\n            inputDisabled={inputDisabled}\n            classNames={classNames?.PreviewCard}\n          />\n        </>\n      );\n      break;\n    case 'edit':\n    case 'signup':\n      view = (\n        <>\n          <NotifiAlertBox\n            classNames={classNames?.NotifiAlertBox}\n            leftIcon={\n              cardView.state === 'signup'\n                ? undefined\n                : {\n                    name: 'back',\n                    onClick: () => {\n                      resetFormState();\n                      setCardView({ state: 'preview' });\n                    },\n                  }\n            }\n            rightIcon={rightIcon}\n          >\n            {cardView.state === 'signup' ? (\n              <h2>{signUpHeader()}</h2>\n            ) : (\n              <h2>{editHeader()}</h2>\n            )}\n          </NotifiAlertBox>\n          <div\n            className={clsx('DividerLine signup', classNames?.dividerLine)}\n          />\n          <EditCardView\n            buttonText={cardView.state === 'signup' ? 'Next' : 'Update'}\n            data={data}\n            copy={copy?.EditCard}\n            classNames={classNames?.EditCard}\n            inputDisabled={inputDisabled}\n            inputTextFields={inputLabels}\n            inputSeparators={inputSeparators}\n            allowedCountryCodes={allowedCountryCodes}\n            showPreview={cardView.state === 'signup'}\n            inputs={inputs}\n          />\n        </>\n      );\n      break;\n    case 'verifyonboarding':\n    case 'verify':\n      view = (\n        <>\n          <NotifiAlertBox\n            classNames={classNames?.NotifiAlertBox}\n            leftIcon={{\n              name: 'back',\n              onClick: () =>\n                setCardView({\n                  state:\n                    cardView.state === 'verifyonboarding'\n                      ? 'signup'\n                      : 'preview',\n                }),\n            }}\n            rightIcon={rightIcon}\n          >\n            <h2>{verifyOnboardingHeader()}</h2>\n          </NotifiAlertBox>\n          <div\n            className={clsx('DividerLine verify', classNames?.dividerLine)}\n          />\n          <VerifyWalletView\n            classNames={classNames?.VerifyWalletView}\n            data={data}\n            inputs={inputs}\n            buttonText={\n              cardView.state === 'verifyonboarding' ? 'Next' : 'Confirm'\n            }\n          />\n        </>\n      );\n      break;\n    case 'history':\n      view = (\n        <>\n          {ftuStage === FtuStage.Alerts ? (\n            <ConfigAlertModal\n              classNames={classNames?.ConfigAlertModal}\n              updateFtuStage={updateFtuStage}\n              data={data}\n              inputDisabled={inputDisabled}\n              inputs={inputs}\n            />\n          ) : null}\n          {ftuStage === FtuStage.Destination ? (\n            <ConfigDestinationModal\n              classNames={classNames?.ConfigDestinationModal}\n              updateFtuStage={updateFtuStage}\n              contactInfo={data.contactInfo}\n            />\n          ) : null}\n          <NotifiAlertBox\n            classNames={classNames?.NotifiAlertBox}\n            leftIcon={\n              selectedAlertEntry === undefined\n                ? {\n                    name: 'settings',\n                    onClick: () => setCardView({ state: 'preview' }),\n                  }\n                : {\n                    name: 'back',\n                    onClick: () => setAlertEntry(undefined),\n                  }\n            }\n            rightIcon={rightIcon}\n          >\n            <h2>{historyView()}</h2>\n          </NotifiAlertBox>\n          <div\n            className={clsx(\n              'NotifiSubscriptionCardV1__alertContainer',\n              classNames?.alertContainer,\n            )}\n          >\n            <div\n              className={clsx('DividerLine history', classNames?.dividerLine)}\n            />\n\n            {/* TODO: Consolidate banners (when it grows) */}\n            {unverifiedDestinations.length > 0 ? (\n              <VerifyBanner\n                classNames={classNames?.verifyBanner}\n                unVerifiedDestinations={unverifiedDestinations}\n              />\n            ) : null}\n            {!isTargetsExist ? (\n              <SignupBanner data={data} classNames={classNames?.signupBanner} />\n            ) : null}\n\n            {selectedAlertEntry === undefined ? null : (\n              <AlertDetailsCard\n                notificationEntry={selectedAlertEntry}\n                classNames={classNames?.AlertDetailsCard}\n              />\n            )}\n            <AlertHistoryView\n              classNames={classNames?.AlertHistoryView}\n              copy={copy?.AlertHistory}\n              isHidden={selectedAlertEntry !== undefined}\n              setAlertEntry={setAlertEntry}\n              data={data}\n            />\n          </div>\n        </>\n      );\n      break;\n    case 'error':\n      view = <ErrorStateCard reason={cardView.reason as string} />;\n      break;\n    default:\n      view = <div>Not supported view</div>;\n  }\n  return <> {loading ? <LoadingStateCard /> : view}</>;\n};\n","import { FormField } from 'notifi-react-card/dist';\nimport { useMemo } from 'react';\n\nimport { useNotifiSubscriptionContext } from '../context';\nimport { objectKeys } from '../utils';\n\nexport const useDestinationState = () => {\n  const {\n    useDiscord,\n    email,\n    phoneNumber,\n    telegramId,\n    discordTargetData,\n    destinationErrorMessages,\n  } = useNotifiSubscriptionContext();\n\n  const isTargetsExist = useMemo(() => {\n    return (\n      !!email ||\n      !!phoneNumber ||\n      !!telegramId ||\n      (useDiscord && !!discordTargetData?.id)\n    );\n  }, [email, phoneNumber, telegramId, discordTargetData, useDiscord]);\n\n  const unverifiedDestinations = useMemo(() => {\n    const {\n      email: emailError,\n      phoneNumber: phoneNumberError,\n      telegram: telegramError,\n      discord: discordError,\n    } = destinationErrorMessages;\n\n    const unConfirmedTargets = {\n      email: emailError?.type === 'recoverableError',\n      phoneNumber: phoneNumberError?.type == 'recoverableError',\n      telegram: telegramError?.type === 'recoverableError',\n      discord:\n        useDiscord &&\n        discordError?.type === 'recoverableError' &&\n        /**\n         * @TODO Improve type safety\n         * discordError.message === 'Join Server' also counted as verified (discordError.message now either 'Join Server' or 'Enable Bot' as values).\n         */\n        discordError.message === 'Enable Bot',\n    };\n    return objectKeys(unConfirmedTargets)\n      .map((key) => {\n        if (unConfirmedTargets[key]) {\n          return key;\n        }\n      })\n      .filter((item): item is FormField => !!item);\n  }, [destinationErrorMessages]);\n\n  return { isTargetsExist, unverifiedDestinations };\n};\n","import clsx from 'clsx';\nimport DOMPurify from 'dompurify';\nimport { getAlertDetailsContents } from 'notifi-react-card/lib/utils';\nimport React, { useMemo } from 'react';\n\nimport { formatAlertDetailsTimestamp } from '../../utils/AlertHistoryUtils';\nimport { NotificationHistoryEntry } from '../subscription';\n\nexport type AlertDetailsProps = Readonly<{\n  notificationEntry: NotificationHistoryEntry;\n  classNames?: Readonly<{\n    detailsContainer?: string;\n    BackArrowIcon?: string;\n  }>;\n}>;\nexport const AlertDetailsCard: React.FC<AlertDetailsProps> = ({\n  notificationEntry,\n  classNames,\n}) => {\n  const { bottomContent, otherContent, topContent, bottomContentHtml } =\n    useMemo(\n      () => getAlertDetailsContents(notificationEntry),\n      [notificationEntry],\n    );\n\n  const sanitizedBottomContentHtml = useMemo(() => {\n    const sanitizedBottomContentHtml =\n      bottomContentHtml && DOMPurify.sanitize(bottomContentHtml);\n    return sanitizedBottomContentHtml;\n  }, [bottomContentHtml]);\n\n  return (\n    <div\n      className={clsx(\n        'NotifiAlertDetails__container',\n        classNames?.detailsContainer,\n      )}\n    >\n      <div className={clsx('NotifiAlertDetails__topContentContainer')}>\n        <div className={clsx('NotifiAlertDetails__topContent')}>\n          {topContent}\n        </div>\n        <div className={clsx('NotifiAlertDetails__timestamp')}>\n          {formatAlertDetailsTimestamp(notificationEntry.createdDate)}\n        </div>\n      </div>\n      <div className={clsx('NotifiAlertDetails__bottomContent')}>\n        {sanitizedBottomContentHtml ? (\n          // If `messageHtml` exists just use it, otherwise use `message` (which is plain text)\n          <div\n            dangerouslySetInnerHTML={{ __html: sanitizedBottomContentHtml }}\n          />\n        ) : (\n          <div>{bottomContent}</div>\n        )}\n        <div>{otherContent}</div>\n      </div>\n    </div>\n  );\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { FtuStage } from '../context';\nimport AlertActionIcon from './AlertBox/AlertActionIcon';\nimport { AlertsPanel, AlertsPanelProps } from './subscription';\n\nexport type ConfigAlertModalProps = Readonly<{\n  classNames?: {\n    container?: string;\n    overlay?: string;\n    alertsPanel?: AlertsPanelProps['classNames'];\n    headerContainer?: string;\n    backIcon?: string;\n    headerTitle?: string;\n    footerContainer?: string;\n    ctaIcon?: string;\n  };\n  updateFtuStage: (step: FtuStage) => void;\n  data: CardConfigItemV1;\n  inputDisabled: boolean;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const ConfigAlertModal: React.FC<ConfigAlertModalProps> = ({\n  classNames,\n  updateFtuStage,\n  data,\n  inputDisabled,\n  inputs,\n}) => {\n  return (\n    <>\n      <div\n        className={clsx('configAlertModal__overlay', classNames?.overlay)}\n      ></div>\n      <div\n        data-cy=\"configAlertModal\"\n        className={clsx('configAlertModal__container', classNames?.container)}\n      >\n        <div\n          className={clsx(\n            'configAlertModal__headerContainer',\n            classNames?.headerContainer,\n          )}\n        >\n          {data.isContactInfoRequired ? (\n            <div\n              className={clsx(\n                'configAlertModal__backIcon',\n                classNames?.backIcon,\n              )}\n              onClick={() => {\n                updateFtuStage(FtuStage.Destination);\n              }}\n            >\n              <AlertActionIcon\n                name=\"back\"\n                className={clsx(\n                  'configAlertModal__ctaIcon',\n                  classNames?.ctaIcon,\n                )}\n              />\n            </div>\n          ) : null}\n          <div\n            className={clsx(\n              'configAlertModal__headerTitle',\n              classNames?.headerTitle,\n            )}\n          >\n            <div>Select alerts</div>\n          </div>\n        </div>\n        <AlertsPanel\n          classNames={\n            classNames?.alertsPanel ?? {\n              EventTypeContainer: 'configAlertModal__EventTypeContainer',\n              EventTypeBroadcastRow: {\n                container: 'configAlertModal__EventTypeBroadcastRow',\n              },\n              EventTypeCustomHealthCheckRow: {\n                container: 'configAlertModal__EventTypeCustomHealthCheckRow',\n                content:\n                  'configAlertModal__EventTypeCustomHealthCheckRow__Subtitle',\n                buttonContainer:\n                  'configAlertModal__EventTypeCustomHealthCheckRow__ButtonContainer',\n              },\n              EventTypeDirectPushRow: {\n                container: 'configAlertModal__EventTypeDirectPushRow',\n              },\n              EventTypeHealthCheckRow: {\n                container: 'configAlertModal__EventTypeHealthCheckRow',\n                content: 'configAlertModal__EventTypeHealthCheckRow__Subtitle',\n                buttonContainer:\n                  'configAlertModal__EventTypeHealthCheckRow__ButtonContainer',\n              },\n              EventTypePriceChangeRow: {\n                container: 'configAlertModal__EventTypePriceChangeRow',\n              },\n              EventTypeTradingPairsRow: {\n                container: 'configAlertModal__EventTypeTradingPairsRow',\n              },\n              EventTypeFusionMultiThresholdRow: {\n                container: 'configAlertModal__EventTypeFusionMultiThresholdRow',\n              },\n              EventTypeWalletBalanceRow: {\n                container: 'configAlertModal__EventTypeWalletBalanceRow',\n              },\n              EventTypeXMTPRow: {\n                container: 'configAlertModal__EventTypeXMTPRow',\n              },\n              EventTypeFusionToggleRow: {\n                container: 'configAlertModal__EventTypeFusionToggleRow',\n              },\n              EventTypeFusionHealthCheckRow: {\n                container: 'configAlertModal__EventTypeFusionHealthCheckRow',\n                content:\n                  'configAlertModal__EventTypeFusionHealthCheckRow__Subtitle',\n                buttonContainer:\n                  'configAlertModal__EventTypeFusionHealthCheckRow__ButtonContainer',\n              },\n            }\n          }\n          data={data}\n          inputDisabled={inputDisabled}\n          inputs={inputs}\n        />\n        <div\n          className={clsx(\n            'configAlertModal__footerContainer',\n            classNames?.footerContainer,\n          )}\n        >\n          <button\n            data-cy=\"configAlertModalDoneButton\"\n            onClick={() => {\n              updateFtuStage(FtuStage.Done);\n            }}\n          >\n            Done\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nimport { BackArrowIcon } from '../../assets/BackArrowIcon';\nimport { CloseIcon } from '../../assets/CloseIcon';\nimport { SettingIcon } from '../../assets/SettingIcon';\n\nconst icons = {\n  back: BackArrowIcon,\n  close: CloseIcon,\n  settings: SettingIcon,\n} as const;\n\nexport type AlertActionIconProps = Readonly<{\n  name: keyof typeof icons;\n  className?: string;\n}>;\n\nconst AlertActionIcon: React.FC<AlertActionIconProps> = ({\n  name,\n  className,\n}) => {\n  const View = icons[name];\n  return <View className={className} />;\n};\n\nexport default AlertActionIcon;\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const BackArrowIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      {...props}\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const CloseIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      {...props}\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M6.71751 5.28249L5.3033 6.6967L10.6066 12L5.3033 17.3033L6.71751 18.7175L12.0208 13.4142L17.3241 18.7175L18.7383 17.3033L13.435 12L18.7383 6.6967L17.3241 5.28249L12.0208 10.5858L6.71751 5.28249Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const SettingIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M3 17V19H9V17H3ZM3 5V7H13V5H3ZM13 21V19H21V17H13V15H11V21H13ZM7 9V11H3V13H7V15H9V9H7ZM21 13V11H11V13H21ZM15 9H17V7H21V5H17V3H15V9Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, { useCallback, useState } from 'react';\n\nimport { DiscordIcon } from '../assets/DiscordIcon';\nimport { EmailIcon } from '../assets/EmailIcon';\nimport { SmsIcon } from '../assets/SmsIcon';\nimport { TelegramIcon } from '../assets/TelegramIcon';\nimport { FtuStage, useNotifiSubscriptionContext } from '../context';\nimport { DestinationErrorMessage } from './subscription/subscription-card-views/preview-panel/DestinationErrorMessage';\n\nexport type ConfigDestinationModalProps = Readonly<{\n  classNames?: {\n    container?: string;\n    overlay?: string;\n    headerContainer?: string;\n    headerTitle?: string;\n    footerContainer?: string;\n    emailContainer?: string;\n    emailLabel?: string;\n    emailLabelIcon?: string;\n    emailHelpPhrase?: string;\n    emailAddress?: string;\n    emailResendLink?: string;\n    smsContainer?: string;\n    smsLabel?: string;\n    smsLabelIcon?: string;\n    phoneNumber?: string;\n    telegramContainer?: string;\n    telegramLabel?: string;\n    telegramLabelIcon?: string;\n    telegramId?: string;\n    discordContainer?: string;\n    discordLabel?: string;\n    discordLabelIcon?: string;\n    verifiedButton?: string;\n    verifyButtonMessage?: string;\n    verifyButtonContainer?: string;\n  };\n  updateFtuStage: (step: FtuStage) => void;\n  contactInfo: CardConfigItemV1['contactInfo'];\n}>;\n\nexport const ConfigDestinationModal: React.FC<ConfigDestinationModalProps> = ({\n  classNames,\n  updateFtuStage,\n  contactInfo,\n}) => {\n  const {\n    destinationErrorMessages,\n    email,\n    phoneNumber,\n    telegramId,\n    useDiscord,\n  } = useNotifiSubscriptionContext();\n\n  const [isEmailConfirmationSent, setIsEmailConfirmationSent] =\n    useState<boolean>(false);\n\n  const {\n    telegram: telegramErrorMessage,\n    email: emailErrorMessage,\n    phoneNumber: phoneNumberErrorMessage,\n    discord: discordErrrorMessage,\n  } = destinationErrorMessages;\n\n  const handleResendEmailVerificationClick = useCallback(() => {\n    if (emailErrorMessage?.type !== 'recoverableError') return;\n    setIsEmailConfirmationSent(true);\n    emailErrorMessage.onClick();\n    setTimeout(() => {\n      setIsEmailConfirmationSent(false);\n    }, 3000);\n  }, [emailErrorMessage]);\n\n  return (\n    <div data-cy=\"configDestinationModal\">\n      <div\n        className={clsx('configDestinationModal__overlay', classNames?.overlay)}\n      ></div>\n      <div\n        className={clsx(\n          'configDestinationModal__container',\n          classNames?.container,\n        )}\n      >\n        <div\n          className={clsx(\n            'configDestinationModal__headerContainer',\n            classNames?.headerContainer,\n          )}\n        >\n          <div\n            className={clsx(\n              'configDestinationModal__headerTitle',\n              classNames?.headerTitle,\n            )}\n          >\n            <div>Verify your destinations</div>\n          </div>\n        </div>\n        <div\n          className={clsx(\n            'configDestinationModal__destinationsContainer',\n            classNames?.container,\n          )}\n        >\n          {contactInfo.email.active && email ? (\n            <div\n              className={clsx(\n                'configDestinationModal__email',\n                classNames?.emailContainer,\n              )}\n            >\n              <div\n                className={clsx(\n                  'configDestinationModal__emailLabel',\n                  classNames?.emailLabel,\n                )}\n              >\n                <div\n                  className={clsx(\n                    'configDestinationModal__emailLabelIcon',\n                    classNames?.emailLabelIcon,\n                  )}\n                >\n                  <EmailIcon />\n                </div>\n                <div>Email</div>\n              </div>\n              {emailErrorMessage?.type === 'recoverableError' ? (\n                <>\n                  <div\n                    className={clsx(\n                      'configDestinationModal__emailHelpPhrase',\n                      classNames?.emailHelpPhrase,\n                    )}\n                  >\n                    We’ve sent a verification email to:\n                  </div>\n                  <div\n                    className={clsx(\n                      'configDestinationModal__emailAddress',\n                      classNames?.emailAddress,\n                    )}\n                  >\n                    {email}\n                  </div>\n                  <DestinationErrorMessage\n                    classNames={{\n                      errorMessage: clsx(\n                        'configDestinationModal__emailResendLink',\n                        classNames?.emailResendLink,\n                      ),\n                    }}\n                    onClick={() => {\n                      handleResendEmailVerificationClick();\n                    }}\n                    errorMessage={\n                      isEmailConfirmationSent\n                        ? 'Sent'\n                        : emailErrorMessage.message\n                    }\n                    tooltipContent={emailErrorMessage?.tooltip}\n                  />\n                </>\n              ) : (\n                <VerifiedButton className={classNames?.verifiedButton} />\n              )}\n            </div>\n          ) : null}\n          {contactInfo.sms.active && phoneNumber ? (\n            <div\n              className={clsx(\n                'configDestinationModal__sms',\n                classNames?.smsContainer,\n              )}\n            >\n              <div\n                className={clsx(\n                  'configDestination__smsLabel',\n                  classNames?.smsLabel,\n                )}\n              >\n                <div\n                  className={clsx(\n                    'configDestination__smsLabelIcon',\n                    classNames?.smsLabelIcon,\n                  )}\n                >\n                  <SmsIcon />\n                </div>\n                <div\n                  className={clsx(\n                    'configDestinationModal__phoneNumber',\n                    classNames?.phoneNumber,\n                  )}\n                >\n                  Phone Number\n                </div>\n              </div>\n              <div>{phoneNumber}</div>\n              {phoneNumberErrorMessage?.type !== undefined ? (\n                <DestinationErrorMessage\n                  errorMessage={phoneNumberErrorMessage?.message}\n                  tooltipContent={phoneNumberErrorMessage?.tooltip}\n                />\n              ) : (\n                <VerifiedButton className={classNames?.verifiedButton} />\n              )}\n            </div>\n          ) : null}\n          {contactInfo.telegram.active && telegramId ? (\n            <div\n              className={clsx(\n                'configDestinationModal__telegram',\n                classNames?.telegramContainer,\n              )}\n            >\n              <div\n                className={clsx(\n                  'configDestinationModal__telegramLabel',\n                  classNames?.telegramLabel,\n                )}\n              >\n                <div\n                  className={clsx(\n                    'configDestinationModal__telegramLabelIcon',\n                    classNames?.telegramLabelIcon,\n                  )}\n                >\n                  <TelegramIcon />\n                </div>\n\n                <div>Telegram</div>\n              </div>\n\n              {telegramErrorMessage?.type === 'recoverableError' ? (\n                <>\n                  <div\n                    className={clsx(\n                      'configDestinationModal__telegramId',\n                      classNames?.telegramId,\n                    )}\n                  >\n                    {telegramId}\n                  </div>\n                  <div\n                    data-cy=\"configDestinationModalConfirmTelegramButton\"\n                    onClick={() => {\n                      telegramErrorMessage?.onClick();\n                    }}\n                  >\n                    <DestinationErrorMessage\n                      classNames={{\n                        errorMessage: clsx(\n                          'configDestinationModal__verifyButtonMessage',\n                          classNames?.verifyButtonMessage,\n                        ),\n                        errorMessageContainer: clsx(\n                          'configDestinationModal__verifyButtonContainer',\n                          classNames?.verifyButtonContainer,\n                        ),\n                      }}\n                      errorMessage={telegramErrorMessage?.message ?? ''}\n                      tooltipContent={\n                        destinationErrorMessages?.telegram?.tooltip\n                      }\n                    />\n                  </div>\n                </>\n              ) : (\n                <VerifiedButton className={classNames?.verifiedButton} />\n              )}\n            </div>\n          ) : null}\n          {contactInfo?.discord?.active && useDiscord ? (\n            <div\n              className={clsx(\n                'configDestinationModal__discord',\n                classNames?.discordContainer,\n              )}\n            >\n              <label\n                className={clsx(\n                  'configDestinationModal__discordLabel',\n                  classNames?.discordLabel,\n                )}\n              >\n                <div\n                  className={clsx(\n                    'configDestinationModal__discordLabelIcon',\n                    classNames?.discordLabelIcon,\n                  )}\n                >\n                  <DiscordIcon />\n                </div>\n\n                <div>Discord</div>\n              </label>\n              {discordErrrorMessage?.type === 'recoverableError' ? (\n                <>\n                  <DestinationErrorMessage\n                    classNames={{\n                      errorMessage: clsx(\n                        'configDestinationModal__verifyButtonMessage',\n                        classNames?.verifyButtonMessage,\n                      ),\n                      errorMessageContainer: clsx(\n                        'configDestinationModal__verifyButtonContainer',\n                        classNames?.verifyButtonContainer,\n                      ),\n                    }}\n                    onClick={() => {\n                      discordErrrorMessage?.onClick();\n                    }}\n                    errorMessage={discordErrrorMessage?.message ?? ''}\n                    tooltipContent={destinationErrorMessages?.discord?.tooltip}\n                  />\n                </>\n              ) : (\n                <VerifiedButton className={classNames?.verifiedButton} />\n              )}\n            </div>\n          ) : null}\n        </div>\n        <div\n          data-cy=\"configDestinationModalNextButton\"\n          className={clsx(\n            'configDestinationModal__footerContainer',\n            classNames?.footerContainer,\n          )}\n        >\n          <button\n            onClick={() => {\n              updateFtuStage(FtuStage.Alerts);\n            }}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ntype VerifiedButtonProps = Readonly<{\n  className?: string;\n}>;\nconst VerifiedButton: React.FC<VerifiedButtonProps> = ({ className }) => {\n  return (\n    <div\n      data-cy=\"configDestinationModalVerifyLabel\"\n      className={clsx('configDestinationModal__verifiedButton', className)}\n    >\n      <div>Verified</div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport type Props = Readonly<{\n  className?: string;\n}>;\n\nexport const DiscordIcon: React.FC<Props> = ({ className }: Props) => {\n  return (\n    <svg\n      width=\"17\"\n      height=\"13\"\n      viewBox=\"0 0 17 13\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        d=\"M14.0728 1.05036C13.0133 0.564196 11.8771 0.206009 10.6891 0.000860571C10.6675 -0.00309873 10.6459 0.00679578 10.6347 0.0265853C10.4886 0.286483 10.3267 0.62554 10.2134 0.892038C8.93563 0.700746 7.66444 0.700746 6.4129 0.892038C6.29953 0.619617 6.13179 0.286483 5.98501 0.0265853C5.97386 0.00745605 5.95225 -0.00243846 5.93062 0.000860571C4.74329 0.205353 3.60709 0.56354 2.54688 1.05036C2.5377 1.05432 2.52983 1.06092 2.52461 1.06949C0.369461 4.28924 -0.220925 7.42985 0.0686984 10.5315C0.0700089 10.5467 0.0785271 10.5612 0.0903219 10.5704C1.51223 11.6146 2.88959 12.2486 4.24137 12.6688C4.263 12.6754 4.28593 12.6675 4.29969 12.6496C4.61946 12.213 4.9045 11.7525 5.14889 11.2683C5.16332 11.24 5.14955 11.2063 5.12007 11.1951C4.66795 11.0236 4.23744 10.8145 3.82331 10.577C3.79056 10.5579 3.78793 10.5111 3.81807 10.4886C3.90522 10.4233 3.99239 10.3554 4.0756 10.2868C4.09065 10.2742 4.11163 10.2716 4.12933 10.2795C6.84994 11.5217 9.79533 11.5217 12.4838 10.2795C12.5015 10.2709 12.5225 10.2736 12.5382 10.2861C12.6215 10.3547 12.7086 10.4233 12.7964 10.4886C12.8265 10.5111 12.8246 10.5579 12.7918 10.577C12.3777 10.8191 11.9472 11.0236 11.4944 11.1945C11.4649 11.2057 11.4518 11.24 11.4662 11.2683C11.7159 11.7519 12.0009 12.2123 12.3148 12.649C12.3279 12.6675 12.3515 12.6754 12.3731 12.6688C13.7314 12.2486 15.1088 11.6146 16.5307 10.5704C16.5432 10.5612 16.551 10.5473 16.5523 10.5322C16.899 6.9463 15.9718 3.83145 14.0945 1.07015C14.0899 1.06092 14.082 1.05432 14.0728 1.05036ZM5.55517 8.64293C4.73608 8.64293 4.06118 7.89094 4.06118 6.96742C4.06118 6.04391 4.72299 5.29192 5.55517 5.29192C6.39389 5.29192 7.06226 6.05051 7.04915 6.96742C7.04915 7.89094 6.38733 8.64293 5.55517 8.64293ZM11.079 8.64293C10.2599 8.64293 9.585 7.89094 9.585 6.96742C9.585 6.04391 10.2468 5.29192 11.079 5.29192C11.9177 5.29192 12.5861 6.05051 12.573 6.96742C12.573 7.89094 11.9177 8.64293 11.079 8.64293Z\"\n        fill=\"#B6B8D5\"\n      />\n    </svg>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { NotifiTooltip } from '../../NotifiTooltip';\n\ntype Props = {\n  classNames?: {\n    errorMessageContainer?: string;\n    tooltipContent?: string;\n    errorMessage?: string;\n  };\n  errorMessage: string;\n  tooltipContent?: string;\n  onClick?: () => void;\n};\n\nexport const DestinationErrorMessage: React.FC<Props> = ({\n  classNames,\n  tooltipContent,\n  errorMessage,\n  onClick,\n}) => {\n  return (\n    <div\n      className={clsx(\n        'DestinationErrorMessage__ErrorMessageContainer',\n        classNames?.errorMessageContainer,\n      )}\n    >\n      {onClick !== undefined ? (\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          onClick={() => onClick()}\n          className={clsx('DestinationErrorMessage__emailConfirmationLink')}\n        >\n          <label\n            className={clsx(\n              'DestinationErrorMessage__confirmationLinkLabel',\n              classNames?.errorMessage,\n            )}\n          >\n            {errorMessage}\n          </label>\n        </a>\n      ) : (\n        <label\n          className={clsx(\n            'DestinationErrorMessage__ErrorMessageLabel',\n            classNames?.errorMessage,\n            {\n              DestinationErrorMessage__errorMessage: errorMessage !== '',\n            },\n          )}\n        >\n          {errorMessage}\n        </label>\n      )}\n      {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n        <NotifiTooltip\n          classNames={{\n            icon: clsx(\n              'DestinationErrorMessage__tooltipIcon',\n              classNames?.tooltipContent,\n            ),\n          }}\n          content={tooltipContent}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport type { DeepPartialReadonly } from '../utils';\nimport AlertActionIcon, {\n  AlertActionIconProps,\n} from './AlertBox/AlertActionIcon';\n\nexport type NotifiAlertBoxButtonProps = Readonly<{\n  name: AlertActionIconProps['name'];\n  onClick: () => void;\n}>;\n\nexport type NotifiAlertBoxProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    btnLeft: string;\n    content: string;\n    btnRight: string;\n    iconSvg: string;\n    spacer: string;\n  }>;\n  leftIcon?: NotifiAlertBoxButtonProps;\n  rightIcon?: NotifiAlertBoxButtonProps;\n}>;\n\nconst NotifiAlertBox: React.FC<\n  React.PropsWithChildren<NotifiAlertBoxProps>\n> = ({ classNames, children, leftIcon, rightIcon }) => {\n  return (\n    <div className={clsx('NotifiAlertBox__container', classNames?.container)}>\n      {leftIcon !== undefined ? (\n        <div\n          className={clsx('NotifiAlertBox__btn--left', classNames?.btnLeft)}\n          onClick={leftIcon.onClick}\n        >\n          <AlertActionIcon\n            name={leftIcon.name}\n            className={clsx('NotifiAlertBox__iconSvg', classNames?.iconSvg)}\n          />\n        </div>\n      ) : (\n        <div\n          className={clsx('NotifiAlertBox__btn--spacer', classNames?.spacer)}\n        />\n      )}\n      <div className={clsx('NotifiAlertBox__content', classNames?.content)}>\n        {children}\n      </div>\n      {rightIcon !== undefined ? (\n        <div\n          className={clsx('NotifiAlertBox__btn--right', classNames?.btnRight)}\n          onClick={rightIcon.onClick}\n        >\n          <AlertActionIcon\n            name={rightIcon.name}\n            className={clsx('NotifiAlertBox__iconSvg', classNames?.iconSvg)}\n          />\n        </div>\n      ) : (\n        <div\n          className={clsx('NotifiAlertBox__btn--spacer', classNames?.spacer)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default NotifiAlertBox;\n","import {\n  CardConfigItemV1,\n  ContactInfoConfig,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, { useMemo } from 'react';\n\nimport { CircleBellIcon } from '../assets/CircleBellIcon';\nimport { useNotifiSubscriptionContext } from '../context';\nimport { DeepPartialReadonly } from '../utils';\n\nexport type SignupBannerProps = Readonly<{\n  data: CardConfigItemV1;\n  classNames?: DeepPartialReadonly<{\n    banner: string;\n    bannerImage: string;\n    bannerLabel: string;\n    bannerContent: string;\n    bannerTitle: string;\n    bannerSubject: string;\n    bannerButton: string;\n  }>;\n}>;\n\nexport const SignupBanner: React.FC<SignupBannerProps> = ({\n  classNames,\n  data,\n}) => {\n  const { cardView, setCardView } = useNotifiSubscriptionContext();\n\n  const targets = useMemo(() => {\n    const supportedTargets = Object.keys(data.contactInfo)\n      .filter((target) => {\n        return data.contactInfo[target as keyof ContactInfoConfig].active;\n      })\n      .map((target) => target.charAt(0).toLocaleUpperCase() + target.slice(1));\n    return supportedTargets.length > 1\n      ? supportedTargets.join(', ')\n      : supportedTargets[0];\n  }, []);\n  const onClick = () => {\n    setCardView({\n      state: 'edit',\n    });\n  };\n  return (\n    <>\n      <div\n        className={clsx(\n          classNames?.banner ? classNames.banner : 'SignupBanner',\n          cardView.state === 'preview' && 'SignupBanner__Column',\n        )}\n      >\n        <div className={clsx('SignupBanner__Label', classNames?.bannerLabel)}>\n          <div\n            className={clsx(\n              classNames?.bannerImage\n                ? classNames?.bannerImage\n                : 'SignupBanner__Image',\n            )}\n          >\n            <CircleBellIcon />\n          </div>\n          <div\n            className={clsx(\n              classNames?.bannerContent\n                ? classNames.bannerContent\n                : 'SignupBanner__Content',\n            )}\n          >\n            <div\n              className={clsx(\n                classNames?.bannerTitle\n                  ? classNames.bannerTitle\n                  : 'SignupBanner__Title',\n              )}\n            >\n              Get alerts via\n            </div>\n            <div\n              className={clsx(\n                classNames?.bannerSubject\n                  ? classNames.bannerSubject\n                  : 'SignupBanner__Subject',\n              )}\n            >\n              {targets}\n            </div>\n          </div>\n        </div>\n        <button\n          data-cy=\"signupBannerButton\"\n          className={clsx(\n            classNames?.bannerButton\n              ? classNames.bannerButton\n              : 'SignupBanner__Button',\n          )}\n          onClick={onClick}\n        >\n          Sign Up\n        </button>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const CircleBellIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      width=\"21\"\n      height=\"21\"\n      viewBox=\"0 0 21 21\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <circle\n        cx=\"10.5\"\n        cy=\"10.5\"\n        r=\"9.5\"\n        fill=\"white\"\n        stroke=\"url(#paint0_linear_1316_3580)\"\n        strokeWidth=\"2\"\n      />\n      <path\n        d=\"M10.4901 16.1875C11.1212 16.1875 11.6376 15.6712 11.6376 15.0401H9.3427C9.3427 15.6712 9.85331 16.1875 10.4901 16.1875ZM13.9324 12.7452V9.8766C13.9324 8.11529 12.9915 6.64083 11.3507 6.25071V5.86058C11.3507 5.38439 10.9663 5 10.4901 5C10.0139 5 9.62956 5.38439 9.62956 5.86058V6.25071C7.98299 6.64083 7.04783 8.10955 7.04783 9.8766V12.7452L5.90039 13.8926V14.4663H15.0799V13.8926L13.9324 12.7452Z\"\n        fill=\"#262949\"\n      />\n      <defs>\n        <linearGradient\n          id=\"paint0_linear_1316_3580\"\n          x1=\"15.6331\"\n          y1=\"3.32468\"\n          x2=\"7.46429\"\n          y2=\"19\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"#FE7970\" />\n          <stop offset=\"1\" stopColor=\"#FEB776\" />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\n","import clsx from 'clsx';\nimport React, { useMemo } from 'react';\n\nimport { CheckIcon } from '../assets/CheckIcon';\nimport { FormField, useNotifiSubscriptionContext } from '../context';\nimport { DeepPartialReadonly } from '../utils';\n\nexport type VerifyBannerProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    bannerContainer?: string;\n    bannerImage?: string;\n    bannerImageContainer?: string;\n    bannerLabel?: string;\n    bannerContent?: string;\n    bannerTitle?: string;\n    bannerSubject?: string;\n    bannerButton?: string;\n  }>;\n  unVerifiedDestinations: ReadonlyArray<FormField>;\n}>;\n\nexport const VerifyBanner: React.FC<VerifyBannerProps> = ({\n  classNames,\n  unVerifiedDestinations,\n}) => {\n  const { setCardView } = useNotifiSubscriptionContext();\n\n  const unVerifiedDestinationsString = useMemo(() => {\n    const convertedUnVerifiedDestinations = unVerifiedDestinations.map(\n      (target) => {\n        switch (target) {\n          case 'telegram':\n            return 'Telegram ID';\n          case 'discord':\n            return 'Discord';\n          case 'phoneNumber':\n            return 'Phone Number';\n          default:\n            return target;\n        }\n      },\n    );\n    return convertedUnVerifiedDestinations.length > 1\n      ? convertedUnVerifiedDestinations.join(' and ')\n      : convertedUnVerifiedDestinations[0];\n  }, [unVerifiedDestinations]);\n\n  const onClick = () => {\n    setCardView({\n      state: 'preview',\n    });\n  };\n  return (\n    <div\n      className={clsx('verifyBanner__container', classNames?.bannerContainer)}\n    >\n      <div className={clsx('verifyBanner__label', classNames?.bannerLabel)}>\n        <div\n          className={clsx(\n            classNames?.bannerImage\n              ? classNames?.bannerImageContainer\n              : 'verifyBanner__imageContainer',\n          )}\n        >\n          <CheckIcon className=\"verifyBanner__image\" />\n        </div>\n        <div\n          className={clsx('verifyBanner__subject', classNames?.bannerSubject)}\n        >\n          Verify your {unVerifiedDestinationsString}\n        </div>\n      </div>\n      <button\n        data-cy=\"verifyBannerButton\"\n        className={clsx(\n          classNames?.bannerButton\n            ? classNames.bannerButton\n            : 'verifyBanner__button',\n        )}\n        onClick={onClick}\n      >\n        Verify\n      </button>\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { getErrorMessageKey } from 'notifi-react-card/lib/utils/errorUtils';\nimport React from 'react';\n\nimport { DeepPartialReadonly } from '../../utils';\nimport NotifiAlertBox, { NotifiAlertBoxProps } from '../NotifiAlertBox';\n\nexport type ErrorStateCardProps = Readonly<{\n  copy?: DeepPartialReadonly<{\n    header: string;\n  }>;\n  reason: unknown;\n  classNames?: Readonly<{\n    NotifiAlertBox?: NotifiAlertBoxProps['classNames'];\n    label?: string;\n    errorMessage?: string;\n  }>;\n  onClose?: () => void;\n}>;\n\nexport const ErrorStateCard: React.FC<ErrorStateCardProps> = ({\n  copy,\n  classNames,\n  onClose,\n  reason,\n}) => {\n  const message = getErrorMessageKey(reason);\n\n  return (\n    <>\n      <NotifiAlertBox\n        classNames={classNames?.NotifiAlertBox}\n        rightIcon={\n          onClose === undefined\n            ? undefined\n            : {\n                name: 'close',\n                onClick: onClose,\n              }\n        }\n      >\n        <h2>{copy?.header ?? 'Something went wrong'}</h2>\n      </NotifiAlertBox>\n      <div\n        className={clsx(\n          'ErrorStateCard__errorMessage',\n          classNames?.errorMessage,\n        )}\n      >\n        {message ?? 'Something went wrong'}\n      </div>\n    </>\n  );\n};\n","export function getErrorMessageKey(err: unknown): string {\n  let errMsg: string;\n  if (err instanceof Error) {\n    errMsg = err.message;\n  } else if (typeof err === 'string') {\n    errMsg = err;\n  } else {\n    errMsg = 'unknown error';\n  }\n  return errMsg;\n}\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { DeepPartialReadonly } from '../../utils';\nimport NotifiAlertBox, { NotifiAlertBoxProps } from '../NotifiAlertBox';\nimport Spinner from './Spinner';\n\nexport type LoadingStateCardProps = Readonly<{\n  spinnerSize?: string;\n  ringColor?: string;\n  copy?: DeepPartialReadonly<{\n    header: string;\n    content: string;\n  }>;\n  classNames?: Readonly<{\n    container?: string;\n    label?: string;\n    NotifiAlertBox?: NotifiAlertBoxProps['classNames'];\n  }>;\n  onClose?: () => void;\n}>;\n\nexport const LoadingStateCard: React.FC<LoadingStateCardProps> = ({\n  copy,\n  classNames,\n  spinnerSize,\n  ringColor,\n  onClose,\n}) => {\n  return (\n    <>\n      <NotifiAlertBox\n        classNames={classNames?.NotifiAlertBox}\n        rightIcon={\n          onClose === undefined\n            ? undefined\n            : {\n                name: 'close',\n                onClick: onClose,\n              }\n        }\n      >\n        <h2>{copy?.header ?? 'Loading'}</h2>\n      </NotifiAlertBox>\n      <div\n        className={clsx(\n          'NotifiLoadingStateCard__container',\n          classNames?.container,\n        )}\n      >\n        <label\n          className={clsx('NotifiLoadingStateCard__label', classNames?.label)}\n        >\n          {copy?.content ?? 'Loading…'}\n        </label>\n        <Spinner size={spinnerSize} ringColor={ringColor} />\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\ninterface SpinnerProps {\n  size?: string;\n  ringColor?: string;\n}\n\nconst Spinner: React.FC<SpinnerProps> = ({ size, ringColor }) => {\n  return (\n    <div\n      className=\"NotifiSpinner\"\n      style={{ height: size, width: size, borderTopColor: ringColor }}\n    />\n  );\n};\n\nexport default Spinner;\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport { DeepPartialReadonly } from 'notifi-react-card/lib/utils';\nimport React from 'react';\n\nimport { useNotifiSubscriptionContext } from '../../../context/NotifiSubscriptionContext';\nimport Spinner from '../../common/Spinner';\nimport {\n  NotifiSubscribeButton,\n  NotifiSubscribeButtonProps,\n} from '../NotifiSubscribeButton';\nimport {\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n} from '../NotifiSubscriptionCard';\nimport { AlertListPreview, AlertListPreviewProps } from './AlertListPreview';\nimport { InputFields, InputFieldsProps } from './InputFields';\n\nexport type EditCardViewProps = Readonly<{\n  buttonText: string;\n  data: CardConfigItemV1;\n  inputDisabled: boolean;\n  showPreview?: boolean;\n  copy?: Readonly<{\n    AlertListPreview?: AlertListPreviewProps['copy'];\n  }>;\n  classNames?: Readonly<{\n    AlertListPreview?: AlertListPreviewProps['classNames'];\n    NotifiInputContainer?: string;\n    InputFields?: DeepPartialReadonly<InputFieldsProps['classNames']>;\n    NotifiSubscribeButton?: NotifiSubscribeButtonProps['classNames'];\n    NotifiInputHeading?: string;\n  }>;\n  inputSeparators?: NotifiInputSeparators;\n  inputTextFields?: NotifiInputFieldsText;\n  allowedCountryCodes: string[];\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EditCardView: React.FC<EditCardViewProps> = ({\n  allowedCountryCodes,\n  buttonText,\n  copy,\n  classNames,\n  showPreview,\n  data,\n  inputDisabled,\n  inputSeparators,\n  inputTextFields,\n  inputs,\n}) => {\n  const { loading } = useNotifiSubscriptionContext();\n\n  return (\n    <div\n      className={clsx('NotifiInputContainer', classNames?.NotifiInputContainer)}\n    >\n      {showPreview ? (\n        <AlertListPreview\n          copy={copy?.AlertListPreview}\n          classNames={classNames?.AlertListPreview}\n          eventTypes={data.eventTypes}\n        />\n      ) : null}\n      {loading ? (\n        <div className=\"NotifiInputContainer__LoadingSpinner\">\n          <Spinner size=\"70px\" />\n        </div>\n      ) : (\n        <InputFields\n          hideContactInputs={showPreview && !data.isContactInfoRequired}\n          data={data}\n          allowedCountryCodes={allowedCountryCodes}\n          inputDisabled={inputDisabled}\n          inputSeparators={inputSeparators}\n          inputTextFields={inputTextFields}\n        />\n      )}\n      <NotifiSubscribeButton\n        buttonText={buttonText}\n        data={data}\n        classNames={classNames?.NotifiSubscribeButton}\n        inputs={inputs}\n      />\n    </div>\n  );\n};\n","import {\n  CardConfigItemV1,\n  EventTypeConfig,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport { isValidPhoneNumber } from 'libphonenumber-js';\nimport React, { useCallback, useMemo } from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiForm,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { useNotifiSubscribe } from '../../hooks';\nimport { useFrontendClientLogin } from '../../hooks/useFrontendClientLogin';\nimport {\n  createConfigurations,\n  subscribeAlertsByFrontendClient,\n} from '../../utils';\nimport { formatTelegramForSubscription } from '../../utils/stringUtils';\n\nexport type NotifiSubscribeButtonProps = Readonly<{\n  classNames?: Readonly<{\n    button?: string;\n    label?: string;\n  }>;\n  buttonText: string;\n  data: CardConfigItemV1;\n  inputs: Record<string, unknown>;\n}>;\n\ntype TargetGroupData = {\n  name: string;\n  emailAddress?: string;\n  phoneNumber?: string;\n  telegramId?: string;\n  discordId?: string;\n};\n\nexport const NotifiSubscribeButton: React.FC<NotifiSubscribeButtonProps> = ({\n  buttonText,\n  classNames,\n  data,\n  inputs,\n}) => {\n  const eventTypes = data.eventTypes;\n  const { isInitialized, subscribe, updateTargetGroups } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n  const frontendClientLogin = useFrontendClientLogin();\n\n  const {\n    client,\n    params: { multiWallet },\n    isUsingFrontendClient,\n    frontendClient,\n  } = useNotifiClientContext();\n\n  const {\n    cardView,\n    connectedWallets,\n    loading,\n    setCardView,\n    useDiscord,\n    render,\n    setLoading,\n    syncFtuStage,\n  } = useNotifiSubscriptionContext();\n\n  const { formErrorMessages, formState } = useNotifiForm();\n\n  const { phoneNumber, telegram: telegramId, email } = formState;\n\n  const { email: emailErrorMessage, phoneNumber: smsErrorMessage } =\n    formErrorMessages;\n\n  const isMultiWallet = (multiWallet?.ownedWallets?.length ?? 0) > 0;\n\n  const targetGroup: TargetGroupData = useMemo(\n    () => ({\n      name: 'Default',\n      emailAddress: email === '' ? undefined : email,\n      phoneNumber: isValidPhoneNumber(phoneNumber) ? phoneNumber : undefined,\n      telegramId:\n        telegramId === ''\n          ? undefined\n          : formatTelegramForSubscription(telegramId),\n      discordId: useDiscord ? 'Default' : undefined,\n    }),\n    [email, phoneNumber, telegramId, useDiscord],\n  );\n\n  const renewTargetGroups = useCallback(\n    async (targetGroup: TargetGroupData) => {\n      if (isUsingFrontendClient) {\n        return frontendClient.ensureTargetGroup(targetGroup);\n      }\n      return updateTargetGroups();\n    },\n    [updateTargetGroups, frontendClient, isUsingFrontendClient],\n  );\n\n  const subscribeAlerts = useCallback(\n    async (eventTypes: EventTypeConfig, inputs: Record<string, unknown>) => {\n      if (isUsingFrontendClient) {\n        await renewTargetGroups(targetGroup);\n\n        return subscribeAlertsByFrontendClient(\n          frontendClient,\n          eventTypes,\n          inputs,\n        );\n      }\n      return subscribe(\n        createConfigurations(eventTypes, inputs, connectedWallets),\n      );\n    },\n    [\n      targetGroup,\n      isUsingFrontendClient,\n      frontendClient,\n      connectedWallets,\n      renewTargetGroups,\n      subscribeAlertsByFrontendClient,\n      subscribe,\n      createConfigurations,\n    ],\n  );\n\n  const onClick = useCallback(async () => {\n    let isFirstTimeUser = (client.data?.targetGroups?.length ?? 0) === 0;\n    if (\n      isUsingFrontendClient &&\n      frontendClient.userState?.status !== 'authenticated'\n    ) {\n      await frontendClientLogin();\n      const data = await frontendClient.fetchData();\n      isFirstTimeUser = (data.targetGroup?.length ?? 0) === 0;\n    }\n\n    setLoading(true);\n    try {\n      let success = false;\n      if (isFirstTimeUser && !isMultiWallet) {\n        const subEvents = eventTypes.filter((event) => {\n          return event.optOutAtSignup ? false : true;\n        });\n        const result = await subscribeAlerts(subEvents, inputs);\n        success = !!result;\n      } else {\n        const result = await renewTargetGroups(targetGroup);\n        success = !!result;\n      }\n\n      if (isUsingFrontendClient && success) {\n        const newData = await frontendClient.fetchData();\n        render(newData);\n      }\n\n      if (success === true) {\n        await syncFtuStage(data.isContactInfoRequired);\n        const nextState = !isMultiWallet\n          ? 'history'\n          : cardView.state === 'signup'\n          ? 'verifyonboarding'\n          : 'verify';\n        setCardView({\n          state: nextState,\n        });\n      }\n    } catch (e) {\n      setCardView({ state: 'error', reason: e });\n    }\n    setLoading(false);\n  }, [\n    isMultiWallet,\n    frontendClient,\n    isUsingFrontendClient,\n    client,\n    eventTypes,\n    frontendClientLogin,\n    subscribe,\n    updateTargetGroups,\n    setCardView,\n  ]);\n\n  const hasErrors = emailErrorMessage !== '' || smsErrorMessage !== '';\n  const isInputFieldsValid = useMemo(() => {\n    return data.isContactInfoRequired\n      ? email || phoneNumber || telegramId || useDiscord\n      : true;\n  }, [email, phoneNumber, telegramId, useDiscord, data.isContactInfoRequired]);\n\n  return (\n    <button\n      data-cy=\"notifiSubscribeButton\"\n      className={clsx('NotifiSubscribeButton__button', classNames?.button)}\n      disabled={!isInitialized || loading || hasErrors || !isInputFieldsValid}\n      onClick={onClick}\n    >\n      <span className={clsx('NotifiSubscribeButton__label', classNames?.label)}>\n        {loading ? 'Loading' : buttonText}\n      </span>\n    </button>\n  );\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport { DeepPartialReadonly } from 'notifi-react-card/lib/utils';\nimport React from 'react';\n\nimport { CheckIcon } from '../../../assets/CheckIcon';\n\nexport type AlertListPreviewProps = Readonly<{\n  alertList?: DeepPartialReadonly<{\n    container: string;\n    listItem: string;\n  }>;\n  eventTypes: CardConfigItemV1['eventTypes'];\n  copy?: DeepPartialReadonly<{\n    description: string;\n  }>;\n  classNames?: DeepPartialReadonly<{\n    checkmarkIcon: string;\n    container: string;\n    description: string;\n    eventListItem: string;\n  }>;\n}>;\n\nexport const AlertListPreview: React.FC<AlertListPreviewProps> = ({\n  eventTypes,\n  copy,\n  classNames,\n}: AlertListPreviewProps) => {\n  const alertNames = eventTypes.map((eventType) => {\n    // skip showing alert previews for labels\n    if (eventType.type === 'label') {\n      return;\n    }\n    return (\n      <div className=\"NotifiAlertList__listItem\" key={eventType.name}>\n        <CheckIcon\n          className={clsx(\n            'NotifiAlertListContainer__checkmarkIcon',\n            classNames?.checkmarkIcon,\n          )}\n        />\n        <label\n          className={clsx(\n            'NotifiAlertListContainer__listItemContent',\n            classNames?.eventListItem,\n          )}\n          key={eventType.name}\n        >\n          {eventType.type === 'fusion' ? (eventType.displayNameOverride ?? eventType.name) : eventType.name}\n        </label>\n      </div>\n    );\n  });\n\n  return (\n    <div\n      className={clsx(\n        'NotifiAlertListContainer__container',\n        classNames?.container,\n      )}\n    >\n      <label\n        className={clsx(\n          'NotifiAlertListPreview__descriptionText',\n          classNames?.description,\n        )}\n      >\n        {copy?.description ?? 'Subscribe to any of these alerts'}\n      </label>\n      <div className={clsx('NotifiAlertLisPreview__checkmarkContainer')}>\n        {alertNames}\n      </div>\n    </div>\n  );\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { NotifiInputFieldsText, NotifiInputSeparators } from '..';\nimport { useNotifiClientContext } from '../../../context';\nimport {\n  NotifiDiscordToggle,\n  NotifiDiscordToggleProps,\n} from '../../NotifiDiscordToggle';\nimport {\n  NotifiEmailInput,\n  NotifiEmailInputProps,\n} from '../../NotifiEmailInput';\nimport {\n  NotifiHwWalletToggle,\n  NotifiHwWalletToggleProps,\n} from '../../NotifiHwWalletToggle';\nimport { NotifiSmsInput, NotifiSmsInputProps } from '../../NotifiSmsInput';\nimport {\n  NotifiTelegramInput,\n  NotifiTelegramInputProps,\n} from '../../NotifiTelegramInput';\n\nexport type InputFieldsProps = {\n  data: CardConfigItemV1;\n  inputSeparators?: NotifiInputSeparators;\n  inputTextFields?: NotifiInputFieldsText;\n  allowedCountryCodes: string[];\n  inputDisabled: boolean;\n  hideContactInputs?: boolean;\n  classNames?: Readonly<{\n    NotifiEmailInput?: NotifiEmailInputProps['classNames'];\n    NotifiSmsInput?: NotifiSmsInputProps['classNames'];\n    NotifiTelegramInput?: NotifiTelegramInputProps['classNames'];\n    NotifiHwWalletToggle?: NotifiHwWalletToggleProps['classNames'];\n    NotifiDiscordToggle?: NotifiDiscordToggleProps['classNames'];\n  }>;\n};\nexport const InputFields: React.FC<InputFieldsProps> = ({\n  data,\n  classNames,\n  inputSeparators,\n  inputTextFields,\n  allowedCountryCodes,\n  inputDisabled,\n  hideContactInputs,\n}) => {\n  const { params } = useNotifiClientContext();\n\n  return (\n    <>\n      {!hideContactInputs ? (\n        <>\n          {data.contactInfo.email.active ? (\n            <NotifiEmailInput\n              disabled={inputDisabled}\n              classNames={classNames?.NotifiEmailInput}\n              copy={{\n                label: inputTextFields?.label?.email,\n                placeholder: inputTextFields?.placeholderText?.email,\n              }}\n            />\n          ) : null}\n          {inputSeparators?.emailSeparator?.content ? (\n            <div\n              className={clsx(\n                'NotifiInputSeparator__container',\n                inputSeparators?.emailSeparator?.classNames?.container,\n              )}\n            >\n              <div\n                className={clsx(\n                  'NotifiInputSeparator__content',\n                  inputSeparators.emailSeparator.classNames?.content,\n                )}\n              >\n                {inputSeparators?.emailSeparator?.content}\n              </div>\n            </div>\n          ) : null}\n          {data.contactInfo.sms.active ? (\n            <NotifiSmsInput\n              disabled={inputDisabled}\n              classNames={classNames?.NotifiSmsInput}\n              allowedCountryCodes={allowedCountryCodes}\n              copy={{\n                label: inputTextFields?.label?.sms,\n                placeholder: inputTextFields?.placeholderText?.sms,\n              }}\n            />\n          ) : null}\n          {inputSeparators?.smsSeparator?.content ? (\n            <div\n              className={clsx(\n                'NotifiInputSeparator__container',\n                inputSeparators?.smsSeparator?.classNames?.container,\n              )}\n            >\n              <div\n                className={clsx(\n                  'NotifiInputSeparator__content',\n                  inputSeparators.smsSeparator.classNames?.content,\n                )}\n              >\n                {inputSeparators?.smsSeparator?.content}\n              </div>\n            </div>\n          ) : null}\n          {data.contactInfo.telegram.active ? (\n            <NotifiTelegramInput\n              disabled={inputDisabled}\n              classNames={classNames?.NotifiTelegramInput}\n              copy={{\n                label: inputTextFields?.label?.telegram,\n                placeholder: inputTextFields?.placeholderText?.telegram,\n              }}\n            />\n          ) : null}\n          {inputSeparators?.telegramSeparator?.content ? (\n            <div\n              className={clsx(\n                'NotifiInputSeparator__container',\n                inputSeparators?.telegramSeparator?.classNames?.container,\n              )}\n            >\n              <div\n                className={clsx(\n                  'NotifiInputSeparator__content',\n                  inputSeparators.telegramSeparator.classNames?.content,\n                )}\n              >\n                {inputSeparators?.telegramSeparator?.content}\n              </div>\n            </div>\n          ) : null}\n\n          {data.contactInfo?.discord?.active ? (\n            <NotifiDiscordToggle\n              disabled={inputDisabled}\n              classNames={classNames?.NotifiDiscordToggle}\n            />\n          ) : null}\n        </>\n      ) : null}\n      {params.walletBlockchain === 'SOLANA' ? (\n        <NotifiHwWalletToggle\n          disabled={inputDisabled}\n          classNames={classNames?.NotifiHwWalletToggle}\n        />\n      ) : null}\n    </>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { useNotifiSubscriptionContext } from '../context';\nimport { DeepPartialReadonly } from '../utils';\nimport { NotifiToggle, NotifiToggleProps } from './subscription';\n\nexport type NotifiDiscordToggleProps = Readonly<{\n  disabled: boolean;\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n  }>;\n}>;\n\nexport const NotifiDiscordToggle: React.FC<NotifiDiscordToggleProps> = ({\n  classNames,\n  disabled,\n}) => {\n  const { useDiscord, setUseDiscord } = useNotifiSubscriptionContext();\n\n  return (\n    <div\n      className={clsx('NotifiDiscordToggle__container', classNames?.container)}\n    >\n      <div className={clsx('NotifiDiscordToggle__label', classNames?.label)}>\n        Discord DM Bot\n      </div>\n      <NotifiToggle\n        classNames={classNames?.toggle}\n        disabled={disabled}\n        checked={useDiscord}\n        setChecked={setUseDiscord}\n      />\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { useNotifiSubscriptionContext } from '../context';\nimport { DeepPartialReadonly } from '../utils';\nimport { NotifiToggle, NotifiToggleProps } from './subscription';\n\nexport type NotifiHwWalletToggleProps = Readonly<{\n  disabled: boolean;\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n  }>;\n}>;\n\nexport const NotifiHwWalletToggle: React.FC<NotifiHwWalletToggleProps> = ({\n  classNames,\n  disabled,\n}) => {\n  const { useHardwareWallet, setUseHardwareWallet } =\n    useNotifiSubscriptionContext();\n\n  return (\n    <div\n      className={clsx('NotifiHwWalletToggle__container', classNames?.container)}\n    >\n      <div className={clsx('NotifiHwWalletToggle__label', classNames?.label)}>\n        Use hardware wallet\n      </div>\n      <NotifiToggle\n        classNames={classNames?.toggle}\n        disabled={disabled}\n        checked={useHardwareWallet}\n        setChecked={setUseHardwareWallet}\n      />\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from 'notifi-react-card/lib/context';\nimport React from 'react';\n\nimport { useNotifiSubscribe } from '../../../hooks';\nimport { useFrontendClientLogin } from '../../../hooks/useFrontendClientLogin';\n\nexport type ExpiredTokenViewCardProps = {\n  classNames?: {\n    container?: string;\n    title?: string;\n    subtitle?: string;\n    button?: string;\n    buttonLabel?: string;\n  };\n};\n\nexport const ExpiredTokenView: React.FC<ExpiredTokenViewCardProps> = ({\n  classNames,\n}) => {\n  const { logIn } = useNotifiSubscribe({ targetGroupName: 'Default' });\n  const { isUsingFrontendClient } = useNotifiClientContext();\n\n  const { setCardView } = useNotifiSubscriptionContext();\n\n  const frontendClientLogin = useFrontendClientLogin();\n\n  const handleClick = async () => {\n    let success = false;\n    const result = isUsingFrontendClient\n      ? await frontendClientLogin()\n      : await logIn();\n\n    success = !!result;\n\n    if (success === true) {\n      setCardView({ state: 'preview' });\n    }\n  };\n\n  return (\n    <div\n      className={clsx(\n        'NotifiExpiredTokenCard__container',\n        classNames?.container,\n      )}\n    >\n      <div className={clsx('NotifiExpiredTokenCard__title', classNames?.title)}>\n        Connect to Notifi\n      </div>\n      <div\n        className={clsx(\n          'NotifiExpiredTokenCard__subtitle',\n          classNames?.subtitle,\n        )}\n      >\n        It's been a while! Connect to Notifi to load your <br />\n        notification details.\n      </div>\n      <button\n        className={clsx('NotifiExpiredTokenCard__button', classNames?.button)}\n        onClick={handleClick}\n      >\n        <span\n          className={clsx(\n            'NotifiExpiredTokenCard__buttonLabel',\n            classNames?.buttonLabel,\n          )}\n        >\n          Connect to Notifi\n        </span>\n      </button>\n    </div>\n  );\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport { Types } from '@notifi-network/notifi-graphql';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Virtuoso } from 'react-virtuoso';\n\nimport { NotificationEmptyBellIcon } from '../../../assets/NotificationEmptyBellIcon';\nimport { useNotifiClientContext } from '../../../context';\nimport {\n  DeepPartialReadonly,\n  getAlertNotificationViewBaseProps,\n  validateIsSupported,\n} from '../../../utils';\nimport { MESSAGES_PER_PAGE } from '../../../utils/constants';\nimport {\n  AlertNotificationRow,\n  AlertNotificationViewProps,\n} from '../../AlertHistory/AlertNotificationRow';\nimport { LoadingStateCard, LoadingStateCardProps } from '../../common';\n\nexport type NotificationHistoryEntry =\n  | Types.FusionNotificationHistoryEntryFragmentFragment\n  | Types.NotificationHistoryEntryFragmentFragment;\n\nexport type AlertHistoryViewProps = Readonly<{\n  noAlertDescription?: string;\n  isHidden: boolean;\n  data: CardConfigItemV1;\n  copy?: {\n    loadingHeader?: string;\n    loadingContent?: string;\n    loadingSpinnerSize?: string;\n    loadingRingColor?: string;\n  };\n  classNames?: DeepPartialReadonly<{\n    title: string;\n    header: string;\n    manageAlertLink: string;\n    noAlertDescription: string;\n    notificationDate: string;\n    notificationSubject: string;\n    notificationMessage: string;\n    notificationImage: string;\n    notificationList: string;\n    emptyAlertsBellIcon: string;\n    historyContainer: string;\n    virtuoso: string;\n    AlertCard: AlertNotificationViewProps['classNames'];\n    LoadingStateCard: LoadingStateCardProps['classNames'];\n  }>;\n  setAlertEntry: React.Dispatch<\n    React.SetStateAction<NotificationHistoryEntry | undefined>\n  >;\n}>;\n\nexport const AlertHistoryView: React.FC<AlertHistoryViewProps> = ({\n  classNames,\n  isHidden,\n  noAlertDescription,\n  setAlertEntry,\n  copy,\n}) => {\n  noAlertDescription = noAlertDescription\n    ? noAlertDescription\n    : 'You haven’t received any notifications yet';\n\n  const [endCursor, setEndCursor] = useState<string | undefined>();\n  const [hasNextPage, setHasNextPage] = useState<boolean>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const fetched = useRef<boolean>(false);\n\n  const { client, isUsingFrontendClient, frontendClient } =\n    useNotifiClientContext();\n\n  const [allNodes, setAllNodes] = useState<NotificationHistoryEntry[]>([]);\n  const { isClientInitialized, isClientAuthenticated } = useMemo(() => {\n    return {\n      isClientInitialized: isUsingFrontendClient\n        ? !!frontendClient.userState\n        : client.isInitialized,\n      isClientAuthenticated: isUsingFrontendClient\n        ? frontendClient.userState?.status === 'authenticated'\n        : client.isAuthenticated,\n    };\n  }, [isUsingFrontendClient, client, frontendClient]);\n\n  const getNotificationHistory = useCallback(\n    async ({ first, after }: Types.GetNotificationHistoryQueryVariables) => {\n      if (isLoading) {\n        return;\n      }\n\n      const result = isUsingFrontendClient\n        ? await frontendClient.getFusionNotificationHistory({\n            first,\n            after,\n            includeHidden: false,\n          })\n        : await client.getNotificationHistory({\n            first,\n            after,\n          });\n\n      const nodes: NotificationHistoryEntry[] = result?.nodes ?? [];\n      setAllNodes((existing) => existing.concat(nodes));\n\n      setEndCursor(result?.pageInfo.endCursor);\n      setHasNextPage(result?.pageInfo.hasNextPage);\n\n      setIsLoading(false);\n      return result;\n    },\n    [\n      client,\n      frontendClient,\n      isUsingFrontendClient,\n      setAllNodes,\n      setEndCursor,\n      setHasNextPage,\n    ],\n  );\n\n  useEffect(() => {\n    if (!isClientInitialized || !isClientAuthenticated) {\n      return;\n    }\n\n    if (!fetched.current) {\n      fetched.current = true;\n      setIsLoading(true);\n      getNotificationHistory({\n        first: MESSAGES_PER_PAGE,\n      }).finally(() => setIsLoading(false));\n    }\n  }, [client, frontendClient, isUsingFrontendClient]);\n\n  useEffect(() => {\n    if (isUsingFrontendClient && allNodes.length > 0) {\n      frontendClient\n        .markFusionNotificationHistoryAsRead({\n          ids: [],\n          beforeId: allNodes[0].id,\n        })\n        .catch((e) => console.log('Failed to mark as read', e));\n    }\n  }, [allNodes]);\n\n  if (isLoading) {\n    return (\n      <LoadingStateCard\n        copy={{\n          header: copy?.loadingHeader ?? '',\n          content: copy?.loadingContent,\n        }}\n        spinnerSize={copy?.loadingSpinnerSize}\n        ringColor={copy?.loadingRingColor}\n        classNames={classNames?.LoadingStateCard}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={clsx(\n        'NotifiAlertHistory__container',\n        classNames?.historyContainer,\n        { 'NotifiAlertHistory__container--hidden': isHidden },\n      )}\n    >\n      {allNodes.length > 0 ? (\n        <Virtuoso\n          className={clsx('NotifiAlertHistory__virtuoso', classNames?.virtuoso)}\n          style={{ flex: 1 }}\n          endReached={() => {\n            if (hasNextPage && endCursor) {\n              getNotificationHistory({\n                first: MESSAGES_PER_PAGE,\n                after: endCursor,\n              });\n            }\n          }}\n          data={allNodes.filter(validateIsSupported)}\n          itemContent={(_index, notification) => {\n            return (\n              <AlertNotificationRow\n                {...getAlertNotificationViewBaseProps(notification)}\n                handleAlertEntrySelection={() => setAlertEntry(notification)}\n                classNames={classNames?.AlertCard}\n              />\n            );\n          }}\n        />\n      ) : (\n        <div className=\"NotifiAlertHistory__noAlertContainer\">\n          <NotificationEmptyBellIcon\n            className={clsx(\n              'NotifiAlertHistory__emptyAlertsBellIcon',\n              classNames?.emptyAlertsBellIcon,\n            )}\n          />\n          <span\n            className={clsx(\n              'NotifiAlertHistory_noAlertDescription',\n              classNames?.noAlertDescription,\n            )}\n          >\n            {noAlertDescription}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const NotificationEmptyBellIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      {...props}\n      width=\"25\"\n      height=\"30\"\n      viewBox=\"0 0 25 30\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M12.2179 29.7812C13.8979 29.7812 15.2724 28.4067 15.2724 26.7268H9.16346C9.16346 28.4067 10.5227 29.7812 12.2179 29.7812ZM21.3814 20.6178V12.9816C21.3814 8.29293 18.8767 4.36792 14.5088 3.32939V2.29087C14.5088 1.02325 13.4856 0 12.2179 0C10.9503 0 9.92708 1.02325 9.92708 2.29087V3.32939C5.54389 4.36792 3.05449 8.27766 3.05449 12.9816V20.6178L0 23.6723V25.1995H24.4359V23.6723L21.3814 20.6178Z\"\n        fill=\"#F5F6FB\"\n      />\n    </svg>\n  );\n};\n","export const MESSAGES_PER_PAGE = 50;\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { formatTimestamp } from '../.././utils/AlertHistoryUtils';\n\nexport type AlertNotificationViewProps = Readonly<{\n  notificationTitle: string | undefined;\n  notificationImage?: JSX.Element;\n  notificationSubject: string | undefined;\n  notificationDate: string;\n  notificationMessage: string | undefined;\n  classNames?: Readonly<{\n    notificationContent?: string;\n    notificationDate?: string;\n    notificationImage?: string;\n    notificationMessage?: string;\n    notificationRow?: string;\n    notificationSubject?: string;\n    notificationTitle?: string;\n  }>;\n  handleAlertEntrySelection?: () => void;\n}>;\n\nexport const AlertNotificationRow: React.FC<AlertNotificationViewProps> = ({\n  notificationTitle,\n  classNames,\n  notificationImage,\n  notificationSubject,\n  notificationDate,\n  handleAlertEntrySelection,\n}) => {\n  return (\n    <div\n      className={clsx(\n        'NotifiAlertHistory__notificationRow',\n        classNames?.notificationRow,\n      )}\n      onClick={handleAlertEntrySelection}\n    >\n      <div\n        className={clsx(\n          'NotifiAlertHistory__notificationImage',\n          classNames?.notificationImage,\n        )}\n      >\n        {notificationImage}\n      </div>\n      <div\n        className={clsx(\n          'NotifiAlertHistory__content',\n          classNames?.notificationContent,\n        )}\n      >\n        <div\n          className={clsx(\n            'NotifiAlertHistory__notificationTitle',\n            classNames?.notificationTitle,\n          )}\n        >\n          {notificationTitle}\n        </div>\n        <div\n          className={clsx(\n            'NotifiAlertHistory__notificationSubject',\n            classNames?.notificationSubject,\n          )}\n        >\n          {notificationSubject}\n        </div>\n      </div>\n      <div\n        className={clsx(\n          'NotifiAlertHistory__notificationDate',\n          classNames?.notificationDate,\n        )}\n      >\n        {formatTimestamp(notificationDate)}\n      </div>\n    </div>\n  );\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport { useDestinationState } from 'notifi-react-card/lib/hooks/useDestinationState';\nimport React from 'react';\n\nimport { DeepPartialReadonly } from '../../../utils';\nimport { AlertsPanel, AlertsPanelProps } from './preview-panel/AlertsPanel';\nimport {\n  UserInfoPanel,\n  UserInfoPanelProps,\n} from './preview-panel/UserInfoPanel';\n\nexport type PreviewCardProps = Readonly<{\n  classNames?: {\n    NotifiPreviewCardSeparator?: string;\n    NotifiPreviewCardContainer?: string;\n    AlertsPanel?: DeepPartialReadonly<AlertsPanelProps['classNames']>;\n    backArrowContainer?: string;\n    UserInfoPanel?: DeepPartialReadonly<UserInfoPanelProps['classNames']>;\n    NotifiPreviewCardTitle?: string;\n    NotifiPreviewCardDividerLine?: string;\n  };\n  data: CardConfigItemV1;\n  inputDisabled: boolean;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const PreviewCard: React.FC<PreviewCardProps> = ({\n  classNames,\n  data,\n  inputDisabled,\n  inputs = {},\n}) => {\n  const { isTargetsExist } = useDestinationState();\n  return (\n    <div\n      data-cy=\"previewCard\"\n      className={clsx(\n        'NotifiPreviewCard__container',\n        classNames?.NotifiPreviewCardContainer,\n      )}\n    >\n      {isTargetsExist ? (\n        <UserInfoPanel\n          classNames={classNames?.UserInfoPanel}\n          contactInfo={data.contactInfo}\n        />\n      ) : null}\n\n      <div\n        className={clsx(\n          'NotifiPreviewCard__dividerLine',\n          classNames?.NotifiPreviewCardDividerLine,\n        )}\n      />\n\n      <div\n        className={clsx(\n          'NotifiPreviewCard__title',\n          classNames?.NotifiPreviewCardTitle,\n        )}\n      >\n        Select the alerts you want to receive:\n      </div>\n      <AlertsPanel\n        classNames={classNames?.AlertsPanel}\n        data={data}\n        inputDisabled={inputDisabled}\n        inputs={inputs}\n      />\n    </div>\n  );\n};\n","import { CardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport {\n  EventTypeBroadcastRow,\n  EventTypeBroadcastRowProps,\n} from '../../EventTypeBroadcastRow';\nimport {\n  EventTypeCustomHealthCheckRow,\n  EventTypeCustomHealthCheckRowProps,\n} from '../../EventTypeCustomHealthCheckRow';\nimport { EventTypeCustomToggleRow } from '../../EventTypeCustomToggleRow';\nimport {\n  EventTypeDirectPushRow,\n  EventTypeDirectPushRowProps,\n} from '../../EventTypeDirectPushRow';\nimport {\n  EventTypeFusionHealthCheckRow,\n  EventTypeFusionHealthCheckRowProps,\n} from '../../EventTypeFusionHealthCheckRow';\nimport {\n  EventTypeFusionMultiThresholdRow,\n  EventTypeFusionMultiThresholdRowProps,\n} from '../../EventTypeFusionMultiThresholdRow';\nimport {\n  EventTypeFusionRowProps,\n  EventTypeFusionToggleRow,\n} from '../../EventTypeFusionToggleRow';\nimport {\n  EventTypeHealthCheckRow,\n  EventTypeHealthCheckRowProps,\n} from '../../EventTypeHealthCheckRow';\nimport {\n  EventTypeLabelRow,\n  EventTypeLabelRowProps,\n} from '../../EventTypeLabelRow';\nimport {\n  EventTypePriceChangeRow,\n  EventTypePriceChangeRowProps,\n} from '../../EventTypePriceChangeRow';\nimport {\n  EventTypeTradingPairsRow,\n  EventTypeTradingPairsRowProps,\n} from '../../EventTypeTradingPairsRow';\nimport {\n  EventTypeUnsupportedRow,\n  EventTypeUnsupportedRowProps,\n} from '../../EventTypeUnsupportedRow';\nimport {\n  EventTypeWalletBalanceRow,\n  EventTypeWalletBalanceRowProps,\n} from '../../EventTypeWalletBalanceRow';\nimport {\n  EventTypeXMPTRowProps,\n  EventTypeXMTPRow,\n} from '../../EventTypeXMTPRow';\n\nexport type AlertsPanelProps = Readonly<{\n  data: CardConfigItemV1;\n  inputDisabled: boolean;\n  classNames?: Readonly<{\n    EventTypeContainer?: string;\n    EventTypeBroadcastRow?: EventTypeBroadcastRowProps['classNames'];\n    EventTypeCustomHealthCheckRow?: EventTypeCustomHealthCheckRowProps['classNames'];\n    EventTypeDirectPushRow?: EventTypeDirectPushRowProps['classNames'];\n    EventTypeHealthCheckRow?: EventTypeHealthCheckRowProps['classNames'];\n    EventTypeLabelRow?: EventTypeLabelRowProps['classNames'];\n    EventTypePriceChangeRow?: EventTypePriceChangeRowProps['classNames'];\n    EventTypeTradingPairsRow?: EventTypeTradingPairsRowProps['classNames'];\n    EventTypeFusionMultiThresholdRow?: EventTypeFusionMultiThresholdRowProps['classNames'];\n    EventTypeUnsupportedRow?: EventTypeUnsupportedRowProps['classNames'];\n    EventTypeWalletBalanceRow?: EventTypeWalletBalanceRowProps['classNames'];\n    EventTypeXMTPRow?: EventTypeXMPTRowProps['classNames'];\n    EventTypeFusionToggleRow?: EventTypeFusionRowProps['classNames'];\n    EventTypeFusionHealthCheckRow?: EventTypeFusionHealthCheckRowProps['classNames'];\n  }>;\n  inputs: Record<string, unknown>;\n}>;\nexport const AlertsPanel: React.FC<AlertsPanelProps> = ({\n  data,\n  inputDisabled,\n  classNames,\n  inputs,\n}) => {\n  return (\n    <div\n      className={clsx(\n        'NotifiEventTypeContainer',\n        classNames?.EventTypeContainer,\n      )}\n    >\n      {data.eventTypes?.map((eventType) => {\n        switch (eventType.type) {\n          case 'broadcast':\n            return (\n              <EventTypeBroadcastRow\n                key={eventType.name}\n                classNames={classNames?.EventTypeBroadcastRow}\n                disabled={inputDisabled}\n                config={eventType}\n                inputs={inputs}\n              />\n            );\n          case 'custom': {\n            return eventType.selectedUIType === 'HEALTH_CHECK' ? (\n              <EventTypeCustomHealthCheckRow\n                key={eventType.name}\n                classNames={classNames?.EventTypeCustomHealthCheckRow}\n                disabled={inputDisabled}\n                config={eventType}\n                inputs={inputs}\n              />\n            ) : (\n              <EventTypeCustomToggleRow\n                key={eventType.name}\n                disabled={inputDisabled}\n                config={eventType}\n                classNames={classNames?.EventTypeCustomHealthCheckRow}\n                inputs={inputs}\n              />\n            );\n          }\n          case 'directPush':\n            return (\n              <EventTypeDirectPushRow\n                key={eventType.name}\n                classNames={classNames?.EventTypeDirectPushRow}\n                disabled={inputDisabled}\n                config={eventType}\n                inputs={inputs}\n              />\n            );\n\n          case 'XMTP':\n            return (\n              <EventTypeXMTPRow\n                key={eventType.name}\n                classNames={classNames?.EventTypeXMTPRow}\n                disabled={inputDisabled}\n                config={eventType}\n                inputs={inputs}\n              />\n            );\n          case 'healthCheck':\n            return (\n              <EventTypeHealthCheckRow\n                key={eventType.name}\n                classNames={classNames?.EventTypeHealthCheckRow}\n                disabled={inputDisabled}\n                config={eventType}\n              />\n            );\n          case 'label':\n            return (\n              <EventTypeLabelRow\n                key={eventType.name}\n                classNames={classNames?.EventTypeLabelRow}\n                config={eventType}\n              />\n            );\n          case 'tradingPair':\n            return (\n              <EventTypeTradingPairsRow\n                key={eventType.name}\n                classNames={classNames?.EventTypeTradingPairsRow}\n                config={eventType}\n                inputs={inputs}\n              />\n            );\n          case 'walletBalance':\n            return (\n              <EventTypeWalletBalanceRow\n                key={eventType.name}\n                classNames={classNames?.EventTypeWalletBalanceRow}\n                disabled={inputDisabled}\n                config={eventType}\n                inputs={inputs}\n              />\n            );\n          case 'fusionToggle': // fusionToggle is deprecated (use fusion with selectedUIType===TOGGLE instead )\n          case 'fusion':\n            switch (eventType.selectedUIType) {\n              case 'HEALTH_CHECK':\n                return (\n                  <EventTypeFusionHealthCheckRow\n                    key={eventType.name}\n                    disabled={inputDisabled}\n                    config={eventType}\n                    classNames={classNames?.EventTypeFusionHealthCheckRow}\n                    inputs={inputs}\n                  />\n                );\n              case 'TOGGLE':\n                return (\n                  <EventTypeFusionToggleRow\n                    key={eventType.name}\n                    classNames={classNames?.EventTypeFusionToggleRow}\n                    disabled={inputDisabled}\n                    config={eventType}\n                    inputs={inputs}\n                  />\n                );\n              case 'MULTI_THRESHOLD':\n                return (\n                  <EventTypeFusionMultiThresholdRow\n                    key={eventType.name}\n                    classNames={classNames?.EventTypeFusionMultiThresholdRow}\n                    config={eventType}\n                    inputs={inputs}\n                  />\n                );\n              default:\n                throw new Error(`Unknown fusion UI type`);\n            }\n          case 'priceChange':\n            return (\n              <EventTypePriceChangeRow\n                key={eventType.name}\n                classNames={classNames?.EventTypePriceChangeRow}\n                disabled={inputDisabled}\n                config={eventType}\n                inputs={inputs}\n              />\n            );\n          default:\n            return (\n              <EventTypeUnsupportedRow\n                key={JSON.stringify(eventType)}\n                classNames={classNames?.EventTypeUnsupportedRow}\n              />\n            );\n        }\n      })}\n    </div>\n  );\n};\n","import {\n  EventTypeItem,\n  FusionHealthCheckEventTypeItem,\n  ThresholdDirection,\n  ValidInputRange,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { SubscriptionData, useNotifiSubscribe } from '../../hooks';\nimport {\n  DeepPartialReadonly,\n  fusionHealthCheckConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\nimport { resolveStringRef } from './resolveRef';\n\nexport type EventTypeFusionHealthCheckRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    content: string;\n    button: string;\n    toggle: NotifiToggleProps['classNames'];\n    buttonContainer: string;\n    errorMessage: string;\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: FusionHealthCheckEventTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nconst getParsedPercentage = (input: string): number | null => {\n  if (input.indexOf('%') === input.length - 1) {\n    return parseFloat(input.slice(0, -1)) ?? null;\n  }\n  return null;\n};\n\nconst getParsedPrice = (input: string): number | null => {\n  if (input.indexOf('$') === 0) {\n    return parseFloat(input.slice(1)) ?? null;\n  }\n  return null;\n};\n\nexport const EventTypeFusionHealthCheckRow: React.FC<\n  EventTypeFusionHealthCheckRowProps\n> = ({ classNames, config, disabled, inputs }) => {\n  const { alerts, loading, render } = useNotifiSubscriptionContext();\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const [enabled, setEnabled] = useState(false);\n\n  // This indicates which box to select\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\n  const [isNotificationLoading, setIsNotificationLoading] =\n    useState<boolean>(false);\n  const [customValue, setCustomValue] = useState<string>('');\n  const customInputRef = useRef<HTMLInputElement>(null);\n  const thresholdDirection: ThresholdDirection = 'below';\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const fusionEventId = useMemo(\n    () => resolveStringRef(config.name, config.fusionEventId, inputs),\n    [config, inputs],\n  );\n\n  const fusionSourceAddress = useMemo(\n    () => resolveStringRef(config.name, config.sourceAddress, inputs),\n    [config, inputs],\n  );\n\n  const alertName = useMemo<string>(() => {\n    if (config.fusionEventId.type === 'value') {\n      return config.name;\n    }\n    return `${config.name}:${fusionEventId}`;\n  }, [config, fusionEventId]);\n\n  const tooltipContent = config.tooltipContent;\n\n  const UNABLE_TO_SUBSCRIBE = 'Unable to subscribe, please try again';\n  const UNABLE_TO_UNSUBSCRIBE = 'Unable to unsubscribe, please try again';\n  const INVALID_NUMBER = 'Please enter a valid number';\n  const INVALID_RANGE = (validInputRange: ValidInputRange) => {\n    return `Please enter a number between ${validInputRange.min} and ${validInputRange.max}`;\n  };\n\n  const handleSuffixPercentage = (value: string) => {\n    value = value.replace('%', '');\n    setCustomValue(value + '%');\n  };\n  const handlePrefixDollar = (value: string) => {\n    value = value.replace('$', '');\n    setCustomValue('$' + value);\n  };\n\n  const subscribingRatioValue = useMemo(() => {\n    const alert = alerts[alertName];\n    if (!alert || !alert.filterOptions) return null;\n    let alertRatioValue: number | null = null;\n    switch (config.numberType) {\n      case 'percentage':\n        alertRatioValue = JSON.parse(alert.filterOptions).threshold * 100;\n        break;\n      default: // 'integer' | 'price'\n        alertRatioValue = JSON.parse(alert.filterOptions).threshold;\n    }\n    return alertRatioValue;\n  }, [alerts]);\n\n  const defaultRatios = useMemo(() => {\n    const ratios = config.checkRatios ?? [];\n    return ratios.map((ratio) => ratio.ratio);\n  }, [config]);\n\n  useEffect(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n\n    if (!subscribingRatioValue) {\n      setEnabled(false);\n      setSelectedIndex(defaultRatios.length - 1);\n      return;\n    }\n    setEnabled(true);\n\n    const selectedRatioIndex = defaultRatios.findIndex(\n      (ratio) => ratio === subscribingRatioValue,\n    );\n\n    if (selectedRatioIndex !== -1 && customValue === '') {\n      setSelectedIndex(selectedRatioIndex);\n    }\n\n    if (!defaultRatios.includes(subscribingRatioValue) && customValue === '') {\n      setSelectedIndex(3);\n      setCustomValue(() => {\n        switch (config.numberType) {\n          case 'percentage':\n            return subscribingRatioValue + '%';\n          case 'price':\n            return '$' + subscribingRatioValue;\n          default: // 'integer'\n            return subscribingRatioValue.toString();\n        }\n      });\n    }\n  }, [loading, enabled, setEnabled, defaultRatios, subscribingRatioValue]);\n\n  const validateInput = useCallback(\n    (inputValue: string, regex: RegExp, inputNumber: number | null) => {\n      if (!regex.test(inputValue)) {\n        return { isInputValid: false, inputInvalidWarning: INVALID_NUMBER };\n      }\n      if (!inputNumber) {\n        return { isInputValid: false, inputInvalidWarning: INVALID_NUMBER };\n      }\n      if (\n        config.validInputRange &&\n        (inputNumber > config.validInputRange.max ||\n          inputNumber < config.validInputRange.min)\n      ) {\n        return {\n          isInputValid: false,\n          inputInvalidWarning: INVALID_RANGE(config.validInputRange),\n        };\n      }\n      return { isInputValid: true, inputInvalidWarning: '' };\n    },\n    [config],\n  );\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n      ratioNumber: number,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        alertDetail.inputs[`${alertDetail.eventType.name}__healthRatio`] =\n          ratioNumber;\n        alertDetail.inputs[\n          `${alertDetail.eventType.name}__healthThresholdDirection`\n        ] = config.checkRatios[0].type ?? thresholdDirection;\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertConfiguration: fusionHealthCheckConfiguration({\n            maintainSourceGroup: config?.maintainSourceGroup,\n            fusionId: fusionEventId,\n            fusionSourceAddress,\n            alertFrequency: config.alertFrequency,\n            thresholdDirection:\n              config.checkRatios[0].type ?? thresholdDirection,\n            threshold:\n              config.numberType === 'percentage'\n                ? ratioNumber / 100\n                : ratioNumber,\n          }),\n          alertName,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const handleCustomRatioButtonNewSubscription = () => {\n    if (loading || isNotificationLoading || !customInputRef.current) {\n      return;\n    }\n    const inputValue = customInputRef.current.value;\n    let regex = new RegExp(/^[0-9.]+$/);\n    let inputNumber = null;\n    switch (config.numberType) {\n      case 'percentage':\n        regex = new RegExp(/^[0-9.%]+$/);\n        inputNumber = getParsedPercentage(inputValue);\n        break;\n      case 'price':\n        regex = new RegExp(/^[0-9.$]+$/);\n        inputNumber = getParsedPrice(inputValue);\n        break;\n      default: // 'integer'\n        inputNumber = parseFloat(inputValue);\n    }\n\n    const { isInputValid, inputInvalidWarning } = validateInput(\n      inputValue,\n      regex,\n      inputNumber,\n    );\n\n    if (!isInputValid) {\n      return setErrorMessage(inputInvalidWarning);\n    }\n\n    setErrorMessage('');\n    setIsNotificationLoading(true);\n\n    customInputRef.current.placeholder = 'Custom';\n    if (inputNumber && customValue) {\n      subscribeAlert({ eventType: config, inputs }, inputNumber)\n        .then(() => {\n          setSelectedIndex(3);\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => setErrorMessage(UNABLE_TO_UNSUBSCRIBE))\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setErrorMessage(INVALID_NUMBER);\n      setSelectedIndex(defaultRatios[defaultRatios.length - 1]);\n      setIsNotificationLoading(false);\n    }\n  };\n\n  const handleKeypressUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      if (customInputRef.current) {\n        customInputRef.current.blur();\n        event.preventDefault();\n      }\n    }\n  };\n  const handleRatioButtonNewSubscription = (value: number, index: number) => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setIsNotificationLoading(true);\n\n    setErrorMessage('');\n    if (value) {\n      subscribeAlert({ eventType: config, inputs }, value)\n        .then(() => {\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n          setSelectedIndex(index);\n          setCustomValue('');\n        })\n        .catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE))\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setErrorMessage(INVALID_NUMBER);\n      setIsNotificationLoading(false);\n    }\n  };\n\n  const handleHealthCheckSubscription = useCallback(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setIsNotificationLoading(true);\n    setErrorMessage('');\n    if (!enabled && !subscribingRatioValue) {\n      setEnabled(true);\n      subscribeAlert(\n        { eventType: config, inputs },\n        defaultRatios[defaultRatios.length - 1],\n      )\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          const responseHasAlert = res.alerts[alertName] !== undefined;\n          if (responseHasAlert !== true) {\n            setEnabled(false);\n          }\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch((e) => {\n          setErrorMessage(UNABLE_TO_SUBSCRIBE);\n          setEnabled(false);\n          throw e;\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setEnabled(false);\n      unSubscribeAlert({ eventType: config, inputs })\n        .then((res) => {\n          setCustomValue('');\n          if (res) {\n            const responseHasAlert = res.alerts[alertName] !== undefined;\n            if (responseHasAlert !== false) {\n              setEnabled(true);\n            }\n          }\n          // Else, ensured by frontendClient\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch((e) => {\n          setErrorMessage(UNABLE_TO_SUBSCRIBE);\n          setEnabled(true);\n          throw e;\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    }\n  }, [\n    subscribingRatioValue,\n    enabled,\n    isNotificationLoading,\n    setIsNotificationLoading,\n  ]);\n\n  return (\n    <div>\n      <div\n        className={clsx(\n          'EventTypeCustomHealthCheckRow__container',\n          classNames?.container,\n        )}\n      >\n        <div\n          className={clsx('EventTypeHealthCheckRow__label', classNames?.label)}\n        >\n          {config.displayNameOverride ?? config.name}\n          {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n            <NotifiTooltip\n              classNames={classNames?.tooltip}\n              content={tooltipContent}\n            />\n          ) : null}\n        </div>\n        <NotifiToggle\n          checked={enabled}\n          classNames={classNames?.toggle}\n          disabled={disabled || isNotificationLoading}\n          setChecked={handleHealthCheckSubscription}\n        />\n      </div>\n      {enabled && config.checkRatios?.length ? (\n        <>\n          <div\n            className={clsx(\n              'EventTypeHealthCheckRow__content',\n              classNames?.content,\n            )}\n          >\n            {config.healthCheckSubtitle\n              ? config.healthCheckSubtitle\n              : `Alert me when my margin ratio is ${config.checkRatios[0]?.type}`}\n          </div>\n          <div\n            className={clsx(\n              'EventTypeHealthCheckRow__buttonContainer',\n              classNames?.buttonContainer,\n            )}\n          >\n            {config.checkRatios.map((value, index) => {\n              const numberType = config.numberType;\n\n              let valueToShow = null;\n              switch (numberType) {\n                case 'percentage':\n                  valueToShow = value.ratio + '%';\n                  break;\n                case 'price':\n                  valueToShow = '$' + value.ratio;\n                  break;\n                default: // 'integer'\n                  valueToShow = value.ratio;\n              }\n              return (\n                <div\n                  key={index}\n                  className={clsx(\n                    'EventTypeHealthCheckRow__button',\n                    `${\n                      index === selectedIndex\n                        ? ' EventTypeHealthCheckRow__buttonSelected'\n                        : undefined\n                    }`,\n                    isNotificationLoading ? 'buttonDisabled' : undefined,\n                    classNames?.button,\n                  )}\n                  onClick={() => {\n                    if (\n                      isNotificationLoading === true ||\n                      selectedIndex === index\n                    ) {\n                      return;\n                    }\n\n                    handleRatioButtonNewSubscription(value.ratio, index);\n                  }}\n                >\n                  {valueToShow}\n                </div>\n              );\n            })}\n            <input\n              ref={customInputRef}\n              onKeyUp={(e) => handleKeypressUp(e)}\n              onFocus={(e) =>\n                (e.target.placeholder =\n                  config.numberType === 'percentage' ? '0.00%' : '0')\n              }\n              onClick={() => {\n                setErrorMessage('');\n                setSelectedIndex(null);\n              }}\n              disabled={isNotificationLoading}\n              onBlur={handleCustomRatioButtonNewSubscription}\n              value={customValue}\n              placeholder=\"Custom\"\n              className={clsx(\n                'EventTypeHealthCheckRow__button',\n                'EventTypeHealthCheckRow__customButton',\n                `${\n                  selectedIndex === 3\n                    ? ' EventTypeHealthCheckRow__buttonSelected'\n                    : undefined\n                }`,\n                classNames?.button,\n              )}\n              onChange={(e) => {\n                if (config.numberType === 'percentage') {\n                  handleSuffixPercentage(e.target.value);\n                } else if (config.numberType === 'price') {\n                  handlePrefixDollar(e.target.value);\n                } else {\n                  setCustomValue(e.target.value ?? '');\n                }\n              }}\n            />\n          </div>\n          <label\n            className={clsx(\n              'NotifiEmailInput__errorMessage',\n              classNames?.errorMessage,\n            )}\n          >\n            {errorMessage}\n          </label>\n        </>\n      ) : null}\n    </div>\n  );\n};\n","import {\n  EventTypeItem,\n  FusionToggleEventTypeItem,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { SubscriptionData, useNotifiSubscribe } from '../../hooks';\nimport {\n  AlertConfiguration,\n  DeepPartialReadonly,\n  fusionToggleConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\nimport { resolveStringRef } from './resolveRef';\n\nexport type EventTypeFusionRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: FusionToggleEventTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EventTypeFusionToggleRow: React.FC<EventTypeFusionRowProps> = ({\n  classNames,\n  config,\n  disabled,\n  inputs,\n}: EventTypeFusionRowProps) => {\n  const { alerts, loading, render } = useNotifiSubscriptionContext();\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const [enabled, setEnabled] = useState(false);\n  const [isNotificationLoading, setIsNotificationLoading] =\n    useState<boolean>(false);\n\n  const fusionEventId = useMemo(\n    () => resolveStringRef(config.name, config.fusionEventId, inputs),\n    [config, inputs],\n  );\n\n  const fusionSourceAddress = useMemo(\n    () => resolveStringRef(config.name, config.sourceAddress, inputs),\n    [config, inputs],\n  );\n\n  const alertName = useMemo<string>(() => {\n    if (config.fusionEventId.type === 'value') {\n      return config.name;\n    }\n    return `${config.name}:${fusionEventId}`;\n  }, [config, fusionEventId]);\n\n  const alertConfiguration = useMemo<AlertConfiguration>(() => {\n    return fusionToggleConfiguration({\n      maintainSourceGroup: config?.maintainSourceGroup,\n      fusionId: fusionEventId,\n      fusionSourceAddress,\n      alertFrequency: config?.alertFrequency,\n    });\n  }, [alertName, config, inputs]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: alertConfiguration,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, alertConfiguration],\n  );\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient, alertConfiguration],\n  );\n\n  const tooltipContent = config.tooltipContent;\n\n  const didFetch = useRef(false);\n\n  useEffect(() => {\n    if (didFetch.current) {\n      return;\n    }\n\n    const hasAlert = alerts[alertName] !== undefined;\n    setEnabled(hasAlert);\n    didFetch.current = true;\n  }, [alertName, alerts]);\n\n  const handleNewSubscription = useCallback(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setIsNotificationLoading(true);\n\n    if (!enabled) {\n      setEnabled(true);\n      subscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          const responseHasAlert = res.alerts[alertName] !== undefined;\n          if (responseHasAlert !== true) {\n            setEnabled(false);\n          }\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(false);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setEnabled(false);\n      unSubscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          if (res) {\n            const responseHasAlert = res.alerts[alertName] !== undefined;\n            if (responseHasAlert !== false) {\n              setEnabled(true);\n            }\n          }\n          // Else, ensured by frontendClient\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(false);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    }\n  }, [\n    loading,\n    enabled,\n    instantSubscribe,\n    alertConfiguration,\n    alertName,\n    isNotificationLoading,\n    setIsNotificationLoading,\n  ]);\n\n  return (\n    <div\n      className={clsx(\n        'EventTypeFusionToggleRow__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx('EventTypeFusionToggleRow__label', classNames?.label)}\n      >\n        {config.displayNameOverride ?? config.name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n      <NotifiToggle\n        checked={enabled}\n        classNames={classNames?.toggle}\n        disabled={disabled || isNotificationLoading}\n        setChecked={handleNewSubscription}\n      />\n    </div>\n  );\n};\n","import {\n  EventTypeItem,\n  XMTPTopicTypeItem,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { SubscriptionData, useNotifiSubscribe } from '../../hooks';\nimport {\n  AlertConfiguration,\n  DeepPartialReadonly,\n  XMTPToggleConfiguration,\n  subscribeAlertByFrontendClient,\n  unsubscribeAlertByFrontendClient,\n} from '../../utils';\nimport type { NotifiToggleProps } from './NotifiToggle';\nimport { NotifiToggle } from './NotifiToggle';\nimport { NotifiTooltip, NotifiTooltipProps } from './NotifiTooltip';\nimport { resolveStringArrayRef } from './resolveRef';\n\nexport type EventTypeXMPTRowProps = Readonly<{\n  classNames?: DeepPartialReadonly<{\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n    tooltip: NotifiTooltipProps['classNames'];\n  }>;\n  disabled: boolean;\n  config: XMTPTopicTypeItem;\n  inputs: Record<string, unknown>;\n}>;\n\nexport const EventTypeXMTPRow: React.FC<EventTypeXMPTRowProps> = ({\n  classNames,\n  disabled,\n  config,\n  inputs,\n}: EventTypeXMPTRowProps) => {\n  const { alerts, loading, render } = useNotifiSubscriptionContext();\n\n  const { instantSubscribe } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const alertName = useMemo<string>(() => config.name, [config]);\n\n  const alertConfiguration = useMemo<AlertConfiguration>(() => {\n    return XMTPToggleConfiguration({\n      XMTPTopics: resolveStringArrayRef(config.name, config.XMTPTopics, inputs),\n    });\n  }, [alertName, config]);\n\n  const [enabled, setEnabled] = useState(false);\n  const [isNotificationLoading, setIsNotificationLoading] =\n    useState<boolean>(false);\n\n  const tooltipContent = config.tooltipContent;\n  const didFetch = useRef(false);\n\n  useEffect(() => {\n    if (didFetch.current) {\n      return;\n    }\n\n    const hasAlert = alerts[alertName] !== undefined;\n    setEnabled(hasAlert);\n    didFetch.current = true;\n  }, [alertName, alerts]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertConfiguration: alertConfiguration,\n          alertName: alertName,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const unSubscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ) => {\n      if (isUsingFrontendClient) {\n        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertName: alertDetail.eventType.name,\n          alertConfiguration: null,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  const handleNewSubscription = useCallback(() => {\n    if (loading || isNotificationLoading) {\n      return;\n    }\n    setIsNotificationLoading(true);\n\n    if (!enabled) {\n      setEnabled(true);\n\n      subscribeAlert({\n        eventType: config,\n        inputs,\n      })\n        .then((res) => {\n          // We update optimistically so we need to check if the alert exists.\n          const responseHasAlert = res.alerts[alertName] !== undefined;\n\n          if (responseHasAlert !== true) {\n            setEnabled(false);\n          }\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch((e) => {\n          console.log('Failed to subscribeAlert', e);\n          setEnabled(false);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    } else {\n      setEnabled(false);\n\n      unSubscribeAlert({\n        eventType: config,\n        inputs: inputs,\n      })\n        .then((res) => {\n          if (res) {\n            // We update optimistically so we need to check if the alert exists.\n            const responseHasAlert = res.alerts[alertName] !== undefined;\n            if (responseHasAlert !== false) {\n              setEnabled(true);\n            }\n          }\n          // Else, ensured by frontendClient\n          isUsingFrontendClient && frontendClient.fetchData().then(render);\n        })\n        .catch(() => {\n          setEnabled(true);\n        })\n        .finally(() => {\n          setIsNotificationLoading(false);\n        });\n    }\n  }, [\n    enabled,\n    alerts,\n    instantSubscribe,\n    alertName,\n    isNotificationLoading,\n    setEnabled,\n    setIsNotificationLoading,\n  ]);\n\n  return (\n    <div className={clsx('EventTypeXMTPRow__container', classNames?.container)}>\n      <div className={clsx('EventTypeXMTPRow__label', classNames?.label)}>\n        {config.name}\n        {tooltipContent !== undefined && tooltipContent.length > 0 ? (\n          <NotifiTooltip\n            classNames={classNames?.tooltip}\n            content={tooltipContent}\n          />\n        ) : null}\n      </div>\n      <NotifiToggle\n        classNames={classNames?.toggle}\n        disabled={disabled || isNotificationLoading}\n        checked={enabled}\n        setChecked={handleNewSubscription}\n      />\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { PenIcon } from 'notifi-react-card/lib/assets/PenIcon';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../../../context';\nimport { CardConfigItemV1 } from '../../../../hooks';\nimport { DeepPartialReadonly } from '../../../../utils';\nimport { DestinationErrorMessage } from './DestinationErrorMessage';\n\nexport type UserInfoSection = {\n  container: string;\n  label: string;\n  confirmationLink: string;\n  confirmationLabel: string;\n  errorMessageContainer: string;\n  errorMessage: string;\n  tooltipContent: string;\n};\n\nexport type UserInfoPanelProps = {\n  classNames?: DeepPartialReadonly<{\n    alertHistory: string;\n    container: string;\n    email?: UserInfoSection;\n    telegram?: UserInfoSection;\n    discord?: UserInfoSection;\n    sms?: UserInfoSection;\n    EditButton: string;\n    myWallet?: UserInfoSection;\n  }>;\n  contactInfo: CardConfigItemV1['contactInfo'];\n  confirmationLabels?: {\n    email?: string;\n    telegram?: string;\n  };\n};\nexport const UserInfoPanel: React.FC<UserInfoPanelProps> = ({\n  classNames,\n  contactInfo,\n  confirmationLabels,\n}) => {\n  const [isEmailConfirmationSent, setIsEmailConfirmationSent] =\n    useState<boolean>(false);\n\n  const {\n    phoneNumber,\n    email,\n    telegramId,\n    setCardView,\n    destinationErrorMessages,\n    useDiscord,\n    discordTargetData,\n  } = useNotifiSubscriptionContext();\n\n  const {\n    params: { multiWallet },\n  } = useNotifiClientContext();\n\n  const handleEditClick = useCallback(() => {\n    setCardView({ state: 'edit' });\n  }, [setCardView, phoneNumber, email, telegramId]);\n\n  const {\n    telegram: telegramErrorMessage,\n    email: emailErrorMessage,\n    phoneNumber: phoneNumberErrorMessage,\n    discord: discordErrrorMessage,\n  } = destinationErrorMessages;\n\n  const handleResendEmailVerificationClick = useCallback(() => {\n    if (emailErrorMessage?.type !== 'recoverableError') return;\n    setIsEmailConfirmationSent(true);\n    emailErrorMessage.onClick();\n    setTimeout(() => setIsEmailConfirmationSent(false), 3000);\n  }, [emailErrorMessage]);\n\n  const discordUserName = useMemo(() => {\n    const { username, discriminator } = discordTargetData || {};\n\n    return discriminator === '0' ? username : `${username}#${discriminator}`;\n  }, [discordTargetData]);\n\n  return (\n    <div\n      className={clsx('NotifiUserInfoPanelContainer', classNames?.container)}\n    >\n      {contactInfo.email.active && email ? (\n        <div\n          className={clsx(\n            'NotifiUserInfoPanel__email',\n            classNames?.email?.container,\n          )}\n        >\n          <label\n            className={clsx(\n              'NotifiUserInfoPanel__emailLabel',\n              classNames?.email?.label,\n            )}\n          >\n            {email}\n          </label>\n          {emailErrorMessage?.type === 'recoverableError' ? (\n            <DestinationErrorMessage\n              classNames={{\n                errorMessage: clsx(classNames?.email?.errorMessage, {\n                  DestinationError__emailConfirmationSent:\n                    isEmailConfirmationSent,\n                }),\n                errorMessageContainer: classNames?.email?.errorMessageContainer,\n                tooltipContent: classNames?.email?.tooltipContent,\n              }}\n              onClick={() => handleResendEmailVerificationClick()}\n              errorMessage={\n                isEmailConfirmationSent ? 'Sent' : emailErrorMessage.message\n              }\n              tooltipContent={emailErrorMessage?.tooltip}\n            />\n          ) : null}\n        </div>\n      ) : null}\n      {contactInfo.sms.active && phoneNumber ? (\n        <div\n          className={clsx(\n            'NotifiUserInfoPanel__sms',\n            classNames?.sms?.container,\n          )}\n        >\n          <label\n            className={clsx(\n              'NotifiUserInfoPanel__smsLabel',\n              classNames?.sms?.label,\n            )}\n          >\n            {phoneNumber}\n          </label>\n\n          {phoneNumberErrorMessage?.type !== undefined ? (\n            <DestinationErrorMessage\n              classNames={{\n                errorMessage: classNames?.sms?.errorMessage,\n                errorMessageContainer: classNames?.sms?.errorMessageContainer,\n                tooltipContent: classNames?.sms?.tooltipContent,\n              }}\n              errorMessage={phoneNumberErrorMessage?.message}\n              tooltipContent={phoneNumberErrorMessage?.tooltip}\n            />\n          ) : null}\n        </div>\n      ) : null}\n      {contactInfo.telegram.active && telegramId ? (\n        <div\n          className={clsx(\n            'NotifiUserInfoPanel__telegram',\n            classNames?.telegram?.container,\n          )}\n        >\n          <label\n            className={clsx(\n              'NotifiUserInfoPanel__telegramLabel',\n              classNames?.telegram?.label,\n            )}\n          >\n            {telegramId}\n          </label>\n          {telegramErrorMessage?.type === 'recoverableError' ? (\n            <DestinationErrorMessage\n              classNames={{\n                errorMessage: clsx(\n                  classNames?.telegram?.errorMessage,\n                  classNames?.telegram?.confirmationLink,\n                ),\n                errorMessageContainer:\n                  classNames?.telegram?.errorMessageContainer,\n                tooltipContent: classNames?.telegram?.tooltipContent,\n              }}\n              onClick={() => {\n                telegramErrorMessage?.onClick();\n              }}\n              errorMessage={\n                telegramErrorMessage?.message ??\n                confirmationLabels?.telegram ??\n                ''\n              }\n              tooltipContent={destinationErrorMessages?.telegram?.tooltip}\n            />\n          ) : null}\n        </div>\n      ) : null}\n      {contactInfo?.discord?.active && useDiscord ? (\n        <div\n          className={clsx(\n            'NotifiUserInfoPanel__discord',\n            classNames?.discord?.container,\n          )}\n        >\n          <label\n            className={clsx(\n              'NotifiUserInfoPanel__discordLabel',\n              classNames?.discord?.label,\n            )}\n          >\n            {discordTargetData?.isConfirmed === true\n              ? discordUserName\n              : 'Discord'}\n          </label>\n          {discordErrrorMessage?.type === 'recoverableError' ? (\n            <DestinationErrorMessage\n              classNames={{\n                errorMessage: clsx(\n                  classNames?.discord?.errorMessage,\n                  classNames?.discord?.confirmationLink,\n                ),\n                errorMessageContainer:\n                  classNames?.discord?.errorMessageContainer,\n                tooltipContent: classNames?.discord?.tooltipContent,\n              }}\n              onClick={() => {\n                discordErrrorMessage?.onClick();\n              }}\n              errorMessage={\n                discordErrrorMessage?.message ??\n                confirmationLabels?.telegram ??\n                ''\n              }\n              tooltipContent={destinationErrorMessages?.discord?.tooltip}\n            />\n          ) : null}\n        </div>\n      ) : null}\n      {multiWallet !== undefined && multiWallet.ownedWallets.length > 0 ? (\n        <div\n          className={clsx(\n            'NotifiUserInfoPanel__myWallet',\n            classNames?.myWallet?.container,\n          )}\n        >\n          <label\n            className={clsx(\n              'NotifiUserInfoPanel__myWalletLabel',\n              classNames?.myWallet?.label,\n            )}\n          >\n            My wallets\n          </label>\n          <button\n            className={clsx(\n              'NotifiUserInfoPanel__myWalletConfirmation',\n              classNames?.myWallet?.confirmationLink,\n            )}\n            onClick={() => {\n              setCardView({ state: 'verify' });\n            }}\n          >\n            Edit\n          </button>\n        </div>\n      ) : null}\n      <button\n        className={clsx(\n          'NotifiPreviewCard__editButton',\n          classNames?.EditButton,\n        )}\n        onClick={handleEditClick}\n      >\n        <PenIcon />\n        Edit\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const PenIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      {...props}\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M5.293 15.619L15.619 5.29299C16.009 4.90299 16.642 4.90299 17.032 5.29299L18.708 6.96899C19.098 7.35899 19.098 7.99199 18.708 8.38199L8.381 18.707C8.194 18.895 7.94 19 7.675 19H5V16.325C5 16.06 5.105 15.806 5.293 15.619V15.619Z\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M13.75 7.16003L16.84 10.25\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n","import {\n  CardConfigItemV1,\n  EventTypeConfig,\n} from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport { isValidPhoneNumber } from 'libphonenumber-js';\nimport { formatTelegramForSubscription } from 'notifi-react-card/lib/utils/stringUtils';\nimport React, { useCallback, useMemo } from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiForm,\n  useNotifiSubscriptionContext,\n} from '../../../context';\nimport { useNotifiSubscribe } from '../../../hooks';\nimport {\n  createConfigurations,\n  subscribeAlertsByFrontendClient,\n} from '../../../utils';\nimport { WalletList } from '../../WalletList';\nimport NotifiCardButton, {\n  NotifiCardButtonProps,\n} from '../../common/NotifiCardButton';\n\nexport type VerifyWalletViewProps = Readonly<{\n  classNames?: Readonly<{\n    NotifiVerifyContainer?: string;\n    NotifiInputHeading?: string;\n    NotifiCardButtonProps?: NotifiCardButtonProps['classNames'];\n  }>;\n  buttonText: string;\n  data: CardConfigItemV1;\n  inputs: Record<string, unknown>;\n}>;\n\nconst VerifyWalletView: React.FC<VerifyWalletViewProps> = ({\n  classNames,\n  buttonText,\n  data,\n  inputs,\n}) => {\n  const {\n    cardView,\n    setCardView,\n    loading,\n    setLoading,\n    connectedWallets,\n    useDiscord,\n  } = useNotifiSubscriptionContext();\n\n  const {\n    formState: { phoneNumber, telegram: telegramId, email },\n  } = useNotifiForm();\n\n  const { subscribe, updateWallets } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const targetGroup = useMemo(\n    () => ({\n      name: 'Default',\n      emailAddress: email === '' ? undefined : email,\n      phoneNumber: isValidPhoneNumber(phoneNumber) ? phoneNumber : undefined,\n      telegramId:\n        telegramId === ''\n          ? undefined\n          : formatTelegramForSubscription(telegramId),\n      discordId: useDiscord ? 'Default' : undefined,\n    }),\n    [email, phoneNumber, telegramId, useDiscord],\n  );\n\n  const subscribeAlerts = useCallback(\n    async (eventTypes: EventTypeConfig, inputs: Record<string, unknown>) => {\n      if (isUsingFrontendClient) {\n        await frontendClient.ensureTargetGroup(targetGroup);\n        return subscribeAlertsByFrontendClient(\n          frontendClient,\n          eventTypes,\n          inputs,\n        );\n      }\n      return subscribe(\n        createConfigurations(data.eventTypes, inputs, connectedWallets),\n      );\n    },\n    [\n      isUsingFrontendClient,\n      frontendClient,\n      email,\n      phoneNumber,\n      telegramId,\n      useDiscord,\n      subscribe,\n    ],\n  );\n  const renewWallets = useCallback(async () => {\n    if (isUsingFrontendClient) {\n      return frontendClient.updateWallets();\n    }\n    return updateWallets();\n  }, [isUsingFrontendClient, frontendClient, updateWallets]);\n\n  const onClick = useCallback(async () => {\n    if (cardView.state === 'verifyonboarding') {\n      setLoading(true);\n\n      try {\n        const subEvents = data.eventTypes.filter((event) => {\n          return event.optOutAtSignup ? false : true;\n        });\n        await subscribeAlerts(subEvents, inputs);\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      setLoading(true);\n\n      try {\n        await renewWallets();\n      } finally {\n        setLoading(false);\n      }\n    }\n    setCardView({ state: 'preview' });\n  }, [setLoading, data, inputs, connectedWallets, subscribe, renewWallets]);\n\n  return (\n    <div\n      className={clsx(\n        'NotifiVerifyContainer',\n        classNames?.NotifiVerifyContainer,\n      )}\n    >\n      <WalletList />\n      <NotifiCardButton\n        buttonText={buttonText}\n        disabled={loading}\n        onClick={onClick}\n      />\n    </div>\n  );\n};\n\nexport default VerifyWalletView;\n","import { WalletWithSignParams } from '@notifi-network/notifi-frontend-client';\nimport { Types } from '@notifi-network/notifi-graphql';\nimport { GqlError } from '@notifi-network/notifi-react-hooks';\nimport { addressEllipsis } from 'notifi-react-card/lib/utils/stringUtils';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { useNotifiSubscribe } from '../../hooks';\n\nexport type ConnectWalletRowProps = WalletWithSignParams &\n  Readonly<{\n    connectedWallets: ReadonlyArray<Types.ConnectedWalletFragmentFragment>;\n    disabled: boolean;\n  }>;\n\nconst hasKey = <K extends string>(\n  obj: object,\n  key: K,\n): obj is object & { [k in K]: unknown } => {\n  return typeof obj === 'object' && obj !== null && key in obj;\n};\n\nconst findError = <C extends string>(\n  errors: ReadonlyArray<unknown>,\n  code: C,\n): unknown | undefined => {\n  return errors.find(\n    (err) =>\n      typeof err === 'object' &&\n      err !== null &&\n      hasKey(err, 'extensions') &&\n      typeof err.extensions === 'object' &&\n      err.extensions !== null &&\n      hasKey(err.extensions, 'code') &&\n      code === err.extensions.code,\n  );\n};\n\nexport const ConnectWalletRow: React.FC<ConnectWalletRowProps> = ({\n  connectedWallets,\n  displayName,\n  disabled,\n  ...walletParams\n}: ConnectWalletRowProps) => {\n  const { subscribeWallet } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n\n  const isConnected = useMemo(() => {\n    const key = 'accountAddress';\n    const address = hasKey(walletParams, key)\n      ? walletParams[key]\n      : walletParams.walletPublicKey;\n    return connectedWallets.some(\n      (it) =>\n        it.address === address &&\n        it.walletBlockchain === walletParams.walletBlockchain,\n    );\n  }, [connectedWallets, walletParams]);\n\n  const shortenedAddress = useMemo(() => {\n    if (walletParams === null || walletParams.walletPublicKey === null) {\n      return null;\n    }\n    return addressEllipsis(walletParams.walletPublicKey);\n  }, [walletParams]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isConnectedElsewhere, setIsConnectedElsewhere] = useState(false);\n\n  const connectWallet = useCallback(\n    async (technique: 'FAIL' | 'DISCONNECT_AND_CLOSE_OLD_ACCOUNT') => {\n      setIsLoading(true);\n      try {\n        await subscribeWallet({\n          walletParams,\n          connectWalletConflictResolutionTechnique: technique,\n        });\n        setIsConnectedElsewhere(false);\n      } catch (e: unknown) {\n        if (e instanceof GqlError) {\n          const alreadyConnectedError =\n            findError(\n              e.errors,\n              'ERROR_WALLETCONNECT_ALREADY_CONNECTED_TO_ANOTHER_ACCOUNT_AND_LAST',\n            ) ??\n            findError(\n              e.errors,\n              'ERROR_WALLETCONNECT_ALREADY_CONNECTED_TO_ANOTHER_ACCOUNT',\n            );\n          if (alreadyConnectedError !== undefined) {\n            setIsConnectedElsewhere(true);\n          }\n        }\n\n        throw e;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [subscribeWallet, walletParams],\n  );\n\n  return (\n    <div className=\"ConnectWalletRow__container\">\n      <div className=\"ConnectWalletRow__topRow\">\n        <p className=\"ConnectWalletRow__publicKey\">\n          {displayName ?? shortenedAddress}\n        </p>\n        {isConnected || isConnectedElsewhere ? null : (\n          <button\n            disabled={disabled || isLoading || isConnectedElsewhere}\n            className=\"ConnectWalletRow__button\"\n            onClick={() => {\n              connectWallet('FAIL').catch((e) => {\n                console.log('Error connecting wallet', e);\n              });\n            }}\n          >\n            Verify\n          </button>\n        )}\n        {isConnected ? (\n          <p className=\"ConnectWalletRow__verified\">Verified</p>\n        ) : null}\n      </div>\n      {isConnectedElsewhere ? (\n        <>\n          <div className=\"ConnectWalletRow__messageRow\">\n            This wallet is already connected to another Notifi Hub account. If\n            you continue, this wallet can only be used to access this account.\n            You will lose access to the subscriptions in your other account.\n          </div>\n          <div className=\"ConnectWalletRow__bottomRow\">\n            <button\n              disabled={disabled || isLoading}\n              className=\"ConnectWalletRow__connectAnywayButton\"\n              onClick={() => {\n                connectWallet('DISCONNECT_AND_CLOSE_OLD_ACCOUNT').catch((e) => {\n                  console.log('Error connecting wallet', e);\n                });\n              }}\n            >\n              Verify anyway\n            </button>\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n};\n","import { WalletWithSignParams } from '@notifi-network/notifi-frontend-client';\nimport { Types } from '@notifi-network/notifi-graphql';\nimport React from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { ConnectWalletRow } from './ConnectWalletRow';\n\nexport type WalletListInternalProps = Readonly<{\n  connectedWallets: ReadonlyArray<Types.ConnectedWalletFragmentFragment>;\n  ownedWallets: ReadonlyArray<WalletWithSignParams>;\n  disabled: boolean;\n}>;\n\nexport const WalletListInternal: React.FC<WalletListInternalProps> = ({\n  connectedWallets,\n  ownedWallets,\n  disabled,\n}: WalletListInternalProps) => {\n  return (\n    <ul>\n      {ownedWallets.map((wallet) => {\n        return (\n          <ConnectWalletRow\n            key={wallet.walletPublicKey}\n            {...wallet}\n            connectedWallets={connectedWallets}\n            disabled={disabled}\n          />\n        );\n      })}\n    </ul>\n  );\n};\nexport const WalletList: React.FC = () => {\n  const {\n    params: { multiWallet },\n  } = useNotifiClientContext();\n  const { connectedWallets, loading } = useNotifiSubscriptionContext();\n  const owned = multiWallet?.ownedWallets;\n  if (owned === undefined || owned.length === 0) {\n    return null;\n  }\n\n  return (\n    <WalletListInternal\n      ownedWallets={owned}\n      connectedWallets={connectedWallets.filter(\n        (wallet): wallet is Types.ConnectedWalletFragmentFragment => !!wallet,\n      )}\n      disabled={loading}\n    />\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nexport type NotifiCardButtonProps = Readonly<{\n  classNames?: Readonly<{\n    button?: string;\n    label?: string;\n  }>;\n  buttonText: string;\n  disabled?: boolean;\n  onClick?: () => void;\n}>;\n\nconst NotifiCardButton: React.FC<NotifiCardButtonProps> = ({\n  buttonText,\n  classNames,\n  disabled,\n  onClick,\n}) => {\n  return (\n    <button\n      className={clsx('NotifiCardButton__button', classNames?.button)}\n      disabled={disabled}\n      onClick={onClick}\n    >\n      <span className={clsx('NotifiCardButtonn__label', classNames?.label)}>\n        {buttonText}\n      </span>\n    </button>\n  );\n};\n\nexport default NotifiCardButton;\n","import clsx from 'clsx';\nimport {\n  useNotifiSubscribe,\n  useSubscriptionCard,\n} from 'notifi-react-card/lib/hooks';\nimport React, { useEffect, useMemo } from 'react';\n\nimport {\n  useNotifiClientContext,\n  useNotifiSubscriptionContext,\n} from '../../context';\nimport { DeepPartialReadonly } from '../../utils';\nimport { NotifiFooter, NotifiFooterProps } from '../NotifiFooter';\nimport { LoadingStateCard, LoadingStateCardProps } from '../common';\nimport { ErrorStateCard, ErrorStateCardProps } from '../common/ErrorStateCard';\nimport { FetchedStateCard, FetchedStateCardProps } from './FetchedStateCard';\nimport type { NotifiSubscribeButtonProps } from './NotifiSubscribeButton';\n\nexport type NotifiInputSeparators = {\n  emailSeparator?: {\n    classNames?: {\n      container: string;\n      content: string;\n    };\n    content: string;\n  };\n  smsSeparator?: {\n    classNames?: {\n      container: string;\n      content: string;\n    };\n    content: string;\n  };\n  telegramSeparator?: {\n    classNames?: {\n      container: string;\n      content: string;\n    };\n    content: string;\n  };\n};\n\nexport type NotifiInputFieldsText = {\n  label?: {\n    email?: string;\n    sms?: string;\n    telegram?: string;\n  };\n  placeholderText?: { email?: string; sms?: string; telegram?: string };\n};\n\nexport type NotifiSubscriptionCardProps = Readonly<{\n  copy?: DeepPartialReadonly<{\n    ErrorStateCard: ErrorStateCardProps['copy'];\n    FetchedStateCard: FetchedStateCardProps['copy'];\n    LoadingStateCard: LoadingStateCardProps['copy'];\n  }>;\n  classNames?: Readonly<{\n    container?: string;\n    ErrorStateCard?: ErrorStateCardProps['classNames'];\n    FetchedStateCard?: FetchedStateCardProps['classNames'];\n    LoadingStateCard?: LoadingStateCardProps['classNames'];\n    NotifiSubscribeButton?: NotifiSubscribeButtonProps['classNames'];\n    NotifiFooter?: NotifiFooterProps['classNames'];\n  }>;\n  loadingSpinnerSize?: string;\n  loadingRingColor?: string;\n  disclosureCopy?: string;\n  inputLabels?: NotifiInputFieldsText;\n  darkMode?: boolean;\n  cardId: string;\n  inputs?: Record<string, unknown>;\n  inputSeparators?: NotifiInputSeparators;\n  onClose?: () => void;\n}>;\n\nexport const NotifiSubscriptionCard: React.FC<\n  React.PropsWithChildren<NotifiSubscriptionCardProps>\n> = ({\n  classNames,\n  copy,\n  cardId,\n  darkMode,\n  inputLabels,\n  inputs = {},\n  inputSeparators,\n  disclosureCopy,\n  children,\n  loadingRingColor,\n  loadingSpinnerSize,\n  onClose,\n}) => {\n  const { isInitialized, reload, isAuthenticated } = useNotifiSubscribe({\n    targetGroupName: 'Default',\n  });\n  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();\n\n  const { isClientInitialized, isClientAuthenticated } = useMemo(() => {\n    return {\n      isClientInitialized: isUsingFrontendClient\n        ? !!frontendClient.userState\n        : isInitialized,\n      isClientAuthenticated: isUsingFrontendClient\n        ? frontendClient.userState?.status === 'authenticated'\n        : isAuthenticated,\n    };\n  }, [\n    isUsingFrontendClient,\n    isInitialized,\n    frontendClient.userState?.status,\n    isAuthenticated,\n  ]);\n\n  const { loading, render } = useNotifiSubscriptionContext();\n\n  const inputDisabled = loading || !isClientInitialized;\n\n  const card = useSubscriptionCard({\n    id: cardId,\n    type: 'SUBSCRIPTION_CARD',\n  });\n\n  let contents: React.ReactNode = null;\n\n  useEffect(() => {\n    const handler = () => {\n      // Ensure target is up-to-date after user returns to tab from 3rd party verification site\n      if (!isClientInitialized || !isClientAuthenticated) {\n        return;\n      }\n      if (isUsingFrontendClient) {\n        return frontendClient.fetchData().then(render);\n      }\n      reload();\n    };\n\n    window.addEventListener('focus', handler);\n    return () => {\n      window.removeEventListener('focus', handler);\n    };\n  }, [\n    isClientInitialized,\n    isAuthenticated,\n    isClientAuthenticated,\n    isUsingFrontendClient,\n    frontendClient,\n  ]);\n\n  switch (card.state) {\n    case 'loading':\n      contents = (\n        <LoadingStateCard\n          copy={copy?.LoadingStateCard}\n          spinnerSize={loadingSpinnerSize}\n          ringColor={loadingRingColor}\n          classNames={classNames?.LoadingStateCard}\n          onClose={onClose}\n        />\n      );\n      break;\n    case 'error':\n      contents = (\n        <ErrorStateCard\n          copy={copy?.ErrorStateCard}\n          classNames={classNames?.ErrorStateCard}\n          reason={card.reason}\n          onClose={onClose}\n        />\n      );\n      break;\n    case 'fetched':\n      contents = (\n        <FetchedStateCard\n          classNames={classNames?.FetchedStateCard}\n          copy={copy?.FetchedStateCard}\n          card={card}\n          inputs={inputs}\n          inputDisabled={inputDisabled}\n          inputLabels={inputLabels}\n          inputSeparators={inputSeparators}\n          onClose={onClose}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div\n      className={clsx(\n        darkMode ? 'notifi__dark' : 'notifi__light',\n        'NotifiSubscriptionCard__container',\n        classNames?.container,\n      )}\n      data-cy=\"notifiSubscriptionCardContainer\"\n    >\n      {children}\n      {contents}\n      <NotifiFooter\n        classNames={classNames?.NotifiFooter}\n        copy={{ disclosure: disclosureCopy }}\n      />\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport {\n  formatConversationDateTimestamp,\n  formatConversationStartTimestamp,\n} from '../../utils/datetimeUtils';\n\nexport type ChatMessageDateProps = Readonly<{\n  classNames?: Readonly<{\n    container: string;\n    content: string;\n    body: string;\n  }>;\n  createdDate: string;\n  isStartDate?: boolean;\n}>;\n\nexport const ChatMessageDate: React.FC<ChatMessageDateProps> = ({\n  classNames,\n  createdDate,\n  isStartDate = true,\n}) => {\n  return (\n    <div\n      className={clsx(\n        'NotifiIntercomChatMessageDate__container',\n        classNames?.container,\n      )}\n    >\n      <div\n        className={clsx(\n          'NotifiIntercomChatMessageDate__body',\n          classNames?.body,\n        )}\n      >\n        <div\n          className={clsx(\n            'NotifiIntercomChatMessageDate__content',\n            classNames?.content,\n          )}\n        >\n          {isStartDate\n            ? formatConversationStartTimestamp(createdDate)\n            : formatConversationDateTimestamp(createdDate)}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { format, parseISO } from 'date-fns';\n\nexport const sortByDate = <T>(\n  getDate: (item: T) => Date,\n  direction: 'ASC' | 'DESC',\n): ((a: T, b: T) => number) => {\n  return (a, b) => {\n    const aDate = getDate(a);\n    const bDate = getDate(b);\n\n    switch (direction) {\n      case 'ASC':\n        return aDate.getTime() - bDate.getTime();\n      case 'DESC':\n        return bDate.getTime() - aDate.getTime();\n    }\n  };\n};\n\nexport const formatConversationDateTimestamp = (date: string): string => {\n  try {\n    const parsedDate = parseISO(date);\n    const month = parsedDate.toLocaleString('default', { month: 'short' });\n    const day = format(parsedDate, 'd');\n\n    return `${month} ${day}`;\n  } catch {\n    return '';\n  }\n};\n\nexport const formatHourTimestamp = (date: string): string => {\n  const parsedDate = parseISO(date);\n  return format(parsedDate, 'H:mm');\n};\n\nexport const formatConversationStartTimestamp = (date: string): string => {\n  try {\n    const parsedDate = parseISO(date);\n    const month = parsedDate.toLocaleString('default', { month: 'short' });\n    const day = format(parsedDate, 'd');\n\n    const finalTimestamp = isToday(parsedDate) ? 'Today' : `${month} ${day}`;\n    return finalTimestamp;\n  } catch {\n    return '';\n  }\n};\n\nexport const isToday = (date: Date) => {\n  const today = new Date();\n\n  return (\n    date.getDate() == today.getDate() &&\n    date.getMonth() == today.getMonth() &&\n    date.getFullYear() == today.getFullYear()\n  );\n};\n","import React from 'react';\nimport { Virtuoso } from 'react-virtuoso';\n\nimport { useNotifiSubscriptionContext } from '../../context';\nimport { useIntercomChat } from '../../hooks/useIntercomChat';\nimport { ChatMessageDate, ChatMessageDateProps } from './ChatMessageDate';\nimport {\n  ChatWindowIntroSection,\n  ChatWindowIntroSectionProps,\n} from './ChatWindowIntroSection';\nimport { MessageList, MessageListProps } from './MessageList';\nimport {\n  SendMessageSection,\n  SendMessageSectionProps,\n} from './SendMessageSection';\n\nexport type ChatMessageSectionProps = Readonly<{\n  classNames?: Readonly<{\n    chatWindowIntro: ChatWindowIntroSectionProps['classNames'];\n    messageList: MessageListProps['classNames'];\n    date: ChatMessageDateProps['classNames'];\n    sendMessageSection: SendMessageSectionProps['classNames'];\n  }>;\n  chatIntroQuestion: string;\n}>;\n\nexport const ChatMessageSection: React.FC<ChatMessageSectionProps> = ({\n  classNames,\n  chatIntroQuestion,\n}) => {\n  const { conversationId, userId } = useNotifiSubscriptionContext();\n  const {\n    conversation,\n    setIsScrolling,\n    setVisibleRange,\n    setAtTop,\n    isLoading,\n    hasNextPage,\n    sendConversationMessages,\n  } = useIntercomChat({\n    conversationId,\n    userId,\n  });\n\n  return (\n    <>\n      {conversation.feed.length === 0 ? (\n        <ChatWindowIntroSection\n          chatIntroQuestion={chatIntroQuestion}\n          classNames={classNames?.chatWindowIntro}\n          startDate={conversation.createdDate}\n        />\n      ) : (\n        <Virtuoso\n          //TODO: improvement to add the scrollSeekConfiguration property\n          atTopStateChange={setAtTop}\n          className=\"virtual-container\"\n          data={conversation.feed}\n          followOutput=\"auto\"\n          isScrolling={setIsScrolling}\n          rangeChanged={setVisibleRange}\n          itemContent={(index, feed) => {\n            const isFirstIndexOnLastPage = index === 0 && !hasNextPage;\n            return (\n              <div key={index}>\n                {isLoading ? (\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'center',\n                      padding: '10px',\n                    }}\n                  >\n                    Loading...\n                  </div>\n                ) : null}\n                {isFirstIndexOnLastPage && (\n                  <ChatWindowIntroSection\n                    classNames={classNames?.chatWindowIntro}\n                    startDate={conversation.createdDate}\n                    chatIntroQuestion={chatIntroQuestion}\n                    inVirtualContainerStyle={\n                      'ChatWindowIntro__virtualContainer'\n                    }\n                  />\n                )}\n                {index != 0 && !feed.isSameDate && (\n                  <ChatMessageDate\n                    classNames={classNames?.date}\n                    createdDate={feed.timestamp}\n                    isStartDate={false}\n                  />\n                )}\n                <MessageList classNames={classNames?.messageList} feed={feed} />\n              </div>\n            );\n          }}\n          style={{\n            flexGrow: 1,\n            scrollbarGutter: 'stable',\n            overflowY: 'scroll',\n          }}\n        />\n      )}\n      <SendMessageSection\n        classNames={classNames?.sendMessageSection}\n        sendConversationMessages={sendConversationMessages}\n      />\n    </>\n  );\n};\n","import { Types } from '@notifi-network/notifi-graphql';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ListRange } from 'react-virtuoso';\n\nimport { useNotifiClientContext } from '../context';\nimport {\n  formatConversationDateTimestamp,\n  sortByDate,\n} from '../utils/datetimeUtils';\n\ntype MessageDirection = 'INCOMING' | 'OUTGOING';\n\ntype MessagesBlockFeedEntry = Readonly<{\n  type: 'MESSAGES_BLOCK';\n  direction: MessageDirection;\n  messages: Types.ConversationMessageFragment[];\n}>;\n\nexport type FeedEntry = {\n  id: string;\n  timestamp: string;\n  isSameDate: boolean | undefined;\n} & MessagesBlockFeedEntry;\n\ntype UseIntercomChatProps = Readonly<{\n  userId?: string;\n  conversationId: string;\n}>;\n\nconst MESSAGES_NUMBER = 5;\n\nexport const useIntercomChat = ({\n  conversationId,\n  userId,\n}: UseIntercomChatProps) => {\n  const [chatMessages, setChatMessages] = useState<\n    Types.ConversationMessageFragment[]\n  >([]);\n  const [endCursor, setEndCursor] = useState<string | undefined>();\n  const [hasNextPage, setHasNextPage] = useState<boolean | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [atTop, setAtTop] = useState<boolean>(false);\n  const [visibleRange, setVisibleRange] = useState<ListRange>({\n    startIndex: 0,\n    endIndex: 0,\n  });\n  const [isScrolling, setIsScrolling] = useState<boolean | null>();\n  const { client } = useNotifiClientContext();\n\n  useEffect(() => {\n    const intervalId = setInterval(function () {\n      client\n        .getConversationMessages({\n          first: 50,\n          getConversationMessagesInput: { conversationId },\n        })\n        .then((response) => {\n          if (Array.isArray(response.nodes)) {\n            const nodes = response.nodes;\n            const chatMessageIds = new Set(\n              chatMessages.map((message) => message.id),\n            );\n            const dedupeNewMessages = nodes.filter(\n              (node) => chatMessageIds.has(node.id) === false,\n            );\n            const dedupeMessages = [...dedupeNewMessages, ...chatMessages];\n            const sortedMessages = dedupeMessages.sort(\n              sortByDate((message) => new Date(message.createdDate), 'DESC'),\n            );\n            setChatMessages([...sortedMessages]);\n          }\n        });\n    }, 5000);\n    return () => clearInterval(intervalId);\n  }, [chatMessages]);\n\n  const getConversationMessages = useCallback(\n    (first = MESSAGES_NUMBER) => {\n      setIsLoading(true);\n      if (conversationId) {\n        client\n          .getConversationMessages({\n            first,\n            after: endCursor,\n            getConversationMessagesInput: { conversationId },\n          })\n          .then((response) => {\n            if (Array.isArray(response.nodes)) {\n              setChatMessages([...chatMessages, ...response.nodes]);\n            }\n            if (response.pageInfo) {\n              setEndCursor(response.pageInfo.endCursor);\n              setHasNextPage(response.pageInfo.hasNextPage);\n            }\n            setIsLoading(false);\n          });\n      }\n    },\n    [conversationId, endCursor, chatMessages],\n  );\n\n  // initialization - load first batch of messages\n  useEffect(() => {\n    getConversationMessages();\n  }, []);\n\n  // load more messages when scrolling to the top\n  useEffect(() => {\n    if (hasNextPage && atTop && isScrolling && visibleRange.startIndex === 0) {\n      getConversationMessages();\n    }\n  }, [\n    getConversationMessages,\n    hasNextPage,\n    atTop,\n    isScrolling,\n    visibleRange.startIndex,\n  ]);\n\n  const conversation = useMemo(() => {\n    //put the conversation into message group\n    const messageGroups: Types.ConversationMessageFragment[][] = [];\n\n    let messages: Types.ConversationMessageFragment[] = [];\n\n    chatMessages?.forEach((message, index) => {\n      const nextMessage = chatMessages[index + 1];\n      const isSameUserId = message?.userId === nextMessage?.userId;\n      const isSameDate =\n        formatConversationDateTimestamp(message?.createdDate) ===\n        formatConversationDateTimestamp(nextMessage?.createdDate);\n      messages.unshift(message);\n      if (!isSameUserId || !isSameDate) {\n        messageGroups.unshift(messages);\n        messages = [];\n      }\n    });\n\n    const feed = messageGroups.map((messageGroup, index): FeedEntry => {\n      const firstMessage = messageGroup[0];\n\n      const isSameDate = () => {\n        if (messageGroups.length === 1 && index === 0) {\n          return false;\n        } else if (index >= 1) {\n          const prevMessageGroup = messageGroups[index - 1];\n          const prevGroupFirstMessage = prevMessageGroup[0];\n          return (\n            formatConversationDateTimestamp(firstMessage?.createdDate) ===\n            formatConversationDateTimestamp(prevGroupFirstMessage?.createdDate)\n          );\n        }\n      };\n\n      return {\n        isSameDate: isSameDate(),\n        direction: firstMessage?.userId === userId ? 'OUTGOING' : 'INCOMING',\n        id: firstMessage?.id,\n        messages: messageGroup,\n        timestamp: firstMessage?.createdDate,\n        type: 'MESSAGES_BLOCK',\n      };\n    });\n\n    return {\n      feed,\n      createdDate:\n        chatMessages?.[chatMessages.length - 1]?.createdDate ??\n        new Date().toISOString(),\n      lastMessage: chatMessages?.[0],\n    };\n  }, [chatMessages, conversationId]);\n\n  const sendConversationMessages = useCallback(\n    (message: string) => {\n      if (message === '') {\n        return;\n      } else {\n        client\n          .sendConversationMessages({\n            sendConversationMessageInput: {\n              conversationId,\n              message,\n            },\n          })\n          .then((response) => {\n            setChatMessages([response, ...chatMessages]);\n          });\n      }\n    },\n    [conversationId, chatMessages],\n  );\n\n  return {\n    conversation,\n    getConversationMessages,\n    setIsScrolling,\n    setVisibleRange,\n    setAtTop,\n    hasNextPage,\n    isLoading,\n    sendConversationMessages,\n  };\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { ChatMessageDate, ChatMessageDateProps } from './ChatMessageDate';\n\nexport type ChatWindowIntroSectionProps = Readonly<{\n  classNames?: Readonly<{\n    container: string;\n    content: string;\n    date: ChatMessageDateProps['classNames'];\n  }>;\n  startDate: string;\n  inVirtualContainerStyle?: string;\n  chatIntroQuestion: string;\n}>;\n\nexport const ChatWindowIntroSection: React.FC<\n  React.PropsWithChildren<ChatWindowIntroSectionProps>\n> = ({\n  classNames,\n  startDate,\n  children,\n  inVirtualContainerStyle,\n  chatIntroQuestion,\n}) => {\n  return (\n    <div\n      className={clsx(\n        'NotifiIntercomChatMessageSection__container',\n        inVirtualContainerStyle,\n        classNames?.container,\n      )}\n    >\n      <ChatMessageDate classNames={classNames?.date} createdDate={startDate} />\n      <div\n        className={clsx(\n          'NotifiIntercomChatMessageSectionIntro__content',\n          classNames?.content,\n        )}\n      >\n        {chatIntroQuestion}\n      </div>\n      {children}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { FeedEntry } from '../../hooks/useIntercomChat';\nimport { MessageGroup, MessageGroupProps } from './MessageGroup';\n\nexport type MessageListProps = Readonly<{\n  classNames?: Readonly<{\n    container: string;\n    messageGroup: MessageGroupProps['classNames'];\n    avatar: string;\n  }>;\n  feed: FeedEntry;\n}>;\n\nexport const MessageList: React.FC<MessageListProps> = ({\n  classNames,\n  feed,\n}) => {\n  const isIncoming = feed.direction === 'INCOMING';\n  const participantProfile = feed.messages[0].conversationParticipant?.profile;\n  return (\n    <div\n      className={clsx(\n        'NotifiIntercomChatMessageList__container',\n        classNames?.container,\n      )}\n    >\n      {isIncoming ? (\n        <div\n          className={clsx(\n            'NotifiIntercomChatMessageList__groupContainer',\n            classNames?.container,\n          )}\n        >\n          <img\n            src={\n              participantProfile?.avatarDataType === 'URL'\n                ? participantProfile.avatarData\n                : ''\n            }\n            onError={(e) => {\n              const img = e.target as HTMLImageElement;\n              img.style.display = 'none';\n            }}\n            className={clsx(\n              'NotifiIntercomChatMessage__avatar',\n              classNames?.avatar,\n            )}\n          />\n          <MessageGroup\n            classNames={classNames?.messageGroup}\n            messages={feed.messages}\n            direction={feed.direction}\n          />\n        </div>\n      ) : (\n        <>\n          <MessageGroup\n            classNames={classNames?.messageGroup}\n            messages={feed.messages}\n            direction={feed.direction}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import { Types } from '@notifi-network/notifi-graphql';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { formatHourTimestamp } from '../../utils/datetimeUtils';\n\nexport type MessageGroupProps = Readonly<{\n  classNames?: Readonly<{\n    messageGroupContainer: string;\n    messageContainer: string;\n    messageBody: string;\n    timeStamp: string;\n    sender: string;\n  }>;\n  messages: Types.ConversationMessageFragment[];\n  direction: string;\n}>;\nexport const MessageGroup: React.FC<MessageGroupProps> = ({\n  classNames,\n  messages,\n  direction,\n}) => {\n  const isIncoming = direction === 'INCOMING';\n  return (\n    <div\n      className={clsx(\n        isIncoming\n          ? 'NotifiIntercomChatIncomingMessageGroup__container'\n          : 'NotifiIntercomChatOutgoingMessageGroup__container',\n        classNames?.messageGroupContainer,\n      )}\n    >\n      {messages.map((message, index) => {\n        return (\n          <div\n            className={clsx(\n              isIncoming\n                ? 'NotifiIntercomChatIncomingMessage__container'\n                : 'NotifiIntercomChatOutgoingMessage__container',\n              classNames?.messageContainer,\n            )}\n            key={index}\n          >\n            <div\n              key={index}\n              className={clsx(\n                isIncoming\n                  ? 'NotifiIntercomChatIncomingMessage__body'\n                  : 'NotifiIntercomChatOutgoingMessage__body',\n                classNames?.messageBody,\n              )}\n            >\n              {isIncoming && index === 0 ? (\n                <div\n                  className={clsx(\n                    'NotifiIntercomChatOutgoingMessage__sender',\n                    classNames?.sender,\n                  )}\n                >\n                  {message.conversationParticipant?.resolvedName}\n                </div>\n              ) : null}\n              <div key={index}>{message.message}</div>\n              <div\n                className={clsx(\n                  'NotifiIntercomChatOutgoingMessage__timeStamp',\n                  classNames?.timeStamp,\n                )}\n              >\n                {formatHourTimestamp(message.createdDate)}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React, { useCallback, useState } from 'react';\n\nexport type SendMessageSectionProps = Readonly<{\n  classNames?: Readonly<{\n    container: string;\n    textarea: string;\n    button: string;\n  }>;\n  sendConversationMessages: (message: string) => void;\n}>;\n\nexport const SendMessageSection: React.FC<SendMessageSectionProps> = ({\n  classNames,\n  sendConversationMessages,\n}) => {\n  const [sendMessage, setSendMessage] = useState<string | undefined>(undefined);\n  const disabled =\n    sendMessage?.trim().length === 0 || sendMessage === undefined;\n\n  const handleSend = () => {\n    if (sendMessage) {\n      sendConversationMessages(sendMessage);\n      setSendMessage('');\n    }\n  };\n\n  const handleKeypressUp = useCallback(\n    (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      if (event.key === 'Enter' && !event.shiftKey && !disabled) {\n        handleSend();\n        event.preventDefault();\n      }\n    },\n    [handleSend],\n  );\n\n  return (\n    <div\n      className={clsx(\n        'NotifiIntercomSendMessageSection__container',\n        classNames?.container,\n      )}\n    >\n      <textarea\n        onKeyUp={(e) => handleKeypressUp(e)}\n        className={clsx(\n          'NotifiIntercomSendMessageSection__textarea',\n          classNames?.textarea,\n        )}\n        value={sendMessage}\n        onChange={(e) => {\n          setSendMessage(e.target.value ?? '');\n        }}\n        placeholder={'Write a message...'}\n      />\n      <button\n        disabled={disabled}\n        onClick={handleSend}\n        className={clsx(\n          'NotifiIntercomSendMessageSection__button',\n          classNames?.button,\n        )}\n      >\n        Send\n      </button>\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { useNotifiSubscriptionContext } from 'notifi-react-card/lib/context';\nimport React from 'react';\n\nimport { ChatIcon } from '../../assets/ChatIcon';\nimport { SettingIcon } from '../../assets/SettingIcon';\n\nexport type ChatWindowHeaderProps = Readonly<{\n  classNames?: Readonly<{\n    container: string;\n    content: string;\n  }>;\n  chatWindowHeaderContent: string;\n}>;\n\nexport const ChatWindowHeader: React.FC<ChatWindowHeaderProps> = ({\n  classNames,\n  chatWindowHeaderContent,\n}) => {\n  const { setIntercomCardView } = useNotifiSubscriptionContext();\n  const handleClick = () => {\n    setIntercomCardView({ state: 'settingView' });\n  };\n  return (\n    <div\n      className={clsx('NotifiIntercomHeader__container', classNames?.container)}\n    >\n      <div className={'NotifiIntercomHeader__leftContainer'}>\n        <ChatIcon width={25} height={24} />\n        <div\n          className={clsx('NotifiIntercomHeader__content', classNames?.content)}\n        >\n          {chatWindowHeaderContent}\n        </div>\n      </div>\n      <div\n        onClick={handleClick}\n        className={'NotifiIntercomChatWindow__settingIcon'}\n      >\n        <SettingIcon />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport type Props = React.SVGProps<SVGSVGElement>;\n\nexport const ChatIcon: React.FC<Props> = (props: Props) => {\n  return (\n    <svg\n      viewBox=\"0 0 25 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M3.15311 3.40909C3.15311 2.07859 4.2317 1 5.5622 1H17.0455C18.376 1 19.4545 2.07859 19.4545 3.40909V6.81818C19.4545 8.14869 18.376 9.22727 17.0455 9.22727H4.96513C4.60464 9.22727 4.2455 9.27148 3.89577 9.35892L2.08876 9.81067C2.04981 9.82041 2.02716 9.81574 2.01212 9.8104C1.99287 9.80356 1.97002 9.78898 1.95023 9.76483C1.93043 9.74069 1.92062 9.71542 1.91769 9.6952C1.9154 9.67941 1.91526 9.65628 1.93245 9.62L2.72868 7.93906C3.00814 7.34909 3.15311 6.70441 3.15311 6.05159V3.40909Z\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n      />\n      <path\n        d=\"M20.9831 16.0454C20.9831 14.7149 19.9045 13.6364 18.574 13.6364H7.09077C5.76027 13.6364 4.68168 14.7149 4.68168 16.0454V19.4545C4.68168 20.785 5.76027 21.8636 7.09078 21.8636H19.1711C19.5316 21.8636 19.8907 21.9078 20.2405 21.9953L22.0475 22.447C22.0864 22.4568 22.1091 22.4521 22.1241 22.4467C22.1434 22.4399 22.1662 22.4253 22.186 22.4012C22.2058 22.377 22.2156 22.3518 22.2185 22.3316C22.2208 22.3158 22.221 22.2926 22.2038 22.2564L21.4075 20.5754C21.1281 19.9854 20.9831 19.3408 20.9831 18.6879V16.0454Z\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n      />\n      <mask id=\"path-3-inside-1_136_525\" fill=\"white\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M11.6362 17.75C11.6362 18.3776 12.1449 18.8864 12.7725 18.8864C13.4001 18.8864 13.9089 18.3776 13.9089 17.75C13.9089 17.1224 13.4001 16.6136 12.7725 16.6136C12.1449 16.6136 11.6362 17.1224 11.6362 17.75ZM16.1816 17.75C16.1816 18.3776 16.6904 18.8864 17.318 18.8864C17.9456 18.8864 18.4543 18.3776 18.4543 17.75C18.4543 17.1224 17.9456 16.6137 17.318 16.6137C16.6904 16.6137 16.1816 17.1224 16.1816 17.75ZM8.22709 18.8864C7.59949 18.8864 7.09073 18.3776 7.09073 17.75C7.09073 17.1224 7.59949 16.6136 8.22709 16.6136C8.85469 16.6136 9.36345 17.1224 9.36345 17.75C9.36345 18.3776 8.85469 18.8864 8.22709 18.8864Z\"\n        />\n      </mask>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M11.6362 17.75C11.6362 18.3776 12.1449 18.8864 12.7725 18.8864C13.4001 18.8864 13.9089 18.3776 13.9089 17.75C13.9089 17.1224 13.4001 16.6136 12.7725 16.6136C12.1449 16.6136 11.6362 17.1224 11.6362 17.75ZM16.1816 17.75C16.1816 18.3776 16.6904 18.8864 17.318 18.8864C17.9456 18.8864 18.4543 18.3776 18.4543 17.75C18.4543 17.1224 17.9456 16.6137 17.318 16.6137C16.6904 16.6137 16.1816 17.1224 16.1816 17.75ZM8.22709 18.8864C7.59949 18.8864 7.09073 18.3776 7.09073 17.75C7.09073 17.1224 7.59949 16.6136 8.22709 16.6136C8.85469 16.6136 9.36345 17.1224 9.36345 17.75C9.36345 18.3776 8.85469 18.8864 8.22709 18.8864Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M12.7725 20.8864C11.0404 20.8864 9.63618 19.4822 9.63618 17.75H13.6362C13.6362 17.273 13.2495 16.8864 12.7725 16.8864V20.8864ZM15.9089 17.75C15.9089 19.4822 14.5047 20.8864 12.7725 20.8864V16.8864C12.2956 16.8864 11.9089 17.273 11.9089 17.75H15.9089ZM12.7725 14.6136C14.5047 14.6136 15.9089 16.0178 15.9089 17.75H11.9089C11.9089 18.227 12.2956 18.6136 12.7725 18.6136V14.6136ZM9.63618 17.75C9.63618 16.0178 11.0404 14.6136 12.7725 14.6136V18.6136C13.2495 18.6136 13.6362 18.227 13.6362 17.75H9.63618ZM17.318 20.8864C15.5858 20.8864 14.1816 19.4822 14.1816 17.75H18.1816C18.1816 17.273 17.795 16.8864 17.318 16.8864V20.8864ZM20.4543 17.75C20.4543 19.4822 19.0501 20.8864 17.318 20.8864V16.8864C16.841 16.8864 16.4543 17.273 16.4543 17.75H20.4543ZM17.318 14.6137C19.0501 14.6137 20.4543 16.0178 20.4543 17.75H16.4543C16.4543 18.227 16.841 18.6137 17.318 18.6137V14.6137ZM14.1816 17.75C14.1816 16.0178 15.5858 14.6137 17.318 14.6137V18.6137C17.795 18.6137 18.1816 18.227 18.1816 17.75H14.1816ZM9.09073 17.75C9.09073 17.273 8.70406 16.8864 8.22709 16.8864V20.8864C6.49492 20.8864 5.09073 19.4822 5.09073 17.75H9.09073ZM8.22709 18.6136C8.70406 18.6136 9.09073 18.227 9.09073 17.75H5.09073C5.09073 16.0178 6.49492 14.6136 8.22709 14.6136V18.6136ZM7.36345 17.75C7.36345 18.227 7.75012 18.6136 8.22709 18.6136V14.6136C9.95926 14.6136 11.3635 16.0178 11.3635 17.75H7.36345ZM8.22709 16.8864C7.75012 16.8864 7.36345 17.273 7.36345 17.75H11.3635C11.3635 19.4822 9.95926 20.8864 8.22709 20.8864V16.8864Z\"\n        fill=\"currentColor\"\n        mask=\"url(#path-3-inside-1_136_525)\"\n      />\n    </svg>\n  );\n};\n","import {\n  EventTypeItem,\n  IntercomCardConfigItemV1,\n} from '@notifi-network/notifi-frontend-client';\nimport { Types } from '@notifi-network/notifi-graphql';\nimport clsx from 'clsx';\nimport { useNotifiClientContext } from 'notifi-react-card/lib/context';\nimport { subscribeAlertByFrontendClient } from 'notifi-react-card/lib/utils';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { useNotifiForm, useNotifiSubscriptionContext } from '../../context/';\nimport { SubscriptionData, useNotifiSubscribe } from '../../hooks';\nimport { LabelType } from '../../hooks/IntercomCardConfig';\nimport { chatConfiguration } from '../../utils/AlertConfiguration';\nimport {\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n} from '../subscription/NotifiSubscriptionCard';\nimport {\n  NotifiIntercomChatWindowContainer,\n  NotifiIntercomChatWindowContainerProps,\n} from './NotifiIntercomChatWindowContainer';\nimport { NotifiIntercomFTUNotificationTargetSection } from './NotifiIntercomFTUNotificationTargetSection';\nimport {\n  NotifiStartChatButton,\n  NotifiStartChatButtonProps,\n} from './NotifiStartChatButton';\nimport { SettingHeader, SettingHeaderProps } from './SettingHeader';\n\nexport type IntercomCardProps = Readonly<{\n  classNames?: Readonly<{\n    container?: string;\n    title?: string;\n    subtitle1?: string;\n    subtitle2?: string;\n    NotifiStartChatButton?: NotifiStartChatButtonProps['classNames'];\n    NotifiIntercomChatWindowContainer?: NotifiIntercomChatWindowContainerProps['classNames'];\n    NotifiIntercomSettingHeader: SettingHeaderProps['classNames'];\n    errorMessage: string;\n  }>;\n  inputLabels?: NotifiInputFieldsText;\n  inputs?: Record<string, string | undefined>;\n  inputSeparators?: NotifiInputSeparators;\n  data: IntercomCardConfigItemV1;\n}>;\n\ntype LabelsMap = Record<LabelType, string | null>;\n\nexport const IntercomCard: React.FC<\n  React.PropsWithChildren<IntercomCardProps>\n> = ({\n  classNames,\n  inputLabels,\n  inputs = {},\n  inputSeparators,\n  data,\n}: React.PropsWithChildren<IntercomCardProps>) => {\n  const [chatAlertErrorMessage, setChatAlertErrorMessage] =\n    useState<string>('');\n\n  const { instantSubscribe, isAuthenticated, isInitialized } =\n    useNotifiSubscribe({\n      targetGroupName: 'Intercom',\n    });\n\n  const { client, isUsingFrontendClient, frontendClient } =\n    useNotifiClientContext();\n\n  const { isClientInitialized, isClientAuthenticated } = useMemo(() => {\n    return {\n      isClientInitialized: isUsingFrontendClient\n        ? !!frontendClient.userState\n        : isInitialized,\n      isClientAuthenticated: isUsingFrontendClient\n        ? frontendClient.userState?.status === 'authenticated'\n        : isAuthenticated,\n    };\n  }, [isUsingFrontendClient, client, frontendClient]);\n\n  const subscribeAlert = useCallback(\n    async (\n      alertDetail: Readonly<{\n        eventType: EventTypeItem;\n        inputs: Record<string, unknown>;\n      }>,\n    ): Promise<SubscriptionData> => {\n      if (isUsingFrontendClient) {\n        return subscribeAlertByFrontendClient(frontendClient, alertDetail);\n      } else {\n        return instantSubscribe({\n          alertConfiguration: chatConfiguration(),\n          alertName: alertName,\n        });\n      }\n    },\n    [isUsingFrontendClient, frontendClient],\n  );\n\n  useEffect(() => {\n    if (isClientAuthenticated && isClientInitialized && hasChanges === false) {\n      checkForExistingTargetGroups();\n    }\n  }, [instantSubscribe, isClientAuthenticated, isClientInitialized]);\n\n  const {\n    alerts,\n    intercomCardView,\n    loading,\n    setConversationId,\n    setHasChatAlert,\n    setIntercomCardView,\n    setUserId,\n  } = useNotifiSubscriptionContext();\n\n  const {\n    formErrorMessages,\n    formState,\n    setEmail: setFormEmail,\n    setTelegram: setFormTelegram,\n    hasChanges,\n  } = useNotifiForm();\n\n  const { email, phoneNumber, telegram: telegramId } = formState;\n\n  const {\n    email: emailErrorMessage,\n    phoneNumber: smsErrorMessage,\n    telegram: telegramErrorMessage,\n  } = formErrorMessages;\n\n  const createSupportConversation = useCallback(() => {\n    if (isUsingFrontendClient) {\n      return frontendClient\n        .createSupportConversation(\n          inputs as Types.CreateSupportConversationMutationVariables,\n        )\n        .then((result) => {\n          result.createSupportConversation.participants?.forEach(\n            (participant) => {\n              if (participant?.conversationParticipantType === 'MEMBER') {\n                setUserId(participant.profile.id);\n              }\n            },\n          );\n          setConversationId(result.createSupportConversation.id);\n          setIntercomCardView({\n            state: 'chatWindowView',\n          });\n        });\n    }\n\n    return client.createSupportConversation().then((result) => {\n      result.participants.forEach((participant) => {\n        if (participant.conversationParticipantType === 'MEMBER') {\n          setUserId(participant.profile.id);\n        }\n      });\n      setConversationId(result.id);\n      setIntercomCardView({\n        state: 'chatWindowView',\n      });\n    });\n  }, [inputs]);\n\n  const checkForExistingTargetGroups = useCallback((): void => {\n    for (const alert of Object.values(alerts)) {\n      if (!alert) continue;\n      const { targetGroup } = alert;\n\n      const confirmedEmailTarget = targetGroup.emailTargets?.find(\n        (email) => email?.isConfirmed === true,\n      );\n\n      if (confirmedEmailTarget?.emailAddress) {\n        setFormEmail(confirmedEmailTarget.emailAddress);\n      }\n\n      const confirmedTelegramTarget = targetGroup.telegramTargets?.find(\n        (telegram) => telegram?.isConfirmed === true,\n      );\n\n      if (confirmedTelegramTarget?.telegramId) {\n        setFormTelegram(confirmedTelegramTarget?.telegramId);\n      }\n\n      if (confirmedEmailTarget || confirmedTelegramTarget) {\n        break;\n      }\n\n      const unconfirmedEmailTarget = targetGroup.emailTargets?.find(\n        (email) => email?.isConfirmed === false,\n      );\n\n      setFormEmail(unconfirmedEmailTarget?.emailAddress ?? '');\n      const unconfirmedTelegramTarget = targetGroup.telegramTargets?.find(\n        (telegram) => telegram?.isConfirmed === false,\n      );\n\n      setFormTelegram(unconfirmedTelegramTarget?.telegramId ?? '');\n\n      if (unconfirmedEmailTarget || unconfirmedTelegramTarget) {\n        break;\n      }\n    }\n  }, [alerts]);\n\n  const alertName = 'NOTIFI_CHAT_MESSAGES';\n  useEffect(() => {\n    if (\n      loading ||\n      !isClientInitialized ||\n      intercomCardView.state === 'settingView'\n    ) {\n      return;\n    }\n\n    const hasAlert = alerts[alertName] !== undefined;\n\n    setHasChatAlert(hasAlert);\n    if (hasAlert) {\n      createSupportConversation();\n    } else {\n      setIntercomCardView({\n        state: 'startChatView',\n      });\n    }\n  }, [alerts, loading, isClientInitialized]);\n\n  const hasErrors =\n    emailErrorMessage !== '' ||\n    smsErrorMessage !== '' ||\n    telegramErrorMessage !== '';\n  const disabled =\n    (email === '' && telegramId === '' && phoneNumber === '') || hasErrors;\n\n  const labels = data.labels;\n  const labelsValues = {} as LabelsMap;\n\n  labels.forEach((label) => {\n    labelsValues[label.type] = label.name;\n  });\n  const companySupportTitle =\n    labelsValues.ChatFTUTitle || 'Your Company Support';\n  const companySupportSubtitle =\n    labelsValues.ChatFTUSubTitle ||\n    'Start chatting with our team to get support. We’re here for you 24/7!';\n  const companySupportDescription =\n    labelsValues.ChatFTUDescription ||\n    'Get notifications for your support request';\n  const companyHeaderContent =\n    labelsValues.ChatBannerTitle || 'Company Support';\n  const chatIntroQuestion =\n    labelsValues.ChatIntroQuestion || 'What can we help you with today?';\n\n  const handleStartChatClick = async () => {\n    if (loading) {\n      return;\n    }\n    try {\n      await subscribeAlert({\n        eventType: {\n          type: 'createSupportConversation',\n          name: alertName,\n          sourceType: 'NOTIFI_CHAT',\n          filterType: 'NOTIFI_CHAT_MESSAGES',\n          alertFrequency: 'THREE_MINUTES',\n        },\n        inputs,\n      });\n      const result = await client.createSupportConversation();\n      setConversationId(result.id);\n      result.participants.forEach((participant) => {\n        if (participant.conversationParticipantType === 'MEMBER') {\n          setUserId(participant.profile.id);\n        }\n      });\n\n      setIntercomCardView({ state: 'chatWindowView' });\n    } catch (e) {\n      //TODO: use useErrorHandler hook instead of setTimeout to handle error messages\n      setChatAlertErrorMessage('An error occurred, please try again.');\n      setTimeout(() => {\n        setChatAlertErrorMessage('');\n      }, 5000);\n    }\n  };\n\n  let view = null;\n\n  switch (intercomCardView.state) {\n    case 'startChatView':\n      view = (\n        <>\n          <h1 className={clsx('NotifiIntercomCard__title', classNames?.title)}>\n            {companySupportTitle}\n          </h1>\n          <div\n            className={clsx(\n              'NotifiIntercomCard__subtitle1',\n              classNames?.subtitle1,\n            )}\n          >\n            {companySupportSubtitle}\n          </div>\n          <div\n            className={clsx(\n              'NotifiIntercomCard__subtitle2',\n              classNames?.subtitle2,\n            )}\n          >\n            {companySupportDescription}\n          </div>\n          <NotifiIntercomFTUNotificationTargetSection\n            data={data}\n            inputSeparators={inputSeparators}\n            inputTextFields={inputLabels}\n            inputs={inputs}\n          />\n          <label\n            className={clsx(\n              'NotifiEmailInput__errorMessage',\n              classNames?.errorMessage,\n            )}\n          >\n            {chatAlertErrorMessage}\n          </label>\n          <NotifiStartChatButton\n            classNames={classNames?.NotifiStartChatButton}\n            disabled={disabled}\n            onClick={handleStartChatClick}\n          />\n        </>\n      );\n      break;\n    case 'chatWindowView':\n      view = (\n        <NotifiIntercomChatWindowContainer\n          chatIntroQuestion={chatIntroQuestion}\n          chatWindowHeaderContent={companyHeaderContent}\n          classNames={classNames?.NotifiIntercomChatWindowContainer}\n        />\n      );\n      break;\n\n    case 'settingView':\n      view = (\n        <>\n          <SettingHeader classNames={classNames?.NotifiIntercomSettingHeader} />\n          <div className={'NotifiIntercomCardSettingContent__container'}>\n            <div\n              className={clsx(\n                'NotifiIntercomCard__subtitle2',\n                classNames?.subtitle2,\n              )}\n            >\n              {companySupportDescription}\n            </div>\n            <NotifiIntercomFTUNotificationTargetSection\n              data={data}\n              inputSeparators={inputSeparators}\n              inputTextFields={inputLabels}\n              inputs={inputs}\n            />\n            <label\n              className={clsx(\n                'NotifiEmailInput__errorMessage',\n                classNames?.errorMessage,\n              )}\n            >\n              {chatAlertErrorMessage}\n            </label>\n            <NotifiStartChatButton\n              classNames={classNames?.NotifiStartChatButton}\n              disabled={disabled}\n              onClick={handleStartChatClick}\n            />\n          </div>\n        </>\n      );\n      break;\n    case 'loadingView':\n      view = (\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n          }}\n        >\n          Loading&#8230;\n        </div>\n      );\n      break;\n  }\n  return <>{view}</>;\n};\n","import React from 'react';\n\nimport {\n  ChatMessageSection,\n  ChatMessageSectionProps,\n} from './ChatMessageSection';\nimport { ChatWindowHeader, ChatWindowHeaderProps } from './ChatWindowHeader';\nimport { SendMessageSectionProps } from './SendMessageSection';\n\nexport type NotifiIntercomChatWindowContainerProps = Readonly<{\n  classNames?: Readonly<{\n    container: string;\n    header?: ChatWindowHeaderProps['classNames'];\n    chatMessageSection?: ChatMessageSectionProps['classNames'];\n    sendMessageSection?: SendMessageSectionProps['classNames'];\n  }>;\n  chatIntroQuestion: string;\n  chatWindowHeaderContent: string;\n}>;\n\nexport const NotifiIntercomChatWindowContainer: React.FC<\n  React.PropsWithChildren<NotifiIntercomChatWindowContainerProps>\n> = ({\n  classNames,\n  chatWindowHeaderContent,\n  chatIntroQuestion,\n}: React.PropsWithChildren<NotifiIntercomChatWindowContainerProps>) => {\n  return (\n    <>\n      <ChatWindowHeader\n        classNames={classNames?.header}\n        chatWindowHeaderContent={chatWindowHeaderContent}\n      />\n      <ChatMessageSection\n        classNames={classNames?.chatMessageSection}\n        chatIntroQuestion={chatIntroQuestion}\n      />\n    </>\n  );\n};\n","import { IntercomCardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { NotifiEmailInput, NotifiEmailInputProps } from '../NotifiEmailInput';\nimport { NotifiSmsInput, NotifiSmsInputProps } from '../NotifiSmsInput';\nimport {\n  NotifiTelegramInput,\n  NotifiTelegramInputProps,\n} from '../NotifiTelegramInput';\nimport {\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n} from '../subscription/NotifiSubscriptionCard';\nimport { NotifiToggleProps } from '../subscription/NotifiToggle';\n\nexport type NotifiIntercomFTUNotificationTargetSectionProps = Readonly<{\n  classNames?: Readonly<{\n    NotifiEmailInput?: NotifiEmailInputProps['classNames'];\n    NotifiSmsInput?: NotifiSmsInputProps['classNames'];\n    NotifiTelegramInput?: NotifiTelegramInputProps['classNames'];\n    container: string;\n    label: string;\n    toggle: NotifiToggleProps['classNames'];\n  }>;\n  data: IntercomCardConfigItemV1;\n  inputs: Record<string, unknown>;\n  inputTextFields?: NotifiInputFieldsText;\n  inputSeparators?: NotifiInputSeparators;\n}>;\n\nexport const NotifiIntercomFTUNotificationTargetSection: React.FC<\n  NotifiIntercomFTUNotificationTargetSectionProps\n> = ({ data, inputSeparators, classNames, inputTextFields }) => {\n  const allowedCountryCodes = [...data.contactInfo.sms.supportedCountryCodes];\n\n  return (\n    <div className={'NotifiSupportNotificationOption__container'}>\n      {data.contactInfo.email.active ? (\n        <NotifiEmailInput\n          disabled={false}\n          classNames={classNames?.NotifiEmailInput}\n          copy={{ label: inputTextFields?.label?.email }}\n          intercomEmailInputContainerStyle={\n            'NotifiIntercomEmailInput__container'\n          }\n          intercomEmailInputStyle={'NotifiIntercomEmailInput__input'}\n          intercomView={true}\n        />\n      ) : null}\n      {inputSeparators?.emailSeparator?.content ? (\n        <div\n          className={clsx(\n            'NotifiInputSeparator__container',\n            'NotifiIntercomInputSeparator__container',\n            inputSeparators?.emailSeparator?.classNames?.container,\n          )}\n        >\n          <div\n            className={clsx(\n              'NotifiInputSeparator__content',\n              inputSeparators.emailSeparator.classNames?.content,\n            )}\n          >\n            {inputSeparators?.emailSeparator?.content}\n          </div>\n        </div>\n      ) : null}\n      {data.contactInfo.sms.active ? (\n        <NotifiSmsInput\n          disabled={false}\n          classNames={classNames?.NotifiSmsInput}\n          allowedCountryCodes={allowedCountryCodes}\n          copy={{ label: inputTextFields?.label?.sms }}\n          intercomSmsInputContainerStyle={'NotifiIntercomSmsInput__container'}\n          intercomSmsInputStyle={'NotifiIntercomSmsInput__input'}\n          intercomSmsDropdownContainerStyle={\n            'NotifiIntercomSmsInput__dropdownContainer'\n          }\n          intercomSmsDropdownSelectStyle={\n            'NotifiIntercomSmsInput__dropdownSelect'\n          }\n          intercomView={true}\n        />\n      ) : null}\n      {inputSeparators?.smsSeparator?.content ? (\n        <div\n          className={clsx(\n            'NotifiInputSeparator__container',\n            'NotifiIntercomInputSeparator__container',\n            inputSeparators?.smsSeparator?.classNames?.container,\n          )}\n        >\n          <div\n            className={clsx(\n              'NotifiInputSeparator__content',\n              inputSeparators.smsSeparator.classNames?.content,\n            )}\n          >\n            {inputSeparators?.smsSeparator?.content}\n          </div>\n        </div>\n      ) : null}\n      {data.contactInfo.telegram.active ? (\n        <NotifiTelegramInput\n          disabled={false}\n          classNames={classNames?.NotifiTelegramInput}\n          copy={{ label: inputTextFields?.label?.telegram }}\n          intercomTelegramInputContainerStyle={\n            'NotifiIntercomTelegramInput__container'\n          }\n          intercomTelegramInputStyle={'NotifiIntercomTelegramInput__input'}\n          intercomView={true}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { useNotifiSubscriptionContext } from 'notifi-react-card/lib/context';\nimport React from 'react';\n\nexport type NotifiStartChatButtonProps = Readonly<{\n  classNames?: Readonly<{\n    button?: string;\n    label?: string;\n  }>;\n  disabled: boolean;\n  onClick: () => void;\n}>;\n\nexport const NotifiStartChatButton: React.FC<NotifiStartChatButtonProps> = ({\n  classNames,\n  disabled,\n  onClick,\n}) => {\n  const { intercomCardView } = useNotifiSubscriptionContext();\n  return (\n    <button\n      disabled={disabled}\n      className={clsx('NotifiStartChatButton__button', classNames?.button)}\n      onClick={onClick}\n    >\n      <span className={clsx('NotifiStartChatButton__label', classNames?.label)}>\n        {intercomCardView.state === 'settingView'\n          ? 'Save Changes'\n          : 'Start Chatting'}\n      </span>\n    </button>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { BackArrowIcon } from '../../assets/BackArrowIcon';\nimport { useNotifiSubscriptionContext } from '../../context';\n\nexport type SettingHeaderProps = Readonly<{\n  classNames?: Readonly<{\n    container: string;\n    content: string;\n  }>;\n}>;\n\nexport const SettingHeader: React.FC<SettingHeaderProps> = ({ classNames }) => {\n  const { setIntercomCardView } = useNotifiSubscriptionContext();\n  const handleClick = () => {\n    setIntercomCardView({ state: 'chatWindowView' });\n  };\n  return (\n    <div\n      className={clsx('NotifiIntercomHeader__container', classNames?.container)}\n    >\n      <div className={'NotifiIntercomHeader__leftContainer'}>\n        <div\n          onClick={handleClick}\n          className={'NotifiIntercomSettingHeader__backArrow'}\n        >\n          <BackArrowIcon />\n        </div>\n        <div\n          className={clsx('NotifiIntercomHeader__content', classNames?.content)}\n        >\n          Settings\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport {\n  NotifiFormProvider,\n  NotifiSubscriptionContextProvider,\n  useNotifiClientContext,\n} from '../../context';\nimport type { ErrorStateCardProps } from '../common';\nimport type { LoadingStateCardProps } from '../common';\nimport {\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n} from '../subscription/NotifiSubscriptionCard';\nimport { NotifiIntercomCardContainer } from './NotifiIntercomCardContainer';\nimport { NotifiIntercomChatWindowContainerProps } from './NotifiIntercomChatWindowContainer';\nimport type { NotifiStartChatButtonProps } from './NotifiStartChatButton';\nimport { SettingHeaderProps } from './SettingHeader';\n\nexport type NotifiIntercomCardProps = Readonly<{\n  classNames?: Readonly<{\n    container?: string;\n    title?: string;\n    subtitle1?: string;\n    subtitle2?: string;\n    ErrorStateCard?: ErrorStateCardProps['classNames'];\n    LoadingStateCard?: LoadingStateCardProps['classNames'];\n    NotifiStartChatButton?: NotifiStartChatButtonProps['classNames'];\n    NotifiIntercomChatWindowContainer?: NotifiIntercomChatWindowContainerProps['classNames'];\n    NotifiIntercomSettingHeader: SettingHeaderProps['classNames'];\n    errorMessage: string;\n  }>;\n  inputLabels?: NotifiInputFieldsText;\n  darkMode?: boolean;\n  inputs?: Record<string, string | undefined>;\n  inputSeparators?: NotifiInputSeparators;\n  cardId: string;\n}>;\n\nexport const NotifiIntercomCard: React.FC<\n  React.PropsWithChildren<NotifiIntercomCardProps>\n> = (props: React.PropsWithChildren<NotifiIntercomCardProps>) => {\n  const { params } = useNotifiClientContext();\n\n  return (\n    <NotifiSubscriptionContextProvider {...params}>\n      <NotifiFormProvider>\n        <NotifiIntercomCardContainer {...props} />\n      </NotifiFormProvider>\n    </NotifiSubscriptionContextProvider>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { useIntercomCard } from '../../hooks/useIntercomCard';\nimport { ErrorStateCard, LoadingStateCard } from '../common';\nimport { IntercomCard } from './IntercomCard';\nimport { NotifiIntercomCardProps } from './NotifiIntercomCard';\n\nexport const NotifiIntercomCardContainer: React.FC<\n  React.PropsWithChildren<NotifiIntercomCardProps>\n> = ({\n  classNames,\n  darkMode,\n  inputLabels,\n  inputs = {},\n  inputSeparators,\n  children,\n  cardId,\n}: React.PropsWithChildren<NotifiIntercomCardProps>) => {\n  let contents: React.ReactNode = null;\n  const card = useIntercomCard(cardId);\n\n  switch (card.state) {\n    case 'loading':\n      contents = <LoadingStateCard classNames={classNames?.LoadingStateCard} />;\n      break;\n    case 'error':\n      contents = (\n        <ErrorStateCard\n          classNames={classNames?.ErrorStateCard}\n          reason={card.reason}\n        />\n      );\n      break;\n    case 'fetched':\n      contents = (\n        <IntercomCard\n          data={card.data}\n          inputs={inputs}\n          inputLabels={inputLabels}\n          inputSeparators={inputSeparators}\n          classNames={classNames}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div\n      className={clsx(\n        darkMode ? 'notifi__dark' : 'notifi__light',\n        'NotifiIntercomCard__container',\n        classNames?.container,\n      )}\n    >\n      {children}\n      {contents}\n    </div>\n  );\n};\n","import { IntercomCardConfigItemV1 } from '@notifi-network/notifi-frontend-client';\nimport { useEffect, useState } from 'react';\n\nimport { useNotifiClientContext } from '../context';\n\nexport type Data = IntercomCardConfigItemV1;\n\nexport type LoadingState = Readonly<{\n  state: 'loading';\n}>;\n\nexport type FetchedState = Readonly<{\n  state: 'fetched';\n  data: Data;\n}>;\n\nexport type ErrorState = Readonly<{\n  state: 'error';\n  reason: unknown;\n}>;\n\nexport type IntercomCardState = LoadingState | FetchedState | ErrorState;\n\nexport const useIntercomCard = (cardId: string): IntercomCardState => {\n  const [state, setState] = useState<IntercomCardState>({\n    state: 'loading',\n  });\n\n  const { client, isUsingFrontendClient, frontendClient } =\n    useNotifiClientContext();\n\n  useEffect(() => {\n    setState({ state: 'loading' });\n    let card: IntercomCardConfigItemV1 | undefined;\n    (isUsingFrontendClient ? frontendClient : client)\n      .fetchSubscriptionCard({\n        type: 'INTERCOM_CARD',\n        id: cardId,\n      })\n      .then((result) => {\n        if ('dataJson' in result) {\n          if (!result.dataJson) {\n            return Promise.reject(new Error('Failed to fetch data'));\n          }\n          card = JSON.parse(result.dataJson);\n        } else if ('version' in result) {\n          card = result as IntercomCardConfigItemV1;\n        }\n\n        if (card?.version !== 'IntercomV1') {\n          return Promise.reject(new Error('Unsupported config format'));\n        }\n\n        setState({\n          state: 'fetched',\n          data: card,\n        });\n      })\n      .catch((error: unknown) => {\n        setState({\n          state: 'error',\n          reason: error,\n        });\n      });\n  }, [cardId]);\n\n  return state;\n};\n"],"mappings":"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AE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CA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","names":["React","React","React","_a","_b","React","React","createContext","useContext","useState","createContext","useState","value","formErrorMessages","React","useContext","useMemo","React","createContext","useCallback","useContext","useEffect","useState","ParseError","code","Object","setPrototypeOf","prototype","name","constructor","Error","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS","a","b","split","pa","pb","i","na","Number","nb","isNaN","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","metadata","_classCallCheck","validateMetadata","setVersion","call","Object","keys","countries","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","undefined","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","length","selectNumberingPlan","test","hasCountry","Error","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","type","ext","country_phone_code_to_countries","country_calling_codes","NumberingPlan","metadata","globalMetadataObject","_classCallCheck","setVersion","call","getNumberingPlanMetadata","callingCode","v1","v2","formats","_getFormats","getDefaultCountryMetadataForRegion","map","_","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","length","type","hasTypes","getType","Type","DEFAULT_EXT_PREFIX","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","test","possibleLengths","validateMetadata","Error","is_object","countries","Object","keys","join","type_of","_typeof","getCountryCallingCode","country","metadata","Metadata","hasCountry","countryCallingCode","Error","isSupportedCountry","countries","undefined","setVersion","version","v1","v2","v3","v4","compare","V3","V4","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","maxLength","VALID_DIGITS","purpose","extLimitAfterExplicitLabel","extLimitAfterLikelyLabel","extLimitAfterAmbiguousChar","extLimitWhenNotSure","possibleSeparatorsBetweenNumberAndExtLabel","possibleCharsAfterExtLabel","optionalExtnSuffix","explicitExtLabels","ambiguousExtLabels","ambiguousSeparator","possibleSeparatorsNumberExtLabelNoComma","autoDiallingAndExtLabelsFound","rfcExtn","explicitExtn","ambiguousExtn","americanStyleExtnWithSuffix","autoDiallingExtn","onlyCommasExtn","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_DIGITS","MIN_LENGTH_FOR_NSN","VALID_PHONE_NUMBER","PLUS_CHARS","VALID_PUNCTUATION","VALID_PHONE_NUMBER_START_REG_EXP","RegExp","VALID_PHONE_NUMBER_WITH_EXTENSION","createExtensionPattern","VALID_PHONE_NUMBER_PATTERN","number","length","test","isViablePhoneNumberStart","EXTN_PATTERN","RegExp","createExtensionPattern","number","start","search","numberWithoutExtension","slice","matches","match","i","length","ext","DIGITS","parseDigit","character","string","result","split","character","parsePhoneNumberCharacter","prevParsedCharacters","parseDigit","a","b","merged","slice","_createForOfIteratorHelperLoose","element","indexOf","push","sort","nationalNumber","metadata","checkNumberLengthForType","undefined","type","type_info","possible_lengths","possibleLengths","mobile_type","mergeArrays","actual_length","length","minimum_length","indexOf","input","options","metadata","undefined","Metadata","v2","countryCallingCode","Error","selectNumberingPlan","phone","country","hasCountry","possibleLengths","isPossibleNumber","nationalNumber","isNonGeographicCallingCode","checkNumberLength","parseRFC3966","text","number","ext","replace","_createForOfIteratorHelperLoose","split","part","name","value","isViablePhoneNumber","result","formatRFC3966","Error","text","regular_expression","RegExp","test","NON_FIXED_LINE_PHONE_TYPES","input","options","metadata","country","Metadata","selectNumberingPlan","countryCallingCode","nationalNumber","v2","phone","matchesEntirely","nationalNumberPattern","isNumberTypeEqualTo","type","pattern","_createForOfIteratorHelperLoose","possibleLengths","indexOf","length","input","options","metadata","Metadata","selectNumberingPlan","country","countryCallingCode","hasTypes","getNumberType","undefined","nationalNumber","v2","phone","matchesEntirely","nationalNumberPattern","callingCode","nationalNumber","metadata","_metadata","Metadata","possibleCountries","getCountryCodesForCallingCode","filter","country","couldNationalNumberBelongToCountry","selectNumberingPlan","numberingPlan","possibleLengths","indexOf","length","formattedNumber","replace","RegExp","VALID_PUNCTUATION","trim","FIRST_GROUP_PATTERN","number","format","useInternationalFormat","withNationalPrefix","carrierCode","metadata","formattedNumber","replace","RegExp","pattern","internationalFormat","nationalPrefixFormattingRule","applyInternationalSeparatorStyle","SINGLE_IDD_PREFIX_REG_EXP","country","callingCode","metadata","countryMetadata","Metadata","selectNumberingPlan","defaultIDDPrefix","test","IDDPrefix","DEFAULT_OPTIONS","formatExtension","formattedNumber","extension","metadata","ext","input","format","options","Metadata","country","hasCountry","Error","countryCallingCode","selectNumberingPlan","phone","nationalNumber","v2","number","formatNationalNumber","carrierCode","addExtension","formatRFC3966","fromCountry","formatIDD","formatAs","chooseFormatForNumber","formats","formatNationalNumberUsingFormat","useInternationalFormat","withNationalPrefix","nationalPrefixIsOptionalWhenFormattingInNationalFormat","nationalPrefix","availableFormats","nationalNnumber","_createForOfIteratorHelperLoose","leadingDigitsPatterns","length","lastLeadingDigitsPattern","search","matchesEntirely","pattern","fromCountryCallingCode","getCountryCallingCode","iddPrefix","getIddPrefix","undefined","USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber","countryOrCountryCallingCode","nationalNumber","metadata","_classCallCheck","TypeError","getCountryAndCountryCallingCode","country","countryCallingCode","number","ext","getPossibleCountriesForNumber","isPossibleNumber","v2","isValidNumber","Metadata","isNonGeographicCallingCode","phoneNumber","getType","getNumberType","format","options","formatNumber","_objectSpread","isCountryCode","value","test","getCountryAndCountryCallingCode","countryOrCountryCallingCode","metadataJson","country","countryCallingCode","metadata","Metadata","selectNumberingPlan","USE_NON_GEOGRAPHIC_COUNTRY_CODE","isNonGeographicCallingCode","CAPTURING_DIGIT_PATTERN","RegExp","VALID_DIGITS","number","country","callingCode","metadata","countryMetadata","Metadata","selectNumberingPlan","IDDPrefixPattern","IDDPrefix","search","slice","match","length","matchedGroups","number","metadata","numberingPlan","nationalPrefixForParsing","prefixPattern","RegExp","prefixMatch","exec","nationalNumber","carrierCode","capturedGroupsCount","length","hasCapturedGroups","nationalPrefixTransformRule","replace","prefixBeforeNationalNumber","slice","nationalPrefix","possiblePositionOfTheFirstCapturedGroup","indexOf","possibleNationalPrefix","number","metadata","extractNationalNumberFromPossiblyIncompleteNumber","carrierCode","nationalNumber","shouldHaveExtractedNationalPrefix","possibleLengths","isPossibleIncompleteNationalNumber","nationalNumberBefore","nationalNumberAfter","matchesEntirely","nationalNumberPattern","checkNumberLength","number","country","callingCode","metadata","countryCallingCode","getCountryCallingCode","indexOf","Metadata","selectNumberingPlan","possibleShorterNumber","slice","length","extractNationalNumber","possibleShorterNationalNumber","nationalNumber","matchesEntirely","nationalNumberPattern","checkNumberLength","number","country","callingCode","metadata","numberWithoutIDD","stripIddPrefix","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","countryCallingCode","shorterNumber","Metadata","i","MAX_LENGTH_COUNTRY_CODE","length","slice","hasCallingCode","selectNumberingPlan","possibleCountries","nationalPhoneNumber","metadata","Metadata","_createForOfIteratorHelperLoose","country","leadingDigits","search","getNumberType","phone","undefined","USE_NON_GEOGRAPHIC_COUNTRY_CODE","callingCode","nationalPhoneNumber","metadata","isNonGeographicCallingCode","possibleCountries","getCountryCodesForCallingCode","length","getCountryByNationalNumber","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","RegExp","PLUS_CHARS","VALID_DIGITS","AFTER_PHONE_NUMBER_END_PATTERN","USE_NON_GEOGRAPHIC_COUNTRY_CODE","text","options","metadata","Metadata","defaultCountry","hasCountry","v2","ParseError","Error","parseInput","extract","formattedPhoneNumber","number","ext","error","parsePhoneNumber","defaultCallingCode","country","nationalNumber","countryCallingCode","carrierCode","hasSelectedNumberingPlan","length","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","phoneNumber","PhoneNumber","valid","extended","matchesEntirely","nationalNumberPattern","result","possible","possibleLengths","isPossibleNumber","phone","extractFormattedPhoneNumber","throwOnError","startsAt","search","slice","replace","indexOf","parseRFC3966","isViablePhoneNumber","isViablePhoneNumberStart","withExtensionStripped","extractExtension","extractCountryCallingCode","parseIncompletePhoneNumber","selectNumberingPlan","isNonGeographicCallingCode","getCountryCallingCode","extractNationalNumber","exactCountry","getCountryByCallingCode","text","options","metadata","parse","_objectSpread","v2","args","Array","prototype","slice","call","_slicedToArray","arg_1","arg_2","arg_3","arg_4","text","options","metadata","TypeError","undefined","_objectSpread","defaultCountry","isObject","Error","_","_typeof","parsePhoneNumberWithError","normalizeArguments","arguments","text","options","metadata","parsePhoneNumberWithError_","parsePhoneNumber","text","options","metadata","defaultCountry","isSupportedCountry","_objectSpread","undefined","parsePhoneNumberWithError","error","ParseError","normalizeArguments","arguments","text","options","metadata","_objectSpread","extract","phoneNumber","parsePhoneNumber","isValid","parsePhoneNumberWithError","isValidPhoneNumber","useCallback","useEffect","useState","useState","useCallback","target","_a","useEffect","params","isValidPhoneNumber","useEffect","useState","useState","useEffect","result","useState","useEffect","useMemo","useState","useState","useMemo","_a","useEffect","unreadNotificationCount","useCallback","useCallback","result","useState","FtuStage","createContext","hasKey","_a","_b","useMemo","useState","value","destinationErrorMessages","useCallback","React","useEffect","alerts","phoneNumber","telegramId","useContext","React","React","createContext","useContext","useMemo","React","_a","clsx","React","clsx","React","React","React","React","clsx","clsx","React","useCallback","useEffect","useState","React","parsePhoneNumberWithError","clsx","React","useState","useCallback","isValidPhoneNumber","useEffect","React","clsx","clsx","React","React","React","clsx","_a","clsx","React","useCallback","useEffect","useMemo","useRef","useState","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","React","_a","React","React","clsx","React","clsx","React","useState","useMemo","useCallback","useRef","useEffect","React","clsx","clsx","React","useCallback","useEffect","useMemo","useRef","useState","useState","useRef","useMemo","UNABLE_TO_SUBSCRIBE","INVALID_NUMBER","_a","useEffect","useCallback","_b","React","clsx","clsx","React","useCallback","useEffect","useMemo","useRef","useState","useState","useMemo","useRef","useEffect","useCallback","React","clsx","clsx","React","useCallback","useEffect","useMemo","useState","useState","useMemo","useCallback","useEffect","React","clsx","clsx","React","useCallback","useEffect","useMemo","useRef","useState","useRef","useState","useMemo","useEffect","_a","useCallback","React","clsx","clsx","React","React","clsx","clsx","React","useCallback","useEffect","useMemo","useRef","useState","useState","useMemo","useRef","useEffect","useCallback","React","clsx","clsx","React","useCallback","useEffect","useMemo","useRef","useState","React","React","useMemo","useState","useRef","useEffect","React","clsx","name","description","useCallback","clsx","React","useCallback","useEffect","useMemo","useRef","useState","useMemo","useState","useRef","useEffect","React","clsx","useCallback","threshold","clsx","React","clsx","React","useCallback","useEffect","useMemo","useRef","useState","useState","useMemo","useRef","useEffect","useCallback","React","clsx","React","React","clsx","useMemo","useMemo","React","useCallback","useEffect","useMemo","useState","clsx","React","useMemo","useMemo","sanitizedBottomContentHtml","React","clsx","clsx","React","React","React","React","React","React","React","React","icons","React","React","clsx","clsx","React","useCallback","useState","React","clsx","React","React","clsx","useState","useCallback","React","clsx","clsx","React","React","clsx","clsx","React","useMemo","React","React","useMemo","React","clsx","clsx","React","useMemo","useMemo","React","clsx","clsx","React","React","clsx","clsx","React","React","React","clsx","clsx","React","clsx","React","useCallback","useMemo","useMemo","isValidPhoneNumber","useCallback","targetGroup","eventTypes","inputs","_a","_b","data","result","React","clsx","clsx","React","_a","React","clsx","clsx","React","clsx","React","React","clsx","clsx","React","React","clsx","React","clsx","React","clsx","clsx","React","result","React","clsx","clsx","React","useCallback","useEffect","useMemo","useRef","useState","React","React","clsx","React","React","clsx","useState","useRef","useMemo","_a","useCallback","result","useEffect","React","clsx","clsx","React","clsx","React","clsx","React","useCallback","useEffect","useMemo","useRef","useState","getParsedPercentage","getParsedPrice","useState","useRef","useMemo","UNABLE_TO_SUBSCRIBE","INVALID_NUMBER","_a","useEffect","useCallback","_b","React","clsx","clsx","React","useCallback","useEffect","useMemo","useRef","useState","useState","useMemo","useCallback","useRef","useEffect","React","clsx","clsx","React","useCallback","useEffect","useMemo","useRef","useState","useMemo","useState","useRef","useEffect","useCallback","React","clsx","React","clsx","clsx","React","React","React","useCallback","useMemo","useState","useState","useCallback","useMemo","React","clsx","React","clsx","clsx","React","useCallback","useMemo","React","useCallback","useMemo","useState","hasKey","useMemo","useState","useCallback","_a","React","React","React","clsx","React","useMemo","isValidPhoneNumber","useCallback","inputs","React","clsx","useMemo","_a","_b","isClientTokenExpired","isClientAuthenticated","useState","useCallback","useEffect","React","clsx","React","clsx","React","useEffect","useMemo","useMemo","_a","useEffect","React","clsx","clsx","React","format","parseISO","isToday","React","clsx","React","Virtuoso","useCallback","useEffect","useMemo","useState","useState","useEffect","useCallback","useMemo","clsx","React","React","clsx","clsx","React","clsx","React","React","clsx","React","clsx","clsx","React","useCallback","useState","React","Virtuoso","clsx","React","React","React","React","clsx","clsx","React","useCallback","useEffect","useMemo","useState","React","React","clsx","React","React","clsx","clsx","React","clsx","clsx","React","React","clsx","useState","useMemo","useCallback","useEffect","result","email","React","clsx","React","clsx","React","useEffect","useState","useState","useEffect","result","React","clsx","React"]}