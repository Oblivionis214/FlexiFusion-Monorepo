var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// lib/components/NotifiEmailInput.tsx
import clsx from "clsx";
import React7 from "react";

// lib/assets/EmailIcon.tsx
import React from "react";
var EmailIcon = ({ className }) => {
  return /* @__PURE__ */ React.createElement(
    "svg",
    {
      width: "13",
      height: "11",
      viewBox: "0 0 13 11",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className
    },
    /* @__PURE__ */ React.createElement(
      "path",
      {
        d: "M11.5 0.499996H1.5C0.8125 0.499996 0.25625 1.0625 0.25625 1.75L0.25 9.25C0.25 9.9375 0.8125 10.5 1.5 10.5H11.5C12.1875 10.5 12.75 9.9375 12.75 9.25V1.75C12.75 1.0625 12.1875 0.499996 11.5 0.499996ZM11.5 3L6.5 6.125L1.5 3V1.75L6.5 4.875L11.5 1.75V3Z",
        fill: "#B6B8D5"
      }
    )
  );
};

// lib/context/NotifiContext.tsx
import React5 from "react";

// lib/context/NotifiClientContext.tsx
import {
  newFrontendClient
} from "@notifi-network/notifi-frontend-client";
import { useNotifiClient } from "@notifi-network/notifi-react-hooks";
import React2, {
  createContext,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useState
} from "react";
var NotifiClientContext = createContext(
  {}
  // Intentially empty in default, use NotifiSubscriptionContextProvider
);
var getFrontendConfigInput = (params) => {
  if ("accountAddress" in params) {
    return {
      account: {
        address: params.accountAddress,
        publicKey: params.walletPublicKey
      },
      tenantId: params.dappAddress,
      walletBlockchain: params.walletBlockchain,
      env: params.env
    };
  } else {
    return {
      account: {
        publicKey: params.walletPublicKey
      },
      tenantId: params.dappAddress,
      walletBlockchain: params.walletBlockchain,
      env: params.env
    };
  }
};
var NotifiClientContextProvider = (_a) => {
  var _b = _a, {
    children
  } = _b, params = __objRest(_b, [
    "children"
  ]);
  var _a2;
  const [frontendClientStatus, setFrontendClientStatus] = useState({
    isExpired: false,
    isInitialized: false,
    isAuthenticated: false
  });
  const client = useNotifiClient(params);
  const frontendClient = useMemo(() => {
    const configInput = getFrontendConfigInput(params);
    const updatedFrontendClient = newFrontendClient(configInput);
    return updatedFrontendClient;
  }, [
    params.dappAddress,
    params.env,
    params.walletBlockchain,
    params.walletPublicKey
  ]);
  const updateFrontendClientStatus = useCallback(() => {
    var _a3, _b2;
    setFrontendClientStatus({
      isExpired: ((_a3 = frontendClient.userState) == null ? void 0 : _a3.status) === "expired",
      isInitialized: !!frontendClient,
      isAuthenticated: ((_b2 = frontendClient.userState) == null ? void 0 : _b2.status) === "authenticated"
    });
  }, [frontendClient]);
  const isClientInitialized = useMemo(() => {
    return params.isUsingFrontendClient ? !!frontendClient.userState : client.isInitialized;
  }, [params.isUsingFrontendClient, client, frontendClient]);
  useEffect(() => {
    frontendClient.initialize().then(() => updateFrontendClientStatus());
  }, [frontendClient]);
  if (!isClientInitialized)
    return null;
  return /* @__PURE__ */ React2.createElement(
    NotifiClientContext.Provider,
    {
      value: {
        client,
        params,
        isUsingFrontendClient: (_a2 = params.isUsingFrontendClient) != null ? _a2 : true,
        frontendClient,
        frontendClientStatus,
        updateFrontendClientStatus
      }
    },
    children
  );
};
var useNotifiClientContext = () => useContext(NotifiClientContext);

// lib/context/NotifiFormContext.tsx
import React3, {
  createContext as createContext2,
  useContext as useContext2,
  useState as useState2
} from "react";
var NotifiFormContext = createContext2({});
var NotifiFormProvider = ({
  children
}) => {
  const [hasChanges, setHasChanges] = useState2(false);
  const [formState, setFormInput] = useState2({
    email: "",
    phoneNumber: "",
    telegram: "",
    discord: ""
  });
  const [formErrorMessages, setInputErrorMessage] = useState2(
    {
      email: "",
      telegram: "",
      phoneNumber: "",
      discord: ""
    }
  );
  const handleFormInput = ({ field, value: value2 }) => {
    setFormInput((formErrorMessages2) => __spreadProps(__spreadValues({}, formErrorMessages2), {
      [field]: value2
    }));
  };
  const handleErrorMessage = ({ field, value: value2 }) => {
    setInputErrorMessage((formErrorMessages2) => __spreadProps(__spreadValues({}, formErrorMessages2), {
      [field]: value2
    }));
  };
  const setEmail = (value2) => {
    handleFormInput({ field: "email", value: value2 });
  };
  const setEmailErrorMessage = (value2) => {
    handleErrorMessage({ field: "email", value: value2 });
  };
  const setTelegram = (value2) => {
    handleFormInput({ field: "telegram", value: value2 });
  };
  const setTelegramErrorMessage = (value2) => {
    handleErrorMessage({ field: "telegram", value: value2 });
  };
  const setPhoneNumber = (value2) => {
    handleFormInput({ field: "phoneNumber", value: value2 });
  };
  const setPhoneNumberErrorMessage = (value2) => {
    handleErrorMessage({ field: "phoneNumber", value: value2 });
  };
  const value = {
    formState,
    formErrorMessages,
    hasChanges,
    setHasChanges,
    setEmail,
    setEmailErrorMessage,
    setTelegram,
    setTelegramErrorMessage,
    setPhoneNumber,
    setPhoneNumberErrorMessage
  };
  return /* @__PURE__ */ React3.createElement(NotifiFormContext.Provider, { value }, children);
};
var useNotifiForm = () => {
  const data = useContext2(NotifiFormContext);
  return data;
};

// lib/context/NotifiSubscriptionContext.tsx
import { useMemo as useMemo3 } from "react";
import React4, {
  createContext as createContext3,
  useCallback as useCallback4,
  useContext as useContext3,
  useEffect as useEffect5,
  useState as useState8
} from "react";

// ../../node_modules/libphonenumber-js/metadata.min.json.js
var metadata_min_json_default = { "version": 4, "country_calling_codes": { "1": ["US", "AG", "AI", "AS", "BB", "BM", "BS", "CA", "DM", "DO", "GD", "GU", "JM", "KN", "KY", "LC", "MP", "MS", "PR", "SX", "TC", "TT", "VC", "VG", "VI"], "7": ["RU", "KZ"], "20": ["EG"], "27": ["ZA"], "30": ["GR"], "31": ["NL"], "32": ["BE"], "33": ["FR"], "34": ["ES"], "36": ["HU"], "39": ["IT", "VA"], "40": ["RO"], "41": ["CH"], "43": ["AT"], "44": ["GB", "GG", "IM", "JE"], "45": ["DK"], "46": ["SE"], "47": ["NO", "SJ"], "48": ["PL"], "49": ["DE"], "51": ["PE"], "52": ["MX"], "53": ["CU"], "54": ["AR"], "55": ["BR"], "56": ["CL"], "57": ["CO"], "58": ["VE"], "60": ["MY"], "61": ["AU", "CC", "CX"], "62": ["ID"], "63": ["PH"], "64": ["NZ"], "65": ["SG"], "66": ["TH"], "81": ["JP"], "82": ["KR"], "84": ["VN"], "86": ["CN"], "90": ["TR"], "91": ["IN"], "92": ["PK"], "93": ["AF"], "94": ["LK"], "95": ["MM"], "98": ["IR"], "211": ["SS"], "212": ["MA", "EH"], "213": ["DZ"], "216": ["TN"], "218": ["LY"], "220": ["GM"], "221": ["SN"], "222": ["MR"], "223": ["ML"], "224": ["GN"], "225": ["CI"], "226": ["BF"], "227": ["NE"], "228": ["TG"], "229": ["BJ"], "230": ["MU"], "231": ["LR"], "232": ["SL"], "233": ["GH"], "234": ["NG"], "235": ["TD"], "236": ["CF"], "237": ["CM"], "238": ["CV"], "239": ["ST"], "240": ["GQ"], "241": ["GA"], "242": ["CG"], "243": ["CD"], "244": ["AO"], "245": ["GW"], "246": ["IO"], "247": ["AC"], "248": ["SC"], "249": ["SD"], "250": ["RW"], "251": ["ET"], "252": ["SO"], "253": ["DJ"], "254": ["KE"], "255": ["TZ"], "256": ["UG"], "257": ["BI"], "258": ["MZ"], "260": ["ZM"], "261": ["MG"], "262": ["RE", "YT"], "263": ["ZW"], "264": ["NA"], "265": ["MW"], "266": ["LS"], "267": ["BW"], "268": ["SZ"], "269": ["KM"], "290": ["SH", "TA"], "291": ["ER"], "297": ["AW"], "298": ["FO"], "299": ["GL"], "350": ["GI"], "351": ["PT"], "352": ["LU"], "353": ["IE"], "354": ["IS"], "355": ["AL"], "356": ["MT"], "357": ["CY"], "358": ["FI", "AX"], "359": ["BG"], "370": ["LT"], "371": ["LV"], "372": ["EE"], "373": ["MD"], "374": ["AM"], "375": ["BY"], "376": ["AD"], "377": ["MC"], "378": ["SM"], "380": ["UA"], "381": ["RS"], "382": ["ME"], "383": ["XK"], "385": ["HR"], "386": ["SI"], "387": ["BA"], "389": ["MK"], "420": ["CZ"], "421": ["SK"], "423": ["LI"], "500": ["FK"], "501": ["BZ"], "502": ["GT"], "503": ["SV"], "504": ["HN"], "505": ["NI"], "506": ["CR"], "507": ["PA"], "508": ["PM"], "509": ["HT"], "590": ["GP", "BL", "MF"], "591": ["BO"], "592": ["GY"], "593": ["EC"], "594": ["GF"], "595": ["PY"], "596": ["MQ"], "597": ["SR"], "598": ["UY"], "599": ["CW", "BQ"], "670": ["TL"], "672": ["NF"], "673": ["BN"], "674": ["NR"], "675": ["PG"], "676": ["TO"], "677": ["SB"], "678": ["VU"], "679": ["FJ"], "680": ["PW"], "681": ["WF"], "682": ["CK"], "683": ["NU"], "685": ["WS"], "686": ["KI"], "687": ["NC"], "688": ["TV"], "689": ["PF"], "690": ["TK"], "691": ["FM"], "692": ["MH"], "850": ["KP"], "852": ["HK"], "853": ["MO"], "855": ["KH"], "856": ["LA"], "880": ["BD"], "886": ["TW"], "960": ["MV"], "961": ["LB"], "962": ["JO"], "963": ["SY"], "964": ["IQ"], "965": ["KW"], "966": ["SA"], "967": ["YE"], "968": ["OM"], "970": ["PS"], "971": ["AE"], "972": ["IL"], "973": ["BH"], "974": ["QA"], "975": ["BT"], "976": ["MN"], "977": ["NP"], "992": ["TJ"], "993": ["TM"], "994": ["AZ"], "995": ["GE"], "996": ["KG"], "998": ["UZ"] }, "countries": { "AC": ["247", "00", "(?:[01589]\\d|[46])\\d{4}", [5, 6]], "AD": ["376", "00", "(?:1|6\\d)\\d{7}|[135-9]\\d{5}", [6, 8, 9], [["(\\d{3})(\\d{3})", "$1 $2", ["[135-9]"]], ["(\\d{4})(\\d{4})", "$1 $2", ["1"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]]]], "AE": ["971", "00", "(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}", [5, 6, 7, 8, 9, 10, 11, 12], [["(\\d{3})(\\d{2,9})", "$1 $2", ["60|8"]], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[236]|[479][2-8]"], "0$1"], ["(\\d{3})(\\d)(\\d{5})", "$1 $2 $3", ["[479]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"]], "0"], "AF": ["93", "00", "[2-7]\\d{8}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"]], "0"], "AG": ["1", "011", "(?:268|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([457]\\d{6})$|1", "268$1", 0, "268"], "AI": ["1", "011", "(?:264|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2457]\\d{6})$|1", "264$1", 0, "264"], "AL": ["355", "00", "(?:700\\d\\d|900)\\d{3}|8\\d{5,7}|(?:[2-5]|6\\d)\\d{7}", [6, 7, 8, 9], [["(\\d{3})(\\d{3,4})", "$1 $2", ["80|9"], "0$1"], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["4[2-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2358][2-5]|4"], "0$1"], ["(\\d{3})(\\d{5})", "$1 $2", ["[23578]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["6"], "0$1"]], "0"], "AM": ["374", "00", "(?:[1-489]\\d|55|60|77)\\d{6}", [8], [["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[89]0"], "0 $1"], ["(\\d{3})(\\d{5})", "$1 $2", ["2|3[12]"], "(0$1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["1|47"], "(0$1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["[3-9]"], "0$1"]], "0"], "AO": ["244", "00", "[29]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[29]"]]]], "AR": ["54", "00", "(?:11|[89]\\d\\d)\\d{8}|[2368]\\d{9}", [10, 11], [["(\\d{4})(\\d{2})(\\d{4})", "$1 $2-$3", ["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])", "2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"], "0$1", 1], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["1"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[68]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2-$3", ["[23]"], "0$1", 1], ["(\\d)(\\d{4})(\\d{2})(\\d{4})", "$2 15-$3-$4", ["9(?:2[2-469]|3[3-578])", "9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))", "9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"], "0$1", 0, "$1 $2 $3-$4"], ["(\\d)(\\d{2})(\\d{4})(\\d{4})", "$2 15-$3-$4", ["91"], "0$1", 0, "$1 $2 $3-$4"], ["(\\d{3})(\\d{3})(\\d{5})", "$1-$2-$3", ["8"], "0$1"], ["(\\d)(\\d{3})(\\d{3})(\\d{4})", "$2 15-$3-$4", ["9"], "0$1", 0, "$1 $2 $3-$4"]], "0", 0, "0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?", "9$1"], "AS": ["1", "011", "(?:[58]\\d\\d|684|900)\\d{7}", [10], 0, "1", 0, "([267]\\d{6})$|1", "684$1", 0, "684"], "AT": ["43", "00", "1\\d{3,12}|2\\d{6,12}|43(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7})|5\\d{4,12}|8\\d{7,12}|9\\d{8,12}|(?:[367]\\d|4[0-24-9])\\d{4,11}", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [["(\\d)(\\d{3,12})", "$1 $2", ["1(?:11|[2-9])"], "0$1"], ["(\\d{3})(\\d{2})", "$1 $2", ["517"], "0$1"], ["(\\d{2})(\\d{3,5})", "$1 $2", ["5[079]"], "0$1"], ["(\\d{3})(\\d{3,10})", "$1 $2", ["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"], "0$1"], ["(\\d{4})(\\d{3,9})", "$1 $2", ["[2-467]|5[2-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["5"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4,7})", "$1 $2 $3", ["5"], "0$1"]], "0"], "AU": ["61", "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "1(?:[0-79]\\d{7}(?:\\d(?:\\d{2})?)?|8[0-24-9]\\d{7})|[2-478]\\d{8}|1\\d{4,7}", [5, 6, 7, 8, 9, 10, 12], [["(\\d{2})(\\d{3,4})", "$1 $2", ["16"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,4})", "$1 $2 $3", ["16"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["14|4"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[2378]"], "(0$1)"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:30|[89])"]]], "0", 0, "(183[12])|0", 0, 0, 0, [["(?:(?:2(?:[0-26-9]\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\d|2[0-8]))\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\d)\\d{3}|9(?:[02-9]\\d{3}|1(?:(?:[0-58]\\d|6[0135-9])\\d|7(?:0[0-24-9]|[1-9]\\d)|9(?:[0-46-9]\\d|5[0-79])))))\\d{3}", [9]], ["4(?:79[01]|83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\d{6}", [9]], ["180(?:0\\d{3}|2)\\d{3}", [7, 10]], ["190[0-26]\\d{6}", [10]], 0, 0, 0, ["163\\d{2,6}", [5, 6, 7, 8, 9]], ["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}", [9]], ["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}", [6, 8, 10, 12]]], "0011"], "AW": ["297", "00", "(?:[25-79]\\d\\d|800)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[25-9]"]]]], "AX": ["358", "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "2\\d{4,9}|35\\d{4,5}|(?:60\\d\\d|800)\\d{4,6}|7\\d{5,11}|(?:[14]\\d|3[0-46-9]|50)\\d{4,8}", [5, 6, 7, 8, 9, 10, 11, 12], 0, "0", 0, 0, 0, 0, "18", 0, "00"], "AZ": ["994", "00", "365\\d{6}|(?:[124579]\\d|60|88)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["90"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[28]|2|365|46", "1[28]|2|365[45]|46", "1[28]|2|365(?:4|5[02])|46"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[13-9]"], "0$1"]], "0"], "BA": ["387", "00", "6\\d{8}|(?:[35689]\\d|49|70)\\d{6}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[1-3]|[7-9]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2-$3", ["[3-5]|6[56]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["6"], "0$1"]], "0"], "BB": ["1", "011", "(?:246|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "246$1", 0, "246"], "BD": ["880", "00", "[1-469]\\d{9}|8[0-79]\\d{7,8}|[2-79]\\d{8}|[2-9]\\d{7}|[3-9]\\d{6}|[57-9]\\d{5}", [6, 7, 8, 9, 10], [["(\\d{2})(\\d{4,6})", "$1-$2", ["31[5-8]|[459]1"], "0$1"], ["(\\d{3})(\\d{3,7})", "$1-$2", ["3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]"], "0$1"], ["(\\d{4})(\\d{3,6})", "$1-$2", ["[13-9]|22"], "0$1"], ["(\\d)(\\d{7,8})", "$1-$2", ["2"], "0$1"]], "0"], "BE": ["32", "00", "4\\d{8}|[1-9]\\d{7}", [8, 9], [["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:80|9)0"], "0$1"], ["(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[239]|4[23]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[15-8]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["4"], "0$1"]], "0"], "BF": ["226", "00", "[025-7]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[025-7]"]]]], "BG": ["359", "00", "00800\\d{7}|[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}", [6, 7, 8, 9, 12], [["(\\d)(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["2"], "0$1"], ["(\\d{3})(\\d{4})", "$1 $2", ["43[1-6]|70[1-9]"], "0$1"], ["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:70|8)0"], "0$1"], ["(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["43[1-7]|7"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[48]|9[08]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"]], "0"], "BH": ["973", "00", "[136-9]\\d{7}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[13679]|8[047]"]]]], "BI": ["257", "00", "(?:[267]\\d|31)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2367]"]]]], "BJ": ["229", "00", "[24-689]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-689]"]]]], "BL": ["590", "00", "590\\d{6}|(?:69|80|9\\d)\\d{7}", [9], 0, "0", 0, 0, 0, 0, 0, [["590(?:2[7-9]|5[12]|87)\\d{4}"], ["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"], ["80[0-5]\\d{6}"], 0, 0, 0, 0, 0, ["9(?:395|76[018])\\d{5}"]]], "BM": ["1", "011", "(?:441|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "441$1", 0, "441"], "BN": ["673", "00", "[2-578]\\d{6}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-578]"]]]], "BO": ["591", "00(?:1\\d)?", "(?:[2-467]\\d\\d|8001)\\d{5}", [8, 9], [["(\\d)(\\d{7})", "$1 $2", ["[23]|4[46]"]], ["(\\d{8})", "$1", ["[67]"]], ["(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["8"]]], "0", 0, "0(1\\d)?"], "BQ": ["599", "00", "(?:[34]1|7\\d)\\d{5}", [7], 0, 0, 0, 0, 0, 0, "[347]"], "BR": ["55", "00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)", "(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-46-9]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}", [8, 9, 10, 11], [["(\\d{4})(\\d{4})", "$1-$2", ["300|4(?:0[02]|37)", "4(?:02|37)0|[34]00"]], ["(\\d{3})(\\d{2,3})(\\d{4})", "$1 $2 $3", ["(?:[358]|90)0"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]"], "($1)"], ["(\\d{2})(\\d{5})(\\d{4})", "$1 $2-$3", ["[16][1-9]|[2-57-9]"], "($1)"]], "0", 0, "(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\d{10,11}))?", "$2"], "BS": ["1", "011", "(?:242|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([3-8]\\d{6})$|1", "242$1", 0, "242"], "BT": ["975", "00", "[17]\\d{7}|[2-8]\\d{6}", [7, 8], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-68]|7[246]"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[67]|7"]]]], "BW": ["267", "00", "(?:0800|(?:[37]|800)\\d)\\d{6}|(?:[2-6]\\d|90)\\d{5}", [7, 8, 10], [["(\\d{2})(\\d{5})", "$1 $2", ["90"]], ["(\\d{3})(\\d{4})", "$1 $2", ["[24-6]|3[15-79]"]], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[37]"]], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["0"]], ["(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["8"]]]], "BY": ["375", "810", "(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}", [6, 7, 8, 9, 10, 11], [["(\\d{3})(\\d{3})", "$1 $2", ["800"], "8 $1"], ["(\\d{3})(\\d{2})(\\d{2,4})", "$1 $2 $3", ["800"], "8 $1"], ["(\\d{4})(\\d{2})(\\d{3})", "$1 $2-$3", ["1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])", "1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])"], "8 0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["1(?:[56]|7[467])|2[1-3]"], "8 0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-4]"], "8 0$1"], ["(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[89]"], "8 $1"]], "8", 0, "0|80?", 0, 0, 0, 0, "8~10"], "BZ": ["501", "00", "(?:0800\\d|[2-8])\\d{6}", [7, 11], [["(\\d{3})(\\d{4})", "$1-$2", ["[2-8]"]], ["(\\d)(\\d{3})(\\d{4})(\\d{3})", "$1-$2-$3-$4", ["0"]]]], "CA": ["1", "011", "(?:[2-8]\\d|90)\\d{8}|3\\d{6}", [7, 10], 0, "1", 0, 0, 0, 0, 0, [["(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\d{6}", [10]], ["", [10]], ["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}", [10]], ["900[2-9]\\d{6}", [10]], ["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|(?:5(?:00|2[125-9]|33|44|66|77|88)|622)[2-9]\\d{6}", [10]], 0, ["310\\d{4}", [7]], 0, ["600[2-9]\\d{6}", [10]]]], "CC": ["61", "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}", [6, 7, 8, 9, 10, 12], 0, "0", 0, "([59]\\d{7})$|0", "8$1", 0, 0, [["8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\d|70[23]|959))\\d{3}", [9]], ["4(?:79[01]|83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\d{6}", [9]], ["180(?:0\\d{3}|2)\\d{3}", [7, 10]], ["190[0-26]\\d{6}", [10]], 0, 0, 0, 0, ["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}", [9]], ["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}", [6, 8, 10, 12]]], "0011"], "CD": ["243", "00", "[189]\\d{8}|[1-68]\\d{6}", [7, 9], [["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], ["(\\d{2})(\\d{5})", "$1 $2", ["[1-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]"], "0$1"]], "0"], "CF": ["236", "00", "(?:[27]\\d{3}|8776)\\d{4}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[278]"]]]], "CG": ["242", "00", "222\\d{6}|(?:0\\d|80)\\d{7}", [9], [["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["8"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[02]"]]]], "CH": ["41", "00", "8\\d{11}|[2-9]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8[047]|90"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-79]|81"], "0$1"], ["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["8"], "0$1"]], "0"], "CI": ["225", "00", "[02]\\d{9}", [10], [["(\\d{2})(\\d{2})(\\d)(\\d{5})", "$1 $2 $3 $4", ["2"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3 $4", ["0"]]]], "CK": ["682", "00", "[2-578]\\d{4}", [5], [["(\\d{2})(\\d{3})", "$1 $2", ["[2-578]"]]]], "CL": ["56", "(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0", "12300\\d{6}|6\\d{9,10}|[2-9]\\d{8}", [9, 10, 11], [["(\\d{5})(\\d{4})", "$1 $2", ["219", "2196"], "($1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["44"]], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2[1-36]"], "($1)"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["9[2-9]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"], "($1)"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["60|8"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], ["(\\d{3})(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["60"]]]], "CM": ["237", "00", "[26]\\d{8}|88\\d{6,7}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["88"]], ["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[26]|88"]]]], "CN": ["86", "00|1(?:[12]\\d|79)\\d\\d00", "1[127]\\d{8,9}|2\\d{9}(?:\\d{2})?|[12]\\d{6,7}|86\\d{6}|(?:1[03-689]\\d|6)\\d{7,9}|(?:[3-579]\\d|8[0-57-9])\\d{6,9}", [7, 8, 9, 10, 11, 12], [["(\\d{2})(\\d{5,6})", "$1 $2", ["(?:10|2[0-57-9])[19]", "(?:10|2[0-57-9])(?:10|9[56])", "10(?:10|9[56])|2[0-57-9](?:100|9[56])"], "0$1"], ["(\\d{3})(\\d{5,6})", "$1 $2", ["3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]", "(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))[19]", "85[23](?:10|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:10|9[56])", "85[23](?:100|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100|9[56])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["(?:4|80)0"]], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10|2(?:[02-57-9]|1[1-9])", "10|2(?:[02-57-9]|1[1-9])", "10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]"], "0$1", 1], ["(\\d{3})(\\d{7,8})", "$1 $2", ["9"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["80"], "0$1", 1], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[3-578]"], "0$1", 1], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["1[3-9]"]], ["(\\d{2})(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["[12]"], "0$1", 1]], "0", 0, "(1(?:[12]\\d|79)\\d\\d)|0", 0, 0, 0, 0, "00"], "CO": ["57", "00(?:4(?:[14]4|56)|[579])", "(?:60\\d\\d|9101)\\d{6}|(?:1\\d|3)\\d{9}", [10, 11], [["(\\d{3})(\\d{7})", "$1 $2", ["6"], "($1)"], ["(\\d{3})(\\d{7})", "$1 $2", ["3[0-357]|91"]], ["(\\d)(\\d{3})(\\d{7})", "$1-$2-$3", ["1"], "0$1", 0, "$1 $2 $3"]], "0", 0, "0(4(?:[14]4|56)|[579])?"], "CR": ["506", "00", "(?:8\\d|90)\\d{8}|(?:[24-8]\\d{3}|3005)\\d{4}", [8, 10], [["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]|8[3-9]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[89]"]]], 0, 0, "(19(?:0[0-2468]|1[09]|20|66|77|99))"], "CU": ["53", "119", "[27]\\d{6,7}|[34]\\d{5,7}|(?:5|8\\d\\d)\\d{7}", [6, 7, 8, 10], [["(\\d{2})(\\d{4,6})", "$1 $2", ["2[1-4]|[34]"], "(0$1)"], ["(\\d)(\\d{6,7})", "$1 $2", ["7"], "(0$1)"], ["(\\d)(\\d{7})", "$1 $2", ["5"], "0$1"], ["(\\d{3})(\\d{7})", "$1 $2", ["8"], "0$1"]], "0"], "CV": ["238", "0", "(?:[2-59]\\d\\d|800)\\d{4}", [7], [["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[2-589]"]]]], "CW": ["599", "00", "(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}", [7, 8], [["(\\d{3})(\\d{4})", "$1 $2", ["[3467]"]], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["9[4-8]"]]], 0, 0, 0, 0, 0, "[69]"], "CX": ["61", "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}", [6, 7, 8, 9, 10, 12], 0, "0", 0, "([59]\\d{7})$|0", "8$1", 0, 0, [["8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\d|7(?:0[01]|1[0-2])|958))\\d{3}", [9]], ["4(?:79[01]|83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\d{6}", [9]], ["180(?:0\\d{3}|2)\\d{3}", [7, 10]], ["190[0-26]\\d{6}", [10]], 0, 0, 0, 0, ["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}", [9]], ["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}", [6, 8, 10, 12]]], "0011"], "CY": ["357", "00", "(?:[279]\\d|[58]0)\\d{6}", [8], [["(\\d{2})(\\d{6})", "$1 $2", ["[257-9]"]]]], "CZ": ["420", "00", "(?:[2-578]\\d|60)\\d{7}|9\\d{8,11}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]|9[015-7]"]], ["(\\d{2})(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["96"]], ["(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]], ["(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]]], "DE": ["49", "00", "[2579]\\d{5,14}|49(?:[34]0|69|8\\d)\\d\\d?|49(?:37|49|60|7[089]|9\\d)\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\d{1,8}|(?:1|[368]\\d|4[0-8])\\d{3,13}|49(?:[015]\\d|2[13]|31|[46][1-8])\\d{1,9}", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [["(\\d{2})(\\d{3,13})", "$1 $2", ["3[02]|40|[68]9"], "0$1"], ["(\\d{3})(\\d{3,12})", "$1 $2", ["2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1", "2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1"], "0$1"], ["(\\d{4})(\\d{2,11})", "$1 $2", ["[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]", "[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]"], "0$1"], ["(\\d{3})(\\d{4})", "$1 $2", ["138"], "0$1"], ["(\\d{5})(\\d{2,10})", "$1 $2", ["3"], "0$1"], ["(\\d{3})(\\d{5,11})", "$1 $2", ["181"], "0$1"], ["(\\d{3})(\\d)(\\d{4,10})", "$1 $2 $3", ["1(?:3|80)|9"], "0$1"], ["(\\d{3})(\\d{7,8})", "$1 $2", ["1[67]"], "0$1"], ["(\\d{3})(\\d{7,12})", "$1 $2", ["8"], "0$1"], ["(\\d{5})(\\d{6})", "$1 $2", ["185", "1850", "18500"], "0$1"], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], ["(\\d{4})(\\d{7})", "$1 $2", ["18[68]"], "0$1"], ["(\\d{5})(\\d{6})", "$1 $2", ["15[0568]"], "0$1"], ["(\\d{4})(\\d{7})", "$1 $2", ["15[1279]"], "0$1"], ["(\\d{3})(\\d{8})", "$1 $2", ["18"], "0$1"], ["(\\d{3})(\\d{2})(\\d{7,8})", "$1 $2 $3", ["1(?:6[023]|7)"], "0$1"], ["(\\d{4})(\\d{2})(\\d{7})", "$1 $2 $3", ["15[279]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{8})", "$1 $2 $3", ["15"], "0$1"]], "0"], "DJ": ["253", "00", "(?:2\\d|77)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[27]"]]]], "DK": ["45", "00", "[2-9]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-9]"]]]], "DM": ["1", "011", "(?:[58]\\d\\d|767|900)\\d{7}", [10], 0, "1", 0, "([2-7]\\d{6})$|1", "767$1", 0, "767"], "DO": ["1", "011", "(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, 0, 0, 0, "8001|8[024]9"], "DZ": ["213", "00", "(?:[1-4]|[5-79]\\d|80)\\d{7}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-4]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["9"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-8]"], "0$1"]], "0"], "EC": ["593", "00", "1\\d{9,10}|(?:[2-7]|9\\d)\\d{7}", [8, 9, 10, 11], [["(\\d)(\\d{3})(\\d{4})", "$1 $2-$3", ["[2-7]"], "(0$1)", 0, "$1-$2-$3"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1"]]], "0"], "EE": ["372", "00", "8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d|90)\\d{5}", [7, 8, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88", "[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88"]], ["(\\d{4})(\\d{3,4})", "$1 $2", ["[45]|8(?:00|[1-49])", "[45]|8(?:00[1-9]|[1-49])"]], ["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["7"]], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]]]], "EG": ["20", "00", "[189]\\d{8,9}|[24-6]\\d{8}|[135]\\d{7}", [8, 9, 10], [["(\\d)(\\d{7,8})", "$1 $2", ["[23]"], "0$1"], ["(\\d{2})(\\d{6,7})", "$1 $2", ["1[35]|[4-6]|8[2468]|9[235-7]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[189]"], "0$1"]], "0"], "EH": ["212", "00", "[5-8]\\d{8}", [9], 0, "0", 0, 0, 0, 0, "528[89]"], "ER": ["291", "00", "[178]\\d{6}", [7], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[178]"], "0$1"]], "0"], "ES": ["34", "00", "[5-9]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]00"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-9]"]]]], "ET": ["251", "00", "(?:11|[2-579]\\d)\\d{7}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-579]"], "0$1"]], "0"], "FI": ["358", "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "[1-35689]\\d{4}|7\\d{10,11}|(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}", [5, 6, 7, 8, 9, 10, 11, 12], [["(\\d)(\\d{4,9})", "$1 $2", ["[2568][1-8]|3(?:0[1-9]|[1-9])|9"], "0$1"], ["(\\d{3})(\\d{3,7})", "$1 $2", ["[12]00|[368]|70[07-9]"], "0$1"], ["(\\d{2})(\\d{4,8})", "$1 $2", ["[1245]|7[135]"], "0$1"], ["(\\d{2})(\\d{6,10})", "$1 $2", ["7"], "0$1"]], "0", 0, 0, 0, 0, "1[03-79]|[2-9]", 0, "00"], "FJ": ["679", "0(?:0|52)", "45\\d{5}|(?:0800\\d|[235-9])\\d{6}", [7, 11], [["(\\d{3})(\\d{4})", "$1 $2", ["[235-9]|45"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "FK": ["500", "00", "[2-7]\\d{4}", [5]], "FM": ["691", "00", "(?:[39]\\d\\d|820)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[389]"]]]], "FO": ["298", "00", "[2-9]\\d{5}", [6], [["(\\d{6})", "$1", ["[2-9]"]]], 0, 0, "(10(?:01|[12]0|88))"], "FR": ["33", "00", "[1-9]\\d{8}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0 $1"], ["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[1-79]"], "0$1"]], "0"], "GA": ["241", "00", "(?:[067]\\d|11)\\d{6}|[2-7]\\d{6}", [7, 8], [["(\\d)(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-7]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["11|[67]"], "0$1"]], 0, 0, "0(11\\d{6}|60\\d{6}|61\\d{6}|6[256]\\d{6}|7[467]\\d{6})", "$1"], "GB": ["44", "00", "[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}", [7, 9, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["800", "8001", "80011", "800111", "8001111"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["845", "8454", "84546", "845464"], "0$1"], ["(\\d{3})(\\d{6})", "$1 $2", ["800"], "0$1"], ["(\\d{5})(\\d{4,5})", "$1 $2", ["1(?:38|5[23]|69|76|94)", "1(?:(?:38|69)7|5(?:24|39)|768|946)", "1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)"], "0$1"], ["(\\d{4})(\\d{5,6})", "$1 $2", ["1(?:[2-69][02-9]|[78])"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[25]|7(?:0|6[02-9])", "[25]|7(?:0|6(?:[03-9]|2[356]))"], "0$1"], ["(\\d{4})(\\d{6})", "$1 $2", ["7"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1389]"], "0$1"]], "0", 0, 0, 0, 0, 0, [["(?:1(?:1(?:3(?:[0-58]\\d\\d|73[0235])|4(?:[0-5]\\d\\d|69[7-9]|70[0-579])|(?:(?:5[0-26-9]|[78][0-49])\\d|6(?:[0-4]\\d|50))\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\d)\\d\\d|1(?:[0-7]\\d\\d|8(?:[02]\\d|1[0-246-9])))|(?:3(?:0\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\d\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\d{3})\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\d)|76\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\d|7[4-79])|295[5-7]|35[34]\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\d{3}", [9, 10]], ["7(?:457[0-57-9]|700[01]|911[028])\\d{5}|7(?:[1-3]\\d\\d|4(?:[0-46-9]\\d|5[0-689])|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[024-9]\\d|1[02-9]|3[0-689]))\\d{6}", [10]], ["80[08]\\d{7}|800\\d{6}|8001111"], ["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[2-49]))\\d{7}|845464\\d", [7, 10]], ["70\\d{8}", [10]], 0, ["(?:3[0347]|55)\\d{8}", [10]], ["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}", [10]], ["56\\d{8}", [10]]], 0, " x"], "GD": ["1", "011", "(?:473|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "473$1", 0, "473"], "GE": ["995", "00", "(?:[3-57]\\d\\d|800)\\d{6}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["32"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[57]"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[348]"], "0$1"]], "0"], "GF": ["594", "00", "[56]94\\d{6}|(?:80|9\\d)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[56]|97"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[89]"], "0$1"]], "0"], "GG": ["44", "00", "(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?", [7, 9, 10], 0, "0", 0, "([25-9]\\d{5})$|0", "1481$1", 0, 0, [["1481[25-9]\\d{5}", [10]], ["7(?:(?:781|839)\\d|911[17])\\d{5}", [10]], ["80[08]\\d{7}|800\\d{6}|8001111"], ["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[0-3]))\\d{7}|845464\\d", [7, 10]], ["70\\d{8}", [10]], 0, ["(?:3[0347]|55)\\d{8}", [10]], ["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}", [10]], ["56\\d{8}", [10]]]], "GH": ["233", "00", "(?:[235]\\d{3}|800)\\d{5}", [8, 9], [["(\\d{3})(\\d{5})", "$1 $2", ["8"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[235]"], "0$1"]], "0"], "GI": ["350", "00", "(?:[25]\\d\\d|606)\\d{5}", [8], [["(\\d{3})(\\d{5})", "$1 $2", ["2"]]]], "GL": ["299", "00", "(?:19|[2-689]\\d|70)\\d{4}", [6], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["19|[2-9]"]]]], "GM": ["220", "00", "[2-9]\\d{6}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]]], "GN": ["224", "00", "722\\d{6}|(?:3|6\\d)\\d{7}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["3"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[67]"]]]], "GP": ["590", "00", "590\\d{6}|(?:69|80|9\\d)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[569]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0", 0, 0, 0, 0, 0, [["590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0-489]|7[08]|8[0-689]|9\\d)\\d{4}"], ["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"], ["80[0-5]\\d{6}"], 0, 0, 0, 0, 0, ["9(?:395|76[018])\\d{5}"]]], "GQ": ["240", "00", "222\\d{6}|(?:3\\d|55|[89]0)\\d{7}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235]"]], ["(\\d{3})(\\d{6})", "$1 $2", ["[89]"]]]], "GR": ["30", "00", "5005000\\d{3}|8\\d{9,11}|(?:[269]\\d|70)\\d{8}", [10, 11, 12], [["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["21|7"]], ["(\\d{4})(\\d{6})", "$1 $2", ["2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2689]"]], ["(\\d{3})(\\d{3,4})(\\d{5})", "$1 $2 $3", ["8"]]]], "GT": ["502", "00", "(?:1\\d{3}|[2-7])\\d{7}", [8, 11], [["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]]], "GU": ["1", "011", "(?:[58]\\d\\d|671|900)\\d{7}", [10], 0, "1", 0, "([3-9]\\d{6})$|1", "671$1", 0, "671"], "GW": ["245", "00", "[49]\\d{8}|4\\d{6}", [7, 9], [["(\\d{3})(\\d{4})", "$1 $2", ["40"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[49]"]]]], "GY": ["592", "001", "9008\\d{3}|(?:[2-467]\\d\\d|862)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-46-9]"]]]], "HK": ["852", "00(?:30|5[09]|[126-9]?)", "8[0-46-9]\\d{6,7}|9\\d{4,7}|(?:[2-7]|9\\d{3})\\d{7}", [5, 6, 7, 8, 9, 11], [["(\\d{3})(\\d{2,5})", "$1 $2", ["900", "9003"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]|8[1-4]|9(?:0[1-9]|[1-8])"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]], ["(\\d{3})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "HN": ["504", "00", "8\\d{10}|[237-9]\\d{7}", [8, 11], [["(\\d{4})(\\d{4})", "$1-$2", ["[237-9]"]]]], "HR": ["385", "00", "(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}", [6, 7, 8, 9], [["(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["6[01]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["8"], "0$1"], ["(\\d)(\\d{4})(\\d{3})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[67]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-5]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"]], "0"], "HT": ["509", "00", "(?:[2-489]\\d|55)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[2-589]"]]]], "HU": ["36", "00", "[235-7]\\d{8}|[1-9]\\d{7}", [8, 9], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "(06 $1)"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]"], "(06 $1)"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "06 $1"]], "06"], "ID": ["62", "00[89]", "(?:(?:00[1-9]|8\\d)\\d{4}|[1-36])\\d{6}|00\\d{10}|[1-9]\\d{8,10}|[2-9]\\d{7}", [7, 8, 9, 10, 11, 12, 13], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["15"]], ["(\\d{2})(\\d{5,9})", "$1 $2", ["2[124]|[36]1"], "(0$1)"], ["(\\d{3})(\\d{5,7})", "$1 $2", ["800"], "0$1"], ["(\\d{3})(\\d{5,8})", "$1 $2", ["[2-79]"], "(0$1)"], ["(\\d{3})(\\d{3,4})(\\d{3})", "$1-$2-$3", ["8[1-35-9]"], "0$1"], ["(\\d{3})(\\d{6,8})", "$1 $2", ["1"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["804"], "0$1"], ["(\\d{3})(\\d)(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["80"], "0$1"], ["(\\d{3})(\\d{4})(\\d{4,5})", "$1-$2-$3", ["8"], "0$1"]], "0"], "IE": ["353", "00", "(?:1\\d|[2569])\\d{6,8}|4\\d{6,9}|7\\d{8}|8\\d{8,9}", [7, 8, 9, 10], [["(\\d{2})(\\d{5})", "$1 $2", ["2[24-9]|47|58|6[237-9]|9[35-9]"], "(0$1)"], ["(\\d{3})(\\d{5})", "$1 $2", ["[45]0"], "(0$1)"], ["(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2569]|4[1-69]|7[14]"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["81"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[78]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["4"], "(0$1)"], ["(\\d{2})(\\d)(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], "IL": ["972", "0(?:0|1[2-9])", "1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}", [7, 8, 9, 10, 11, 12], [["(\\d{4})(\\d{3})", "$1-$2", ["125"]], ["(\\d{4})(\\d{2})(\\d{2})", "$1-$2-$3", ["121"]], ["(\\d)(\\d{3})(\\d{4})", "$1-$2-$3", ["[2-489]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1-$2-$3", ["12"]], ["(\\d{4})(\\d{6})", "$1-$2", ["159"]], ["(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3-$4", ["1[7-9]"]], ["(\\d{3})(\\d{1,2})(\\d{3})(\\d{4})", "$1-$2 $3-$4", ["15"]]], "0"], "IM": ["44", "00", "1624\\d{6}|(?:[3578]\\d|90)\\d{8}", [10], 0, "0", 0, "([25-8]\\d{5})$|0", "1624$1", 0, "74576|(?:16|7[56])24"], "IN": ["91", "00", "(?:000800|[2-9]\\d\\d)\\d{7}|1\\d{7,12}", [8, 9, 10, 11, 12, 13], [["(\\d{8})", "$1", ["5(?:0|2[23]|3[03]|[67]1|88)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"], 0, 1], ["(\\d{4})(\\d{4,5})", "$1 $2", ["180", "1800"], 0, 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["140"], 0, 1], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["11|2[02]|33|4[04]|79[1-7]|80[2-46]", "11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])", "11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]"], "0$1", 1], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807", "1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]", "1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\d|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]))[2-7]"], "0$1", 1], ["(\\d{5})(\\d{5})", "$1 $2", ["[6-9]"], "0$1", 1], ["(\\d{4})(\\d{2,4})(\\d{4})", "$1 $2 $3", ["1(?:6|8[06])", "1(?:6|8[06]0)"], 0, 1], ["(\\d{4})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["18"], 0, 1]], "0"], "IO": ["246", "00", "3\\d{6}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["3"]]]], "IQ": ["964", "00", "(?:1|7\\d\\d)\\d{7}|[2-6]\\d{7,8}", [8, 9, 10], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-6]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]], "0"], "IR": ["98", "00", "[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}", [4, 5, 6, 7, 10], [["(\\d{4,5})", "$1", ["96"], "0$1"], ["(\\d{2})(\\d{4,5})", "$1 $2", ["(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[1-8]"], "0$1"]], "0"], "IS": ["354", "00|1(?:0(?:01|[12]0)|100)", "(?:38\\d|[4-9])\\d{6}", [7, 9], [["(\\d{3})(\\d{4})", "$1 $2", ["[4-9]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["3"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "IT": ["39", "00", "0\\d{5,10}|1\\d{8,10}|3(?:[0-8]\\d{7,10}|9\\d{7,8})|(?:55|70)\\d{8}|8\\d{5}(?:\\d{2,4})?", [6, 7, 8, 9, 10, 11], [["(\\d{2})(\\d{4,6})", "$1 $2", ["0[26]"]], ["(\\d{3})(\\d{3,6})", "$1 $2", ["0[13-57-9][0159]|8(?:03|4[17]|9[2-5])", "0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))"]], ["(\\d{4})(\\d{2,6})", "$1 $2", ["0(?:[13-579][2-46-8]|8[236-8])"]], ["(\\d{4})(\\d{4})", "$1 $2", ["894"]], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[26]|5"]], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1(?:44|[679])|[378]"]], ["(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[13-57-9][0159]|14"]], ["(\\d{2})(\\d{4})(\\d{5})", "$1 $2 $3", ["0[26]"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]], ["(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["3"]]], 0, 0, 0, 0, 0, 0, [["0669[0-79]\\d{1,6}|0(?:1(?:[0159]\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\d\\d|3(?:[0159]\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\d|6[0-8])|7(?:[0159]\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\d{2,7}"], ["3[1-9]\\d{8}|3[2-9]\\d{7}", [9, 10]], ["80(?:0\\d{3}|3)\\d{3}", [6, 9]], ["(?:0878\\d{3}|89(?:2\\d|3[04]|4(?:[0-4]|[5-9]\\d\\d)|5[0-4]))\\d\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\d{6}", [6, 8, 9, 10]], ["1(?:78\\d|99)\\d{6}", [9, 10]], 0, 0, 0, ["55\\d{8}", [10]], ["84(?:[08]\\d{3}|[17])\\d{3}", [6, 9]]]], "JE": ["44", "00", "1534\\d{6}|(?:[3578]\\d|90)\\d{8}", [10], 0, "0", 0, "([0-24-8]\\d{5})$|0", "1534$1", 0, 0, [["1534[0-24-8]\\d{5}"], ["7(?:(?:(?:50|82)9|937)\\d|7(?:00[378]|97[7-9]))\\d{5}"], ["80(?:07(?:35|81)|8901)\\d{4}"], ["(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\d{4}"], ["701511\\d{4}"], 0, ["(?:3(?:0(?:07(?:35|81)|8901)|3\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\d{4})\\d{4}"], ["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}"], ["56\\d{8}"]]], "JM": ["1", "011", "(?:[58]\\d\\d|658|900)\\d{7}", [10], 0, "1", 0, 0, 0, 0, "658|876"], "JO": ["962", "00", "(?:(?:[2689]|7\\d)\\d|32|53)\\d{6}", [8, 9], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2356]|87"], "(0$1)"], ["(\\d{3})(\\d{5,6})", "$1 $2", ["[89]"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["70"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]], "0"], "JP": ["81", "010", "00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}", [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [["(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3", ["(?:12|57|99)0"], "0$1"], ["(\\d{4})(\\d)(\\d{4})", "$1-$2-$3", ["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1-$2-$3", ["[36]|4(?:2[09]|7[01])", "[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3", ["[14]|[289][2-9]|5[3-9]|7[2-4679]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["800"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[257-9]"], "0$1"]], "0"], "KE": ["254", "000", "(?:[17]\\d\\d|900)\\d{6}|(?:2|80)0\\d{6,7}|[4-6]\\d{6,8}", [7, 8, 9, 10], [["(\\d{2})(\\d{5,7})", "$1 $2", ["[24-6]"], "0$1"], ["(\\d{3})(\\d{6})", "$1 $2", ["[17]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[89]"], "0$1"]], "0"], "KG": ["996", "00", "8\\d{9}|(?:[235-8]\\d|99)\\d{7}", [9, 10], [["(\\d{4})(\\d{5})", "$1 $2", ["3(?:1[346]|[24-79])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235-79]|88"], "0$1"], ["(\\d{3})(\\d{3})(\\d)(\\d{2,3})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], "KH": ["855", "00[14-9]", "1\\d{9}|[1-9]\\d{7,8}", [8, 9, 10], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-9]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]], "0"], "KI": ["686", "00", "(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}", [5, 8], 0, "0"], "KM": ["269", "00", "[3478]\\d{6}", [7], [["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[3478]"]]]], "KN": ["1", "011", "(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-7]\\d{6})$|1", "869$1", 0, "869"], "KP": ["850", "00|99", "85\\d{6}|(?:19\\d|[2-7])\\d{7}", [8, 10], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"]], "0"], "KR": ["82", "00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))", "00[1-9]\\d{8,11}|(?:[12]|5\\d{3})\\d{7}|[13-6]\\d{9}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}|(?:00|7)0\\d{8}", [5, 6, 8, 9, 10, 11, 12, 13, 14], [["(\\d{2})(\\d{3,4})", "$1-$2", ["(?:3[1-3]|[46][1-4]|5[1-5])1"], "0$1"], ["(\\d{4})(\\d{4})", "$1-$2", ["1"]], ["(\\d)(\\d{3,4})(\\d{4})", "$1-$2-$3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60|8"], "0$1"], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1-$2-$3", ["[1346]|5[1-5]"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1"], ["(\\d{2})(\\d{5})(\\d{4})", "$1-$2-$3", ["5"], "0$1"]], "0", 0, "0(8(?:[1-46-8]|5\\d\\d))?"], "KW": ["965", "00", "18\\d{5}|(?:[2569]\\d|41)\\d{6}", [7, 8], [["(\\d{4})(\\d{3,4})", "$1 $2", ["[169]|2(?:[235]|4[1-35-9])|52"]], ["(\\d{3})(\\d{5})", "$1 $2", ["[245]"]]]], "KY": ["1", "011", "(?:345|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "345$1", 0, "345"], "KZ": ["7", "810", "(?:33622|8\\d{8})\\d{5}|[78]\\d{9}", [10, 14], 0, "8", 0, 0, 0, 0, "33|7", 0, "8~10"], "LA": ["856", "00", "[23]\\d{9}|3\\d{8}|(?:[235-8]\\d|41)\\d{6}", [8, 9, 10], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2[13]|3[14]|[4-8]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["30[013-9]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[23]"], "0$1"]], "0"], "LB": ["961", "00", "[27-9]\\d{7}|[13-9]\\d{6}", [7, 8], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[27-9]"]]], "0"], "LC": ["1", "011", "(?:[58]\\d\\d|758|900)\\d{7}", [10], 0, "1", 0, "([2-8]\\d{6})$|1", "758$1", 0, "758"], "LI": ["423", "00", "[68]\\d{8}|(?:[2378]\\d|90)\\d{5}", [7, 9], [["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[2379]|8(?:0[09]|7)", "[2379]|8(?:0(?:02|9)|7)"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["69"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]]], "0", 0, "(1001)|0"], "LK": ["94", "00", "[1-9]\\d{8}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[1-689]"], "0$1"]], "0"], "LR": ["231", "00", "(?:[25]\\d|33|77|88)\\d{7}|(?:2\\d|[4-6])\\d{6}", [7, 8, 9], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[4-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[23578]"], "0$1"]], "0"], "LS": ["266", "00", "(?:[256]\\d\\d|800)\\d{5}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[2568]"]]]], "LT": ["370", "00", "(?:[3469]\\d|52|[78]0)\\d{6}", [8], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["52[0-7]"], "(8-$1)", 1], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[7-9]"], "8 $1", 1], ["(\\d{2})(\\d{6})", "$1 $2", ["37|4(?:[15]|6[1-8])"], "(8-$1)", 1], ["(\\d{3})(\\d{5})", "$1 $2", ["[3-6]"], "(8-$1)", 1]], "8", 0, "[08]"], "LU": ["352", "00", "35[013-9]\\d{4,8}|6\\d{8}|35\\d{2,4}|(?:[2457-9]\\d|3[0-46-9])\\d{2,9}", [4, 5, 6, 7, 8, 9, 10, 11], [["(\\d{2})(\\d{3})", "$1 $2", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]], ["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]], ["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["20[2-689]"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4", ["2(?:[0367]|4[3-8])"]], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["80[01]|90[015]"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["20"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4 $5", ["2(?:[0367]|4[3-8])"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{1,5})", "$1 $2 $3 $4", ["[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]"]]], 0, 0, "(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\d)"], "LV": ["371", "00", "(?:[268]\\d|90)\\d{6}", [8], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[269]|8[01]"]]]], "LY": ["218", "00", "[2-9]\\d{8}", [9], [["(\\d{2})(\\d{7})", "$1-$2", ["[2-9]"], "0$1"]], "0"], "MA": ["212", "00", "[5-8]\\d{8}", [9], [["(\\d{5})(\\d{4})", "$1-$2", ["5(?:29|38)", "5(?:29[1289]|389)", "529(?:1[1-46-9]|2[013-8]|90)|5(?:298|389)[0-46-9]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5[45]"], "0$1"], ["(\\d{4})(\\d{5})", "$1-$2", ["5(?:2[2-489]|3[5-9]|9)|892", "5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892"], "0$1"], ["(\\d{2})(\\d{7})", "$1-$2", ["8"], "0$1"], ["(\\d{3})(\\d{6})", "$1-$2", ["[5-7]"], "0$1"]], "0", 0, 0, 0, 0, 0, [["5293[01]\\d{4}|5(?:2(?:[0-25-7]\\d|3[1-578]|4[02-46-8]|8[0235-7]|9[0-289])|3(?:[0-47]\\d|5[02-9]|6[02-8]|8[0189]|9[3-9])|(?:4[067]|5[03])\\d)\\d{5}"], ["(?:6(?:[0-79]\\d|8[0-247-9])|7(?:[017]\\d|2[0-2]|6[0-8]|8[0-3]))\\d{6}"], ["80\\d{7}"], ["89\\d{7}"], 0, 0, 0, 0, ["592(?:4[0-2]|93)\\d{4}"]]], "MC": ["377", "00", "(?:[3489]|6\\d)\\d{7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["4"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[389]"]], ["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["6"], "0$1"]], "0"], "MD": ["373", "00", "(?:[235-7]\\d|[89]0)\\d{6}", [8], [["(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["22|3"], "0$1"], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[25-7]"], "0$1"]], "0"], "ME": ["382", "00", "(?:20|[3-79]\\d)\\d{6}|80\\d{6,7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "0$1"]], "0"], "MF": ["590", "00", "590\\d{6}|(?:69|80|9\\d)\\d{7}", [9], 0, "0", 0, 0, 0, 0, 0, [["590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\d{4}"], ["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"], ["80[0-5]\\d{6}"], 0, 0, 0, 0, 0, ["9(?:395|76[018])\\d{5}"]]], "MG": ["261", "00", "[23]\\d{8}", [9], [["(\\d{2})(\\d{2})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["[23]"], "0$1"]], "0", 0, "([24-9]\\d{6})$|0", "20$1"], "MH": ["692", "011", "329\\d{4}|(?:[256]\\d|45)\\d{5}", [7], [["(\\d{3})(\\d{4})", "$1-$2", ["[2-6]"]]], "1"], "MK": ["389", "00", "[2-578]\\d{7}", [8], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2|34[47]|4(?:[37]7|5[47]|64)"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[347]"], "0$1"], ["(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[58]"], "0$1"]], "0"], "ML": ["223", "00", "[24-9]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-9]"]]]], "MM": ["95", "00", "1\\d{5,7}|95\\d{6}|(?:[4-7]|9[0-46-9])\\d{6,8}|(?:2|8\\d)\\d{5,8}", [6, 7, 8, 9, 10], [["(\\d)(\\d{2})(\\d{3})", "$1 $2 $3", ["16|2"], "0$1"], ["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]"], "0$1"], ["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[12]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[4-7]|8[1-35]"], "0$1"], ["(\\d)(\\d{3})(\\d{4,6})", "$1 $2 $3", ["9(?:2[0-4]|[35-9]|4[137-9])"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"], ["(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["92"], "0$1"], ["(\\d)(\\d{5})(\\d{4})", "$1 $2 $3", ["9"], "0$1"]], "0"], "MN": ["976", "001", "[12]\\d{7,9}|[5-9]\\d{7}", [8, 9, 10], [["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[12]1"], "0$1"], ["(\\d{4})(\\d{4})", "$1 $2", ["[5-9]"]], ["(\\d{3})(\\d{5,6})", "$1 $2", ["[12]2[1-3]"], "0$1"], ["(\\d{4})(\\d{5,6})", "$1 $2", ["[12](?:27|3[2-8]|4[2-68]|5[1-4689])", "[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]"], "0$1"], ["(\\d{5})(\\d{4,5})", "$1 $2", ["[12]"], "0$1"]], "0"], "MO": ["853", "00", "0800\\d{3}|(?:28|[68]\\d)\\d{6}", [7, 8], [["(\\d{4})(\\d{3})", "$1 $2", ["0"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[268]"]]]], "MP": ["1", "011", "[58]\\d{9}|(?:67|90)0\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "670$1", 0, "670"], "MQ": ["596", "00", "596\\d{6}|(?:69|80|9\\d)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[569]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], "MR": ["222", "00", "(?:[2-4]\\d\\d|800)\\d{5}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-48]"]]]], "MS": ["1", "011", "(?:[58]\\d\\d|664|900)\\d{7}", [10], 0, "1", 0, "([34]\\d{6})$|1", "664$1", 0, "664"], "MT": ["356", "00", "3550\\d{4}|(?:[2579]\\d\\d|800)\\d{5}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[2357-9]"]]]], "MU": ["230", "0(?:0|[24-7]0|3[03])", "(?:[57]|8\\d\\d)\\d{7}|[2-468]\\d{6}", [7, 8, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-46]|8[013]"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[57]"]], ["(\\d{5})(\\d{5})", "$1 $2", ["8"]]], 0, 0, 0, 0, 0, 0, 0, "020"], "MV": ["960", "0(?:0|19)", "(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}", [7, 10], [["(\\d{3})(\\d{4})", "$1-$2", ["[34679]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "MW": ["265", "00", "(?:[1289]\\d|31|77)\\d{7}|1\\d{6}", [7, 9], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["1[2-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[137-9]"], "0$1"]], "0"], "MX": ["52", "0[09]", "1(?:(?:[27]2|44|99)[1-9]|65[0-689])\\d{7}|(?:1(?:[01]\\d|2[13-9]|[35][1-9]|4[0-35-9]|6[0-46-9]|7[013-9]|8[1-79]|9[1-8])|[2-9]\\d)\\d{8}", [10, 11], [["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["33|5[56]|81"], 0, 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-9]"], 0, 1], ["(\\d)(\\d{2})(\\d{4})(\\d{4})", "$2 $3 $4", ["1(?:33|5[56]|81)"], 0, 1], ["(\\d)(\\d{3})(\\d{3})(\\d{4})", "$2 $3 $4", ["1"], 0, 1]], "01", 0, "0(?:[12]|4[45])|1", 0, 0, 0, 0, "00"], "MY": ["60", "00", "1\\d{8,9}|(?:3\\d|[4-9])\\d{7}", [8, 9, 10], [["(\\d)(\\d{3})(\\d{4})", "$1-$2 $3", ["[4-79]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1-$2 $3", ["1(?:[02469]|[378][1-9]|53)|8", "1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1-$2 $3", ["3"], "0$1"], ["(\\d)(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3-$4", ["1(?:[367]|80)"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2 $3", ["15"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1-$2 $3", ["1"], "0$1"]], "0"], "MZ": ["258", "00", "(?:2|8\\d)\\d{7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2|8[2-79]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]]]], "NA": ["264", "00", "[68]\\d{7,8}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["6"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["87"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"]], "0"], "NC": ["687", "00", "(?:050|[2-57-9]\\d\\d)\\d{3}", [6], [["(\\d{2})(\\d{2})(\\d{2})", "$1.$2.$3", ["[02-57-9]"]]]], "NE": ["227", "00", "[027-9]\\d{7}", [8], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["08"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[089]|2[013]|7[04]"]]]], "NF": ["672", "00", "[13]\\d{5}", [6], [["(\\d{2})(\\d{4})", "$1 $2", ["1[0-3]"]], ["(\\d)(\\d{5})", "$1 $2", ["[13]"]]], 0, 0, "([0-258]\\d{4})$", "3$1"], "NG": ["234", "009", "(?:[124-7]|9\\d{3})\\d{6}|[1-9]\\d{7}|[78]\\d{9,13}", [7, 8, 10, 11, 12, 13, 14], [["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["78"], "0$1"], ["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[12]|9(?:0[3-9]|[1-9])"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[3-7]|8[2-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[7-9]"], "0$1"], ["(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["[78]"], "0$1"], ["(\\d{3})(\\d{5})(\\d{5,6})", "$1 $2 $3", ["[78]"], "0$1"]], "0"], "NI": ["505", "00", "(?:1800|[25-8]\\d{3})\\d{4}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[125-8]"]]]], "NL": ["31", "00", "(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8]))\\d{6}|8\\d{6,9}|9\\d{6,10}|1\\d{4,5}", [5, 6, 7, 8, 9, 10, 11], [["(\\d{3})(\\d{4,7})", "$1 $2", ["[89]0"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["66"], "0$1"], ["(\\d)(\\d{8})", "$1 $2", ["6"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-578]|91"], "0$1"], ["(\\d{3})(\\d{3})(\\d{5})", "$1 $2 $3", ["9"], "0$1"]], "0"], "NO": ["47", "00", "(?:0|[2-9]\\d{3})\\d{4}", [5, 8], [["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[489]|59"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[235-7]"]]], 0, 0, 0, 0, 0, "[02-689]|7[0-8]"], "NP": ["977", "00", "(?:1\\d|9)\\d{9}|[1-9]\\d{7}", [8, 10, 11], [["(\\d)(\\d{7})", "$1-$2", ["1[2-6]"], "0$1"], ["(\\d{2})(\\d{6})", "$1-$2", ["1[01]|[2-8]|9(?:[1-59]|[67][2-6])"], "0$1"], ["(\\d{3})(\\d{7})", "$1-$2", ["9"]]], "0"], "NR": ["674", "00", "(?:444|(?:55|8\\d)\\d|666)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[4-68]"]]]], "NU": ["683", "00", "(?:[47]|888\\d)\\d{3}", [4, 7], [["(\\d{3})(\\d{4})", "$1 $2", ["8"]]]], "NZ": ["64", "0(?:0|161)", "[29]\\d{7,9}|50\\d{5}(?:\\d{2,3})?|6[0-35-9]\\d{6}|7\\d{7,8}|8\\d{4,9}|(?:11\\d|[34])\\d{7}", [5, 6, 7, 8, 9, 10], [["(\\d{2})(\\d{3,8})", "$1 $2", ["8[1-579]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["50[036-8]|[89]0", "50(?:[0367]|88)|[89]0"], "0$1"], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["24|[346]|7[2-57-9]|9[2-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:10|74)|[59]|80"], "0$1"], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1|2[028]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,5})", "$1 $2 $3", ["2(?:[169]|7[0-35-9])|7|86"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, "00"], "OM": ["968", "00", "(?:1505|[279]\\d{3}|500)\\d{4}|800\\d{5,6}", [7, 8, 9], [["(\\d{3})(\\d{4,6})", "$1 $2", ["[58]"]], ["(\\d{2})(\\d{6})", "$1 $2", ["2"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[179]"]]]], "PA": ["507", "00", "(?:00800|8\\d{3})\\d{6}|[68]\\d{7}|[1-57-9]\\d{6}", [7, 8, 10, 11], [["(\\d{3})(\\d{4})", "$1-$2", ["[1-57-9]"]], ["(\\d{4})(\\d{4})", "$1-$2", ["[68]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]]]], "PE": ["51", "00|19(?:1[124]|77|90)00", "(?:[14-8]|9\\d)\\d{7}", [8, 9], [["(\\d{3})(\\d{5})", "$1 $2", ["80"], "(0$1)"], ["(\\d)(\\d{7})", "$1 $2", ["1"], "(0$1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["[4-8]"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"]]], "0", 0, 0, 0, 0, 0, 0, "00", " Anexo "], "PF": ["689", "00", "4\\d{5}(?:\\d{2})?|8\\d{7,8}", [6, 8, 9], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["44"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["4|8[7-9]"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]]]], "PG": ["675", "00|140[1-3]", "(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}", [7, 8], [["(\\d{3})(\\d{4})", "$1 $2", ["18|[2-69]|85"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[78]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "PH": ["63", "00", "(?:[2-7]|9\\d)\\d{8}|2\\d{5}|(?:1800|8)\\d{7,9}", [6, 8, 9, 10, 11, 12, 13], [["(\\d)(\\d{5})", "$1 $2", ["2"], "(0$1)"], ["(\\d{4})(\\d{4,6})", "$1 $2", ["3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2", "3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))"], "(0$1)"], ["(\\d{5})(\\d{4})", "$1 $2", ["346|4(?:27|9[35])|883", "3469|4(?:279|9(?:30|56))|8834"], "(0$1)"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3-7]|8[2-8]"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], ["(\\d{4})(\\d{1,2})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["1"]]], "0"], "PK": ["92", "00", "122\\d{6}|[24-8]\\d{10,11}|9(?:[013-9]\\d{8,10}|2(?:[01]\\d\\d|2(?:[06-8]\\d|1[01]))\\d{7})|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}", [8, 9, 10, 11, 12], [["(\\d{3})(\\d{3})(\\d{2,7})", "$1 $2 $3", ["[89]0"], "0$1"], ["(\\d{4})(\\d{5})", "$1 $2", ["1"]], ["(\\d{3})(\\d{6,7})", "$1 $2", ["2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])", "9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]"], "(0$1)"], ["(\\d{2})(\\d{7,8})", "$1 $2", ["(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]"], "(0$1)"], ["(\\d{5})(\\d{5})", "$1 $2", ["58"], "(0$1)"], ["(\\d{3})(\\d{7})", "$1 $2", ["3"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[24-9]"], "(0$1)"]], "0"], "PL": ["48", "00", "(?:6|8\\d\\d)\\d{7}|[1-9]\\d{6}(?:\\d{2})?|[26]\\d{5}", [6, 7, 8, 9, 10], [["(\\d{5})", "$1", ["19"]], ["(\\d{3})(\\d{3})", "$1 $2", ["11|20|64"]], ["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1", "(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19"]], ["(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["64"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)"]], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[2-8]|[2-7]|8[1-79]|9[145]"]], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["8"]]]], "PM": ["508", "00", "[45]\\d{5}|(?:708|80\\d)\\d{6}", [6, 9], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[45]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["7"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], "PR": ["1", "011", "(?:[589]\\d\\d|787)\\d{7}", [10], 0, "1", 0, 0, 0, 0, "787|939"], "PS": ["970", "00", "[2489]2\\d{6}|(?:1\\d|5)\\d{8}", [8, 9, 10], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2489]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["5"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]], "0"], "PT": ["351", "00", "1693\\d{5}|(?:[26-9]\\d|30)\\d{7}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["2[12]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["16|[236-9]"]]]], "PW": ["680", "01[12]", "(?:[24-8]\\d\\d|345|900)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]]], "PY": ["595", "00", "59\\d{4,6}|9\\d{5,10}|(?:[2-46-8]\\d|5[0-8])\\d{4,7}", [6, 7, 8, 9, 10, 11], [["(\\d{3})(\\d{3,6})", "$1 $2", ["[2-9]0"], "0$1"], ["(\\d{2})(\\d{5})", "$1 $2", ["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"], "(0$1)"], ["(\\d{3})(\\d{4,5})", "$1 $2", ["2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["87"]], ["(\\d{3})(\\d{6})", "$1 $2", ["9(?:[5-79]|8[1-6])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"]]], "0"], "QA": ["974", "00", "800\\d{4}|(?:2|800)\\d{6}|(?:0080|[3-7])\\d{7}", [7, 8, 9, 11], [["(\\d{3})(\\d{4})", "$1 $2", ["2[16]|8"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[3-7]"]]]], "RE": ["262", "00", "(?:26|[689]\\d)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2689]"], "0$1"]], "0", 0, 0, 0, 0, 0, [["26(?:2\\d\\d|3(?:0\\d|1[0-3]))\\d{4}"], ["(?:69(?:2\\d\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\d|5[0-5]|6[0-6]|7[0-27]|8[0-8]|9[0-479]))|9(?:399[0-2]|4790|76(?:2[27]|3[0-37]|9\\d)))\\d{4}"], ["80\\d{7}"], ["89[1-37-9]\\d{6}"], 0, 0, 0, 0, 0, ["8(?:1[019]|2[0156]|84|90)\\d{6}"]]], "RO": ["40", "00", "(?:[2378]\\d|90)\\d{7}|[23]\\d{5}", [6, 9], [["(\\d{3})(\\d{3})", "$1 $2", ["2[3-6]", "2[3-6]\\d9"], "0$1"], ["(\\d{2})(\\d{4})", "$1 $2", ["219|31"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[23]1"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[237-9]"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, 0, " int "], "RS": ["381", "00", "38[02-9]\\d{6,9}|6\\d{7,9}|90\\d{4,8}|38\\d{5,6}|(?:7\\d\\d|800)\\d{3,9}|(?:[12]\\d|3[0-79])\\d{5,10}", [6, 7, 8, 9, 10, 11, 12], [["(\\d{3})(\\d{3,9})", "$1 $2", ["(?:2[389]|39)0|[7-9]"], "0$1"], ["(\\d{2})(\\d{5,10})", "$1 $2", ["[1-36]"], "0$1"]], "0"], "RU": ["7", "810", "8\\d{13}|[347-9]\\d{9}", [10, 14], [["(\\d{4})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-8]|2[1-9])", "7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))", "7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2"], "8 ($1)", 1], ["(\\d{5})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-68]|2[1-9])", "7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))", "7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]"], "8 ($1)", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "8 ($1)", 1], ["(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[349]|8(?:[02-7]|1[1-8])"], "8 ($1)", 1], ["(\\d{4})(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["8"], "8 ($1)"]], "8", 0, 0, 0, 0, "3[04-689]|[489]", 0, "8~10"], "RW": ["250", "00", "(?:06|[27]\\d\\d|[89]00)\\d{6}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[7-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"]]], "0"], "SA": ["966", "00", "92\\d{7}|(?:[15]|8\\d)\\d{8}", [9, 10], [["(\\d{4})(\\d{5})", "$1 $2", ["9"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["81"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]]], "0"], "SB": ["677", "0[01]", "(?:[1-6]|[7-9]\\d\\d)\\d{4}", [5, 7], [["(\\d{2})(\\d{5})", "$1 $2", ["7|8[4-9]|9(?:[1-8]|9[0-8])"]]]], "SC": ["248", "010|0[0-2]", "800\\d{4}|(?:[249]\\d|64)\\d{5}", [7], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[246]|9[57]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "SD": ["249", "00", "[19]\\d{8}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[19]"], "0$1"]], "0"], "SE": ["46", "00", "(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}", [6, 7, 8, 9, 10], [["(\\d{2})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["20"], "0$1", 0, "$1 $2 $3"], ["(\\d{3})(\\d{4})", "$1-$2", ["9(?:00|39|44|9)"], "0$1", 0, "$1 $2"], ["(\\d{2})(\\d{3})(\\d{2})", "$1-$2 $3", ["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"], "0$1", 0, "$1 $2 $3"], ["(\\d)(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1", 0, "$1 $2 $3"], ["(\\d{3})(\\d{2,3})(\\d{3})", "$1-$2 $3", ["9(?:00|39|44)"], "0$1", 0, "$1 $2 $3"], ["(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["10|7"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{3})", "$1-$2 $3 $4", ["9"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4 $5", ["[26]"], "0$1", 0, "$1 $2 $3 $4 $5"]], "0"], "SG": ["65", "0[0-3]\\d", "(?:(?:1\\d|8)\\d\\d|7000)\\d{7}|[3689]\\d{7}", [8, 10, 11], [["(\\d{4})(\\d{4})", "$1 $2", ["[369]|8(?:0[1-6]|[1-9])"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]], ["(\\d{4})(\\d{4})(\\d{3})", "$1 $2 $3", ["7"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]]], "SH": ["290", "00", "(?:[256]\\d|8)\\d{3}", [4, 5], 0, 0, 0, 0, 0, 0, "[256]"], "SI": ["386", "00|10(?:22|66|88|99)", "[1-7]\\d{7}|8\\d{4,7}|90\\d{4,6}", [5, 6, 7, 8], [["(\\d{2})(\\d{3,6})", "$1 $2", ["8[09]|9"], "0$1"], ["(\\d{3})(\\d{5})", "$1 $2", ["59|8"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[37][01]|4[0139]|51|6"], "0$1"], ["(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-57]"], "(0$1)"]], "0", 0, 0, 0, 0, 0, 0, "00"], "SJ": ["47", "00", "0\\d{4}|(?:[489]\\d|[57]9)\\d{6}", [5, 8], 0, 0, 0, 0, 0, 0, "79"], "SK": ["421", "00", "[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}", [6, 7, 9], [["(\\d)(\\d{2})(\\d{3,4})", "$1 $2 $3", ["21"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["[3-5][1-8]1", "[3-5][1-8]1[67]"], "0$1"], ["(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1/$2 $3 $4", ["2"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[689]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1/$2 $3 $4", ["[3-5]"], "0$1"]], "0"], "SL": ["232", "00", "(?:[237-9]\\d|66)\\d{6}", [8], [["(\\d{2})(\\d{6})", "$1 $2", ["[236-9]"], "(0$1)"]], "0"], "SM": ["378", "00", "(?:0549|[5-7]\\d)\\d{6}", [8, 10], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-7]"]], ["(\\d{4})(\\d{6})", "$1 $2", ["0"]]], 0, 0, "([89]\\d{5})$", "0549$1"], "SN": ["221", "00", "(?:[378]\\d|93)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[379]"]]]], "SO": ["252", "00", "[346-9]\\d{8}|[12679]\\d{7}|[1-5]\\d{6}|[1348]\\d{5}", [6, 7, 8, 9], [["(\\d{2})(\\d{4})", "$1 $2", ["8[125]"]], ["(\\d{6})", "$1", ["[134]"]], ["(\\d)(\\d{6})", "$1 $2", ["[15]|2[0-79]|3[0-46-8]|4[0-7]"]], ["(\\d)(\\d{7})", "$1 $2", ["(?:2|90)4|[67]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[3478]|64|90"]], ["(\\d{2})(\\d{5,7})", "$1 $2", ["1|28|6(?:0[5-7]|[1-35-9])|9[2-9]"]]], "0"], "SR": ["597", "00", "(?:[2-5]|68|[78]\\d)\\d{5}", [6, 7], [["(\\d{2})(\\d{2})(\\d{2})", "$1-$2-$3", ["56"]], ["(\\d{3})(\\d{3})", "$1-$2", ["[2-5]"]], ["(\\d{3})(\\d{4})", "$1-$2", ["[6-8]"]]]], "SS": ["211", "00", "[19]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[19]"], "0$1"]], "0"], "ST": ["239", "00", "(?:22|9\\d)\\d{5}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[29]"]]]], "SV": ["503", "00", "[267]\\d{7}|[89]00\\d{4}(?:\\d{4})?", [7, 8, 11], [["(\\d{3})(\\d{4})", "$1 $2", ["[89]"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[267]"]], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[89]"]]]], "SX": ["1", "011", "7215\\d{6}|(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "(5\\d{6})$|1", "721$1", 0, "721"], "SY": ["963", "00", "[1-39]\\d{8}|[1-5]\\d{7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-5]"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1", 1]], "0"], "SZ": ["268", "00", "0800\\d{4}|(?:[237]\\d|900)\\d{6}", [8, 9], [["(\\d{4})(\\d{4})", "$1 $2", ["[0237]"]], ["(\\d{5})(\\d{4})", "$1 $2", ["9"]]]], "TA": ["290", "00", "8\\d{3}", [4], 0, 0, 0, 0, 0, 0, "8"], "TC": ["1", "011", "(?:[58]\\d\\d|649|900)\\d{7}", [10], 0, "1", 0, "([2-479]\\d{6})$|1", "649$1", 0, "649"], "TD": ["235", "00|16", "(?:22|[69]\\d|77)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2679]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "TG": ["228", "00", "[279]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[279]"]]]], "TH": ["66", "00[1-9]", "(?:001800|[2-57]|[689]\\d)\\d{7}|1\\d{7,9}", [8, 9, 10, 13], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[13-9]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]], "0"], "TJ": ["992", "810", "(?:00|[1-57-9]\\d)\\d{7}", [9], [["(\\d{6})(\\d)(\\d{2})", "$1 $2 $3", ["331", "3317"]], ["(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["[34]7|91[78]"]], ["(\\d{4})(\\d)(\\d{4})", "$1 $2 $3", ["3[1-5]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[0-57-9]"]]], 0, 0, 0, 0, 0, 0, 0, "8~10"], "TK": ["690", "00", "[2-47]\\d{3,6}", [4, 5, 6, 7]], "TL": ["670", "00", "7\\d{7}|(?:[2-47]\\d|[89]0)\\d{5}", [7, 8], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-489]|70"]], ["(\\d{4})(\\d{4})", "$1 $2", ["7"]]]], "TM": ["993", "810", "[1-6]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["12"], "(8 $1)"], ["(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-5]"], "(8 $1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["6"], "8 $1"]], "8", 0, 0, 0, 0, 0, 0, "8~10"], "TN": ["216", "00", "[2-57-9]\\d{7}", [8], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-57-9]"]]]], "TO": ["676", "00", "(?:0800|(?:[5-8]\\d\\d|999)\\d)\\d{3}|[2-8]\\d{4}", [5, 7], [["(\\d{2})(\\d{3})", "$1-$2", ["[2-4]|50|6[09]|7[0-24-69]|8[05]"]], ["(\\d{4})(\\d{3})", "$1 $2", ["0"]], ["(\\d{3})(\\d{4})", "$1 $2", ["[5-9]"]]]], "TR": ["90", "00", "4\\d{6}|8\\d{11,12}|(?:[2-58]\\d\\d|900)\\d{7}", [7, 10, 12, 13], [["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["512|8[01589]|90"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5(?:[0-59]|61)", "5(?:[0-59]|616)", "5(?:[0-59]|6161)"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24][1-8]|3[1-9]"], "(0$1)", 1], ["(\\d{3})(\\d{3})(\\d{6,7})", "$1 $2 $3", ["80"], "0$1", 1]], "0"], "TT": ["1", "011", "(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-46-8]\\d{6})$|1", "868$1", 0, "868"], "TV": ["688", "00", "(?:2|7\\d\\d|90)\\d{4}", [5, 6, 7], [["(\\d{2})(\\d{3})", "$1 $2", ["2"]], ["(\\d{2})(\\d{4})", "$1 $2", ["90"]], ["(\\d{2})(\\d{5})", "$1 $2", ["7"]]]], "TW": ["886", "0(?:0[25-79]|19)", "[2-689]\\d{8}|7\\d{9,10}|[2-8]\\d{7}|2\\d{6}", [7, 8, 9, 10, 11], [["(\\d{2})(\\d)(\\d{4})", "$1 $2 $3", ["202"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[258]0"], "0$1"], ["(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]", "[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[49]"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["7"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, 0, "#"], "TZ": ["255", "00[056]", "(?:[25-8]\\d|41|90)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[24]"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["5"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[67]"], "0$1"]], "0"], "UA": ["380", "00", "[89]\\d{9}|[3-9]\\d{8}", [9, 10], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]", "6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]"], "0$1"], ["(\\d{4})(\\d{5})", "$1 $2", ["3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])", "3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3-7]|89|9[1-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[89]"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, "0~0"], "UG": ["256", "00[057]", "800\\d{6}|(?:[29]0|[347]\\d)\\d{7}", [9], [["(\\d{4})(\\d{5})", "$1 $2", ["202", "2024"], "0$1"], ["(\\d{3})(\\d{6})", "$1 $2", ["[27-9]|4(?:6[45]|[7-9])"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["[34]"], "0$1"]], "0"], "US": ["1", "011", "[2-9]\\d{9}|3\\d{6}", [10], [["(\\d{3})(\\d{4})", "$1-$2", ["310"], 0, 1], ["(\\d{3})(\\d{3})(\\d{4})", "($1) $2-$3", ["[2-9]"], 0, 1, "$1-$2-$3"]], "1", 0, 0, 0, 0, 0, [["(?:47220[01]|5(?:05(?:[2-57-9]\\d\\d|6(?:[0-35-9]\\d|4[46]))|57200))\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[0-2]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}"], [""], ["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}"], ["900[2-9]\\d{6}"], ["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}"]]], "UY": ["598", "0(?:0|1[3-9]\\d)", "(?:0004|4)\\d{9}|[1249]\\d{7}|(?:[49]\\d|80)\\d{5}", [7, 8, 10, 13], [["(\\d{3})(\\d{4})", "$1 $2", ["405|8|90"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{4})(\\d{4})", "$1 $2", ["[124]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["4"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["0"]]], "0", 0, 0, 0, 0, 0, 0, "00", " int. "], "UZ": ["998", "810", "(?:33|[5-79]\\d|88)\\d{7}", [9], [["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[35-9]"], "8 $1"]], "8", 0, 0, 0, 0, 0, 0, "8~10"], "VA": ["39", "00", "0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}", [6, 7, 8, 9, 10, 11], 0, 0, 0, 0, 0, 0, "06698"], "VC": ["1", "011", "(?:[58]\\d\\d|784|900)\\d{7}", [10], 0, "1", 0, "([2-7]\\d{6})$|1", "784$1", 0, "784"], "VE": ["58", "00", "[68]00\\d{7}|(?:[24]\\d|[59]0)\\d{8}", [10], [["(\\d{3})(\\d{7})", "$1-$2", ["[24-689]"], "0$1"]], "0"], "VG": ["1", "011", "(?:284|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-578]\\d{6})$|1", "284$1", 0, "284"], "VI": ["1", "011", "[58]\\d{9}|(?:34|90)0\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "340$1", 0, "340"], "VN": ["84", "00", "[12]\\d{9}|[135-9]\\d{8}|[16]\\d{7}|[16-8]\\d{6}", [7, 8, 9, 10], [["(\\d{2})(\\d{5})", "$1 $2", ["80"], "0$1", 1], ["(\\d{4})(\\d{4,6})", "$1 $2", ["1"], 0, 1], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[69]"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[3578]"], "0$1", 1], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["2[48]"], "0$1", 1], ["(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["2"], "0$1", 1]], "0"], "VU": ["678", "00", "[57-9]\\d{6}|(?:[238]\\d|48)\\d{3}", [5, 7], [["(\\d{3})(\\d{4})", "$1 $2", ["[57-9]"]]]], "WF": ["681", "00", "(?:40|72)\\d{4}|8\\d{5}(?:\\d{3})?", [6, 9], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[478]"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]]]], "WS": ["685", "0", "(?:[2-6]|8\\d{5})\\d{4}|[78]\\d{6}|[68]\\d{5}", [5, 6, 7, 10], [["(\\d{5})", "$1", ["[2-5]|6[1-9]"]], ["(\\d{3})(\\d{3,7})", "$1 $2", ["[68]"]], ["(\\d{2})(\\d{5})", "$1 $2", ["7"]]]], "XK": ["383", "00", "[23]\\d{7,8}|(?:4\\d\\d|[89]00)\\d{5}", [8, 9], [["(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-4]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[23]"], "0$1"]], "0"], "YE": ["967", "00", "(?:1|7\\d)\\d{7}|[1-7]\\d{6}", [7, 8, 9], [["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-6]|7(?:[24-6]|8[0-7])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["7"], "0$1"]], "0"], "YT": ["262", "00", "(?:(?:(?:26|63)9|80\\d)\\d\\d|93980)\\d{4}", [9], 0, "0", 0, 0, 0, 0, "269|63|9398"], "ZA": ["27", "00", "[1-79]\\d{8}|8\\d{4,9}", [5, 6, 7, 8, 9, 10], [["(\\d{2})(\\d{3,4})", "$1 $2", ["8[1-4]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["8[1-4]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["860"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"]], "0"], "ZM": ["260", "00", "800\\d{6}|(?:21|63|[79]\\d)\\d{7}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[28]"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["[79]"], "0$1"]], "0"], "ZW": ["263", "00", "2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}", [5, 6, 7, 8, 9, 10], [["(\\d{3})(\\d{3,5})", "$1 $2", ["2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]"], "0$1"], ["(\\d)(\\d{3})(\\d{2,4})", "$1 $2 $3", ["[49]"], "0$1"], ["(\\d{3})(\\d{4})", "$1 $2", ["80"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2", "2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)", "2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)"], "0$1"], ["(\\d{4})(\\d{6})", "$1 $2", ["8"], "0$1"], ["(\\d{2})(\\d{3,5})", "$1 $2", ["1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["29[013-9]|39|54"], "0$1"], ["(\\d{4})(\\d{3,5})", "$1 $2", ["(?:25|54)8", "258|5483"], "0$1"]], "0"] }, "nonGeographic": { "800": ["800", 0, "(?:00|[1-9]\\d)\\d{6}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["\\d"]]], 0, 0, 0, 0, 0, 0, [0, 0, ["(?:00|[1-9]\\d)\\d{6}"]]], "808": ["808", 0, "[1-9]\\d{7}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[1-9]"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, 0, ["[1-9]\\d{7}"]]], "870": ["870", 0, "7\\d{11}|[35-7]\\d{8}", [9, 12], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[35-7]"]]], 0, 0, 0, 0, 0, 0, [0, ["(?:[356]|774[45])\\d{8}|7[6-8]\\d{7}"]]], "878": ["878", 0, "10\\d{10}", [12], [["(\\d{2})(\\d{5})(\\d{5})", "$1 $2 $3", ["1"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, ["10\\d{10}"]]], "881": ["881", 0, "[0-36-9]\\d{8}", [9], [["(\\d)(\\d{3})(\\d{5})", "$1 $2 $3", ["[0-36-9]"]]], 0, 0, 0, 0, 0, 0, [0, ["[0-36-9]\\d{8}"]]], "882": ["882", 0, "[13]\\d{6}(?:\\d{2,5})?|[19]\\d{7}|(?:[25]\\d\\d|4)\\d{7}(?:\\d{2})?", [7, 8, 9, 10, 11, 12], [["(\\d{2})(\\d{5})", "$1 $2", ["16|342"]], ["(\\d{2})(\\d{6})", "$1 $2", ["49"]], ["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["1[36]|9"]], ["(\\d{2})(\\d{4})(\\d{3})", "$1 $2 $3", ["3[23]"]], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["16"]], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10|23|3(?:[15]|4[57])|4|51"]], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["34"]], ["(\\d{2})(\\d{4,5})(\\d{5})", "$1 $2 $3", ["[1-35]"]]], 0, 0, 0, 0, 0, 0, [0, ["342\\d{4}|(?:337|49)\\d{6}|(?:3(?:2|47|7\\d{3})|50\\d{3})\\d{7}", [7, 8, 9, 10, 12]], 0, 0, 0, 0, 0, 0, ["1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\d{4}|6\\d{5,10})|(?:345\\d|9[89])\\d{6}|(?:10|2(?:3|85\\d)|3(?:[15]|[69]\\d\\d)|4[15-8]|51)\\d{8}"]]], "883": ["883", 0, "(?:[1-4]\\d|51)\\d{6,10}", [8, 9, 10, 11, 12], [["(\\d{3})(\\d{3})(\\d{2,8})", "$1 $2 $3", ["[14]|2[24-689]|3[02-689]|51[24-9]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["510"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["21"]], ["(\\d{4})(\\d{4})(\\d{4})", "$1 $2 $3", ["51[13]"]], ["(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[235]"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, ["(?:2(?:00\\d\\d|10)|(?:370[1-9]|51\\d0)\\d)\\d{7}|51(?:00\\d{5}|[24-9]0\\d{4,7})|(?:1[013-79]|2[24-689]|3[02-689]|4[0-4])0\\d{5,9}"]]], "888": ["888", 0, "\\d{11}", [11], [["(\\d{3})(\\d{3})(\\d{5})", "$1 $2 $3"]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, ["\\d{11}"]]], "979": ["979", 0, "[1359]\\d{8}", [9], [["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[1359]"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, ["[1359]\\d{8}"]]] } };

// ../../node_modules/libphonenumber-js/min/exports/withMetadataArgument.js
function withMetadataArgument(func, _arguments) {
  var args = Array.prototype.slice.call(_arguments);
  args.push(metadata_min_json_default);
  return func.apply(this, args);
}

// ../../node_modules/libphonenumber-js/es6/ParseError.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result2;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result2 = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result2 = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result2);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
var ParseError = /* @__PURE__ */ function(_Error) {
  _inherits(ParseError2, _Error);
  var _super = _createSuper(ParseError2);
  function ParseError2(code) {
    var _this;
    _classCallCheck(this, ParseError2);
    _this = _super.call(this, code);
    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError2.prototype);
    _this.name = _this.constructor.name;
    return _this;
  }
  return _createClass(ParseError2);
}(/* @__PURE__ */ _wrapNativeSuper(Error));

// ../../node_modules/libphonenumber-js/es6/constants.js
var MIN_LENGTH_FOR_NSN = 2;
var MAX_LENGTH_FOR_NSN = 17;
var MAX_LENGTH_COUNTRY_CODE = 3;
var VALID_DIGITS = "0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9";
var DASHES = "-\u2010-\u2015\u2212\u30FC\uFF0D";
var SLASHES = "\uFF0F/";
var DOTS = "\uFF0E.";
var WHITESPACE = " \xA0\xAD\u200B\u2060\u3000";
var BRACKETS = "()\uFF08\uFF09\uFF3B\uFF3D\\[\\]";
var TILDES = "~\u2053\u223C\uFF5E";
var VALID_PUNCTUATION = "".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);
var PLUS_CHARS = "+\uFF0B";

// ../../node_modules/libphonenumber-js/es6/tools/semver-compare.js
function semver_compare_default(a, b) {
  a = a.split("-");
  b = b.split("-");
  var pa = a[0].split(".");
  var pb = b[0].split(".");
  for (var i = 0; i < 3; i++) {
    var na = Number(pa[i]);
    var nb = Number(pb[i]);
    if (na > nb)
      return 1;
    if (nb > na)
      return -1;
    if (!isNaN(na) && isNaN(nb))
      return 1;
    if (isNaN(na) && !isNaN(nb))
      return -1;
  }
  if (a[1] && b[1]) {
    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;
  }
  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;
}

// ../../node_modules/libphonenumber-js/es6/metadata.js
function _typeof2(obj) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof2(obj);
}
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var V3 = "1.2.0";
var V4 = "1.7.35";
var DEFAULT_EXT_PREFIX = " ext. ";
var CALLING_CODE_REG_EXP = /^\d+$/;
var Metadata = /* @__PURE__ */ function() {
  function Metadata2(metadata) {
    _classCallCheck2(this, Metadata2);
    validateMetadata(metadata);
    this.metadata = metadata;
    setVersion.call(this, metadata);
  }
  _createClass2(Metadata2, [{
    key: "getCountries",
    value: function getCountries() {
      return Object.keys(this.metadata.countries).filter(function(_) {
        return _ !== "001";
      });
    }
  }, {
    key: "getCountryMetadata",
    value: function getCountryMetadata(countryCode) {
      return this.metadata.countries[countryCode];
    }
  }, {
    key: "nonGeographic",
    value: function nonGeographic() {
      if (this.v1 || this.v2 || this.v3)
        return;
      return this.metadata.nonGeographic || this.metadata.nonGeographical;
    }
  }, {
    key: "hasCountry",
    value: function hasCountry(country) {
      return this.getCountryMetadata(country) !== void 0;
    }
  }, {
    key: "hasCallingCode",
    value: function hasCallingCode(callingCode) {
      if (this.getCountryCodesForCallingCode(callingCode)) {
        return true;
      }
      if (this.nonGeographic()) {
        if (this.nonGeographic()[callingCode]) {
          return true;
        }
      } else {
        var countryCodes = this.countryCallingCodes()[callingCode];
        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === "001") {
          return true;
        }
      }
    }
  }, {
    key: "isNonGeographicCallingCode",
    value: function isNonGeographicCallingCode(callingCode) {
      if (this.nonGeographic()) {
        return this.nonGeographic()[callingCode] ? true : false;
      } else {
        return this.getCountryCodesForCallingCode(callingCode) ? false : true;
      }
    }
    // Deprecated.
  }, {
    key: "country",
    value: function country(countryCode) {
      return this.selectNumberingPlan(countryCode);
    }
  }, {
    key: "selectNumberingPlan",
    value: function selectNumberingPlan(countryCode, callingCode) {
      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {
        callingCode = countryCode;
        countryCode = null;
      }
      if (countryCode && countryCode !== "001") {
        if (!this.hasCountry(countryCode)) {
          throw new Error("Unknown country: ".concat(countryCode));
        }
        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);
      } else if (callingCode) {
        if (!this.hasCallingCode(callingCode)) {
          throw new Error("Unknown calling code: ".concat(callingCode));
        }
        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);
      } else {
        this.numberingPlan = void 0;
      }
      return this;
    }
  }, {
    key: "getCountryCodesForCallingCode",
    value: function getCountryCodesForCallingCode(callingCode) {
      var countryCodes = this.countryCallingCodes()[callingCode];
      if (countryCodes) {
        if (countryCodes.length === 1 && countryCodes[0].length === 3) {
          return;
        }
        return countryCodes;
      }
    }
  }, {
    key: "getCountryCodeForCallingCode",
    value: function getCountryCodeForCallingCode(callingCode) {
      var countryCodes = this.getCountryCodesForCallingCode(callingCode);
      if (countryCodes) {
        return countryCodes[0];
      }
    }
  }, {
    key: "getNumberingPlanMetadata",
    value: function getNumberingPlanMetadata(callingCode) {
      var countryCode = this.getCountryCodeForCallingCode(callingCode);
      if (countryCode) {
        return this.getCountryMetadata(countryCode);
      }
      if (this.nonGeographic()) {
        var metadata = this.nonGeographic()[callingCode];
        if (metadata) {
          return metadata;
        }
      } else {
        var countryCodes = this.countryCallingCodes()[callingCode];
        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === "001") {
          return this.metadata.countries["001"];
        }
      }
    }
    // Deprecated.
  }, {
    key: "countryCallingCode",
    value: function countryCallingCode() {
      return this.numberingPlan.callingCode();
    }
    // Deprecated.
  }, {
    key: "IDDPrefix",
    value: function IDDPrefix() {
      return this.numberingPlan.IDDPrefix();
    }
    // Deprecated.
  }, {
    key: "defaultIDDPrefix",
    value: function defaultIDDPrefix() {
      return this.numberingPlan.defaultIDDPrefix();
    }
    // Deprecated.
  }, {
    key: "nationalNumberPattern",
    value: function nationalNumberPattern() {
      return this.numberingPlan.nationalNumberPattern();
    }
    // Deprecated.
  }, {
    key: "possibleLengths",
    value: function possibleLengths() {
      return this.numberingPlan.possibleLengths();
    }
    // Deprecated.
  }, {
    key: "formats",
    value: function formats() {
      return this.numberingPlan.formats();
    }
    // Deprecated.
  }, {
    key: "nationalPrefixForParsing",
    value: function nationalPrefixForParsing() {
      return this.numberingPlan.nationalPrefixForParsing();
    }
    // Deprecated.
  }, {
    key: "nationalPrefixTransformRule",
    value: function nationalPrefixTransformRule() {
      return this.numberingPlan.nationalPrefixTransformRule();
    }
    // Deprecated.
  }, {
    key: "leadingDigits",
    value: function leadingDigits() {
      return this.numberingPlan.leadingDigits();
    }
    // Deprecated.
  }, {
    key: "hasTypes",
    value: function hasTypes() {
      return this.numberingPlan.hasTypes();
    }
    // Deprecated.
  }, {
    key: "type",
    value: function type(_type) {
      return this.numberingPlan.type(_type);
    }
    // Deprecated.
  }, {
    key: "ext",
    value: function ext() {
      return this.numberingPlan.ext();
    }
  }, {
    key: "countryCallingCodes",
    value: function countryCallingCodes() {
      if (this.v1)
        return this.metadata.country_phone_code_to_countries;
      return this.metadata.country_calling_codes;
    }
    // Deprecated.
  }, {
    key: "chooseCountryByCountryCallingCode",
    value: function chooseCountryByCountryCallingCode(callingCode) {
      return this.selectNumberingPlan(callingCode);
    }
  }, {
    key: "hasSelectedNumberingPlan",
    value: function hasSelectedNumberingPlan() {
      return this.numberingPlan !== void 0;
    }
  }]);
  return Metadata2;
}();
var NumberingPlan = /* @__PURE__ */ function() {
  function NumberingPlan2(metadata, globalMetadataObject) {
    _classCallCheck2(this, NumberingPlan2);
    this.globalMetadataObject = globalMetadataObject;
    this.metadata = metadata;
    setVersion.call(this, globalMetadataObject.metadata);
  }
  _createClass2(NumberingPlan2, [{
    key: "callingCode",
    value: function callingCode() {
      return this.metadata[0];
    }
    // Formatting information for regions which share
    // a country calling code is contained by only one region
    // for performance reasons. For example, for NANPA region
    // ("North American Numbering Plan Administration",
    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)
    // it will be contained in the metadata for `US`.
  }, {
    key: "getDefaultCountryMetadataForRegion",
    value: function getDefaultCountryMetadataForRegion() {
      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());
    }
    // Is always present.
  }, {
    key: "IDDPrefix",
    value: function IDDPrefix() {
      if (this.v1 || this.v2)
        return;
      return this.metadata[1];
    }
    // Is only present when a country supports multiple IDD prefixes.
  }, {
    key: "defaultIDDPrefix",
    value: function defaultIDDPrefix() {
      if (this.v1 || this.v2)
        return;
      return this.metadata[12];
    }
  }, {
    key: "nationalNumberPattern",
    value: function nationalNumberPattern() {
      if (this.v1 || this.v2)
        return this.metadata[1];
      return this.metadata[2];
    }
    // "possible length" data is always present in Google's metadata.
  }, {
    key: "possibleLengths",
    value: function possibleLengths() {
      if (this.v1)
        return;
      return this.metadata[this.v2 ? 2 : 3];
    }
  }, {
    key: "_getFormats",
    value: function _getFormats(metadata) {
      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];
    }
    // For countries of the same region (e.g. NANPA)
    // formats are all stored in the "main" country for that region.
    // E.g. "RU" and "KZ", "US" and "CA".
  }, {
    key: "formats",
    value: function formats() {
      var _this = this;
      var formats2 = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];
      return formats2.map(function(_) {
        return new Format(_, _this);
      });
    }
  }, {
    key: "nationalPrefix",
    value: function nationalPrefix() {
      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];
    }
  }, {
    key: "_getNationalPrefixFormattingRule",
    value: function _getNationalPrefixFormattingRule(metadata) {
      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];
    }
    // For countries of the same region (e.g. NANPA)
    // national prefix formatting rule is stored in the "main" country for that region.
    // E.g. "RU" and "KZ", "US" and "CA".
  }, {
    key: "nationalPrefixFormattingRule",
    value: function nationalPrefixFormattingRule() {
      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());
    }
  }, {
    key: "_nationalPrefixForParsing",
    value: function _nationalPrefixForParsing() {
      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];
    }
  }, {
    key: "nationalPrefixForParsing",
    value: function nationalPrefixForParsing() {
      return this._nationalPrefixForParsing() || this.nationalPrefix();
    }
  }, {
    key: "nationalPrefixTransformRule",
    value: function nationalPrefixTransformRule() {
      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];
    }
  }, {
    key: "_getNationalPrefixIsOptionalWhenFormatting",
    value: function _getNationalPrefixIsOptionalWhenFormatting() {
      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];
    }
    // For countries of the same region (e.g. NANPA)
    // "national prefix is optional when formatting" flag is
    // stored in the "main" country for that region.
    // E.g. "RU" and "KZ", "US" and "CA".
  }, {
    key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());
    }
  }, {
    key: "leadingDigits",
    value: function leadingDigits() {
      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];
    }
  }, {
    key: "types",
    value: function types() {
      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];
    }
  }, {
    key: "hasTypes",
    value: function hasTypes() {
      if (this.types() && this.types().length === 0) {
        return false;
      }
      return !!this.types();
    }
  }, {
    key: "type",
    value: function type(_type2) {
      if (this.hasTypes() && getType(this.types(), _type2)) {
        return new Type(getType(this.types(), _type2), this);
      }
    }
  }, {
    key: "ext",
    value: function ext() {
      if (this.v1 || this.v2)
        return DEFAULT_EXT_PREFIX;
      return this.metadata[13] || DEFAULT_EXT_PREFIX;
    }
  }]);
  return NumberingPlan2;
}();
var Format = /* @__PURE__ */ function() {
  function Format2(format3, metadata) {
    _classCallCheck2(this, Format2);
    this._format = format3;
    this.metadata = metadata;
  }
  _createClass2(Format2, [{
    key: "pattern",
    value: function pattern() {
      return this._format[0];
    }
  }, {
    key: "format",
    value: function format3() {
      return this._format[1];
    }
  }, {
    key: "leadingDigitsPatterns",
    value: function leadingDigitsPatterns() {
      return this._format[2] || [];
    }
  }, {
    key: "nationalPrefixFormattingRule",
    value: function nationalPrefixFormattingRule() {
      return this._format[3] || this.metadata.nationalPrefixFormattingRule();
    }
  }, {
    key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
    }
  }, {
    key: "nationalPrefixIsMandatoryWhenFormattingInNationalFormat",
    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {
      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
    }
    // Checks whether national prefix formatting rule contains national prefix.
  }, {
    key: "usesNationalPrefix",
    value: function usesNationalPrefix() {
      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a "dummy" one.
      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) ? true : false;
    }
  }, {
    key: "internationalFormat",
    value: function internationalFormat() {
      return this._format[5] || this.format();
    }
  }]);
  return Format2;
}();
var FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\(?\$1\)?$/;
var Type = /* @__PURE__ */ function() {
  function Type2(type, metadata) {
    _classCallCheck2(this, Type2);
    this.type = type;
    this.metadata = metadata;
  }
  _createClass2(Type2, [{
    key: "pattern",
    value: function pattern() {
      if (this.metadata.v1)
        return this.type;
      return this.type[0];
    }
  }, {
    key: "possibleLengths",
    value: function possibleLengths() {
      if (this.metadata.v1)
        return;
      return this.type[1] || this.metadata.possibleLengths();
    }
  }]);
  return Type2;
}();
function getType(types, type) {
  switch (type) {
    case "FIXED_LINE":
      return types[0];
    case "MOBILE":
      return types[1];
    case "TOLL_FREE":
      return types[2];
    case "PREMIUM_RATE":
      return types[3];
    case "PERSONAL_NUMBER":
      return types[4];
    case "VOICEMAIL":
      return types[5];
    case "UAN":
      return types[6];
    case "PAGER":
      return types[7];
    case "VOIP":
      return types[8];
    case "SHARED_COST":
      return types[9];
  }
}
function validateMetadata(metadata) {
  if (!metadata) {
    throw new Error("[libphonenumber-js] `metadata` argument not passed. Check your arguments.");
  }
  if (!is_object(metadata) || !is_object(metadata.countries)) {
    throw new Error("[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got ".concat(is_object(metadata) ? "an object of shape: { " + Object.keys(metadata).join(", ") + " }" : "a " + type_of(metadata) + ": " + metadata, "."));
  }
}
var is_object = function is_object2(_) {
  return _typeof2(_) === "object";
};
var type_of = function type_of2(_) {
  return _typeof2(_);
};
function getCountryCallingCode(country, metadata) {
  metadata = new Metadata(metadata);
  if (metadata.hasCountry(country)) {
    return metadata.country(country).countryCallingCode();
  }
  throw new Error("Unknown country: ".concat(country));
}
function isSupportedCountry(country, metadata) {
  return metadata.countries[country] !== void 0;
}
function setVersion(metadata) {
  var version = metadata.version;
  if (typeof version === "number") {
    this.v1 = version === 1;
    this.v2 = version === 2;
    this.v3 = version === 3;
    this.v4 = version === 4;
  } else {
    if (!version) {
      this.v1 = true;
    } else if (semver_compare_default(version, V3) === -1) {
      this.v2 = true;
    } else if (semver_compare_default(version, V4) === -1) {
      this.v3 = true;
    } else {
      this.v4 = true;
    }
  }
}

// ../../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js
var RFC3966_EXTN_PREFIX = ";ext=";
var getExtensionDigitsPattern = function getExtensionDigitsPattern2(maxLength) {
  return "([".concat(VALID_DIGITS, "]{1,").concat(maxLength, "})");
};
function createExtensionPattern(purpose) {
  var extLimitAfterExplicitLabel = "20";
  var extLimitAfterLikelyLabel = "15";
  var extLimitAfterAmbiguousChar = "9";
  var extLimitWhenNotSure = "6";
  var possibleSeparatorsBetweenNumberAndExtLabel = "[ \xA0\\t,]*";
  var possibleCharsAfterExtLabel = "[:\\.\uFF0E]?[ \xA0\\t,-]*";
  var optionalExtnSuffix = "#?";
  var explicitExtLabels = "(?:e?xt(?:ensi(?:o\u0301?|\xF3))?n?|\uFF45?\uFF58\uFF54\uFF4E?|\u0434\u043E\u0431|anexo)";
  var ambiguousExtLabels = "(?:[x\uFF58#\uFF03~\uFF5E]|int|\uFF49\uFF4E\uFF54)";
  var ambiguousSeparator = "[- ]+";
  var possibleSeparatorsNumberExtLabelNoComma = "[ \xA0\\t]*";
  var autoDiallingAndExtLabelsFound = "(?:,{2}|;)";
  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);
  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;
  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;
  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + "#";
  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;
  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + "(?:,)+" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;
  return rfcExtn + "|" + explicitExtn + "|" + ambiguousExtn + "|" + americanStyleExtnWithSuffix + "|" + autoDiallingExtn + "|" + onlyCommasExtn;
}

// ../../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js
var MIN_LENGTH_PHONE_NUMBER_PATTERN = "[" + VALID_DIGITS + "]{" + MIN_LENGTH_FOR_NSN + "}";
var VALID_PHONE_NUMBER = "[" + PLUS_CHARS + "]{0,1}(?:[" + VALID_PUNCTUATION + "]*[" + VALID_DIGITS + "]){3,}[" + VALID_PUNCTUATION + VALID_DIGITS + "]*";
var VALID_PHONE_NUMBER_START_REG_EXP = new RegExp("^[" + PLUS_CHARS + "]{0,1}(?:[" + VALID_PUNCTUATION + "]*[" + VALID_DIGITS + "]){1,2}$", "i");
var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions
"(?:" + createExtensionPattern() + ")?";
var VALID_PHONE_NUMBER_PATTERN = new RegExp(
  // Either a short two-digit-only phone number
  "^" + MIN_LENGTH_PHONE_NUMBER_PATTERN + "$|^" + VALID_PHONE_NUMBER_WITH_EXTENSION + "$",
  "i"
);
function isViablePhoneNumber(number) {
  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);
}
function isViablePhoneNumberStart(number) {
  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);
}

// ../../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js
var EXTN_PATTERN = new RegExp("(?:" + createExtensionPattern() + ")$", "i");
function extractExtension(number) {
  var start = number.search(EXTN_PATTERN);
  if (start < 0) {
    return {};
  }
  var numberWithoutExtension = number.slice(0, start);
  var matches = number.match(EXTN_PATTERN);
  var i = 1;
  while (i < matches.length) {
    if (matches[i]) {
      return {
        number: numberWithoutExtension,
        ext: matches[i]
      };
    }
    i++;
  }
}

// ../../node_modules/libphonenumber-js/es6/helpers/parseDigits.js
var DIGITS = {
  "0": "0",
  "1": "1",
  "2": "2",
  "3": "3",
  "4": "4",
  "5": "5",
  "6": "6",
  "7": "7",
  "8": "8",
  "9": "9",
  "\uFF10": "0",
  // Fullwidth digit 0
  "\uFF11": "1",
  // Fullwidth digit 1
  "\uFF12": "2",
  // Fullwidth digit 2
  "\uFF13": "3",
  // Fullwidth digit 3
  "\uFF14": "4",
  // Fullwidth digit 4
  "\uFF15": "5",
  // Fullwidth digit 5
  "\uFF16": "6",
  // Fullwidth digit 6
  "\uFF17": "7",
  // Fullwidth digit 7
  "\uFF18": "8",
  // Fullwidth digit 8
  "\uFF19": "9",
  // Fullwidth digit 9
  "\u0660": "0",
  // Arabic-indic digit 0
  "\u0661": "1",
  // Arabic-indic digit 1
  "\u0662": "2",
  // Arabic-indic digit 2
  "\u0663": "3",
  // Arabic-indic digit 3
  "\u0664": "4",
  // Arabic-indic digit 4
  "\u0665": "5",
  // Arabic-indic digit 5
  "\u0666": "6",
  // Arabic-indic digit 6
  "\u0667": "7",
  // Arabic-indic digit 7
  "\u0668": "8",
  // Arabic-indic digit 8
  "\u0669": "9",
  // Arabic-indic digit 9
  "\u06F0": "0",
  // Eastern-Arabic digit 0
  "\u06F1": "1",
  // Eastern-Arabic digit 1
  "\u06F2": "2",
  // Eastern-Arabic digit 2
  "\u06F3": "3",
  // Eastern-Arabic digit 3
  "\u06F4": "4",
  // Eastern-Arabic digit 4
  "\u06F5": "5",
  // Eastern-Arabic digit 5
  "\u06F6": "6",
  // Eastern-Arabic digit 6
  "\u06F7": "7",
  // Eastern-Arabic digit 7
  "\u06F8": "8",
  // Eastern-Arabic digit 8
  "\u06F9": "9"
  // Eastern-Arabic digit 9
};
function parseDigit(character) {
  return DIGITS[character];
}

// ../../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function parseIncompletePhoneNumber(string) {
  var result2 = "";
  for (var _iterator = _createForOfIteratorHelperLoose(string.split("")), _step; !(_step = _iterator()).done; ) {
    var character = _step.value;
    result2 += parsePhoneNumberCharacter(character, result2) || "";
  }
  return result2;
}
function parsePhoneNumberCharacter(character, prevParsedCharacters) {
  if (character === "+") {
    if (prevParsedCharacters) {
      return;
    }
    return "+";
  }
  return parseDigit(character);
}

// ../../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js
function _createForOfIteratorHelperLoose2(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function mergeArrays(a, b) {
  var merged = a.slice();
  for (var _iterator = _createForOfIteratorHelperLoose2(b), _step; !(_step = _iterator()).done; ) {
    var element = _step.value;
    if (a.indexOf(element) < 0) {
      merged.push(element);
    }
  }
  return merged.sort(function(a2, b2) {
    return a2 - b2;
  });
}

// ../../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js
function checkNumberLength(nationalNumber, metadata) {
  return checkNumberLengthForType(nationalNumber, void 0, metadata);
}
function checkNumberLengthForType(nationalNumber, type, metadata) {
  var type_info = metadata.type(type);
  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();
  if (!possible_lengths) {
    return "IS_POSSIBLE";
  }
  if (type === "FIXED_LINE_OR_MOBILE") {
    if (!metadata.type("FIXED_LINE")) {
      return checkNumberLengthForType(nationalNumber, "MOBILE", metadata);
    }
    var mobile_type = metadata.type("MOBILE");
    if (mobile_type) {
      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());
    }
  } else if (type && !type_info) {
    return "INVALID_LENGTH";
  }
  var actual_length = nationalNumber.length;
  var minimum_length = possible_lengths[0];
  if (minimum_length === actual_length) {
    return "IS_POSSIBLE";
  }
  if (minimum_length > actual_length) {
    return "TOO_SHORT";
  }
  if (possible_lengths[possible_lengths.length - 1] < actual_length) {
    return "TOO_LONG";
  }
  return possible_lengths.indexOf(actual_length, 1) >= 0 ? "IS_POSSIBLE" : "INVALID_LENGTH";
}

// ../../node_modules/libphonenumber-js/es6/isPossible.js
function isPossiblePhoneNumber(input, options, metadata) {
  if (options === void 0) {
    options = {};
  }
  metadata = new Metadata(metadata);
  if (options.v2) {
    if (!input.countryCallingCode) {
      throw new Error("Invalid phone number object passed");
    }
    metadata.selectNumberingPlan(input.countryCallingCode);
  } else {
    if (!input.phone) {
      return false;
    }
    if (input.country) {
      if (!metadata.hasCountry(input.country)) {
        throw new Error("Unknown country: ".concat(input.country));
      }
      metadata.country(input.country);
    } else {
      if (!input.countryCallingCode) {
        throw new Error("Invalid phone number object passed");
      }
      metadata.selectNumberingPlan(input.countryCallingCode);
    }
  }
  if (metadata.possibleLengths()) {
    return isPossibleNumber(input.phone || input.nationalNumber, metadata);
  } else {
    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {
      return true;
    } else {
      throw new Error('Missing "possibleLengths" in metadata. Perhaps the metadata has been generated before v1.0.18.');
    }
  }
}
function isPossibleNumber(nationalNumber, metadata) {
  switch (checkNumberLength(nationalNumber, metadata)) {
    case "IS_POSSIBLE":
      return true;
    default:
      return false;
  }
}

// ../../node_modules/libphonenumber-js/es6/helpers/RFC3966.js
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _createForOfIteratorHelperLoose3(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray3(o, minLen);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function parseRFC3966(text) {
  var number;
  var ext;
  text = text.replace(/^tel:/, "tel=");
  for (var _iterator = _createForOfIteratorHelperLoose3(text.split(";")), _step; !(_step = _iterator()).done; ) {
    var part = _step.value;
    var _part$split = part.split("="), _part$split2 = _slicedToArray(_part$split, 2), name = _part$split2[0], value = _part$split2[1];
    switch (name) {
      case "tel":
        number = value;
        break;
      case "ext":
        ext = value;
        break;
      case "phone-context":
        if (value[0] === "+") {
          number = value + number;
        }
        break;
    }
  }
  if (!isViablePhoneNumber(number)) {
    return {};
  }
  var result2 = {
    number
  };
  if (ext) {
    result2.ext = ext;
  }
  return result2;
}
function formatRFC3966(_ref) {
  var number = _ref.number, ext = _ref.ext;
  if (!number) {
    return "";
  }
  if (number[0] !== "+") {
    throw new Error('"formatRFC3966()" expects "number" to be in E.164 format.');
  }
  return "tel:".concat(number).concat(ext ? ";ext=" + ext : "");
}

// ../../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js
function matchesEntirely(text, regular_expression) {
  text = text || "";
  return new RegExp("^(?:" + regular_expression + ")$").test(text);
}

// ../../node_modules/libphonenumber-js/es6/helpers/getNumberType.js
function _createForOfIteratorHelperLoose4(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray4(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray4(o, minLen);
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var NON_FIXED_LINE_PHONE_TYPES = ["MOBILE", "PREMIUM_RATE", "TOLL_FREE", "SHARED_COST", "VOIP", "PERSONAL_NUMBER", "PAGER", "UAN", "VOICEMAIL"];
function getNumberType(input, options, metadata) {
  options = options || {};
  if (!input.country) {
    return;
  }
  metadata = new Metadata(metadata);
  metadata.selectNumberingPlan(input.country, input.countryCallingCode);
  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;
  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {
    return;
  }
  if (isNumberTypeEqualTo(nationalNumber, "FIXED_LINE", metadata)) {
    if (metadata.type("MOBILE") && metadata.type("MOBILE").pattern() === "") {
      return "FIXED_LINE_OR_MOBILE";
    }
    if (!metadata.type("MOBILE")) {
      return "FIXED_LINE_OR_MOBILE";
    }
    if (isNumberTypeEqualTo(nationalNumber, "MOBILE", metadata)) {
      return "FIXED_LINE_OR_MOBILE";
    }
    return "FIXED_LINE";
  }
  for (var _iterator = _createForOfIteratorHelperLoose4(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done; ) {
    var type = _step.value;
    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {
      return type;
    }
  }
}
function isNumberTypeEqualTo(nationalNumber, type, metadata) {
  type = metadata.type(type);
  if (!type || !type.pattern()) {
    return false;
  }
  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {
    return false;
  }
  return matchesEntirely(nationalNumber, type.pattern());
}

// ../../node_modules/libphonenumber-js/es6/isValid.js
function isValidNumber(input, options, metadata) {
  options = options || {};
  metadata = new Metadata(metadata);
  metadata.selectNumberingPlan(input.country, input.countryCallingCode);
  if (metadata.hasTypes()) {
    return getNumberType(input, options, metadata.metadata) !== void 0;
  }
  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;
  return matchesEntirely(nationalNumber, metadata.nationalNumberPattern());
}

// ../../node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js
function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {
  var _metadata = new Metadata(metadata);
  var possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode);
  if (!possibleCountries) {
    return [];
  }
  return possibleCountries.filter(function(country) {
    return couldNationalNumberBelongToCountry(nationalNumber, country, metadata);
  });
}
function couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {
  var _metadata = new Metadata(metadata);
  _metadata.selectNumberingPlan(country);
  if (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {
    return true;
  }
  return false;
}

// ../../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js
function applyInternationalSeparatorStyle(formattedNumber) {
  return formattedNumber.replace(new RegExp("[".concat(VALID_PUNCTUATION, "]+"), "g"), " ").trim();
}

// ../../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js
var FIRST_GROUP_PATTERN = /(\$\d)/;
function formatNationalNumberUsingFormat(number, format3, _ref) {
  var useInternationalFormat = _ref.useInternationalFormat, withNationalPrefix = _ref.withNationalPrefix, carrierCode = _ref.carrierCode, metadata = _ref.metadata;
  var formattedNumber = number.replace(new RegExp(format3.pattern()), useInternationalFormat ? format3.internationalFormat() : (
    // This library doesn't use `domestic_carrier_code_formatting_rule`,
    // because that one is only used when formatting phone numbers
    // for dialing from a mobile phone, and this is not a dialing library.
    // carrierCode && format.domesticCarrierCodeFormattingRule()
    // 	// First, replace the $CC in the formatting rule with the desired carrier code.
    // 	// Then, replace the $FG in the formatting rule with the first group
    // 	// and the carrier code combined in the appropriate way.
    // 	? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))
    // 	: (
    // 		withNationalPrefix && format.nationalPrefixFormattingRule()
    // 			? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())
    // 			: format.format()
    // 	)
    withNationalPrefix && format3.nationalPrefixFormattingRule() ? format3.format().replace(FIRST_GROUP_PATTERN, format3.nationalPrefixFormattingRule()) : format3.format()
  ));
  if (useInternationalFormat) {
    return applyInternationalSeparatorStyle(formattedNumber);
  }
  return formattedNumber;
}

// ../../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js
var SINGLE_IDD_PREFIX_REG_EXP = /^[\d]+(?:[~\u2053\u223C\uFF5E][\d]+)?$/;
function getIddPrefix(country, callingCode, metadata) {
  var countryMetadata = new Metadata(metadata);
  countryMetadata.selectNumberingPlan(country, callingCode);
  if (countryMetadata.defaultIDDPrefix()) {
    return countryMetadata.defaultIDDPrefix();
  }
  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {
    return countryMetadata.IDDPrefix();
  }
}

// ../../node_modules/libphonenumber-js/es6/format.js
function _createForOfIteratorHelperLoose5(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray5(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray5(o, minLen);
}
function _arrayLikeToArray5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DEFAULT_OPTIONS = {
  formatExtension: function formatExtension(formattedNumber, extension, metadata) {
    return "".concat(formattedNumber).concat(metadata.ext()).concat(extension);
  }
};
function formatNumber(input, format3, options, metadata) {
  if (options) {
    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);
  } else {
    options = DEFAULT_OPTIONS;
  }
  metadata = new Metadata(metadata);
  if (input.country && input.country !== "001") {
    if (!metadata.hasCountry(input.country)) {
      throw new Error("Unknown country: ".concat(input.country));
    }
    metadata.country(input.country);
  } else if (input.countryCallingCode) {
    metadata.selectNumberingPlan(input.countryCallingCode);
  } else
    return input.phone || "";
  var countryCallingCode = metadata.countryCallingCode();
  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;
  var number;
  switch (format3) {
    case "NATIONAL":
      if (!nationalNumber) {
        return "";
      }
      number = formatNationalNumber(nationalNumber, input.carrierCode, "NATIONAL", metadata, options);
      return addExtension(number, input.ext, metadata, options.formatExtension);
    case "INTERNATIONAL":
      if (!nationalNumber) {
        return "+".concat(countryCallingCode);
      }
      number = formatNationalNumber(nationalNumber, null, "INTERNATIONAL", metadata, options);
      number = "+".concat(countryCallingCode, " ").concat(number);
      return addExtension(number, input.ext, metadata, options.formatExtension);
    case "E.164":
      return "+".concat(countryCallingCode).concat(nationalNumber);
    case "RFC3966":
      return formatRFC3966({
        number: "+".concat(countryCallingCode).concat(nationalNumber),
        ext: input.ext
      });
    case "IDD":
      if (!options.fromCountry) {
        return;
      }
      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);
      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);
    default:
      throw new Error('Unknown "format" argument passed to "formatNumber()": "'.concat(format3, '"'));
  }
}
function formatNationalNumber(number, carrierCode, formatAs, metadata, options) {
  var format3 = chooseFormatForNumber(metadata.formats(), number);
  if (!format3) {
    return number;
  }
  return formatNationalNumberUsingFormat(number, format3, {
    useInternationalFormat: formatAs === "INTERNATIONAL",
    withNationalPrefix: format3.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,
    carrierCode,
    metadata
  });
}
function chooseFormatForNumber(availableFormats, nationalNnumber) {
  for (var _iterator = _createForOfIteratorHelperLoose5(availableFormats), _step; !(_step = _iterator()).done; ) {
    var format3 = _step.value;
    if (format3.leadingDigitsPatterns().length > 0) {
      var lastLeadingDigitsPattern = format3.leadingDigitsPatterns()[format3.leadingDigitsPatterns().length - 1];
      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {
        continue;
      }
    }
    if (matchesEntirely(nationalNnumber, format3.pattern())) {
      return format3;
    }
  }
}
function addExtension(formattedNumber, ext, metadata, formatExtension2) {
  return ext ? formatExtension2(formattedNumber, ext, metadata) : formattedNumber;
}
function formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {
  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata);
  if (fromCountryCallingCode === countryCallingCode) {
    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, "NATIONAL", metadata);
    if (countryCallingCode === "1") {
      return countryCallingCode + " " + formattedNumber;
    }
    return formattedNumber;
  }
  var iddPrefix = getIddPrefix(fromCountry, void 0, metadata.metadata);
  if (iddPrefix) {
    return "".concat(iddPrefix, " ").concat(countryCallingCode, " ").concat(formatNationalNumber(nationalNumber, null, "INTERNATIONAL", metadata));
  }
}

// ../../node_modules/libphonenumber-js/es6/PhoneNumber.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;
var PhoneNumber = /* @__PURE__ */ function() {
  function PhoneNumber2(countryOrCountryCallingCode, nationalNumber, metadata) {
    _classCallCheck3(this, PhoneNumber2);
    if (!countryOrCountryCallingCode) {
      throw new TypeError("`country` or `countryCallingCode` not passed");
    }
    if (!nationalNumber) {
      throw new TypeError("`nationalNumber` not passed");
    }
    if (!metadata) {
      throw new TypeError("`metadata` not passed");
    }
    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata), country = _getCountryAndCountry.country, countryCallingCode = _getCountryAndCountry.countryCallingCode;
    this.country = country;
    this.countryCallingCode = countryCallingCode;
    this.nationalNumber = nationalNumber;
    this.number = "+" + this.countryCallingCode + this.nationalNumber;
    this.metadata = metadata;
  }
  _createClass3(PhoneNumber2, [{
    key: "setExt",
    value: function setExt(ext) {
      this.ext = ext;
    }
  }, {
    key: "getPossibleCountries",
    value: function getPossibleCountries() {
      if (this.country) {
        return [this.country];
      }
      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.metadata);
    }
  }, {
    key: "isPossible",
    value: function isPossible() {
      return isPossiblePhoneNumber(this, {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "isValid",
    value: function isValid() {
      return isValidNumber(this, {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "isNonGeographic",
    value: function isNonGeographic() {
      var metadata = new Metadata(this.metadata);
      return metadata.isNonGeographicCallingCode(this.countryCallingCode);
    }
  }, {
    key: "isEqual",
    value: function isEqual(phoneNumber) {
      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;
    }
    // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,
    // but later it was found out that it doesn't include the possible `TOO_SHORT` result
    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,
    // so eventually I simply commented out this method from the `PhoneNumber` class
    // and just left the `validatePhoneNumberLength()` function, even though that one would require
    // and additional step to also validate the actual country / calling code of the phone number.
    // validateLength() {
    // 	const metadata = new Metadata(this.metadata)
    // 	metadata.selectNumberingPlan(this.countryCallingCode)
    // 	const result = checkNumberLength(this.nationalNumber, metadata)
    // 	if (result !== 'IS_POSSIBLE') {
    // 		return result
    // 	}
    // }
  }, {
    key: "getType",
    value: function getType2() {
      return getNumberType(this, {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "format",
    value: function format3(_format, options) {
      return formatNumber(this, _format, options ? _objectSpread2(_objectSpread2({}, options), {}, {
        v2: true
      }) : {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "formatNational",
    value: function formatNational(options) {
      return this.format("NATIONAL", options);
    }
  }, {
    key: "formatInternational",
    value: function formatInternational(options) {
      return this.format("INTERNATIONAL", options);
    }
  }, {
    key: "getURI",
    value: function getURI(options) {
      return this.format("RFC3966", options);
    }
  }]);
  return PhoneNumber2;
}();
var isCountryCode = function isCountryCode2(value) {
  return /^[A-Z]{2}$/.test(value);
};
function getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {
  var country;
  var countryCallingCode;
  var metadata = new Metadata(metadataJson);
  if (isCountryCode(countryOrCountryCallingCode)) {
    country = countryOrCountryCallingCode;
    metadata.selectNumberingPlan(country);
    countryCallingCode = metadata.countryCallingCode();
  } else {
    countryCallingCode = countryOrCountryCallingCode;
    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {
        country = "001";
      }
    }
  }
  return {
    country,
    countryCallingCode
  };
}

// ../../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js
var CAPTURING_DIGIT_PATTERN = new RegExp("([" + VALID_DIGITS + "])");
function stripIddPrefix(number, country, callingCode, metadata) {
  if (!country) {
    return;
  }
  var countryMetadata = new Metadata(metadata);
  countryMetadata.selectNumberingPlan(country, callingCode);
  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());
  if (number.search(IDDPrefixPattern) !== 0) {
    return;
  }
  number = number.slice(number.match(IDDPrefixPattern)[0].length);
  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);
  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {
    if (matchedGroups[1] === "0") {
      return;
    }
  }
  return number;
}

// ../../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js
function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {
  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {
    var prefixPattern = new RegExp("^(?:" + metadata.numberingPlan.nationalPrefixForParsing() + ")");
    var prefixMatch = prefixPattern.exec(number);
    if (prefixMatch) {
      var nationalNumber;
      var carrierCode;
      var capturedGroupsCount = prefixMatch.length - 1;
      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];
      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {
        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule());
        if (capturedGroupsCount > 1) {
          carrierCode = prefixMatch[1];
        }
      } else {
        var prefixBeforeNationalNumber = prefixMatch[0];
        nationalNumber = number.slice(prefixBeforeNationalNumber.length);
        if (hasCapturedGroups) {
          carrierCode = prefixMatch[1];
        }
      }
      var nationalPrefix;
      if (hasCapturedGroups) {
        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);
        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup);
        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {
          nationalPrefix = metadata.numberingPlan.nationalPrefix();
        }
      } else {
        nationalPrefix = prefixMatch[0];
      }
      return {
        nationalNumber,
        nationalPrefix,
        carrierCode
      };
    }
  }
  return {
    nationalNumber: number
  };
}

// ../../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js
function extractNationalNumber(number, metadata) {
  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata), carrierCode = _extractNationalNumbe.carrierCode, nationalNumber = _extractNationalNumbe.nationalNumber;
  if (nationalNumber !== number) {
    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {
      return {
        nationalNumber: number
      };
    }
    if (metadata.possibleLengths()) {
      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {
        return {
          nationalNumber: number
        };
      }
    }
  }
  return {
    nationalNumber,
    carrierCode
  };
}
function shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {
  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {
    return false;
  }
  return true;
}
function isPossibleIncompleteNationalNumber(nationalNumber, metadata) {
  switch (checkNumberLength(nationalNumber, metadata)) {
    case "TOO_SHORT":
    case "INVALID_LENGTH":
      return false;
    default:
      return true;
  }
}

// ../../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js
function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {
  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;
  if (number.indexOf(countryCallingCode) === 0) {
    metadata = new Metadata(metadata);
    metadata.selectNumberingPlan(country, callingCode);
    var possibleShorterNumber = number.slice(countryCallingCode.length);
    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata), possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;
    var _extractNationalNumbe2 = extractNationalNumber(number, metadata), nationalNumber = _extractNationalNumbe2.nationalNumber;
    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === "TOO_LONG") {
      return {
        countryCallingCode,
        number: possibleShorterNumber
      };
    }
  }
  return {
    number
  };
}

// ../../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js
function extractCountryCallingCode(number, country, callingCode, metadata) {
  if (!number) {
    return {};
  }
  if (number[0] !== "+") {
    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata);
    if (numberWithoutIDD && numberWithoutIDD !== number) {
      number = "+" + numberWithoutIDD;
    } else {
      if (country || callingCode) {
        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata), countryCallingCode = _extractCountryCallin.countryCallingCode, shorterNumber = _extractCountryCallin.number;
        if (countryCallingCode) {
          return {
            countryCallingCode,
            number: shorterNumber
          };
        }
      }
      return {
        number
      };
    }
  }
  if (number[1] === "0") {
    return {};
  }
  metadata = new Metadata(metadata);
  var i = 2;
  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {
    var _countryCallingCode = number.slice(1, i);
    if (metadata.hasCallingCode(_countryCallingCode)) {
      metadata.selectNumberingPlan(_countryCallingCode);
      return {
        countryCallingCode: _countryCallingCode,
        number: number.slice(i)
      };
    }
    i++;
  }
  return {};
}

// ../../node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js
function _createForOfIteratorHelperLoose6(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray6(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray6(o, minLen);
}
function _arrayLikeToArray6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata) {
  metadata = new Metadata(metadata);
  for (var _iterator = _createForOfIteratorHelperLoose6(possibleCountries), _step; !(_step = _iterator()).done; ) {
    var country = _step.value;
    metadata.country(country);
    if (metadata.leadingDigits()) {
      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {
        return country;
      }
    } else if (getNumberType({
      phone: nationalPhoneNumber,
      country
    }, void 0, metadata.metadata)) {
      return country;
    }
  }
}

// ../../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js
var USE_NON_GEOGRAPHIC_COUNTRY_CODE2 = false;
function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {
  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE2) {
    if (metadata.isNonGeographicCallingCode(callingCode)) {
      return "001";
    }
  }
  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);
  if (!possibleCountries) {
    return;
  }
  if (possibleCountries.length === 1) {
    return possibleCountries[0];
  }
  return getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata.metadata);
}

// ../../node_modules/libphonenumber-js/es6/parse.js
var MAX_INPUT_STRING_LENGTH = 250;
var PHONE_NUMBER_START_PATTERN = new RegExp("[" + PLUS_CHARS + VALID_DIGITS + "]");
var AFTER_PHONE_NUMBER_END_PATTERN = new RegExp("[^" + VALID_DIGITS + "#]+$");
var USE_NON_GEOGRAPHIC_COUNTRY_CODE3 = false;
function parse(text, options, metadata) {
  options = options || {};
  metadata = new Metadata(metadata);
  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {
    if (options.v2) {
      throw new ParseError("INVALID_COUNTRY");
    }
    throw new Error("Unknown country: ".concat(options.defaultCountry));
  }
  var _parseInput = parseInput(text, options.v2, options.extract), formattedPhoneNumber = _parseInput.number, ext = _parseInput.ext, error = _parseInput.error;
  if (!formattedPhoneNumber) {
    if (options.v2) {
      if (error === "TOO_SHORT") {
        throw new ParseError("TOO_SHORT");
      }
      throw new ParseError("NOT_A_NUMBER");
    }
    return {};
  }
  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata), country = _parsePhoneNumber.country, nationalNumber = _parsePhoneNumber.nationalNumber, countryCallingCode = _parsePhoneNumber.countryCallingCode, carrierCode = _parsePhoneNumber.carrierCode;
  if (!metadata.hasSelectedNumberingPlan()) {
    if (options.v2) {
      throw new ParseError("INVALID_COUNTRY");
    }
    return {};
  }
  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {
    if (options.v2) {
      throw new ParseError("TOO_SHORT");
    }
    return {};
  }
  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {
    if (options.v2) {
      throw new ParseError("TOO_LONG");
    }
    return {};
  }
  if (options.v2) {
    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);
    if (country) {
      phoneNumber.country = country;
    }
    if (carrierCode) {
      phoneNumber.carrierCode = carrierCode;
    }
    if (ext) {
      phoneNumber.ext = ext;
    }
    return phoneNumber;
  }
  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;
  if (!options.extended) {
    return valid ? result(country, nationalNumber, ext) : {};
  }
  return {
    country,
    countryCallingCode,
    carrierCode,
    valid,
    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,
    phone: nationalNumber,
    ext
  };
}
function extractFormattedPhoneNumber(text, extract, throwOnError) {
  if (!text) {
    return;
  }
  if (text.length > MAX_INPUT_STRING_LENGTH) {
    if (throwOnError) {
      throw new ParseError("TOO_LONG");
    }
    return;
  }
  if (extract === false) {
    return text;
  }
  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);
  if (startsAt < 0) {
    return;
  }
  return text.slice(startsAt).replace(AFTER_PHONE_NUMBER_END_PATTERN, "");
}
function parseInput(text, v2, extract) {
  if (text && text.indexOf("tel:") === 0) {
    return parseRFC3966(text);
  }
  var number = extractFormattedPhoneNumber(text, extract, v2);
  if (!number) {
    return {};
  }
  if (!isViablePhoneNumber(number)) {
    if (isViablePhoneNumberStart(number)) {
      return {
        error: "TOO_SHORT"
      };
    }
    return {};
  }
  var withExtensionStripped = extractExtension(number);
  if (withExtensionStripped.ext) {
    return withExtensionStripped;
  }
  return {
    number
  };
}
function result(country, nationalNumber, ext) {
  var result2 = {
    country,
    phone: nationalNumber
  };
  if (ext) {
    result2.ext = ext;
  }
  return result2;
}
function parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {
  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata), countryCallingCode = _extractCountryCallin.countryCallingCode, number = _extractCountryCallin.number;
  var country;
  if (countryCallingCode) {
    metadata.selectNumberingPlan(countryCallingCode);
  } else if (number && (defaultCountry || defaultCallingCode)) {
    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);
    if (defaultCountry) {
      country = defaultCountry;
    } else {
      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE3) {
        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {
          country = "001";
        }
      }
    }
    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);
  } else
    return {};
  if (!number) {
    return {
      countryCallingCode
    };
  }
  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata), nationalNumber = _extractNationalNumbe.nationalNumber, carrierCode = _extractNationalNumbe.carrierCode;
  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);
  if (exactCountry) {
    country = exactCountry;
    if (exactCountry === "001") {
    } else {
      metadata.country(country);
    }
  }
  return {
    country,
    countryCallingCode,
    nationalNumber,
    carrierCode
  };
}

// ../../node_modules/libphonenumber-js/es6/parsePhoneNumberWithError_.js
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function parsePhoneNumberWithError(text, options, metadata) {
  return parse(text, _objectSpread3(_objectSpread3({}, options), {}, {
    v2: true
  }), metadata);
}

// ../../node_modules/libphonenumber-js/es6/normalizeArguments.js
function _typeof3(obj) {
  "@babel/helpers - typeof";
  return _typeof3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof3(obj);
}
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys4(Object(source), true).forEach(function(key) {
      _defineProperty4(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys4(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray7(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray7(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray7(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray7(o, minLen);
}
function _arrayLikeToArray7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function normalizeArguments(args) {
  var _Array$prototype$slic = Array.prototype.slice.call(args), _Array$prototype$slic2 = _slicedToArray2(_Array$prototype$slic, 4), arg_1 = _Array$prototype$slic2[0], arg_2 = _Array$prototype$slic2[1], arg_3 = _Array$prototype$slic2[2], arg_4 = _Array$prototype$slic2[3];
  var text;
  var options;
  var metadata;
  if (typeof arg_1 === "string") {
    text = arg_1;
  } else
    throw new TypeError("A text for parsing must be a string.");
  if (!arg_2 || typeof arg_2 === "string") {
    if (arg_4) {
      options = arg_3;
      metadata = arg_4;
    } else {
      options = void 0;
      metadata = arg_3;
    }
    if (arg_2) {
      options = _objectSpread4({
        defaultCountry: arg_2
      }, options);
    }
  } else if (isObject(arg_2)) {
    if (arg_3) {
      options = arg_2;
      metadata = arg_3;
    } else {
      metadata = arg_2;
    }
  } else
    throw new Error("Invalid second argument: ".concat(arg_2));
  return {
    text,
    options,
    metadata
  };
}
var isObject = function isObject2(_) {
  return _typeof3(_) === "object";
};

// ../../node_modules/libphonenumber-js/es6/parsePhoneNumberWithError.js
function parsePhoneNumberWithError2() {
  var _normalizeArguments = normalizeArguments(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
  return parsePhoneNumberWithError(text, options, metadata);
}

// ../../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js
function ownKeys5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys5(Object(source), true).forEach(function(key) {
      _defineProperty5(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys5(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function parsePhoneNumber2(text, options, metadata) {
  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {
    options = _objectSpread5(_objectSpread5({}, options), {}, {
      defaultCountry: void 0
    });
  }
  try {
    return parsePhoneNumberWithError(text, options, metadata);
  } catch (error) {
    if (error instanceof ParseError) {
    } else {
      throw error;
    }
  }
}

// ../../node_modules/libphonenumber-js/es6/isValidPhoneNumber.js
function ownKeys6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys6(Object(source), true).forEach(function(key) {
      _defineProperty6(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys6(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function isValidPhoneNumber() {
  var _normalizeArguments = normalizeArguments(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
  options = _objectSpread6(_objectSpread6({}, options), {}, {
    extract: false
  });
  var phoneNumber = parsePhoneNumber2(text, options, metadata);
  return phoneNumber && phoneNumber.isValid() || false;
}

// ../../node_modules/libphonenumber-js/min/exports/parsePhoneNumberWithError.js
function parsePhoneNumberWithError3() {
  return withMetadataArgument(parsePhoneNumberWithError2, arguments);
}

// ../../node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js
function isValidPhoneNumber2() {
  return withMetadataArgument(isValidPhoneNumber, arguments);
}

// lib/hooks/useNotifiSubscribe.ts
import { useCallback as useCallback2, useEffect as useEffect2, useRef, useState as useState3 } from "react";

// lib/utils/stringUtils.ts
function addressEllipsis(str, index) {
  index = index || 6;
  if (!str || str.length < 11) {
    return str;
  }
  return str.slice(0, index) + "..." + str.slice(str.length - index);
}
function formatTelegramForSubscription(telegramId) {
  if (telegramId.startsWith("@")) {
    return telegramId.slice(1);
  }
  return telegramId;
}
function prefixCharacter(value, character) {
  return character + value;
}
function prefixTelegramWithSymbol(telegramId) {
  if (telegramId.startsWith("@")) {
    return telegramId;
  }
  return prefixCharacter(telegramId, "@");
}

// lib/utils/walletUtils.ts
var walletToSourceType = (wallet) => {
  switch (wallet == null ? void 0 : wallet.walletBlockchain) {
    case "ACALA":
      return "ACALA_WALLET";
    case "APTOS":
      return "APTOS_WALLET";
    case "ARBITRUM":
      return "ARBITRUM_WALLET";
    case "AVALANCHE":
      return "AVALANCHE_WALLET";
    case "BINANCE":
      return "BINANCE_WALLET";
    case "ETHEREUM":
      return "ETHEREUM_WALLET";
    case "BASE":
      return "ETHEREUM_WALLET";
    case "POLYGON":
      return "POLYGON_WALLET";
    case "SOLANA":
      return "SOLANA_WALLET";
    case "OPTIMISM":
      return "OPTIMISM_WALLET";
    case "SUI":
      return "SUI_WALLET";
    case "ZKSYNC":
      return "ZKSYNC_WALLET";
    default:
      throw new Error("Unsupported walletType");
  }
};
var walletToSourceAddress = (wallet) => {
  if ((wallet == null ? void 0 : wallet.address) === null) {
    throw new Error("Invalid connected wallet");
  }
  return wallet == null ? void 0 : wallet.address;
};
var walletToSource = (wallet) => {
  const sourceAddress = walletToSourceAddress(wallet);
  const sourceType = walletToSourceType(wallet);
  return {
    name: `${sourceType} ${sourceAddress}`,
    blockchainAddress: sourceAddress,
    type: sourceType
  };
};

// lib/hooks/useNotifiSubscribe.ts
var hasKey = (obj, key) => {
  return typeof obj === "object" && obj !== null && key in obj;
};
var useNotifiSubscribe = ({ targetGroupName = "Default" }) => {
  const { demoPreview } = useNotifiDemoPreviewContext();
  const { isUsingFrontendClient } = useNotifiClientContext();
  const { client } = useNotifiClientContext();
  const {
    formState,
    setEmail: setFormEmail,
    setTelegram: setFormTelegram,
    setPhoneNumber: setFormPhoneNumber
  } = useNotifiForm();
  const {
    email: formEmail,
    telegram: formTelegram,
    phoneNumber: formPhoneNumber
  } = formState;
  const {
    params,
    setAlerts,
    setConnectedWallets,
    setEmail,
    setLoading,
    setPhoneNumber,
    setTelegramId,
    setPhoneNumberErrorMessage,
    useHardwareWallet,
    resetErrorMessageState,
    setTelegramErrorMessage,
    setEmailErrorMessage,
    setDiscordErrorMessage,
    setUseDiscord,
    useDiscord,
    setDiscordTargetData,
    discordTargetData: discordTargetDatafromSubscriptionContext
  } = useNotifiSubscriptionContext();
  const { keepSubscriptionData = true, walletPublicKey } = params;
  const [isEmailConfirmationSent, setIsEmailConfirmationSent] = useState3(false);
  const resendEmailVerificationLink = useCallback2(
    async (emailId) => {
      const resend = await client.sendEmailTargetVerification({
        targetId: emailId
      });
      return resend;
    },
    [client.sendEmailTargetVerification]
  );
  const handleMissingDiscordTarget = (discordTargets) => {
    const target = (discordTargets == null ? void 0 : discordTargets.find((target2) => target2.name === "Default")) || (discordTargets == null ? void 0 : discordTargets[0]);
    setDiscordTargetData(target);
  };
  const render = useCallback2(
    (newData) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
      const targetGroup = newData == null ? void 0 : newData.targetGroups.find(
        (tg) => tg.name === targetGroupName
      );
      const alerts = {};
      newData == null ? void 0 : newData.alerts.forEach((alert) => {
        if (alert == null ? void 0 : alert.name) {
          alerts[alert.name] = alert;
        }
      });
      setAlerts(alerts);
      setConnectedWallets((_a = newData == null ? void 0 : newData.connectedWallets) != null ? _a : []);
      const emailTarget = (_c = (_b = targetGroup == null ? void 0 : targetGroup.emailTargets) == null ? void 0 : _b[0]) != null ? _c : null;
      const emailToSet = (_d = emailTarget == null ? void 0 : emailTarget.emailAddress) != null ? _d : "";
      if (emailTarget !== null && (emailTarget == null ? void 0 : emailTarget.isConfirmed) === false) {
        setEmailErrorMessage({
          type: "recoverableError",
          onClick: () => {
            var _a2;
            resendEmailVerificationLink((_a2 = emailTarget.id) != null ? _a2 : "");
          },
          message: "Resend Link"
        });
      } else {
        setEmailErrorMessage(void 0);
      }
      setFormEmail(emailToSet);
      setEmail(emailToSet);
      const phoneNumber = (_g = (_f = (_e = targetGroup == null ? void 0 : targetGroup.smsTargets) == null ? void 0 : _e[0]) == null ? void 0 : _f.phoneNumber) != null ? _g : null;
      const isPhoneNumberConfirmed = (_j = (_i = (_h = targetGroup == null ? void 0 : targetGroup.smsTargets) == null ? void 0 : _h[0]) == null ? void 0 : _i.isConfirmed) != null ? _j : null;
      const phoneNumberToSet = phoneNumber != null ? phoneNumber : "";
      if (!isPhoneNumberConfirmed) {
        setPhoneNumberErrorMessage({
          type: "unrecoverableError",
          message: "Messages stopped",
          tooltip: `Please text 'start' to the following number:
${params.env === "Production" ? "+1 206 222 3465" : "+1 253 880 1477 "}`
        });
      }
      setFormPhoneNumber(phoneNumberToSet);
      setPhoneNumber(phoneNumberToSet);
      const telegramTarget = (_k = targetGroup == null ? void 0 : targetGroup.telegramTargets) == null ? void 0 : _k[0];
      const telegramId = telegramTarget == null ? void 0 : telegramTarget.telegramId;
      const telegramIdWithSymbolAdded = telegramId !== "" && (telegramId == null ? void 0 : telegramId.length) ? prefixTelegramWithSymbol(telegramId) : null;
      setFormTelegram(telegramId != null ? telegramId : "");
      setTelegramId(telegramIdWithSymbolAdded != null ? telegramIdWithSymbolAdded : "");
      if ((telegramTarget == null ? void 0 : telegramTarget.isConfirmed) === false) {
        setTelegramErrorMessage({
          type: "recoverableError",
          onClick: () => {
            if (!(telegramTarget == null ? void 0 : telegramTarget.confirmationUrl)) {
              return;
            }
            window.open(telegramTarget == null ? void 0 : telegramTarget.confirmationUrl);
          },
          message: "Verify ID"
        });
      } else {
        setTelegramErrorMessage(void 0);
      }
      const discordTarget = (_l = targetGroup == null ? void 0 : targetGroup.discordTargets) == null ? void 0 : _l.find(
        (it) => (it == null ? void 0 : it.name) === "Default"
      );
      const discordId = discordTarget == null ? void 0 : discordTarget.id;
      if (discordId) {
        const {
          isConfirmed,
          userStatus,
          verificationLink,
          discordServerInviteLink
        } = discordTarget;
        if (!isConfirmed) {
          setDiscordErrorMessage({
            type: "recoverableError",
            onClick: () => window.open(verificationLink, "_blank"),
            message: "Enable Bot"
          });
        } else if (userStatus === "DISCORD_SERVER_NOT_JOINED") {
          setDiscordErrorMessage({
            type: "recoverableError",
            onClick: () => window.open(discordServerInviteLink, "_blank"),
            message: "Join Server"
          });
        } else {
          setDiscordErrorMessage(void 0);
        }
        setUseDiscord(true);
        setDiscordTargetData(discordTarget);
      } else {
        handleMissingDiscordTarget((_m = newData == null ? void 0 : newData.discordTargets) != null ? _m : []);
        setUseDiscord(false);
      }
      return {
        alerts,
        email: (_n = emailTarget == null ? void 0 : emailTarget.emailAddress) != null ? _n : null,
        isPhoneNumberConfirmed,
        phoneNumber,
        telegramConfirmationUrl: (_o = telegramTarget == null ? void 0 : telegramTarget.confirmationUrl) != null ? _o : null,
        telegramId: (_p = telegramTarget == null ? void 0 : telegramTarget.telegramId) != null ? _p : null,
        discordId: (_q = discordTarget == null ? void 0 : discordTarget.id) != null ? _q : null
      };
    },
    [
      setAlerts,
      setEmail,
      setPhoneNumber,
      setTelegramId,
      setIsEmailConfirmationSent
    ]
  );
  const copyAuths = useCallback2(
    async (data) => {
      if (params.multiWallet !== void 0) {
        params.multiWallet.ownedWallets.forEach((wallet) => {
          const key = "accountAddress";
          const address = hasKey(wallet, key) ? wallet[key] : wallet.walletPublicKey;
          if (data.connectedWallets.find(
            (cw) => (cw == null ? void 0 : cw.address) === address && (cw == null ? void 0 : cw.walletBlockchain) === wallet.walletBlockchain
          ) !== void 0) {
            client.copyAuthorization(wallet.walletPublicKey).catch(console.log);
          }
        });
      }
    },
    [client, params]
  );
  const didFetch = useRef(false);
  useEffect2(() => {
    var _a;
    if (demoPreview) {
      setEmail(defaultDemoConfigV1.name);
      setPhoneNumber("+101234567890");
      setTelegramId((_a = defaultDemoConfigV1.id) != null ? _a : "testTelegramId");
      setUseDiscord(true);
    }
    if (client.isAuthenticated && !didFetch.current && !isUsingFrontendClient) {
      didFetch.current = true;
      client.fetchData().then((data) => {
        copyAuths(data);
        render(data);
      }).catch((_e) => {
      });
    }
  }, [client.isAuthenticated]);
  const logInViaHardwareWallet = useCallback2(async () => {
    if (demoPreview) {
      throw new Error("Preview card does not support method call");
    }
    if (params.walletBlockchain !== "SOLANA") {
      throw new Error("Unsupported wallet blockchain");
    }
    const plugin = params.hardwareLoginPlugin;
    const { logValue } = await client.beginLoginViaTransaction();
    const signature = await plugin.sendMessage(logValue);
    await client.completeLoginViaTransaction({
      transactionSignature: signature
    });
    const newData = await client.fetchData();
    return render(newData);
  }, [walletPublicKey, client, params, render]);
  const reload = useCallback2(async () => {
    const newData = await client.fetchData(true);
    copyAuths(newData);
    const results = render(newData);
    return results;
  }, [client.fetchData, copyAuths, render]);
  const logIn = useCallback2(async () => {
    if (demoPreview)
      throw new Error("Preview card does not support method call");
    if (!client.isAuthenticated) {
      if (useHardwareWallet) {
        await logInViaHardwareWallet();
      } else {
        await client.logIn(params);
      }
    }
    const newData = await client.fetchData();
    copyAuths(newData);
    const results = render(newData);
    return results;
  }, [
    client.isAuthenticated,
    client.logIn,
    client.fetchData,
    params,
    useHardwareWallet,
    logInViaHardwareWallet,
    render,
    setLoading,
    copyAuths
  ]);
  const updateAlertInternal = useCallback2(
    async (alertParams, data, contacts) => {
      var _a, _b, _c;
      if (demoPreview)
        throw Error("Preview card does not support method call");
      const { alertName, alertConfiguration } = alertParams;
      const { finalEmail, finalPhoneNumber, finalTelegramId } = contacts;
      const existingAlert = data.alerts.find(
        (alert) => (alert == null ? void 0 : alert.name) === alertName
      );
      const deleteThisAlert = async () => {
        if (existingAlert !== void 0 && existingAlert.id !== null) {
          await client.deleteAlert({
            alertId: existingAlert.id,
            keepSourceGroup: keepSubscriptionData,
            keepTargetGroup: keepSubscriptionData
          });
        }
      };
      const ensureSource = async (params2) => {
        const existing = data.sources.find(
          (s) => s.type === params2.type && s.blockchainAddress === params2.blockchainAddress && s.fusionEventTypeId === params2.fusionEventTypeId
        );
        if (existing !== void 0) {
          return existing;
        }
        const created = await client.createSource(params2);
        return created;
      };
      if (alertConfiguration === null) {
        await deleteThisAlert();
        return null;
      } else if (alertConfiguration.type === "multiple") {
        const {
          filterOptions,
          filterType,
          sources: sourcesInput,
          sourceGroupName,
          maintainSourceGroup
        } = alertConfiguration;
        const sources = await Promise.all(sourcesInput.map(ensureSource));
        const filter = sources.flatMap((s) => s.applicableFilters).find((f) => (f == null ? void 0 : f.filterType) === filterType);
        if (filter === void 0 || filter.id === null) {
          await deleteThisAlert();
          throw new Error(
            `No applicableFilters filter for sources: ${JSON.stringify(
              sources
            )}`
          );
        } else {
          const sourceIds = [];
          const existingSourceGroup = data.sourceGroups.find(
            (sourceGroup) => (sourceGroup == null ? void 0 : sourceGroup.name) === (sourceGroupName != null ? sourceGroupName : alertName)
          );
          if (maintainSourceGroup && existingSourceGroup) {
            (_a = existingSourceGroup.sources) == null ? void 0 : _a.forEach((s) => {
              const id = s == null ? void 0 : s.id;
              if (id !== null && id !== void 0) {
                sourceIds.push(id);
              }
            });
          } else {
            sources.forEach((s) => {
              if (s.id !== null) {
                sourceIds.push(s.id);
              }
            });
          }
          await deleteThisAlert();
          const alert = await client.createAlert({
            emailAddress: finalEmail,
            filterId: filter.id,
            filterOptions: filterOptions != null ? filterOptions : void 0,
            groupName: "managed",
            name: alertName,
            phoneNumber: finalPhoneNumber,
            sourceId: "",
            targetGroupName,
            telegramId: finalTelegramId,
            sourceIds,
            includeDiscord: useDiscord,
            sourceGroupName
          });
          return alert;
        }
      } else {
        const {
          createSource: createSourceParam,
          filterOptions,
          filterType,
          sourceType,
          sourceGroupName,
          maintainSourceGroup
        } = alertConfiguration;
        let source;
        if (createSourceParam !== void 0) {
          const eventTypeId = createSourceParam.fusionEventTypeId;
          const address = createSourceParam.address;
          const name = eventTypeId !== void 0 ? `${eventTypeId}:;:${address}` : address;
          source = await ensureSource({
            name,
            blockchainAddress: address,
            type: sourceType,
            fusionEventTypeId: eventTypeId
          });
        } else {
          source = data.sources.find((s) => s.type === sourceType);
        }
        const filter = (_b = source == null ? void 0 : source.applicableFilters) == null ? void 0 : _b.find(
          (f) => (f == null ? void 0 : f.filterType) === filterType
        );
        if (source === void 0 || source.id === null || filter === void 0 || filter.id === null) {
          await deleteThisAlert();
          throw new Error(
            `No applicableFilters filter for source: ${JSON.stringify(source)}`
          );
        } else if (existingAlert !== void 0 && existingAlert.id !== null && existingAlert.filterOptions === JSON.stringify(filterOptions)) {
          const alert = await client.updateAlert({
            alertId: existingAlert.id,
            emailAddress: finalEmail,
            phoneNumber: finalPhoneNumber,
            telegramId: finalTelegramId,
            includeDiscord: useDiscord
          });
          return alert;
        } else {
          const sourceIds = [];
          const existingSourceGroup = data.sourceGroups.find(
            (sourceGroup) => (sourceGroup == null ? void 0 : sourceGroup.name) === (sourceGroupName != null ? sourceGroupName : alertName)
          );
          if (maintainSourceGroup && existingSourceGroup) {
            (_c = existingSourceGroup.sources) == null ? void 0 : _c.forEach((s) => {
              const id = s == null ? void 0 : s.id;
              if (id !== null && id !== void 0) {
                sourceIds.push(id);
              }
            });
          } else {
            sourceIds.push(source.id);
          }
          await deleteThisAlert();
          const alert = await client.createAlert({
            emailAddress: finalEmail,
            filterId: filter.id,
            filterOptions: filterOptions != null ? filterOptions : void 0,
            groupName: "managed",
            name: alertName,
            phoneNumber: finalPhoneNumber,
            sourceId: "",
            sourceIds,
            targetGroupName,
            telegramId: finalTelegramId,
            sourceGroupName,
            includeDiscord: useDiscord
          });
          return alert;
        }
      }
    },
    []
  );
  const subscribe = useCallback2(
    async (alertConfigs) => {
      if (demoPreview) {
        throw new Error("Preview card does not support method call");
      }
      const configurations = __spreadValues({}, alertConfigs);
      const names = Object.keys(configurations);
      const finalEmail = formEmail === "" ? void 0 : formEmail;
      const finalTelegramId = formTelegram === "" ? void 0 : formatTelegramForSubscription(formTelegram);
      let finalPhoneNumber = void 0;
      if (isValidPhoneNumber2(formPhoneNumber)) {
        finalPhoneNumber = formPhoneNumber;
      }
      setLoading(true);
      if (!client.isAuthenticated) {
        await logIn();
      }
      const data = await client.fetchData();
      const existingDiscordTarget = data.discordTargets.find(
        (target) => target.name === "Default"
      );
      let finalDiscordId = void 0;
      if (useDiscord === true) {
        if (existingDiscordTarget !== void 0) {
          finalDiscordId = existingDiscordTarget.id;
        } else {
          finalDiscordId = await client.createDiscordTarget("Default");
        }
      }
      const newResults = {};
      for (let i = 0; i < names.length; ++i) {
        const name = names[i];
        const config = configurations[name];
        let alert = null;
        try {
          alert = await updateAlertInternal(
            {
              alertName: name,
              alertConfiguration: config
            },
            data,
            {
              finalEmail,
              finalPhoneNumber,
              finalTelegramId,
              finalDiscordId
            }
          );
        } catch (e) {
          console.log(`Error updating alert ${name}: ${e}`);
        }
        if (alert !== null) {
          newResults[name] = alert;
        }
      }
      if (Object.getOwnPropertyNames(newResults).length === 0 && keepSubscriptionData) {
        await client.ensureTargetGroup({
          emailAddress: finalEmail,
          name: targetGroupName,
          phoneNumber: finalPhoneNumber,
          telegramId: finalTelegramId,
          includeDiscord: useDiscord
        });
      }
      const newData = await client.fetchData();
      const results = render(newData);
      setLoading(false);
      return results;
    },
    [client, formEmail, formPhoneNumber, formTelegram, logIn, setLoading]
  );
  const updateTargetGroups = useCallback2(async () => {
    resetErrorMessageState();
    if (demoPreview) {
      throw new Error("Preview card does not support method call");
    }
    const finalEmail = formEmail === "" ? void 0 : formEmail;
    const finalTelegramId = formTelegram === "" ? void 0 : formatTelegramForSubscription(formTelegram);
    let finalPhoneNumber = void 0;
    if (isValidPhoneNumber2(formPhoneNumber)) {
      finalPhoneNumber = formPhoneNumber;
    }
    setLoading(true);
    if (!client.isAuthenticated) {
      await logIn();
    }
    await client.ensureTargetGroup({
      emailAddress: finalEmail,
      name: targetGroupName,
      phoneNumber: finalPhoneNumber,
      telegramId: finalTelegramId,
      includeDiscord: useDiscord
    });
    const newData = await client.fetchData();
    const results = render(newData);
    setLoading(false);
    return results;
  }, [
    client,
    formEmail,
    formPhoneNumber,
    formTelegram,
    render,
    setLoading,
    useDiscord
  ]);
  const instantSubscribe = useCallback2(
    async (alertData) => {
      if (demoPreview)
        throw new Error("Preview card does not support method call");
      const finalEmail = formEmail === "" ? void 0 : formEmail;
      const finalTelegramId = formTelegram === "" ? void 0 : formatTelegramForSubscription(formTelegram);
      let finalPhoneNumber = void 0;
      if (isValidPhoneNumber2(formPhoneNumber)) {
        finalPhoneNumber = formPhoneNumber;
      }
      const finalDiscordId = useDiscord === false || !(discordTargetDatafromSubscriptionContext == null ? void 0 : discordTargetDatafromSubscriptionContext.id) ? void 0 : discordTargetDatafromSubscriptionContext == null ? void 0 : discordTargetDatafromSubscriptionContext.id;
      try {
        setLoading(true);
        await logIn();
        const data = await client.fetchData();
        const alert = await updateAlertInternal(alertData, data, {
          finalEmail,
          finalPhoneNumber,
          finalTelegramId,
          finalDiscordId
        });
        if (alert === null && keepSubscriptionData) {
          await client.ensureTargetGroup({
            emailAddress: finalEmail,
            name: targetGroupName,
            phoneNumber: finalPhoneNumber,
            telegramId: finalTelegramId,
            includeDiscord: useDiscord
          });
        }
      } catch (e) {
        throw new Error(`Something went wrong: ${e}`);
      } finally {
        setLoading(false);
      }
      const newData = await client.fetchData();
      const results = render(newData);
      return results;
    },
    [
      client,
      formEmail,
      formPhoneNumber,
      formTelegram,
      logIn,
      setLoading,
      subscribe,
      render
    ]
  );
  const subscribeWallet = useCallback2(
    async (params2) => {
      if (demoPreview)
        throw new Error("Preview card does not support method call");
      setLoading(true);
      try {
        if (!client.isAuthenticated) {
          await logIn();
        }
        await client.connectWallet(params2);
        const newData = await client.fetchData();
        await client.ensureSourceGroup({
          name: "User Wallets",
          sources: newData.connectedWallets.map(walletToSource)
        });
        const finalData = await client.fetchData();
        copyAuths(finalData);
        render(finalData);
      } finally {
        setLoading(false);
      }
    },
    [client, logIn, setLoading, setConnectedWallets]
  );
  const updateWallets = useCallback2(async () => {
    setLoading(true);
    if (demoPreview)
      throw new Error("Preview card does not support method call");
    try {
      if (!client.isAuthenticated) {
        await logIn();
      }
      const newData = await client.fetchData();
      await client.ensureSourceGroup({
        name: "User Wallets",
        sources: newData.connectedWallets.map(walletToSource)
      });
      const finalData = await client.fetchData();
      render(finalData);
    } finally {
      setLoading(false);
    }
  }, [client, logIn, setLoading, render]);
  return {
    isEmailConfirmationSent,
    resendEmailVerificationLink,
    instantSubscribe,
    isAuthenticated: client.isAuthenticated,
    isInitialized: client.isInitialized,
    isTokenExpired: client.isTokenExpired,
    logIn,
    subscribe,
    updateTargetGroups,
    subscribeWallet,
    updateWallets,
    reload
  };
};

// lib/hooks/useSubscriptionCard.ts
import { useEffect as useEffect3, useState as useState4 } from "react";
var useSubscriptionCard = (input) => {
  const [state, setState] = useState4({
    state: "loading"
  });
  const { demoPreview } = useNotifiDemoPreviewContext();
  const { client, isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  useEffect3(() => {
    if (demoPreview) {
      return setState(() => ({
        state: "fetched",
        data: demoPreview.data
      }));
    }
    let card;
    setState({ state: "loading" });
    (isUsingFrontendClient ? frontendClient : client).fetchSubscriptionCard(input).then((result2) => {
      if ("dataJson" in result2) {
        if (!result2.dataJson) {
          return Promise.reject(new Error("Failed to fetch data"));
        }
        card = JSON.parse(result2.dataJson);
      } else if ("version" in result2 && result2.version !== "IntercomV1") {
        card = result2;
      }
      if ((card == null ? void 0 : card.version) !== "v1") {
        return Promise.reject(new Error("Unsupported config format"));
      }
      setState({
        state: "fetched",
        data: card
      });
    }).catch((error) => {
      setState({
        state: "error",
        reason: error
      });
    });
  }, [input.id, input.type, demoPreview, isUsingFrontendClient]);
  return state;
};

// lib/hooks/useFetchedCardState.ts
import { useState as useState5 } from "react";
var useFetchedCardState = () => {
  const [cardView, setCardView] = useState5({
    state: "history"
  });
  return {
    cardView,
    setCardView
  };
};

// lib/hooks/useUnreadState.ts
import { useEffect as useEffect4, useMemo as useMemo2, useState as useState6 } from "react";
var useUnreadState = () => {
  var _a;
  const { frontendClient, isUsingFrontendClient } = useNotifiClientContext();
  if (!isUsingFrontendClient)
    throw new Error(
      "Number badge is only available when frontendClient is enabled"
    );
  const {
    params: { walletPublicKey }
  } = useNotifiSubscriptionContext();
  const [unreadNotificationCount, setUnreadNotificationCount] = useState6(0);
  const hasUnreadNotification = useMemo2(
    () => unreadNotificationCount > 0 ? true : false,
    [unreadNotificationCount]
  );
  const { isClientAuthenticated } = useMemo2(() => {
    var _a2;
    return {
      isClientAuthenticated: ((_a2 = frontendClient.userState) == null ? void 0 : _a2.status) === "authenticated"
    };
  }, [(_a = frontendClient.userState) == null ? void 0 : _a.status]);
  useEffect4(() => {
    if (!walletPublicKey || !isClientAuthenticated)
      return;
    frontendClient.getUnreadNotificationHistoryCount().then((res) => {
      const unreadNotificationCount2 = res.count;
      setUnreadNotificationCount(unreadNotificationCount2);
    }).catch((_e) => {
    });
    const interval = setInterval(() => {
      if (!walletPublicKey || !isClientAuthenticated)
        return;
      frontendClient.getUnreadNotificationHistoryCount().then((res) => {
        const unreadNotificationCount2 = res.count;
        setUnreadNotificationCount(unreadNotificationCount2);
      });
    }, Math.floor(Math.random() * 5e3) + 5e3);
    return () => clearInterval(interval);
  }, [isClientAuthenticated, walletPublicKey, isUsingFrontendClient]);
  return { hasUnreadNotification, unreadNotificationCount };
};

// lib/hooks/useFrontendClientLogin.ts
import { useCallback as useCallback3 } from "react";
var useFrontendClientLogin = () => {
  const { params, frontendClient, updateFrontendClientStatus } = useNotifiClientContext();
  const { useHardwareWallet } = useNotifiSubscriptionContext();
  const logIn = useCallback3(async () => {
    if (useHardwareWallet && params.walletBlockchain === "SOLANA") {
      const plugin = params.hardwareLoginPlugin;
      const { nonce } = await frontendClient.beginLoginViaTransaction({
        walletAddress: params.walletPublicKey,
        walletBlockchain: params.walletBlockchain
      });
      const transactionSignature = await plugin.sendMessage(nonce);
      const logInResult = await frontendClient.completeLoginViaTransaction({
        walletAddress: params.walletPublicKey,
        walletBlockchain: params.walletBlockchain,
        transactionSignature
      });
      if ((logInResult == null ? void 0 : logInResult.completeLogInByTransaction) === void 0) {
        throw new Error("Log in failed");
      }
      updateFrontendClientStatus();
      return logInResult.completeLogInByTransaction;
    } else {
      const result2 = await frontendClient.logIn(params);
      updateFrontendClientStatus();
      return result2;
    }
  }, [useHardwareWallet, frontendClient, params]);
  return logIn;
};

// lib/hooks/useIntercomCardState.ts
import { useState as useState7 } from "react";
var useIntercomCardState = () => {
  const [intercomCardView, setIntercomCardView] = useState7({
    state: "loadingView"
  });
  return {
    intercomCardView,
    setIntercomCardView
  };
};

// lib/context/NotifiSubscriptionContext.tsx
var FtuStage = /* @__PURE__ */ ((FtuStage2) => {
  FtuStage2[FtuStage2["Destination"] = 3] = "Destination";
  FtuStage2[FtuStage2["Alerts"] = 2] = "Alerts";
  FtuStage2[FtuStage2["Done"] = 1] = "Done";
  return FtuStage2;
})(FtuStage || {});
var NotifiSubscriptionContext = createContext3(
  {}
  // Intentially empty in default, use NotifiSubscriptionContextProvider
);
var hasKey2 = (obj, key) => {
  return typeof obj === "object" && obj !== null && key in obj;
};
var NotifiSubscriptionContextProvider = (_a) => {
  var _b = _a, { children } = _b, params = __objRest(_b, ["children"]);
  var _a2, _b2;
  const { frontendClient, isUsingFrontendClient } = useNotifiClientContext();
  const contextId = useMemo3(() => {
    return (/* @__PURE__ */ new Date()).toISOString();
  }, []);
  const [conversationId, setConversationId] = useState8("");
  const [userId, setUserId] = useState8("");
  const [hasChatAlert, setHasChatAlert] = useState8(false);
  const { cardView, setCardView } = useFetchedCardState();
  const { intercomCardView, setIntercomCardView } = useIntercomCardState();
  const [telegramConfirmationUrl, setTelegramConfirmationUrl] = useState8(void 0);
  const [alerts, setAlerts] = useState8({});
  const [connectedWallets, setConnectedWallets] = useState8([]);
  const [useHardwareWallet, setUseHardwareWallet] = useState8(false);
  const [useDiscord, setUseDiscord] = useState8(false);
  const [loading, setLoading] = useState8(false);
  const [email, setEmail] = useState8("");
  const [phoneNumber, setPhoneNumber] = useState8("");
  const [telegramId, setTelegramId] = useState8("");
  const [ftuStage, setFtuStage] = useState8(1 /* Done */);
  const [discordTargetData, setDiscordTargetData] = useState8(void 0);
  const [destinationErrorMessages, setDestinationErrorMessages] = useState8({
    email: void 0,
    telegram: void 0,
    phoneNumber: void 0,
    discord: void 0
  });
  const handleErrorMessage = ({
    field,
    value: value2
  }) => {
    setDestinationErrorMessages((destinationErrorMessages2) => __spreadProps(__spreadValues({}, destinationErrorMessages2), {
      [field]: value2
    }));
  };
  const setEmailErrorMessage = (value2) => {
    handleErrorMessage({ field: "email", value: value2 });
  };
  const setTelegramErrorMessage = (value2) => {
    handleErrorMessage({ field: "telegram", value: value2 });
  };
  const setPhoneNumberErrorMessage = (value2) => {
    handleErrorMessage({ field: "phoneNumber", value: value2 });
  };
  const setDiscordErrorMessage = (value2) => {
    handleErrorMessage({ field: "discord", value: value2 });
  };
  const resetErrorMessageState = () => {
    setDestinationErrorMessages({
      email: void 0,
      telegram: void 0,
      phoneNumber: void 0,
      discord: void 0
    });
  };
  const syncFtuStage = useCallback4(
    async (isContactInfoRequired) => {
      const userSettings = await frontendClient.getUserSettings();
      if (!(userSettings == null ? void 0 : userSettings.ftuStage)) {
        if (isContactInfoRequired) {
          return await updateFtuStage(3 /* Destination */);
        }
        return await updateFtuStage(2 /* Alerts */);
      }
      setFtuStage(userSettings.ftuStage);
    },
    [(_a2 = frontendClient == null ? void 0 : frontendClient.userState) == null ? void 0 : _a2.status]
  );
  const updateFtuStage = useCallback4(
    async (ftuConfigStep) => {
      await frontendClient.updateUserSettings({
        input: { ftuStage: ftuConfigStep }
      });
      setFtuStage(ftuConfigStep);
    },
    [(_b2 = frontendClient == null ? void 0 : frontendClient.userState) == null ? void 0 : _b2.status]
  );
  const {
    setEmail: setFormEmail,
    setTelegram: setFormTelegram,
    setPhoneNumber: setFormPhoneNumber
  } = useNotifiForm();
  const didFetch = React4.useRef(false);
  useEffect5(() => {
    var _a3;
    if (!didFetch.current && ((_a3 = frontendClient.userState) == null ? void 0 : _a3.status) === "authenticated" && isUsingFrontendClient) {
      frontendClient.fetchData().then((data) => {
        render(data);
        copyAuths(data);
      }).catch((_e) => {
      }).finally(() => {
        didFetch.current = true;
      });
    }
  }, [frontendClient.userState]);
  const copyAuths = useCallback4(
    async (data) => {
      if (params.multiWallet !== void 0) {
        params.multiWallet.ownedWallets.forEach((wallet) => {
          var _a3;
          const key = "accountAddress";
          const address = hasKey2(wallet, key) ? wallet[key] : wallet.walletPublicKey;
          if (((_a3 = data.connectedWallet) == null ? void 0 : _a3.find(
            (cw) => (cw == null ? void 0 : cw.address) === address && (cw == null ? void 0 : cw.walletBlockchain) === wallet.walletBlockchain
          )) !== void 0) {
            frontendClient.copyAuthorization({
              walletBlockchain: "SOLANA",
              walletPublicKey: wallet.walletPublicKey,
              env: params.env,
              tenantId: params.dappAddress,
              storageOption: { driverType: "LocalForage" }
            }).catch(console.log);
          }
        });
      }
    },
    [frontendClient, params]
  );
  const render = useCallback4(
    (newData) => {
      var _a3, _b3, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t;
      const targetGroup = (_a3 = newData.targetGroup) == null ? void 0 : _a3.find(
        (tg) => (tg == null ? void 0 : tg.name) === "Default"
      );
      const alerts2 = {};
      (_b3 = newData.alert) == null ? void 0 : _b3.forEach((alert) => {
        if (alert == null ? void 0 : alert.name) {
          alerts2[alert.name] = alert;
        }
      });
      setAlerts(alerts2);
      setConnectedWallets(
        (_d = (_c = newData.connectedWallet) == null ? void 0 : _c.filter(
          (wallet) => !!wallet
        )) != null ? _d : []
      );
      const emailTarget = (_f = (_e = targetGroup == null ? void 0 : targetGroup.emailTargets) == null ? void 0 : _e[0]) != null ? _f : null;
      const emailToSet = (_g = emailTarget == null ? void 0 : emailTarget.emailAddress) != null ? _g : "";
      if (!!emailTarget && !emailTarget.isConfirmed) {
        setEmailErrorMessage({
          type: "recoverableError",
          onClick: () => frontendClient.sendEmailTargetVerification({
            targetId: emailTarget.id
          }),
          message: "Resend Link"
        });
      } else {
        setEmailErrorMessage(void 0);
      }
      setEmail(emailToSet);
      setFormEmail(emailToSet);
      const phoneNumber2 = (_j = (_i = (_h = targetGroup == null ? void 0 : targetGroup.smsTargets) == null ? void 0 : _h[0]) == null ? void 0 : _i.phoneNumber) != null ? _j : null;
      const isPhoneNumberConfirmed = (_m = (_l = (_k = targetGroup == null ? void 0 : targetGroup.smsTargets) == null ? void 0 : _k[0]) == null ? void 0 : _l.isConfirmed) != null ? _m : false;
      const phoneNumberToSet = phoneNumber2 != null ? phoneNumber2 : "";
      if (!!phoneNumber2 && !isPhoneNumberConfirmed) {
        setPhoneNumberErrorMessage({
          type: "unrecoverableError",
          message: "Messages stopped",
          tooltip: `Please text 'start' to the following number:
${params.env === "Production" ? "+1 206 222 3465" : "+1 253 880 1477 "}`
        });
      }
      setFormPhoneNumber(phoneNumberToSet || "");
      setPhoneNumber(phoneNumberToSet || "");
      const telegramTarget = (_o = (_n = targetGroup == null ? void 0 : targetGroup.telegramTargets) == null ? void 0 : _n[0]) != null ? _o : null;
      const telegramId2 = telegramTarget == null ? void 0 : telegramTarget.telegramId;
      const telegramIdWithSymbolAdded = telegramId2 !== "" && (telegramId2 == null ? void 0 : telegramId2.length) ? prefixTelegramWithSymbol(telegramId2) : null;
      setFormTelegram(telegramId2 != null ? telegramId2 : "");
      setTelegramId(telegramIdWithSymbolAdded != null ? telegramIdWithSymbolAdded : "");
      if (!!telegramTarget && !(telegramTarget == null ? void 0 : telegramTarget.isConfirmed)) {
        setTelegramErrorMessage({
          type: "recoverableError",
          onClick: () => {
            if (!(telegramTarget == null ? void 0 : telegramTarget.confirmationUrl)) {
              return;
            }
            window.open(telegramTarget == null ? void 0 : telegramTarget.confirmationUrl);
          },
          message: "Verify ID"
        });
      } else {
        setTelegramErrorMessage(void 0);
      }
      const discordTarget = (_p = targetGroup == null ? void 0 : targetGroup.discordTargets) == null ? void 0 : _p.find(
        (it) => (it == null ? void 0 : it.name) === "Default"
      );
      if (!!discordTarget && !discordTarget.isConfirmed) {
        setDiscordErrorMessage({
          type: "recoverableError",
          onClick: () => window.open(discordTarget.verificationLink, "_blank"),
          message: "Enable Bot"
        });
        setUseDiscord(true);
        setDiscordTargetData(discordTarget);
      } else if (!!discordTarget && discordTarget.isConfirmed) {
        switch (discordTarget.userStatus) {
          case "DISCORD_SERVER_NOT_JOINED":
            setDiscordErrorMessage({
              type: "recoverableError",
              onClick: () => window.open(discordTarget.discordServerInviteLink, "_blank"),
              message: "Join Server"
            });
            break;
          case "COMPLETE":
            setDiscordErrorMessage(void 0);
            break;
          default:
            throw new Error("Discord target in unexpected state");
        }
        setUseDiscord(true);
        setDiscordTargetData(discordTarget);
      } else {
        setDiscordTargetData(void 0);
        setUseDiscord(false);
      }
      return {
        alerts: alerts2,
        email: (_q = emailTarget == null ? void 0 : emailTarget.emailAddress) != null ? _q : null,
        isPhoneNumberConfirmed,
        phoneNumber: phoneNumber2,
        telegramConfirmationUrl: (_r = telegramTarget == null ? void 0 : telegramTarget.confirmationUrl) != null ? _r : null,
        telegramId: (_s = telegramTarget == null ? void 0 : telegramTarget.telegramId) != null ? _s : null,
        discordId: (_t = discordTarget == null ? void 0 : discordTarget.id) != null ? _t : null
      };
    },
    [setAlerts, setEmail, setPhoneNumber, setTelegramId]
  );
  const value = {
    alerts,
    connectedWallets,
    email,
    loading,
    params,
    phoneNumber,
    contextId,
    telegramId,
    cardView,
    telegramConfirmationUrl,
    useHardwareWallet,
    destinationErrorMessages,
    setAlerts,
    setConnectedWallets,
    setCardView,
    setEmail,
    setLoading,
    setPhoneNumber,
    setTelegramId,
    setTelegramConfirmationUrl,
    setUseHardwareWallet,
    intercomCardView,
    setIntercomCardView,
    hasChatAlert,
    setHasChatAlert,
    conversationId,
    setConversationId,
    userId,
    setUserId,
    setEmailErrorMessage,
    setTelegramErrorMessage,
    setPhoneNumberErrorMessage,
    resetErrorMessageState,
    setDiscordErrorMessage,
    useDiscord,
    setUseDiscord,
    discordTargetData,
    setDiscordTargetData,
    render,
    ftuStage,
    syncFtuStage,
    updateFtuStage
  };
  return /* @__PURE__ */ React4.createElement(NotifiSubscriptionContext.Provider, { value }, children);
};
var useNotifiSubscriptionContext = () => {
  const data = useContext3(NotifiSubscriptionContext);
  return data;
};

// lib/context/NotifiContext.tsx
var NotifiContext = (_a) => {
  var _b = _a, {
    children
  } = _b, params = __objRest(_b, [
    "children"
  ]);
  return /* @__PURE__ */ React5.createElement(NotifiClientContextProvider, __spreadValues({}, params), /* @__PURE__ */ React5.createElement(NotifiFormProvider, null, /* @__PURE__ */ React5.createElement(NotifiSubscriptionContextProvider, __spreadValues({}, params), children)));
};

// lib/context/NotifiDemoPreviewContext.tsx
import React6, {
  createContext as createContext4,
  useContext as useContext4,
  useMemo as useMemo4
} from "react";
var defaultDemoConfigV1 = {
  version: "v1",
  id: "@notifi.network",
  // Shown as dummy telegram id
  name: "notifi@notifi.network",
  // Shown as dummy email field
  eventTypes: [],
  inputs: [],
  contactInfo: {
    sms: {
      active: true,
      supportedCountryCodes: ["+1", "+886"]
    },
    email: {
      active: true
    },
    telegram: {
      active: true
    },
    discord: {
      active: false
    },
    webhook: {}
  }
};
var NotifiDemoPreviewContext = createContext4(
  {}
  // Intentionally empty in default
);
var NotifiDemoPreviewContextProvider = ({ children, view, data }) => {
  const demoPreview = useMemo4(() => ({ view, data }), [view, data]);
  return /* @__PURE__ */ React6.createElement(NotifiDemoPreviewContext.Provider, { value: { demoPreview } }, children);
};
var useNotifiDemoPreviewContext = () => useContext4(NotifiDemoPreviewContext);

// lib/components/NotifiEmailInput.tsx
var NotifiEmailInput = ({
  classNames,
  copy,
  disabled,
  intercomEmailInputStyle,
  intercomEmailInputContainerStyle,
  intercomView
}) => {
  var _a;
  const { intercomCardView, destinationErrorMessages } = useNotifiSubscriptionContext();
  const {
    formState,
    formErrorMessages,
    setEmail,
    setEmailErrorMessage,
    setHasChanges
  } = useNotifiForm();
  const { email } = formState;
  const { email: emailErrorMessage } = formErrorMessages;
  const { email: emailErrorMessageFromSubscriptionContext } = destinationErrorMessages;
  const validateEmail = () => {
    if (email === "") {
      return;
    }
    const emailRegex = new RegExp(
      "^[a-zA-Z0-9._:$!%-+]+@[a-zA-Z0-9.-]+.[a-zA-Z]$"
    );
    if (emailRegex.test(email)) {
      setEmailErrorMessage("");
    } else {
      setEmailErrorMessage("The email is invalid. Please try again.");
    }
  };
  const handleClick = () => {
    if ((emailErrorMessageFromSubscriptionContext == null ? void 0 : emailErrorMessageFromSubscriptionContext.type) !== "recoverableError")
      return;
    emailErrorMessageFromSubscriptionContext.onClick();
  };
  return /* @__PURE__ */ React7.createElement(React7.Fragment, null, intercomView ? intercomCardView.state === "settingView" && (emailErrorMessageFromSubscriptionContext == null ? void 0 : emailErrorMessageFromSubscriptionContext.type) === "recoverableError" ? /* @__PURE__ */ React7.createElement(
    "div",
    {
      onClick: handleClick,
      className: clsx(
        "NotifiEmailVerification__button",
        classNames == null ? void 0 : classNames.button
      )
    },
    "Resend Verification"
  ) : null : /* @__PURE__ */ React7.createElement("label", { className: clsx("NotifiEmailInput__label", classNames == null ? void 0 : classNames.label) }, copy == null ? void 0 : copy.label), /* @__PURE__ */ React7.createElement(
    "div",
    {
      className: clsx(
        "NotifiEmailInput__container",
        intercomEmailInputContainerStyle,
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React7.createElement(EmailIcon, { className: "NotifiInput__icon" }),
    /* @__PURE__ */ React7.createElement(
      "input",
      {
        "data-cy": "notifiEmailInput",
        onBlur: validateEmail,
        className: clsx(
          "NotifiEmailInput__input",
          intercomEmailInputStyle,
          classNames == null ? void 0 : classNames.input
        ),
        disabled,
        name: "notifi-email",
        type: "email",
        value: email,
        onFocus: () => setEmailErrorMessage(""),
        onChange: (e) => {
          var _a2;
          setHasChanges(true);
          setEmail((_a2 = e.target.value) != null ? _a2 : "");
        },
        placeholder: (_a = copy == null ? void 0 : copy.placeholder) != null ? _a : "Email Address"
      }
    )
  ), /* @__PURE__ */ React7.createElement(
    "label",
    {
      className: clsx(
        "NotifiEmailInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    emailErrorMessage
  ));
};

// lib/components/NotifiFooter.tsx
import clsx3 from "clsx";
import React10 from "react";

// lib/components/NotifiDisclosureStatement.tsx
import clsx2 from "clsx";
import React8 from "react";
var NotifiDisclosureStatement = ({ classNames, disclosureCopy }) => {
  return /* @__PURE__ */ React8.createElement("div", { className: clsx2("NotifiDisclosure__container", classNames == null ? void 0 : classNames.container) }, /* @__PURE__ */ React8.createElement("label", { className: clsx2("NotifiDisclosure__label", classNames == null ? void 0 : classNames.label) }, disclosureCopy, " "), /* @__PURE__ */ React8.createElement(
    "a",
    {
      className: clsx2("NotifiDisclosure__hyperlink", classNames == null ? void 0 : classNames.hyperlink),
      href: "https://notifi.network",
      target: "_blank"
    },
    "Learn more"
  ));
};

// lib/components/NotifiLogo.tsx
import React9 from "react";
var NotifiLogo = (props) => {
  return /* @__PURE__ */ React9.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "39",
      height: "9",
      viewBox: "0 0 39 9",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    /* @__PURE__ */ React9.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M7.92661 5.02549C7.68505 5.09427 7.43002 5.1311 7.16639 5.1311C5.63641 5.1311 4.39611 3.8908 4.39611 2.36082C4.39611 2.0878 4.43561 1.824 4.50919 1.57483H1.63872C1.19751 1.57483 0.839844 1.9325 0.839844 2.3737V7.86272C0.839844 8.30393 1.19751 8.66159 1.63872 8.66159H7.12774C7.56894 8.66159 7.92661 8.30393 7.92661 7.86272V5.02549Z",
        fill: "white",
        className: "notifiLogo-letters"
      }
    ),
    /* @__PURE__ */ React9.createElement(
      "path",
      {
        d: "M9.5013 1.96855C9.5013 3.05574 8.61995 3.93709 7.53275 3.93709C6.44556 3.93709 5.56421 3.05574 5.56421 1.96855C5.56421 0.881348 6.44556 0 7.53275 0C8.61995 0 9.5013 0.881348 9.5013 1.96855Z",
        fill: "url(#paint0_linear_872_5572)"
      }
    ),
    /* @__PURE__ */ React9.createElement(
      "path",
      {
        d: "M17.9031 5.61338V8.60198H19.1442V5.61338C19.1442 3.77653 18.1911 2.57513 16.6819 2.57513C15.9471 2.57513 15.2918 3.012 15.0734 3.61766V2.64463H13.8323V8.60198H15.0734V5.6233C15.0734 4.57084 15.6592 3.81624 16.4634 3.81624C17.3372 3.81624 17.9031 4.52119 17.9031 5.61338Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    /* @__PURE__ */ React9.createElement(
      "path",
      {
        d: "M19.9738 5.61338C19.9738 7.34101 21.2546 8.66155 22.9028 8.66155C24.551 8.66155 25.8219 7.34101 25.8219 5.61338C25.8219 3.89567 24.551 2.57513 22.9028 2.57513C21.2546 2.57513 19.9738 3.89567 19.9738 5.61338ZM22.9028 3.81624C23.856 3.81624 24.5808 4.5907 24.5808 5.61338C24.5808 6.64598 23.856 7.42044 22.9028 7.42044C21.9496 7.42044 21.2149 6.64598 21.2149 5.61338C21.2149 4.5907 21.9496 3.81624 22.9028 3.81624Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    /* @__PURE__ */ React9.createElement(
      "path",
      {
        d: "M27.5834 1.38365L27.2855 2.64463H26.4019V3.81624H27.2855V6.55662C27.2855 8.01617 27.8813 8.60198 29.3011 8.60198H29.8174V7.37079H29.4203C28.8047 7.37079 28.5267 7.10271 28.5267 6.48712V3.81624H29.8174V2.64463H28.5267V1.38365H27.5834Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    /* @__PURE__ */ React9.createElement(
      "path",
      {
        d: "M31.9217 8.60198V2.64463H30.6806V8.60198H31.9217Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    /* @__PURE__ */ React9.createElement(
      "path",
      {
        d: "M38.2799 8.60198V2.64463H34.8644V2.20776C34.8644 1.59217 35.1424 1.31415 35.758 1.31415H36.1551V0.0928955H35.6388C34.219 0.0928955 33.6233 0.668778 33.6233 2.13826V2.64463H32.7495V3.81624H33.6233V8.60198H34.8644V3.81624H37.0388V8.60198H38.2799Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    /* @__PURE__ */ React9.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M31.1573 0C30.8066 0 30.6804 0.192486 30.6804 0.466236V1.46139H31.6535C31.9914 1.46139 32.1418 1.34309 32.1418 1.00946V0.466236C32.1418 0.15399 31.9358 0 31.6193 0H31.1573Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    /* @__PURE__ */ React9.createElement("defs", null, /* @__PURE__ */ React9.createElement(
      "linearGradient",
      {
        id: "paint0_linear_872_5572",
        x1: "8.72155",
        y1: "0.306786",
        x2: "6.8297",
        y2: "3.93709",
        gradientUnits: "userSpaceOnUse"
      },
      /* @__PURE__ */ React9.createElement("stop", { stopColor: "#FE7970" }),
      /* @__PURE__ */ React9.createElement("stop", { offset: "1", stopColor: "#FEB776" })
    ))
  );
};

// lib/components/NotifiFooter.tsx
var NotifiFooter = ({
  classNames,
  copy
}) => {
  var _a;
  return /* @__PURE__ */ React10.createElement("div", { className: clsx3("NotifiFooter__container", classNames == null ? void 0 : classNames.container) }, (copy == null ? void 0 : copy.disclosure) ? /* @__PURE__ */ React10.createElement(
    NotifiDisclosureStatement,
    {
      disclosureCopy: copy == null ? void 0 : copy.disclosure,
      classNames: classNames == null ? void 0 : classNames.disclosure
    }
  ) : null, /* @__PURE__ */ React10.createElement(
    "a",
    {
      href: "https://notifi.network",
      target: "_blank",
      rel: "noopener noreferrer",
      className: clsx3(
        "NotifiFooter__poweredByContainer",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React10.createElement(
      "span",
      {
        className: clsx3("NotifiFooter__poweredBy", classNames == null ? void 0 : classNames.poweredBy)
      },
      (_a = copy == null ? void 0 : copy.poweredBy) != null ? _a : "Powered by"
    ),
    /* @__PURE__ */ React10.createElement(
      NotifiLogo,
      {
        className: clsx3("NotifiFooter__logoSvg", classNames == null ? void 0 : classNames.logoSvg)
      }
    )
  ));
};

// lib/components/NotifiSmsInput.tsx
import clsx5 from "clsx";
import React13, { useCallback as useCallback5, useEffect as useEffect6, useState as useState9 } from "react";

// lib/assets/SmsIcon.tsx
import React11 from "react";
var SmsIcon = ({ className }) => {
  return /* @__PURE__ */ React11.createElement(
    "svg",
    {
      width: "11",
      height: "17",
      viewBox: "0 0 11 17",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className
    },
    /* @__PURE__ */ React11.createElement(
      "path",
      {
        d: "M8.33335 0.708328H2.66669C1.49085 0.708328 0.541687 1.65749 0.541687 2.83333V14.1667C0.541687 15.3425 1.49085 16.2917 2.66669 16.2917H8.33335C9.50919 16.2917 10.4584 15.3425 10.4584 14.1667V2.83333C10.4584 1.65749 9.50919 0.708328 8.33335 0.708328ZM6.91669 14.875H4.08335V14.1667H6.91669V14.875ZM9.21877 12.75H1.78127V2.83333H9.21877V12.75Z",
        fill: "#B6B8D5"
      }
    )
  );
};

// lib/constants/countryData.tsx
var countryMap = {
  "+1": {
    dialCode: "+1",
    flag: "\u{1F1FA}\u{1F1F8}",
    name: "United States/Canada"
  },
  "+61": {
    dialCode: "+61",
    flag: "\u{1F1E6}\u{1F1FA}",
    name: "Australia"
  },
  "+43": {
    dialCode: "+43",
    flag: "\u{1F1E6}\u{1F1F9}",
    name: "Austria"
  },
  "+32": {
    dialCode: "+32",
    flag: "\u{1F1E7}\u{1F1EA}",
    name: "Belgium"
  },
  "+55": {
    dialCode: "+55",
    flag: "\u{1F1E7}\u{1F1F7}",
    name: "Brazil"
  },
  "+45": {
    dialCode: "+45",
    flag: "\u{1F1E9}\u{1F1F0}",
    name: "Denmark"
  },
  "+358": {
    dialCode: "+358",
    flag: "\u{1F1EB}\u{1F1EE}",
    name: "Finland"
  },
  "+33": {
    dialCode: "+33",
    flag: "\u{1F1EB}\u{1F1F7}",
    name: "France"
  },
  "+49": {
    dialCode: "+49",
    flag: "\u{1F1E9}\u{1F1EA}",
    name: "Germany"
  },
  "+852": {
    dialCode: "+852",
    flag: "\u{1F1ED}\u{1F1F0}",
    name: "Hong Kong"
  },
  "+36": {
    dialCode: "+36",
    flag: "\u{1F1ED}\u{1F1FA}",
    name: "Hungary"
  },
  "+354": {
    dialCode: "+354",
    flag: "\u{1F1EE}\u{1F1F8}",
    name: "Iceland"
  },
  "+60": {
    dialCode: "+60",
    flag: "\u{1F1F2}\u{1F1FE}",
    name: "Malaysia"
  },
  "+47": {
    dialCode: "+47",
    flag: "\u{1F1F3}\u{1F1F4}",
    name: "Norway"
  },
  "+63": {
    dialCode: "+63",
    flag: "\u{1F1F5}\u{1F1ED}",
    name: "Philippines"
  },
  "+48": {
    dialCode: "+48",
    flag: "\u{1F1F5}\u{1F1F1}",
    name: "Poland"
  },
  "+351": {
    dialCode: "+351",
    flag: "\u{1F1F5}\u{1F1F9}",
    name: "Portugal"
  },
  "+65": {
    dialCode: "+65",
    flag: "\u{1F1F8}\u{1F1EC}",
    name: "Singapore"
  },
  "+82": {
    dialCode: "+82",
    flag: "\u{1F1F0}\u{1F1F7}",
    name: "Korea, Republic of South Korea"
  },
  "+34": {
    dialCode: "+34",
    flag: "\u{1F1EA}\u{1F1F8}",
    name: "Spain"
  },
  "+46": {
    dialCode: "+46",
    flag: "\u{1F1F8}\u{1F1EA}",
    name: "Sweden"
  },
  "+41": {
    dialCode: "+41",
    flag: "\u{1F1E8}\u{1F1ED}",
    name: "Switzerland"
  },
  "+886": {
    dialCode: "+886",
    flag: "\u{1F1F9}\u{1F1FC}",
    name: "Taiwan"
  },
  "+44": {
    dialCode: "+44",
    flag: "\u{1F1EC}\u{1F1E7}",
    name: "United Kingdom"
  }
};

// lib/utils/phoneUtils.ts
var splitPhoneNumber = (phoneNumber) => {
  const { countryCallingCode, nationalNumber: baseNumber } = parsePhoneNumberWithError3(phoneNumber);
  if (!countryCallingCode || !baseNumber) {
    throw new Error("No country or phone found");
  }
  return { baseNumber, countryCallingCode };
};

// lib/components/NotifiSmsDropdownOption.tsx
import clsx4 from "clsx";
import React12 from "react";
var NotifiSmsDropdownOption = ({
  countryData,
  classNames,
  phoneValues,
  onSelected
}) => {
  const { name, dialCode, flag } = countryData;
  return /* @__PURE__ */ React12.createElement(
    "li",
    {
      className: clsx4(
        "NotifiSmsInput__dropdownOption",
        classNames == null ? void 0 : classNames.dropdownOption,
        {
          "NotifiSmsInput__dropdownOption-selected": phoneValues.dialCode === dialCode
        }
      ),
      onClick: () => onSelected(dialCode)
    },
    /* @__PURE__ */ React12.createElement("div", { className: "NotifiSmsInput__dropdownCountry" }, /* @__PURE__ */ React12.createElement("p", { className: "NotifiSmsInput__dropdownFlag" }, flag, " "), /* @__PURE__ */ React12.createElement("p", { className: "NotifiSmsInput__dropdownName" }, name)),
    /* @__PURE__ */ React12.createElement("span", { className: "NotifiSmsInput__dropdownCode" }, dialCode)
  );
};
var NotifiSmsDropdownOption_default = NotifiSmsDropdownOption;

// lib/components/NotifiSmsInput.tsx
var NotifiSmsInput = ({
  allowedCountryCodes,
  classNames,
  copy,
  disabled,
  intercomSmsDropdownContainerStyle,
  intercomSmsDropdownSelectStyle,
  intercomSmsInputContainerStyle,
  intercomSmsInputStyle,
  intercomView
}) => {
  var _a;
  const {
    formErrorMessages,
    formState,
    setPhoneNumber,
    setPhoneNumberErrorMessage,
    setHasChanges
  } = useNotifiForm();
  const { phoneNumber: phoneNumberErrorMessage } = formErrorMessages;
  const { phoneNumber } = formState;
  const [phoneValues, setPhoneValues] = useState9({
    baseNumber: "",
    dialCode: "+1"
  });
  const [isShowOption, setShowOption] = useState9(false);
  const handleShowOption = () => {
    setShowOption(!isShowOption);
  };
  const handleSelected = useCallback5(
    (dialCode) => {
      setPhoneValues(__spreadProps(__spreadValues({}, phoneValues), { dialCode }));
      setPhoneNumber(dialCode + phoneValues.baseNumber);
      setShowOption(false);
    },
    [phoneValues, setPhoneNumber, setPhoneValues]
  );
  const handleBaseNumberChange = useCallback5(
    (event) => {
      const onlyNumberInput = event.target.value.replace(/[^\d]/g, "");
      setPhoneValues(__spreadProps(__spreadValues({}, phoneValues), { baseNumber: onlyNumberInput }));
      setPhoneNumber(phoneValues.dialCode + event.target.value);
    },
    [phoneValues, setPhoneNumber, setPhoneValues]
  );
  const splitPhoneValues = useCallback5(() => {
    if (!phoneNumber) {
      return;
    }
    if (isValidPhoneNumber2(phoneNumber)) {
      const { baseNumber: number, countryCallingCode } = splitPhoneNumber(phoneNumber);
      if (!countryCallingCode || !number) {
        throw new Error("Improper phone");
      }
      setPhoneValues({
        baseNumber: number,
        dialCode: `+${countryCallingCode}`
      });
      return;
    }
  }, [phoneNumber, handleSelected]);
  useEffect6(() => {
    if (phoneNumber) {
      splitPhoneValues();
    }
  }, [phoneNumber]);
  useEffect6(() => {
    if (phoneValues.baseNumber === "" && phoneNumber !== "") {
      setPhoneNumber("");
    }
  }, [phoneValues.baseNumber, setPhoneNumber, phoneNumber]);
  const validateSmsInput = useCallback5(() => {
    if (phoneNumber === "") {
      return;
    }
    if (!isValidPhoneNumber2(phoneNumber)) {
      setPhoneNumberErrorMessage(
        "The phone number is invalid. Please try again"
      );
    }
  }, [phoneNumber, setPhoneNumberErrorMessage]);
  return /* @__PURE__ */ React13.createElement(React13.Fragment, null, intercomView ? null : /* @__PURE__ */ React13.createElement("label", { className: clsx5("NotifiSmsInput__label", classNames == null ? void 0 : classNames.label) }, copy == null ? void 0 : copy.label), /* @__PURE__ */ React13.createElement(
    "div",
    {
      className: clsx5(
        "NotifiSmsInput__container",
        intercomSmsInputContainerStyle,
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React13.createElement(SmsIcon, { className: "NotifiInput__icon" }),
    /* @__PURE__ */ React13.createElement(
      "div",
      {
        className: clsx5(
          "NotifiSmsInput__dropdownContainer",
          intercomSmsDropdownContainerStyle,
          classNames == null ? void 0 : classNames.dropdownContainer
        )
      },
      /* @__PURE__ */ React13.createElement(
        "div",
        {
          className: clsx5(
            "NotifiSmsInput__dropdownSelect",
            intercomSmsDropdownSelectStyle,
            classNames == null ? void 0 : classNames.dropdownSelectField
          ),
          tabIndex: 0,
          onBlur: () => {
            setShowOption(false);
          }
        },
        /* @__PURE__ */ React13.createElement(
          "div",
          {
            className: "NotifiSmsInput__dropdownSelected",
            onClick: handleShowOption
          },
          /* @__PURE__ */ React13.createElement("div", { className: "NotifiSmsInput__dropdownSelectValue" }, phoneValues.dialCode),
          /* @__PURE__ */ React13.createElement(
            "input",
            {
              className: "NotifiSmsInput__dropdownInput",
              type: "hidden",
              value: phoneValues.dialCode,
              onChange: (e) => {
                setHasChanges(true);
                handleBaseNumberChange(e);
              }
            }
          ),
          /* @__PURE__ */ React13.createElement(
            "svg",
            {
              className: "NotifiSmsInput__dropdownSelectIcon",
              viewBox: "0 0 9 5",
              xmlns: "http://www.w3.org/2000/svg"
            },
            /* @__PURE__ */ React13.createElement(
              "path",
              {
                d: "M0.539062 0.916016L4.4974 4.87435L8.45573 0.916016H0.539062Z",
                fill: "inherit"
              }
            )
          )
        ),
        isShowOption && /* @__PURE__ */ React13.createElement("ul", { className: "NotifiSmsInput__dropdownOptionList" }, allowedCountryCodes.map((code) => {
          const countryData = countryMap[code];
          return /* @__PURE__ */ React13.createElement(
            NotifiSmsDropdownOption_default,
            {
              key: code,
              countryData,
              phoneValues,
              onSelected: (dialCode) => handleSelected(dialCode)
            }
          );
        }))
      )
    ),
    /* @__PURE__ */ React13.createElement(
      "input",
      {
        className: clsx5(
          "NotifiSmsInput__input",
          intercomSmsInputStyle,
          classNames == null ? void 0 : classNames.input
        ),
        disabled,
        name: "notifi-sms",
        onBlur: validateSmsInput,
        onChange: (e) => {
          setHasChanges(true);
          handleBaseNumberChange(e);
        },
        onFocus: () => setPhoneNumberErrorMessage(""),
        placeholder: (_a = copy == null ? void 0 : copy.placeholder) != null ? _a : "Phone Number",
        type: "tel",
        value: phoneValues.baseNumber
      }
    )
  ), /* @__PURE__ */ React13.createElement(
    "label",
    {
      className: clsx5(
        "NotifiSmsInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    phoneNumberErrorMessage
  ));
};

// lib/components/NotifiTelegramInput.tsx
import clsx6 from "clsx";
import React15 from "react";

// lib/assets/TelegramIcon.tsx
import React14 from "react";
var TelegramIcon = ({ className }) => {
  return /* @__PURE__ */ React14.createElement(
    "svg",
    {
      width: "17",
      height: "16",
      viewBox: "0 0 17 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className
    },
    /* @__PURE__ */ React14.createElement(
      "path",
      {
        d: "M8.63846 15.4458L16.4253 0.189566L0.00576619 5.06668L3.35716 9.10781L12.9656 3.06713L5.27554 11.4143L8.63846 15.4458Z",
        fill: "#B6B8D5"
      }
    )
  );
};

// lib/components/NotifiTelegramInput.tsx
var NotifiTelegramInput = ({
  classNames,
  copy,
  disabled,
  intercomTelegramInputStyle,
  intercomTelegramInputContainerStyle,
  intercomView
}) => {
  var _a;
  const { telegramConfirmationUrl, intercomCardView } = useNotifiSubscriptionContext();
  const {
    formState,
    formErrorMessages,
    setTelegram,
    setTelegramErrorMessage,
    setHasChanges
  } = useNotifiForm();
  const { telegram } = formState;
  const { telegram: telegramErrorMessage } = formErrorMessages;
  const validateTelegram = () => {
    if (telegram === "") {
      return;
    }
    const TelegramRegex = /^@?(?=\w{5,32}\b)[a-zA-Z0-9]+(?:[a-zA-Z0-9_ ]+[a-zA-Z0-9])*$/;
    if (TelegramRegex.test(telegram)) {
      setTelegramErrorMessage("");
    } else {
      setTelegramErrorMessage("The telegram is invalid. Please try again.");
    }
  };
  const handleClick = () => {
    window.open(telegramConfirmationUrl, "_blank");
  };
  return /* @__PURE__ */ React15.createElement(React15.Fragment, null, intercomView ? intercomCardView.state === "settingView" && telegramConfirmationUrl != null ? /* @__PURE__ */ React15.createElement(
    "div",
    {
      onClick: handleClick,
      className: clsx6(
        "NotifiTelegramVerification__button",
        classNames == null ? void 0 : classNames.button
      )
    },
    "Verify ID"
  ) : null : /* @__PURE__ */ React15.createElement("label", { className: clsx6("NotifiTelegramInput__label", classNames == null ? void 0 : classNames.label) }, copy == null ? void 0 : copy.label), /* @__PURE__ */ React15.createElement(
    "div",
    {
      className: clsx6(
        "NotifiTelegramInput__container",
        intercomTelegramInputContainerStyle,
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React15.createElement(TelegramIcon, { className: "NotifiInput__icon" }),
    /* @__PURE__ */ React15.createElement(
      "input",
      {
        "data-cy": "notifiTelegramInput",
        onBlur: validateTelegram,
        className: clsx6(
          "NotifiTelegramInput__input",
          intercomTelegramInputStyle,
          classNames == null ? void 0 : classNames.input
        ),
        disabled,
        name: "notifi-telegram",
        type: "text",
        value: telegram,
        onFocus: () => setTelegramErrorMessage(""),
        onChange: (e) => {
          var _a2;
          setHasChanges(true);
          setTelegram((_a2 = e.target.value) != null ? _a2 : "");
        },
        placeholder: (_a = copy == null ? void 0 : copy.placeholder) != null ? _a : "Telegram ID"
      }
    )
  ), /* @__PURE__ */ React15.createElement(
    "label",
    {
      className: clsx6(
        "NotifiTelegramInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    telegramErrorMessage
  ));
};

// lib/components/subscription/EventTypeBroadcastRow.tsx
import clsx9 from "clsx";
import React37, {
  useCallback as useCallback6,
  useEffect as useEffect7,
  useMemo as useMemo5,
  useRef as useRef2,
  useState as useState10
} from "react";

// lib/components/subscription/resolveRef.ts
var createRefResolver = (validator) => {
  return (name, valueOrRef, inputs) => {
    if (valueOrRef.type === "value") {
      return valueOrRef.value;
    } else {
      if (valueOrRef.ref === null) {
        throw new Error(`Invalid configuration: Ref ${name} is null`);
      }
      const runtimeInput = inputs[valueOrRef.ref];
      if (validator(runtimeInput)) {
        return runtimeInput;
      } else {
        throw new Error(`Invalid value provided for ${name}: ${runtimeInput}`);
      }
    }
  };
};
var resolveStringRef = createRefResolver(
  (item) => {
    return typeof item === "string";
  }
);
var resolveStringArrayRef = createRefResolver(
  (item) => {
    return Array.isArray(item) && item.every((element) => typeof element === "string");
  }
);

// lib/utils/AlertConfiguration.ts
var chatConfiguration = () => {
  return {
    type: "single",
    filterType: "NOTIFI_CHAT_MESSAGES",
    filterOptions: {
      alertFrequency: "THREE_MINUTES"
    },
    sourceType: "NOTIFI_CHAT",
    createSource: {
      address: "*"
    }
  };
};
var customThresholdConfiguration = ({
  alertFrequency,
  threshold,
  filterType,
  thresholdDirection,
  sourceType,
  sourceAddress
}) => {
  return {
    type: "single",
    sourceType,
    filterType,
    filterOptions: {
      alertFrequency,
      threshold,
      thresholdDirection
    },
    createSource: {
      address: sourceAddress
    }
  };
};
var customToggleConfiguration = ({
  filterType,
  filterOptions,
  sourceType,
  sourceAddress
}) => {
  return {
    type: "single",
    sourceType,
    filterType,
    filterOptions,
    createSource: {
      address: sourceAddress
    }
  };
};
var topicToSource = (topic) => {
  return {
    name: topic,
    blockchainAddress: topic,
    type: "XMTP"
  };
};
var XMTPToggleConfiguration = ({
  XMTPTopics
}) => {
  return {
    type: "multiple",
    filterType: "WEB3_CHAT_MESSAGES",
    filterOptions: {},
    sources: XMTPTopics.map(topicToSource)
  };
};
var broadcastMessageConfiguration = ({
  topicName
}) => {
  return {
    type: "single",
    filterType: "BROADCAST_MESSAGES",
    filterOptions: {},
    sourceType: "BROADCAST",
    createSource: {
      address: topicName
    }
  };
};
var fusionToggleConfiguration = ({
  fusionId,
  fusionSourceAddress,
  maintainSourceGroup,
  alertFrequency
}) => {
  return {
    type: "single",
    maintainSourceGroup,
    filterType: "FUSION_SOURCE",
    filterOptions: alertFrequency === void 0 ? {} : { alertFrequency },
    sourceType: "FUSION_SOURCE",
    createSource: {
      address: fusionSourceAddress,
      fusionEventTypeId: fusionId
    }
  };
};
var fusionHealthCheckConfiguration = (props) => {
  return {
    type: "single",
    maintainSourceGroup: props.maintainSourceGroup,
    filterType: "FUSION_SOURCE",
    filterOptions: {
      alertFrequency: props.alertFrequency,
      threshold: props.threshold,
      thresholdDirection: props.thresholdDirection
    },
    sourceType: "FUSION_SOURCE",
    createSource: {
      address: props.fusionSourceAddress,
      fusionEventTypeId: props.fusionId
    }
  };
};
var directMessageConfiguration = (params) => {
  const type = params == null ? void 0 : params.type;
  return {
    type: "single",
    sourceType: "DIRECT_PUSH",
    filterType: "DIRECT_TENANT_MESSAGES",
    filterOptions: type === void 0 ? null : { directMessageType: type }
  };
};
var healthThresholdConfiguration = ({
  alertFrequency,
  percentage,
  thresholdDirection
}) => {
  return {
    type: "single",
    sourceType: "DIRECT_PUSH",
    filterType: "VALUE_THRESHOLD",
    filterOptions: {
      alertFrequency,
      threshold: percentage,
      thresholdDirection
    }
  };
};
var hedgeProtocolConfiguration = ({
  walletAddress
}) => {
  return {
    type: "single",
    filterType: "LIQUIDATIONS",
    filterOptions: {},
    sourceType: "HEDGE_PROTOCOL",
    createSource: {
      address: walletAddress
    }
  };
};
var tradingPairConfiguration = ({
  tradingPair,
  above,
  price
}) => {
  return {
    type: "single",
    sourceType: "DIRECT_PUSH",
    filterType: "DIRECT_TENANT_MESSAGES",
    filterOptions: {
      tradingPair,
      values: {
        and: [
          {
            key: "spotPrice",
            op: above ? "gt" : "lt",
            value: price.toFixed(8)
          }
        ]
      }
    }
  };
};
var walletBalanceConfiguration = ({
  connectedWallets
}) => {
  return {
    type: "multiple",
    filterType: "BALANCE",
    filterOptions: null,
    sources: connectedWallets.filter(
      (wallet) => !!wallet
    ).map(walletToSource),
    sourceGroupName: "User Wallets"
  };
};
var priceChangeConfiguration = ({
  tokenIds
}) => {
  return {
    type: "multiple",
    filterType: "COIN_PRICE_CHANGE_EVENTS",
    filterOptions: null,
    sources: tokenIds.map((tokenId) => {
      return {
        name: tokenId,
        type: "COIN_PRICE_CHANGES",
        blockchainAddress: tokenId
      };
    })
  };
};
var createConfigurations = (eventTypes, inputs, connectedWallets) => {
  const configs = {};
  eventTypes.forEach((eventType) => {
    var _a, _b;
    switch (eventType.type) {
      case "broadcast": {
        const broadcastId = resolveStringRef(
          eventType.name,
          eventType.broadcastId,
          {}
        );
        configs[eventType.name] = broadcastMessageConfiguration({
          topicName: broadcastId
        });
        break;
      }
      case "custom": {
        switch (eventType.selectedUIType) {
          case "HEALTH_CHECK": {
            const thresholdDirection = (_a = eventType.checkRatios[0].type) != null ? _a : "below";
            const ratioNumber = eventType.checkRatios[1].ratio;
            configs[eventType.name] = customThresholdConfiguration({
              sourceType: eventType.sourceType,
              filterType: eventType.filterType,
              alertFrequency: eventType.alertFrequency,
              sourceAddress: resolveStringRef(
                eventType.name,
                eventType.sourceAddress,
                inputs
              ),
              thresholdDirection,
              threshold: eventType.numberType === "percentage" ? ratioNumber / 100 : ratioNumber
            });
            break;
          }
          case "TOGGLE": {
            configs[eventType.name] = customToggleConfiguration({
              sourceType: eventType.sourceType,
              filterType: eventType.filterType,
              filterOptions: eventType.filterOptions,
              sourceAddress: resolveStringRef(
                eventType.name,
                eventType.sourceAddress,
                inputs
              )
            });
            break;
          }
        }
        break;
      }
      case "directPush": {
        const pushId = resolveStringRef(
          eventType.name,
          eventType.directPushId,
          {}
        );
        configs[eventType.name] = directMessageConfiguration({
          type: pushId
        });
        break;
      }
      case "walletBalance": {
        configs[eventType.name] = walletBalanceConfiguration({
          connectedWallets: connectedWallets.filter(
            (wallet) => !!wallet
          )
        });
        break;
      }
      case "priceChange": {
        configs[eventType.name] = priceChangeConfiguration({
          tokenIds: eventType.tokenIds
        });
        break;
      }
      case "fusionToggle":
        configs[eventType.name] = fusionToggleConfiguration({
          maintainSourceGroup: eventType.maintainSourceGroup,
          fusionId: resolveStringRef(
            eventType.name,
            eventType.fusionEventId,
            inputs
          ),
          fusionSourceAddress: resolveStringRef(
            eventType.name,
            eventType.sourceAddress,
            inputs
          ),
          alertFrequency: eventType.alertFrequency
        });
        break;
      case "fusion": {
        switch (eventType.selectedUIType) {
          case "TOGGLE":
            configs[eventType.name] = fusionToggleConfiguration({
              maintainSourceGroup: eventType.maintainSourceGroup,
              fusionId: resolveStringRef(
                eventType.name,
                eventType.fusionEventId,
                inputs
              ),
              fusionSourceAddress: resolveStringRef(
                eventType.name,
                eventType.sourceAddress,
                inputs
              ),
              alertFrequency: eventType.alertFrequency
            });
            break;
          case "HEALTH_CHECK":
            configs[eventType.name] = fusionHealthCheckConfiguration({
              maintainSourceGroup: eventType.maintainSourceGroup,
              fusionId: resolveStringRef(
                eventType.name,
                eventType.fusionEventId,
                inputs
              ),
              fusionSourceAddress: resolveStringRef(
                eventType.name,
                eventType.sourceAddress,
                inputs
              ),
              alertFrequency: eventType.alertFrequency,
              thresholdDirection: (_b = eventType.checkRatios[0].type) != null ? _b : "below",
              threshold: eventType.numberType === "percentage" ? eventType.checkRatios[1].ratio / 100 : eventType.checkRatios[1].ratio
            });
        }
      }
    }
  });
  return configs;
};

// lib/utils/NotificationHistoryUtils.tsx
import React34 from "react";

// lib/assets/AnnouncementIcon.tsx
import React16 from "react";
var AnnouncementIcon = (props) => {
  return /* @__PURE__ */ React16.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React16.createElement(
      "path",
      {
        d: "M16.7498 10.7917V12.2084H19.5832V10.7917H16.7498ZM15.3332 15.4738C16.0132 15.9767 16.8986 16.6425 17.5998 17.1667C17.8832 16.7913 18.1665 16.4088 18.4498 16.0334C17.7486 15.5092 16.8632 14.8434 16.1832 14.3334C15.8998 14.7159 15.6165 15.0984 15.3332 15.4738ZM18.4498 6.96671C18.1665 6.59129 17.8832 6.20879 17.5998 5.83337C16.8986 6.35754 16.0132 7.02337 15.3332 7.53337C15.6165 7.90879 15.8998 8.29129 16.1832 8.66671C16.8632 8.15671 17.7486 7.49796 18.4498 6.96671ZM6.83317 9.37504C6.054 9.37504 5.4165 10.0125 5.4165 10.7917V12.2084C5.4165 12.9875 6.054 13.625 6.83317 13.625H7.5415V16.4584H8.95817V13.625H9.6665L13.2082 15.75V7.25004L9.6665 9.37504H6.83317ZM14.979 11.5C14.979 10.558 14.5682 9.70796 13.9165 9.12712V13.8659C14.5682 13.2921 14.979 12.4421 14.979 11.5Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/ChatAlertIcon.tsx
import React17 from "react";
var ChatAlertIcon = (props) => {
  return /* @__PURE__ */ React17.createElement(
    "svg",
    __spreadValues({
      width: "22",
      height: "22",
      viewBox: "0 0 22 22",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React17.createElement("g", { clipPath: "url(#chat_alert_icon_clip0_13256_1794)" }, /* @__PURE__ */ React17.createElement(
      "path",
      {
        d: "M18.332 1.83203H3.66536C2.65703 1.83203 1.83203 2.65703 1.83203 3.66536V20.1654L5.4987 16.4987H18.332C19.3404 16.4987 20.1654 15.6737 20.1654 14.6654V3.66536C20.1654 2.65703 19.3404 1.83203 18.332 1.83203ZM18.332 14.6654H5.4987L3.66536 16.4987V3.66536H18.332V14.6654Z",
        fill: "currentColor"
      }
    )),
    /* @__PURE__ */ React17.createElement("defs", null, /* @__PURE__ */ React17.createElement("clipPath", { id: "chat_alert_icon_clip0_13256_1794" }, /* @__PURE__ */ React17.createElement("rect", { width: "22", height: "22", fill: "currentColor" })))
  );
};

// lib/assets/RatioCheckIcon.tsx
import React18 from "react";
var RatioCheckIcon = (props) => {
  return /* @__PURE__ */ React18.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React18.createElement("circle", { cx: "8", cy: "9", r: "1.75", stroke: "currentColor", strokeWidth: "1.5" }),
    /* @__PURE__ */ React18.createElement(
      "circle",
      {
        cx: "16",
        cy: "14",
        r: "1.75",
        stroke: "currentColor",
        strokeWidth: "1.5"
      }
    ),
    /* @__PURE__ */ React18.createElement(
      "line",
      {
        x1: "9.22548",
        y1: "16.4982",
        x2: "14.8394",
        y2: "6.77452",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round"
      }
    )
  );
};

// lib/assets/SwapIcon.tsx
import React19 from "react";
var SwapIcon = (props) => {
  return /* @__PURE__ */ React19.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React19.createElement(
      "path",
      {
        d: "M7.32357 17.9999L4.50007 14.7999M4.50007 14.7999L7.32357 11.5999M4.50007 14.7999H12.5",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    ),
    /* @__PURE__ */ React19.createElement(
      "path",
      {
        d: "M16.6764 12.4L19.4999 9.20003M19.4999 9.20003L16.6764 6.00004M19.4999 9.20003H11.5",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  );
};

// lib/assets/BellIcon.tsx
import React20 from "react";
var BellIcon = (props) => {
  return /* @__PURE__ */ React20.createElement(
    "svg",
    __spreadValues({
      width: "25",
      height: "25",
      viewBox: "-6 -6 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React20.createElement(
      "path",
      {
        d: "M5.49013 11.1875C6.12122 11.1875 6.63757 10.6712 6.63757 10.0401H4.3427C4.3427 10.6712 4.85331 11.1875 5.49013 11.1875ZM8.93244 7.74519V4.8766C8.93244 3.11529 7.99154 1.64083 6.35071 1.25071V0.860577C6.35071 0.384391 5.96632 0 5.49013 0C5.01395 0 4.62956 0.384391 4.62956 0.860577V1.25071C2.98299 1.64083 2.04783 3.10955 2.04783 4.8766V7.74519L0.900391 8.89263V9.46635H10.0799V8.89263L8.93244 7.74519Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/components/AlertHistory/AlertIcon.tsx
import React33 from "react";

// lib/assets/ChartIcon.tsx
import React21 from "react";
var ChartIcon = (props) => {
  return /* @__PURE__ */ React21.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React21.createElement(
      "path",
      {
        d: "M17.0556 5.5H6.94444C6.15 5.5 5.5 6.15 5.5 6.94444V17.0556C5.5 17.85 6.15 18.5 6.94444 18.5H17.0556C17.85 18.5 18.5 17.85 18.5 17.0556V6.94444C18.5 6.15 17.85 5.5 17.0556 5.5ZM9.83333 15.6111H8.38889V10.5556H9.83333V15.6111ZM12.7222 15.6111H11.2778V8.38889H12.7222V15.6111ZM15.6111 15.6111H14.1667V12.7222H15.6111V15.6111Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/CheckIcon.tsx
import React22 from "react";
var CheckIcon = (_a) => {
  var _b = _a, { className } = _b, svgProps = __objRest(_b, ["className"]);
  return /* @__PURE__ */ React22.createElement(
    "svg",
    __spreadProps(__spreadValues({
      className
    }, svgProps), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    /* @__PURE__ */ React22.createElement(
      "path",
      {
        d: "M6 12.5L9.84 16L18 8",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round"
      }
    )
  );
};

// lib/assets/ClockIcon.tsx
import React23 from "react";
var ClockIcon = (props) => {
  return /* @__PURE__ */ React23.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React23.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18ZM12.75 8C12.75 7.58579 12.4142 7.25 12 7.25C11.5858 7.25 11.25 7.58579 11.25 8V12.5V12.8107L11.4697 13.0303L13.9697 15.5303C14.2626 15.8232 14.7374 15.8232 15.0303 15.5303C15.3232 15.2374 15.3232 14.7626 15.0303 14.4697L12.75 12.1893V8Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/DaoIcon.tsx
import React24 from "react";
var DaoIcon = (props) => {
  return /* @__PURE__ */ React24.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React24.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M17.0623 7.92265L12.0002 5L6.93799 7.92265L12.0002 10.8453L17.0623 7.92265ZM12.0002 12L5.93799 8.5V15.5L12.0002 19L18.0623 15.5V8.5L12.0002 12Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/DownArrowIcon.tsx
import React25 from "react";
var DownArrowIcon = (props) => {
  return /* @__PURE__ */ React25.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React25.createElement(
      "path",
      {
        d: "M8 13.4705L12 16.9999M12 16.9999L16 13.4705M12 16.9999V7",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  );
};

// lib/assets/FlagIcon.tsx
import React26 from "react";
var FlagIcon = (props) => {
  return /* @__PURE__ */ React26.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React26.createElement(
      "path",
      {
        d: "M14.1882 7.52941L13.8824 6H7V19H8.52941V13.6471H12.8118L13.1176 15.1765H18.4706V7.52941H14.1882Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/GraphIcon.tsx
import React27 from "react";
var GraphIcon = (props) => {
  return /* @__PURE__ */ React27.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React27.createElement(
      "path",
      {
        d: "M7 16.5L10.5 11L13 14L17 8",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round"
      }
    )
  );
};

// lib/assets/InfoIcon.tsx
import React28 from "react";
var InfoIcon = (props) => {
  return /* @__PURE__ */ React28.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React28.createElement(
      "path",
      {
        d: "M11.3335 8.66671H12.6668V10H11.3335V8.66671ZM11.3335 11.3334H12.6668V15.3334H11.3335V11.3334ZM12.0002 5.33337C8.32016 5.33337 5.3335 8.32004 5.3335 12C5.3335 15.68 8.32016 18.6667 12.0002 18.6667C15.6802 18.6667 18.6668 15.68 18.6668 12C18.6668 8.32004 15.6802 5.33337 12.0002 5.33337ZM12.0002 17.3334C9.06016 17.3334 6.66683 14.94 6.66683 12C6.66683 9.06004 9.06016 6.66671 12.0002 6.66671C14.9402 6.66671 17.3335 9.06004 17.3335 12C17.3335 14.94 14.9402 17.3334 12.0002 17.3334Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/StarIcon.tsx
import React29 from "react";
var StarIcon = (props) => {
  return /* @__PURE__ */ React29.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React29.createElement(
      "path",
      {
        d: "M12 5L13.5716 9.83688H18.6574L14.5429 12.8262L16.1145 17.6631L12 14.6738L7.8855 17.6631L9.4571 12.8262L5.3426 9.83688H10.4284L12 5Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/UpArrowIcon.tsx
import React30 from "react";
var UpArrowIcon = (props) => {
  return /* @__PURE__ */ React30.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React30.createElement(
      "path",
      {
        d: "M8 10.5293L12 6.99995M12 6.99995L16 10.5293M12 6.99995V16.9999",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  );
};

// lib/assets/UrgentIcon.tsx
import React31 from "react";
var UrgentIcon = (props) => {
  return /* @__PURE__ */ React31.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React31.createElement(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18ZM11.25 9.25C11.25 8.83579 11.5858 8.5 12 8.5C12.4142 8.5 12.75 8.83579 12.75 9.25V13.25C12.75 13.6642 12.4142 14 12 14C11.5858 14 11.25 13.6642 11.25 13.25V9.25ZM11.25 15.25C11.25 14.8358 11.5858 14.5 12 14.5C12.4142 14.5 12.75 14.8358 12.75 15.25C12.75 15.6642 12.4142 16 12 16C11.5858 16 11.25 15.6642 11.25 15.25Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/WatchIcon.tsx
import React32 from "react";
var WatchIcon = (props) => {
  return /* @__PURE__ */ React32.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React32.createElement(
      "path",
      {
        d: "M11.9998 7C8.6665 7 5.81984 9.07333 4.6665 12C5.81984 14.9267 8.6665 17 11.9998 17C15.3332 17 18.1798 14.9267 19.3332 12C18.1798 9.07333 15.3332 7 11.9998 7ZM11.9998 15.3333C10.1598 15.3333 8.6665 13.84 8.6665 12C8.6665 10.16 10.1598 8.66667 11.9998 8.66667C13.8398 8.66667 15.3332 10.16 15.3332 12C15.3332 13.84 13.8398 15.3333 11.9998 15.3333ZM11.9998 10C10.8932 10 9.99984 10.8933 9.99984 12C9.99984 13.1067 10.8932 14 11.9998 14C13.1065 14 13.9998 13.1067 13.9998 12C13.9998 10.8933 13.1065 10 11.9998 10Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/components/AlertHistory/AlertIcon.tsx
var icons = {
  UP_ARROW: UpArrowIcon,
  DOWN_ARROW: DownArrowIcon,
  PERCENT: RatioCheckIcon,
  CLOCK: ClockIcon,
  CHECKMARK: CheckIcon,
  STAR: StarIcon,
  MEGAPHONE: AnnouncementIcon,
  CHART: ChartIcon,
  DAO: DaoIcon,
  FLAG: FlagIcon,
  GRAPH: GraphIcon,
  INFO: InfoIcon,
  SWAP: SwapIcon,
  URGENT: UrgentIcon,
  WATCH: WatchIcon,
  BELL: BellIcon
};
var AlertIcon = (_a) => {
  var _b = _a, { icon } = _b, props = __objRest(_b, ["icon"]);
  var _a2;
  const Renderer = (_a2 = icons[icon]) != null ? _a2 : AnnouncementIcon;
  return /* @__PURE__ */ React33.createElement(Renderer, __spreadValues({}, props));
};

// lib/utils/AlertHistoryUtils.tsx
import { format, parseISO } from "date-fns";
var isDateInThisWeek = (date) => {
  const passedInDate = new Date(date);
  const todayObj = /* @__PURE__ */ new Date();
  const todayDate = todayObj.getDate();
  const firstDayOfWeek = new Date(todayObj.setDate(todayDate - 6));
  return passedInDate >= firstDayOfWeek;
};
var getDayName = (date) => {
  const weekday = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][new Date(date).getDay()];
  return weekday;
};
var formatAmount = (amount) => parseFloat(amount.toFixed(9)).toString();
var isToday = (date) => {
  const today = /* @__PURE__ */ new Date();
  return date.getDate() == today.getDate() && date.getMonth() == today.getMonth() && date.getFullYear() == today.getFullYear();
};
var formatAlertDetailsTimestamp = (date) => {
  try {
    const parsedDate = parseISO(date);
    const month = parsedDate.toLocaleString("default", { month: "short" });
    const clockTime = format(parsedDate, "HH:mm");
    const dateTime = format(parsedDate, "dd");
    const finalDate = `${month} ${dateTime} at ${clockTime} `;
    return finalDate;
  } catch (e) {
    return "-";
  }
};
var formatTimestamp = (date) => {
  try {
    const parsedDate = parseISO(date);
    const month = parsedDate.toLocaleString("default", { month: "short" });
    const clockTime = format(parsedDate, "HH:mm");
    const dateTime = format(parsedDate, "dd");
    const finalDate = `${month} ${dateTime}`;
    if (isToday(parsedDate)) {
      return clockTime;
    }
    if (isDateInThisWeek(date)) {
      return getDayName(date);
    }
    return finalDate;
  } catch (e) {
    return "-";
  }
};

// lib/utils/NotificationHistoryUtils.tsx
var supportedEventDetails = /* @__PURE__ */ new Map();
supportedEventDetails.set("DirectTenantMessageEventDetails", {
  getViewProps: (notification) => {
    var _a, _b, _c;
    const detail = notification.detail;
    const templateVariablesJson = JSON.parse(
      detail.templateVariablesJson || "{}"
    );
    return {
      notificationTitle: (_a = templateVariablesJson.title) != null ? _a : "Announcement",
      notificationImage: /* @__PURE__ */ React34.createElement(AnnouncementIcon, null),
      notificationSubject: (_b = templateVariablesJson.subject) != null ? _b : "",
      notificationDate: notification.createdDate,
      notificationMessage: (_c = templateVariablesJson.message) != null ? _c : ""
    };
  },
  getAlertDetailsContents: (notification) => {
    var _a, _b;
    const detail = notification.detail;
    const templateVariablesJson = JSON.parse(
      detail.templateVariablesJson || "{}"
    );
    return {
      topContent: (_a = templateVariablesJson.subject) != null ? _a : "",
      bottomContent: (_b = templateVariablesJson.message) != null ? _b : ""
    };
  }
});
supportedEventDetails.set("BroadcastMessageEventDetails", {
  getViewProps: (notification) => {
    var _a, _b;
    const detail = notification.detail;
    return {
      notificationTitle: "Announcement",
      notificationImage: /* @__PURE__ */ React34.createElement(AnnouncementIcon, null),
      notificationSubject: (_a = detail.subject) != null ? _a : "",
      notificationDate: notification.createdDate,
      notificationMessage: (_b = detail.message) != null ? _b : ""
    };
  },
  getAlertDetailsContents: (notification) => {
    var _a, _b, _c;
    const detail = notification.detail;
    return {
      topContent: (_a = detail.subject) != null ? _a : "",
      bottomContent: (_b = detail.message) != null ? _b : "",
      bottomContentHtml: (_c = detail.messageHtml) != null ? _c : ""
    };
  }
});
supportedEventDetails.set("HealthValueOverThresholdEventDetails", {
  getViewProps: (notification) => {
    var _a, _b, _c;
    const detail = notification.detail;
    const threshold = (_a = detail.threshold) != null ? _a : "";
    const name = (_b = detail.name) != null ? _b : "";
    const value = (_c = detail.value) != null ? _c : "";
    let thresholdDirection = "";
    if (parseFloat(value) > parseFloat(threshold)) {
      thresholdDirection = "under";
    } else {
      thresholdDirection = "over";
    }
    return {
      notificationTitle: "Health Check",
      notificationImage: /* @__PURE__ */ React34.createElement(RatioCheckIcon, null),
      notificationSubject: `${name} ${thresholdDirection} ${threshold}`,
      notificationDate: notification.createdDate,
      notificationMessage: void 0
    };
  },
  getAlertDetailsContents: (notification) => {
    const detail = notification.detail;
    return {
      topContent: detail.name,
      bottomContent: `value: ${detail.value}`,
      otherContent: `threshold: ${detail.threshold}`
    };
  }
});
supportedEventDetails.set("GenericEventDetails", {
  getViewProps: (notification) => {
    const detail = notification.detail;
    return {
      notificationTitle: detail.sourceName,
      notificationImage: /* @__PURE__ */ React34.createElement(AlertIcon, { icon: detail.icon }),
      notificationSubject: detail.notificationTypeName,
      notificationDate: notification.createdDate,
      notificationMessage: detail.genericMessage
    };
  },
  getAlertDetailsContents: (notification) => {
    var _a;
    const detail = notification.detail;
    return {
      topContent: detail.notificationTypeName,
      bottomContent: detail.genericMessage,
      bottomContentHtml: (_a = detail.genericMessageHtml) != null ? _a : ""
    };
  }
});
supportedEventDetails.set("ChatMessageReceivedEventDetails", {
  getViewProps: (notification) => {
    const detail = notification.detail;
    return {
      notificationTitle: `New Message from ${detail.senderName}`,
      notificationSubject: `New Message from ${detail.senderName}`,
      notificationDate: notification.createdDate,
      notificationMessage: detail.messageBody,
      notificationImage: /* @__PURE__ */ React34.createElement(ChatAlertIcon, { width: 17, height: 17 })
    };
  },
  getAlertDetailsContents: (notification) => {
    const detail = notification.detail;
    return {
      topContent: `New Message from ${detail.senderName}`,
      bottomContent: detail.messageBody
    };
  }
});
supportedEventDetails.set("AccountBalanceChangedEventDetails", {
  getViewProps: (notification) => {
    const detail = notification.detail;
    const changeAmount = formatAmount(
      Math.abs(detail.previousValue - detail.newValue)
    );
    const getTitle = () => {
      return detail.direction === "INCOMING" ? `Incoming Transaction: ${changeAmount} ${detail.tokenSymbol}` : `Outgoing Transaction: -${changeAmount} ${detail.tokenSymbol}`;
    };
    const walletBlockchain = detail.walletBlockchain;
    const direction = detail.direction === "INCOMING" ? "" : "-";
    const message = `${walletBlockchain} Wallet account balance changed by ${direction}${changeAmount} ${detail.tokenSymbol}`;
    return {
      notificationImage: /* @__PURE__ */ React34.createElement(SwapIcon, null),
      notificationTitle: "Wallet Balance Change",
      notificationSubject: getTitle(),
      notificationDate: notification.createdDate,
      notificationMessage: message
    };
  },
  getAlertDetailsContents: (notification) => {
    const detail = notification.detail;
    const changeAmount = `${formatAmount(
      Math.abs(detail.previousValue - detail.newValue)
    )}`;
    const topContent = detail.direction === "INCOMING" ? `Incoming Transaction: ${changeAmount}  ${detail.tokenSymbol}` : `Outgoing Transaction: -${changeAmount}  ${detail.tokenSymbol}`;
    const direction = detail.direction === "INCOMING" ? "" : "-";
    const bottomContent = ` ${detail.walletBlockchain} wallet account balance changed by ${direction}${changeAmount} ${detail.tokenSymbol}`;
    return {
      topContent,
      bottomContent
    };
  }
});
var validateIsSupported = (entry) => {
  var _a, _b;
  if (supportedEventDetails.get((_b = (_a = entry == null ? void 0 : entry.detail) == null ? void 0 : _a.__typename) != null ? _b : ""))
    return true;
  return false;
};
var getAlertNotificationViewBaseProps = (notification) => {
  var _a, _b, _c;
  const genProps = (_c = supportedEventDetails.get(
    (_b = (_a = notification.detail) == null ? void 0 : _a.__typename) != null ? _b : ""
  )) == null ? void 0 : _c.getViewProps;
  return !!notification.detail && !!genProps ? genProps(notification) : (
    // It should never come here: exception should be filtered out before. https://virtuoso.dev/troubleshooting
    {
      notificationTitle: "Unsupported notification",
      notificationImage: /* @__PURE__ */ React34.createElement(AlertIcon, { icon: "INFO" }),
      notificationSubject: "Alert not supported yet",
      notificationDate: notification.createdDate,
      notificationMessage: "Unsupported notification"
    }
  );
};
var getAlertDetailsContents = (notification) => {
  var _a, _b, _c;
  const getContents = (_c = supportedEventDetails.get(
    (_b = (_a = notification.detail) == null ? void 0 : _a.__typename) != null ? _b : ""
  )) == null ? void 0 : _c.getAlertDetailsContents;
  return !!notification && !!getContents ? getContents(notification) : (
    // It should never come here: exception should be filtered out before. https://virtuoso.dev/troubleshooting
    {
      topContent: "Unsupported notification",
      bottomContent: "Alert not supported yet"
    }
  );
};

// lib/utils/frontendClient.ts
var subscribeAlertByFrontendClient = async (frontendClient, alertDetail) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u;
  await frontendClient.ensureAlert(alertDetail);
  const updatedData = await frontendClient.fetchData();
  const updatedTgs = updatedData.targetGroup;
  if (!(updatedTgs && updatedTgs.length > 0)) {
    throw new Error("No target groups found");
  }
  const updatedTg = __spreadProps(__spreadValues({}, updatedTgs[0]), {
    name: (_b = (_a = updatedTgs[0]) == null ? void 0 : _a.name) != null ? _b : ""
  });
  const alerts = {};
  (_c = updatedData.alert) == null ? void 0 : _c.forEach((alert) => {
    if (alert && alert.name) {
      alerts[alert.name] = alert;
    }
  });
  return {
    alerts,
    email: (_f = (_e = (_d = updatedTg.emailTargets) == null ? void 0 : _d[0]) == null ? void 0 : _e.emailAddress) != null ? _f : "",
    phoneNumber: (_i = (_h = (_g = updatedTg.smsTargets) == null ? void 0 : _g[0]) == null ? void 0 : _h.phoneNumber) != null ? _i : "",
    isPhoneNumberConfirmed: (_l = (_k = (_j = updatedTg.smsTargets) == null ? void 0 : _j[0]) == null ? void 0 : _k.isConfirmed) != null ? _l : false,
    telegramId: (_o = (_n = (_m = updatedTg.telegramTargets) == null ? void 0 : _m[0]) == null ? void 0 : _n.telegramId) != null ? _o : "",
    telegramConfirmationUrl: (_r = (_q = (_p = updatedTg.telegramTargets) == null ? void 0 : _p[0]) == null ? void 0 : _q.confirmationUrl) != null ? _r : "",
    discordId: (_u = (_t = (_s = updatedTg.discordTargets) == null ? void 0 : _s[0]) == null ? void 0 : _t.id) != null ? _u : ""
  };
};
var unsubscribeAlertByFrontendClient = async (frontendClient, alertDetail) => {
  const alerts = await frontendClient.getAlerts();
  const existing = alerts.find(
    (alert) => alert.name === alertDetail.eventType.name
  );
  if (!existing || !(existing == null ? void 0 : existing.id))
    throw new Error("Alert not found");
  await frontendClient.deleteAlert({ id: existing.id });
};
var subscribeAlertsByFrontendClient = async (frontendClient, eventTypes, inputs) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u;
  for (const eventType of eventTypes) {
    try {
      await frontendClient.ensureAlert({ eventType, inputs });
    } catch (e) {
      console.log(
        `EventType ${eventType.type} does not support default subscribe: ${e}`
      );
    }
  }
  const updatedData = await frontendClient.fetchData();
  const updatedTgs = updatedData.targetGroup;
  if (!(updatedTgs && updatedTgs.length > 0)) {
    throw new Error("No target groups found");
  }
  const updatedTg = __spreadProps(__spreadValues({}, updatedTgs[0]), {
    name: (_b = (_a = updatedTgs[0]) == null ? void 0 : _a.name) != null ? _b : ""
  });
  const alerts = {};
  (_c = updatedData.alert) == null ? void 0 : _c.forEach((alert) => {
    if (alert && alert.name) {
      alerts[alert.name] = alert;
    }
  });
  return {
    alerts,
    email: (_f = (_e = (_d = updatedTg.emailTargets) == null ? void 0 : _d[0]) == null ? void 0 : _e.emailAddress) != null ? _f : "",
    phoneNumber: (_i = (_h = (_g = updatedTg.smsTargets) == null ? void 0 : _g[0]) == null ? void 0 : _h.phoneNumber) != null ? _i : "",
    isPhoneNumberConfirmed: (_l = (_k = (_j = updatedTg.smsTargets) == null ? void 0 : _j[0]) == null ? void 0 : _k.isConfirmed) != null ? _l : false,
    telegramId: (_o = (_n = (_m = updatedTg.telegramTargets) == null ? void 0 : _m[0]) == null ? void 0 : _n.telegramId) != null ? _o : "",
    telegramConfirmationUrl: (_r = (_q = (_p = updatedTg.telegramTargets) == null ? void 0 : _p[0]) == null ? void 0 : _q.confirmationUrl) != null ? _r : "",
    discordId: (_u = (_t = (_s = updatedTg.discordTargets) == null ? void 0 : _s[0]) == null ? void 0 : _t.id) != null ? _u : ""
  };
};

// lib/utils/typeUtils.ts
var objectKeys = (object) => {
  return Object == null ? void 0 : Object.keys(object);
};

// lib/components/subscription/NotifiToggle.tsx
import clsx7 from "clsx";
import React35 from "react";
var NotifiToggle = ({
  classNames,
  disabled,
  checked,
  setChecked,
  intercomToggleStyle
}) => {
  return /* @__PURE__ */ React35.createElement("label", { className: clsx7("NotifiToggle__container", classNames == null ? void 0 : classNames.container) }, /* @__PURE__ */ React35.createElement(
    "input",
    {
      className: clsx7(
        "NotifiToggle__input",
        intercomToggleStyle,
        classNames == null ? void 0 : classNames.input
      ),
      disabled,
      type: "checkbox",
      checked,
      onChange: (e) => {
        setChecked(e.target.checked);
      }
    }
  ), /* @__PURE__ */ React35.createElement(
    "span",
    {
      className: clsx7("NotifiToggle__slider", classNames == null ? void 0 : classNames.slider, {
        "NotifiToggleSlider--disabled": disabled
      })
    }
  ));
};

// lib/components/subscription/NotifiTooltip.tsx
import clsx8 from "clsx";
import React36 from "react";
var NotifiTooltip = ({
  classNames,
  content
}) => {
  return /* @__PURE__ */ React36.createElement("div", { className: clsx8("NotifiTooltip__container", classNames == null ? void 0 : classNames.container) }, /* @__PURE__ */ React36.createElement(
    "svg",
    {
      className: clsx8("NotifiTooltip__infoIcon", classNames == null ? void 0 : classNames.icon),
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ React36.createElement(
      "path",
      {
        d: "M9 7H11V5H9V7ZM10 18C5.59 18 2 14.41 2 10C2 5.59 5.59 2 10 2C14.41 2 18 5.59 18 10C18 14.41 14.41 18 10 18ZM10 0C8.68678 0 7.38642 0.258658 6.17317 0.761205C4.95991 1.26375 3.85752 2.00035 2.92893 2.92893C1.05357 4.8043 0 7.34784 0 10C0 12.6522 1.05357 15.1957 2.92893 17.0711C3.85752 17.9997 4.95991 18.7362 6.17317 19.2388C7.38642 19.7413 8.68678 20 10 20C12.6522 20 15.1957 18.9464 17.0711 17.0711C18.9464 15.1957 20 12.6522 20 10C20 8.68678 19.7413 7.38642 19.2388 6.17317C18.7362 4.95991 17.9997 3.85752 17.0711 2.92893C16.1425 2.00035 15.0401 1.26375 13.8268 0.761205C12.6136 0.258658 11.3132 0 10 0ZM9 15H11V9H9V15Z",
        fill: "inherit"
      }
    )
  ), /* @__PURE__ */ React36.createElement("div", { className: clsx8("NotifiTooltip__body", classNames == null ? void 0 : classNames.tooltip) }, /* @__PURE__ */ React36.createElement("div", { className: clsx8("NotifiTooltip__label", classNames == null ? void 0 : classNames.tooltipLabel) }, content)));
};

// lib/components/subscription/EventTypeBroadcastRow.tsx
var EventTypeBroadcastRow = ({
  classNames,
  config,
  disabled,
  inputs
}) => {
  var _a;
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = useState10(false);
  const [isNotificationLoading, setIsNotificationLoading] = useState10(false);
  const broadcastId = useMemo5(
    () => resolveStringRef(config.name, config.broadcastId, inputs),
    [config, inputs]
  );
  const alertName = useMemo5(() => {
    if (config.broadcastId.type === "value") {
      return config.name;
    }
    return `${config.name}:${broadcastId}`;
  }, [config, broadcastId]);
  const alertConfiguration = useMemo5(() => {
    return broadcastMessageConfiguration({
      topicName: broadcastId
    });
  }, [alertName, config, inputs]);
  const subscribeAlert = useCallback6(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const unSubscribeAlert = useCallback6(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const tooltipContent = config.tooltipContent;
  const didFetch = useRef2(false);
  useEffect7(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const handleNewSubscription = useCallback6(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    loading,
    enabled,
    instantSubscribe,
    alertConfiguration,
    alertName,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return /* @__PURE__ */ React37.createElement(
    "div",
    {
      className: clsx9(
        "EventTypeBroadcastRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React37.createElement("div", { className: clsx9("EventTypeBroadcastRow__label", classNames == null ? void 0 : classNames.label) }, (_a = config.displayNameOverride) != null ? _a : config.name, tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React37.createElement(
      NotifiTooltip,
      {
        classNames: classNames == null ? void 0 : classNames.tooltip,
        content: tooltipContent
      }
    ) : null),
    /* @__PURE__ */ React37.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleNewSubscription
      }
    )
  );
};

// lib/components/subscription/EventTypeCustomHealthCheckRow.tsx
import clsx10 from "clsx";
import React38, {
  useCallback as useCallback7,
  useEffect as useEffect8,
  useMemo as useMemo6,
  useRef as useRef3,
  useState as useState11
} from "react";
var getParsedPercentage = (input) => {
  var _a;
  if (input.indexOf("%") === input.length - 1) {
    return (_a = parseFloat(input.slice(0, -1))) != null ? _a : null;
  }
  return null;
};
var getParsedPrice = (input) => {
  var _a;
  if (input.indexOf("$") === 0) {
    return (_a = parseFloat(input.slice(1))) != null ? _a : null;
  }
  return null;
};
var EventTypeCustomHealthCheckRow = ({
  classNames,
  config,
  disabled,
  inputs
}) => {
  var _a, _b;
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const handleSuffixPercentage = (value) => {
    value = value.replace("%", "");
    setCustomValue(value + "%");
  };
  const handlePrefixDollar = (value) => {
    value = value.replace("$", "");
    setCustomValue("$" + value);
  };
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = useState11(false);
  const [selectedIndex, setSelectedIndex] = useState11(null);
  const [isNotificationLoading, setIsNotificationLoading] = useState11(false);
  const [customValue, setCustomValue] = useState11("");
  const customInputRef = useRef3(null);
  const thresholdDirection = "below";
  const [errorMessage, setErrorMessage] = useState11("");
  const alertName = useMemo6(() => config.name, [config]);
  const tooltipContent = config.tooltipContent;
  const UNABLE_TO_SUBSCRIBE2 = "Unable to subscribe, please try again";
  const UNABLE_TO_UNSUBSCRIBE = "Unable to unsubscribe, please try again";
  const INVALID_NUMBER2 = "Please enter a valid number";
  if (config.selectedUIType !== "HEALTH_CHECK") {
    return null;
  }
  const subscribingRatioValue = useMemo6(() => {
    const alert = alerts[alertName];
    if (!alert || !alert.filterOptions)
      return null;
    let alertRatioValue = null;
    switch (config.numberType) {
      case "percentage":
        alertRatioValue = JSON.parse(alert.filterOptions).threshold * 100;
        break;
      default:
        alertRatioValue = JSON.parse(alert.filterOptions).threshold;
    }
    return alertRatioValue;
  }, [alerts]);
  const defaultRatios = useMemo6(() => {
    var _a2;
    const ratios = (_a2 = config.checkRatios) != null ? _a2 : [];
    return ratios.map((ratio) => ratio.ratio);
  }, [config]);
  useEffect8(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    if (!subscribingRatioValue) {
      setEnabled(false);
      setSelectedIndex(defaultRatios.length - 1);
      return;
    }
    setEnabled(true);
    const selectedRatioIndex = defaultRatios.findIndex(
      (ratio) => ratio === subscribingRatioValue
    );
    if (selectedRatioIndex !== -1 && customValue === "") {
      setSelectedIndex(selectedRatioIndex);
    }
    if (!defaultRatios.includes(subscribingRatioValue) && customValue === "") {
      setSelectedIndex(3);
      setCustomValue(() => {
        switch (config.numberType) {
          case "percentage":
            return subscribingRatioValue + "%";
          case "price":
            return "$" + subscribingRatioValue;
          default:
            return subscribingRatioValue.toString();
        }
      });
    }
  }, [alertName, alerts, loading, enabled, setEnabled, isNotificationLoading]);
  const subscribeAlert = useCallback7(
    async (alertDetail, ratioNumber) => {
      var _a2, _b2;
      if (isUsingFrontendClient) {
        alertDetail.inputs[`${alertDetail.eventType.name}__healthRatio`] = ratioNumber;
        alertDetail.inputs[`${alertDetail.eventType.name}__healthThresholdDirection`] = (_a2 = config.checkRatios[0].type) != null ? _a2 : thresholdDirection;
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: customThresholdConfiguration({
            sourceType: config.sourceType,
            filterType: config.filterType,
            alertFrequency: config.alertFrequency,
            sourceAddress: resolveStringRef(
              alertName,
              config.sourceAddress,
              inputs
            ),
            thresholdDirection: (_b2 = config.checkRatios[0].type) != null ? _b2 : thresholdDirection,
            threshold: config.numberType === "percentage" ? ratioNumber / 100 : ratioNumber
          }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const unSubscribeAlert = useCallback7(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleCustomRatioButtonNewSubscription = () => {
    if (loading || isNotificationLoading) {
      return;
    }
    let regex = new RegExp(/^[0-9.]+$/);
    switch (config.numberType) {
      case "percentage":
        regex = new RegExp(/^[0-9.%]+$/);
        break;
      case "price":
        regex = new RegExp(/^[0-9.$]+$/);
        break;
    }
    if (!customInputRef.current || !regex.test(customInputRef.current.value)) {
      return setErrorMessage(INVALID_NUMBER2);
    }
    setErrorMessage("");
    setIsNotificationLoading(true);
    customInputRef.current.placeholder = "Custom";
    let ratioNumber = null;
    switch (config.numberType) {
      case "percentage":
        ratioNumber = getParsedPercentage(customInputRef.current.value);
        break;
      case "price":
        ratioNumber = getParsedPrice(customInputRef.current.value);
        break;
      default:
        ratioNumber = parseFloat(customInputRef.current.value);
    }
    if (ratioNumber && customValue) {
      subscribeAlert({ eventType: config, inputs }, ratioNumber).then(() => {
        setSelectedIndex(3);
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_UNSUBSCRIBE)).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setErrorMessage(INVALID_NUMBER2);
      setSelectedIndex(defaultRatios[defaultRatios.length - 1]);
      setIsNotificationLoading(false);
    }
  };
  const handleKeypressUp = (event) => {
    if (event.key === "Enter") {
      if (customInputRef.current) {
        customInputRef.current.blur();
        event.preventDefault();
      }
    }
  };
  const handleRatioButtonNewSubscription = (value, index) => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    setErrorMessage("");
    if (value) {
      subscribeAlert({ eventType: config, inputs }, value).then(() => {
        isUsingFrontendClient && frontendClient.fetchData().then(render);
        setSelectedIndex(index);
        setCustomValue("");
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE2)).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setErrorMessage(INVALID_NUMBER2);
      setIsNotificationLoading(false);
    }
  };
  const handleHealthCheckSubscription = useCallback7(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    setErrorMessage("");
    if (!enabled && !subscribingRatioValue) {
      setEnabled(true);
      subscribeAlert(
        { eventType: config, inputs },
        defaultRatios[defaultRatios.length - 1]
      ).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        setErrorMessage(UNABLE_TO_SUBSCRIBE2);
        setEnabled(false);
        throw e;
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({ eventType: config, inputs }).then((res) => {
        setCustomValue("");
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        setErrorMessage(UNABLE_TO_SUBSCRIBE2);
        setEnabled(true);
        throw e;
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    subscribingRatioValue,
    enabled,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return /* @__PURE__ */ React38.createElement("div", null, /* @__PURE__ */ React38.createElement(
    "div",
    {
      className: clsx10(
        "EventTypeCustomHealthCheckRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React38.createElement(
      "div",
      {
        className: clsx10("EventTypeHealthCheckRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React38.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    /* @__PURE__ */ React38.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleHealthCheckSubscription
      }
    )
  ), enabled && ((_a = config.checkRatios) == null ? void 0 : _a.length) ? /* @__PURE__ */ React38.createElement(React38.Fragment, null, /* @__PURE__ */ React38.createElement(
    "div",
    {
      className: clsx10(
        "EventTypeHealthCheckRow__content",
        classNames == null ? void 0 : classNames.content
      )
    },
    config.healthCheckSubtitle ? config.healthCheckSubtitle : `Alert me when my margin ratio is ${(_b = config.checkRatios[0]) == null ? void 0 : _b.type}`
  ), /* @__PURE__ */ React38.createElement(
    "div",
    {
      className: clsx10(
        "EventTypeHealthCheckRow__buttonContainer",
        classNames == null ? void 0 : classNames.buttonContainer
      )
    },
    config.checkRatios.map((value, index) => {
      const numberType = config.numberType;
      let valueToShow = null;
      switch (numberType) {
        case "percentage":
          valueToShow = value.ratio + "%";
          break;
        case "price":
          valueToShow = "$" + value.ratio;
          break;
        default:
          valueToShow = value.ratio;
      }
      return /* @__PURE__ */ React38.createElement(
        "div",
        {
          key: index,
          className: clsx10(
            "EventTypeHealthCheckRow__button",
            `${index === selectedIndex ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
            isNotificationLoading ? "buttonDisabled" : void 0,
            classNames == null ? void 0 : classNames.button
          ),
          onClick: () => {
            if (isNotificationLoading === true || selectedIndex === index) {
              return;
            }
            handleRatioButtonNewSubscription(value.ratio, index);
          }
        },
        valueToShow
      );
    }),
    /* @__PURE__ */ React38.createElement(
      "input",
      {
        ref: customInputRef,
        onKeyUp: (e) => handleKeypressUp(e),
        onFocus: (e) => e.target.placeholder = config.numberType === "percentage" ? "0.00" : "0",
        onClick: () => {
          setErrorMessage("");
          setSelectedIndex(null);
        },
        disabled: isNotificationLoading,
        onBlur: handleCustomRatioButtonNewSubscription,
        value: customValue,
        placeholder: "Custom",
        className: clsx10(
          "EventTypeHealthCheckRow__button",
          "EventTypeHealthCheckRow__customButton",
          `${selectedIndex === 3 ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
          classNames == null ? void 0 : classNames.button
        ),
        onChange: (e) => {
          var _a2;
          if (config.numberType === "percentage") {
            handleSuffixPercentage(e.target.value);
          } else if (config.numberType === "price") {
            handlePrefixDollar(e.target.value);
          } else {
            setCustomValue((_a2 = e.target.value) != null ? _a2 : "");
          }
        }
      }
    )
  ), /* @__PURE__ */ React38.createElement(
    "label",
    {
      className: clsx10(
        "NotifiEmailInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    errorMessage
  )) : null);
};

// lib/components/subscription/EventTypeCustomToggleRow.tsx
import clsx11 from "clsx";
import React39, {
  useCallback as useCallback8,
  useEffect as useEffect9,
  useMemo as useMemo7,
  useRef as useRef4,
  useState as useState12
} from "react";
var EventTypeCustomToggleRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = useState12(false);
  const [isNotificationLoading, setIsNotificationLoading] = useState12(false);
  const alertName = useMemo7(() => config.name, [config]);
  if (config.selectedUIType !== "TOGGLE") {
    return null;
  }
  const tooltipContent = config.tooltipContent;
  const didFetch = useRef4(false);
  useEffect9(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const subscribeAlert = useCallback8(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: customToggleConfiguration({
            sourceType: config.sourceType,
            filterType: config.filterType,
            filterOptions: config.filterOptions,
            sourceAddress: resolveStringRef(
              alertName,
              config.sourceAddress,
              inputs
            )
          }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient, config]
  );
  const unSubscribeAlert = useCallback8(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleNewSubscription = useCallback8(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(true);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    enabled,
    alerts,
    instantSubscribe,
    alertName,
    isNotificationLoading,
    setEnabled,
    setIsNotificationLoading
  ]);
  return /* @__PURE__ */ React39.createElement(
    "div",
    {
      className: clsx11(
        "EventTypeCustomToggleRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React39.createElement(
      "div",
      {
        className: clsx11("EventTypeCustomToggleRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React39.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    /* @__PURE__ */ React39.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        checked: enabled,
        setChecked: handleNewSubscription
      }
    )
  );
};

// lib/components/subscription/EventTypeDirectPushRow.tsx
import clsx12 from "clsx";
import React40, { useCallback as useCallback9, useEffect as useEffect10, useMemo as useMemo8, useState as useState13 } from "react";
var EventTypeDirectPushRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, setLoading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = useState13(false);
  const pushId = useMemo8(
    () => resolveStringRef(config.name, config.directPushId, inputs),
    [config, inputs]
  );
  const alertName = useMemo8(() => {
    if (config.directPushId.type === "value") {
      return config.name;
    }
    return `${config.name}:${pushId}`;
  }, [config, pushId]);
  const alertConfiguration = useMemo8(() => {
    return directMessageConfiguration({
      type: pushId
    });
  }, [alertName, config, inputs]);
  const tooltipContent = config.tooltipContent;
  const subscribeAlert = useCallback9(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const unSubscribeAlert = useCallback9(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  useEffect10(() => {
    if (loading) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
  }, [alertName, alerts]);
  const handleNewSubscription = useCallback9(() => {
    if (loading) {
      return;
    }
    setLoading(true);
    if (!enabled) {
      subscribeAlert({
        eventType: config,
        inputs
      }).then(() => {
        setEnabled(true);
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setEnabled(false)).finally(() => setLoading(false));
    } else {
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then(() => {
        setEnabled(false);
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setEnabled(true)).finally(() => setLoading(false));
    }
  }, [enabled, instantSubscribe, alertConfiguration, alertName]);
  return /* @__PURE__ */ React40.createElement(
    "div",
    {
      className: clsx12(
        "EventTypeDirectPushRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React40.createElement("div", { className: clsx12("EventTypeDirectPushRow__label", classNames == null ? void 0 : classNames.label) }, config.name, tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React40.createElement(
      NotifiTooltip,
      {
        classNames: classNames == null ? void 0 : classNames.tooltip,
        content: tooltipContent
      }
    ) : null),
    /* @__PURE__ */ React40.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled,
        checked: enabled,
        setChecked: handleNewSubscription
      }
    )
  );
};

// lib/components/subscription/EventTypeHealthCheckRow.tsx
import clsx13 from "clsx";
import React41, {
  useCallback as useCallback10,
  useEffect as useEffect11,
  useMemo as useMemo9,
  useRef as useRef5,
  useState as useState14
} from "react";
var getParsedInputNumber = (input) => {
  var _a;
  if (input.indexOf("%") === input.length - 1) {
    return (_a = parseFloat(input.slice(0, -1))) != null ? _a : null;
  }
  return null;
};
var UNABLE_TO_SUBSCRIBE = "Unable to subscribe, please try again";
var INVALID_NUMBER = "Please enter a valid number";
var inputsValidator = (inputs) => {
  return "index" in inputs;
};
var EventTypeHealthCheckRow = ({ classNames, config, disabled }) => {
  var _a;
  const customInputRef = useRef5(null);
  const { alerts, loading, setLoading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const handleSuffixPercentage = (value) => {
    value = value.replace("%", "");
    setCustomValue(value + "%");
  };
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = useState14(false);
  const [selectedIndex, setSelectedIndex] = useState14(null);
  const [initialRatio, setInitialRatio] = useState14(null);
  const [customValue, setCustomValue] = useState14("");
  const [errorMessage, setErrorMessage] = useState14("");
  const alertName = useMemo9(() => config.name, [config]);
  const tooltipContent = config.tooltipContent;
  const isValueType = config && config.checkRatios.type === "value";
  let ratios = [];
  let thresholdDirection = "below";
  if (isValueType) {
    ratios = config.checkRatios.value;
    thresholdDirection = ratios[0].type;
  }
  useEffect11(() => {
    var _a2;
    if (loading) {
      return;
    }
    const alert = alerts[alertName];
    const checkRatios = ratios.map((ratio) => ratio.ratio);
    if (alert) {
      let alertRatioValue = null;
      if (alert.filterOptions) {
        alertRatioValue = JSON.parse(alert.filterOptions).threshold;
      }
      setEnabled(true);
      if (alertRatioValue) {
        ratios.forEach((ratio, index) => {
          if (ratio.ratio === alertRatioValue && customValue === "") {
            setSelectedIndex(index);
          }
        });
        setInitialRatio(alertRatioValue);
        if (!checkRatios.includes(alertRatioValue) && customValue === "") {
          setSelectedIndex(3);
          setCustomValue(alertRatioValue * 100 + "%");
        }
      }
    } else {
      setEnabled(false);
      setSelectedIndex(ratios.length - 1);
      setInitialRatio((_a2 = ratios[ratios.length - 1]) == null ? void 0 : _a2.ratio);
    }
  }, [
    alertName,
    alerts,
    loading,
    ratios,
    setEnabled,
    setCustomValue,
    setSelectedIndex
  ]);
  const subscribeAlert = useCallback10(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: healthThresholdConfiguration({
            alertFrequency: config.alertFrequency,
            percentage: inputsValidator(alertDetail.inputs) ? ratios[alertDetail.inputs.index].ratio : alertDetail.inputs.customPercentage,
            thresholdDirection: inputsValidator(alertDetail.inputs) ? thresholdDirection : alertDetail.inputs.thresholdDirection
          }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient, config]
  );
  const unSubscribeAlert = useCallback10(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleToggleNewSubscription = useCallback10(() => {
    if (loading) {
      return;
    }
    setLoading(true);
    setErrorMessage("");
    if (!enabled && initialRatio !== null) {
      subscribeAlert({
        eventType: config,
        inputs: {
          index: 0
        }
      }).then(() => {
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE)).finally(() => setLoading(false));
    } else {
      unSubscribeAlert({
        eventType: config,
        inputs: {}
      }).then(() => {
        setCustomValue("");
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE)).finally(() => setLoading(false));
    }
  }, [initialRatio, enabled, isValueType]);
  const handleRatioButtonNewSubscription = (value, index) => {
    if (loading) {
      return;
    }
    setErrorMessage("");
    if (value) {
      subscribeAlert({
        eventType: config,
        inputs: {
          index
        }
      }).then(() => {
        setSelectedIndex(index);
        setCustomValue("");
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE));
    } else {
      setErrorMessage(INVALID_NUMBER);
    }
  };
  const handleCustomRatioButtonNewSubscription = () => {
    if (loading) {
      return;
    }
    setErrorMessage("");
    if (customInputRef.current) {
      customInputRef.current.placeholder = "Custom";
      const ratioNumber = getParsedInputNumber(customInputRef.current.value);
      if (ratioNumber && ratioNumber >= 0 && ratioNumber <= 100 && customValue) {
        subscribeAlert({
          eventType: config,
          inputs: {
            customPercentage: ratioNumber / 100,
            thresholdDirection
          }
        }).then(() => {
          setSelectedIndex(3);
          isUsingFrontendClient && frontendClient.fetchData().then(render);
        }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE));
      } else {
        setErrorMessage(INVALID_NUMBER);
      }
    }
  };
  const handleKeypressUp = (event) => {
    if (event.key === "Enter") {
      if (customInputRef.current) {
        customInputRef.current.blur();
        event.preventDefault();
      }
    }
  };
  return /* @__PURE__ */ React41.createElement("div", null, /* @__PURE__ */ React41.createElement(
    "div",
    {
      className: clsx13(
        "EventTypeHealthCheckRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React41.createElement(
      "div",
      {
        className: clsx13("EventTypeHealthCheckRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React41.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    /* @__PURE__ */ React41.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled,
        setChecked: handleToggleNewSubscription
      }
    )
  ), enabled ? /* @__PURE__ */ React41.createElement(React41.Fragment, null, /* @__PURE__ */ React41.createElement(
    "div",
    {
      className: clsx13(
        "EventTypeHealthCheckRow__content",
        classNames == null ? void 0 : classNames.content
      )
    },
    "Alert me when my margin ratio is ",
    (_a = ratios[0]) == null ? void 0 : _a.type
  ), /* @__PURE__ */ React41.createElement(
    "div",
    {
      className: clsx13(
        "EventTypeHealthCheckRow__buttonContainer",
        classNames == null ? void 0 : classNames.buttonContainer
      )
    },
    ratios.map((value, index) => {
      const percentage = value.ratio * 100 + "%";
      return /* @__PURE__ */ React41.createElement(
        "div",
        {
          key: index,
          className: clsx13(
            "EventTypeHealthCheckRow__button",
            `${index === selectedIndex ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
            classNames == null ? void 0 : classNames.button
          ),
          onClick: () => {
            handleRatioButtonNewSubscription(value.ratio, index);
          }
        },
        percentage
      );
    }),
    /* @__PURE__ */ React41.createElement(
      "input",
      {
        ref: customInputRef,
        onKeyUp: (e) => handleKeypressUp(e),
        onFocus: (e) => e.target.placeholder = "0.00%",
        onClick: () => {
          setErrorMessage("");
          setSelectedIndex(null);
        },
        onBlur: handleCustomRatioButtonNewSubscription,
        value: customValue,
        placeholder: "Custom",
        className: clsx13(
          "EventTypeHealthCheckRow__button",
          "EventTypeHealthCheckRow__customButton",
          `${selectedIndex === 3 ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
          classNames == null ? void 0 : classNames.button
        ),
        onChange: (e) => {
          var _a2;
          handleSuffixPercentage((_a2 = e.target.value) != null ? _a2 : "");
        }
      }
    )
  ), /* @__PURE__ */ React41.createElement(
    "label",
    {
      className: clsx13(
        "NotifiEmailInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    errorMessage
  )) : null);
};

// lib/components/subscription/EventTypeLabelRow.tsx
import clsx14 from "clsx";
import React42 from "react";
var EventTypeLabelRow = ({
  classNames,
  config
}) => {
  const { name, tooltipContent } = config;
  return /* @__PURE__ */ React42.createElement(
    "div",
    {
      className: clsx14("EventTypeLabelRow__container", classNames == null ? void 0 : classNames.container)
    },
    /* @__PURE__ */ React42.createElement("div", { className: clsx14("EventTypeLabelRow__label", classNames == null ? void 0 : classNames.label) }, name, tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React42.createElement(
      NotifiTooltip,
      {
        classNames: classNames == null ? void 0 : classNames.tooltip,
        content: tooltipContent
      }
    ) : null)
  );
};

// lib/components/subscription/EventTypePriceChangeRow.tsx
import clsx15 from "clsx";
import React43, {
  useCallback as useCallback11,
  useEffect as useEffect12,
  useMemo as useMemo10,
  useRef as useRef6,
  useState as useState15
} from "react";
var EventTypePriceChangeRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = useState15(false);
  const [isNotificationLoading, setIsNotificationLoading] = useState15(false);
  const alertName = useMemo10(() => config.name, [config]);
  const alertConfiguration = useMemo10(() => {
    return priceChangeConfiguration({
      tokenIds: config.tokenIds
    });
  }, [alertName, config]);
  const tooltipContent = config.tooltipContent;
  const didFetch = useRef6(false);
  useEffect12(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const subscribeAlert = useCallback11(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration,
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient, config]
  );
  const unSubscribeAlert = useCallback11(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleNewSubscription = useCallback11(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    loading,
    enabled,
    instantSubscribe,
    alertConfiguration,
    alertName,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return /* @__PURE__ */ React43.createElement(
    "div",
    {
      className: clsx15(
        "EventTypePriceChangeRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React43.createElement(
      "div",
      {
        className: clsx15("EventTypePriceChangeRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React43.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    /* @__PURE__ */ React43.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleNewSubscription
      }
    )
  );
};

// lib/components/subscription/EventTypeTradingPairsRow.tsx
import clsx16 from "clsx";
import React45, {
  useCallback as useCallback12,
  useEffect as useEffect13,
  useMemo as useMemo11,
  useRef as useRef7,
  useState as useState16
} from "react";

// lib/assets/DeleteIcon.tsx
import React44 from "react";
var DeleteIcon = (props) => {
  return /* @__PURE__ */ React44.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    /* @__PURE__ */ React44.createElement(
      "path",
      {
        d: "M7.5 17.4444C7.5 18.3 8.175 19 9 19H15C15.825 19 16.5 18.3 16.5 17.4444V8.11111H7.5V17.4444ZM17.25 5.77778H14.625L13.875 5H10.125L9.375 5.77778H6.75V7.33333H17.25V5.77778Z",
        fill: "#inherit"
      }
    )
  );
};

// lib/components/subscription/EventTypeTradingPairsRow.tsx
var EventTypeTradingPairsRow = ({ classNames, config, inputs }) => {
  const { name, tooltipContent } = config;
  const { alerts } = useNotifiSubscriptionContext();
  const tradingPairAlertNames = useMemo11(() => {
    if (alerts === void 0) {
      return [];
    }
    return Object.keys(alerts).filter((alertName) => alertName.indexOf(config.name) >= 0).sort((a, b) => {
      const getTime = (alertName) => {
        const [, time] = alertName.split(":;:");
        const date = new Date(time);
        return date.getTime();
      };
      return getTime(a) - getTime(b);
    });
  }, [alerts, config.name]);
  const [showInput, setShowInput] = useState16(false);
  const hasSetInput = useRef7(false);
  useEffect13(() => {
    if (!hasSetInput.current && alerts !== void 0) {
      hasSetInput.current = true;
      setShowInput(tradingPairAlertNames.length === 0);
    }
  }, [alerts, tradingPairAlertNames]);
  return /* @__PURE__ */ React45.createElement(
    "div",
    {
      className: clsx16(
        "EventTypeTradingPairsRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React45.createElement(
      "div",
      {
        className: clsx16("EventTypeTradingPairsRow__label", classNames == null ? void 0 : classNames.label)
      },
      name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React45.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    tradingPairAlertNames.map((alertName) => {
      return /* @__PURE__ */ React45.createElement(
        TradingPairAlertRow,
        {
          key: alertName,
          classNames: classNames == null ? void 0 : classNames.tradingPairAlertRow,
          alertName,
          inputs
        }
      );
    }),
    showInput ? /* @__PURE__ */ React45.createElement(
      TradingPairSettingsRow,
      {
        classNames: classNames == null ? void 0 : classNames.tradingPairSettingsRow,
        config,
        inputs,
        onSave: () => {
          setShowInput(false);
        }
      }
    ) : null,
    /* @__PURE__ */ React45.createElement(
      "button",
      {
        className: clsx16(
          "EventTypeTradingPairsRow__addPair",
          classNames == null ? void 0 : classNames.addPair
        ),
        disabled: showInput,
        onClick: () => {
          setShowInput(true);
        }
      },
      "Add pair"
    )
  );
};
var TradingPairAlertRow = ({
  classNames,
  alertName,
  inputs
}) => {
  const { render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const { name, description } = useMemo11(() => {
    const [, , name2, above, price] = alertName.split(":;:");
    const description2 = `Alert me when trade price is ${above}: ${price}`;
    return {
      name: name2,
      description: description2
    };
  }, [alertName]);
  const unSubscribeAlert = useCallback12(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  return /* @__PURE__ */ React45.createElement(
    "div",
    {
      className: clsx16("TradingPairAlertRow__container", classNames == null ? void 0 : classNames.container)
    },
    /* @__PURE__ */ React45.createElement(
      "div",
      {
        className: clsx16(
          "TradingPairAlertRow__textContainer",
          classNames == null ? void 0 : classNames.textContainer
        )
      },
      /* @__PURE__ */ React45.createElement("span", { className: clsx16("TradingPairAlertRow__name", classNames == null ? void 0 : classNames.name) }, name),
      /* @__PURE__ */ React45.createElement(
        "span",
        {
          className: clsx16(
            "TradingPairAlertRow__description",
            classNames == null ? void 0 : classNames.description
          )
        },
        description
      )
    ),
    /* @__PURE__ */ React45.createElement(
      "div",
      {
        className: clsx16(
          "TradingPairAlertRow__deleteIcon",
          classNames == null ? void 0 : classNames.deleteIcon
        ),
        onClick: () => {
          unSubscribeAlert({
            eventType: {
              name: alertName
            },
            // We only need alertName to unsubscribe
            inputs
          }).then(() => {
            isUsingFrontendClient && frontendClient.fetchData().then(render);
          });
        }
      },
      /* @__PURE__ */ React45.createElement(DeleteIcon, null)
    )
  );
};
var TradingPairSettingsRow = ({
  classNames,
  config,
  inputs,
  onSave
}) => {
  const tradingPairs = resolveStringArrayRef(
    config.name,
    config.tradingPairs,
    inputs
  );
  const [selectedPair, setSelectedPair] = useState16(
    void 0
  );
  const [above, setAbove] = useState16(true);
  const [price, setPrice] = useState16(0);
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { render } = useNotifiSubscriptionContext();
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const alertConfiguration = useMemo11(() => {
    return selectedPair ? tradingPairConfiguration({
      tradingPair: selectedPair,
      above,
      price
    }) : void 0;
  }, [selectedPair, above, price]);
  const alertName = useMemo11(() => {
    const now = (/* @__PURE__ */ new Date()).toISOString();
    return `${config.name}:;:${now}:;:${selectedPair}:;:${above ? "above" : "below"}:;:${price}`;
  }, [config, selectedPair, above, price]);
  const subscribeAlert = async (alertDetail) => {
    if (isUsingFrontendClient) {
      return subscribeAlertByFrontendClient(frontendClient, alertDetail);
    }
    if (!alertConfiguration)
      throw new Error("alertConfiguration is undefinded");
    return instantSubscribe({
      alertName,
      alertConfiguration
    });
  };
  return /* @__PURE__ */ React45.createElement(
    "div",
    {
      className: clsx16(
        "TradingPairSettingsRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React45.createElement(
      "div",
      {
        className: clsx16(
          "TradingPairSettingsRow__dropdownContainer",
          classNames == null ? void 0 : classNames.dropdownContainer
        )
      },
      /* @__PURE__ */ React45.createElement(
        "select",
        {
          className: clsx16(
            "TradingPairSettingsRow__dropdown",
            classNames == null ? void 0 : classNames.dropdown
          ),
          onChange: (e) => setSelectedPair(e.target.value),
          value: selectedPair
        },
        /* @__PURE__ */ React45.createElement(
          "option",
          {
            className: clsx16(
              "TradingPairSettingsRow__option",
              classNames == null ? void 0 : classNames.option
            ),
            key: "unselected",
            value: void 0
          },
          "Select a trading pair"
        ),
        tradingPairs.map((pair) => /* @__PURE__ */ React45.createElement(
          "option",
          {
            className: clsx16(
              "TradingPairSettingsRow__option",
              classNames == null ? void 0 : classNames.option
            ),
            key: pair,
            value: pair
          },
          pair
        ))
      )
    ),
    /* @__PURE__ */ React45.createElement(
      "div",
      {
        className: clsx16(
          "TradingPairSettingsRow__buttonContainer",
          classNames == null ? void 0 : classNames.buttonContainer
        )
      },
      /* @__PURE__ */ React45.createElement(
        "button",
        {
          className: clsx16(
            "TradingPairSettingsRow__radioButton",
            classNames == null ? void 0 : classNames.radioButton,
            { TradingPairSettingsRow__radioSelected: above }
          ),
          onClick: () => setAbove(true)
        },
        "Above"
      ),
      /* @__PURE__ */ React45.createElement(
        "button",
        {
          className: clsx16(
            "TradingPairSettingsRow__radioButton",
            classNames == null ? void 0 : classNames.radioButton,
            { TradingPairSettingsRow__radioSelected: !above }
          ),
          onClick: () => setAbove(false)
        },
        "Below"
      )
    ),
    /* @__PURE__ */ React45.createElement(
      "div",
      {
        className: clsx16(
          "TradingPairSettingsRow__priceInputContainer",
          classNames == null ? void 0 : classNames.priceInputContainer
        )
      },
      /* @__PURE__ */ React45.createElement(
        "input",
        {
          className: clsx16(
            "TradingPairSettingsRow__priceInput",
            classNames == null ? void 0 : classNames.priceInput
          ),
          name: "notifi-tradingpair-price",
          type: "number",
          inputMode: "decimal",
          value: price,
          onChange: (e) => {
            setPrice(e.target.valueAsNumber);
          }
        }
      )
    ),
    /* @__PURE__ */ React45.createElement(
      "button",
      {
        className: clsx16(
          "TradingPairSettingsRow__saveButton",
          classNames == null ? void 0 : classNames.saveButton
        ),
        disabled: selectedPair === void 0,
        onClick: async () => {
          if (selectedPair !== void 0) {
            await subscribeAlert({
              eventType: __spreadProps(__spreadValues({}, config), { name: alertName }),
              inputs: __spreadValues({
                price,
                direction: above ? "above" : "below",
                pair: selectedPair
              }, inputs)
            });
            frontendClient.fetchData().then(render);
            setSelectedPair(void 0);
            setAbove(true);
            setPrice(0);
            onSave();
          }
        }
      },
      "Save"
    )
  );
};

// lib/components/subscription/EventTypeFusionMultiThresholdRow.tsx
import clsx17 from "clsx";
import React46, {
  useCallback as useCallback13,
  useEffect as useEffect14,
  useMemo as useMemo12,
  useRef as useRef8,
  useState as useState17
} from "react";
var EventTypeFusionMultiThresholdRow = ({ classNames, config, inputs }) => {
  const { displayNameOverride, name, tooltipContent } = config;
  const { alerts } = useNotifiSubscriptionContext();
  const fusionMultiThresholdAlertNames = useMemo12(() => {
    if (alerts === void 0) {
      return [];
    }
    return Object.keys(alerts).filter((alertName) => alertName.indexOf(config.name) >= 0).sort((a, b) => {
      const getTime = (alertName) => {
        const [, time] = alertName.split(":;:");
        const date = new Date(time);
        return date.getTime();
      };
      return getTime(a) - getTime(b);
    });
  }, [alerts, config.name]);
  const [showInput, setShowInput] = useState17(false);
  const hasSetInput = useRef8(false);
  useEffect14(() => {
    if (!hasSetInput.current && alerts !== void 0) {
      hasSetInput.current = true;
      setShowInput(fusionMultiThresholdAlertNames.length === 0);
    }
  }, [alerts, fusionMultiThresholdAlertNames]);
  return /* @__PURE__ */ React46.createElement(
    "div",
    {
      className: clsx17(
        "EventTypeFusionMultiThresholdRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React46.createElement(
      "div",
      {
        className: clsx17(
          "EventTypeFusionMultiThresholdRow__label",
          classNames == null ? void 0 : classNames.label
        )
      },
      displayNameOverride != null ? displayNameOverride : name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React46.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    /* @__PURE__ */ React46.createElement(
      "div",
      {
        className: clsx17(
          "EventTypeFusionMultiThresholdRow__content",
          classNames == null ? void 0 : classNames.content
        )
      },
      config.subtitle ? config.subtitle : `Alert me when my margin ratio is:`
    ),
    fusionMultiThresholdAlertNames.map((alertName) => {
      return /* @__PURE__ */ React46.createElement(
        FusionMultiThresholdAlertRow,
        {
          key: alertName,
          classNames: classNames == null ? void 0 : classNames.fusionMultiThresholdAlertRow,
          alertName,
          inputs
        }
      );
    }),
    showInput ? /* @__PURE__ */ React46.createElement(
      FusionMultiThresholdSettingsRow,
      {
        classNames: classNames == null ? void 0 : classNames.fusionMultiThresholdSettingsRow,
        config,
        inputs,
        onSave: () => {
          setShowInput(false);
        }
      }
    ) : null,
    /* @__PURE__ */ React46.createElement(
      "button",
      {
        className: clsx17(
          "EventTypeFusionMultiThresholdRow__addThreshold",
          classNames == null ? void 0 : classNames.addThreshold
        ),
        disabled: showInput,
        onClick: () => {
          setShowInput(true);
        }
      },
      config.addThresholdTitle ? config.addThresholdTitle : "Add alert"
    )
  );
};
var FusionMultiThresholdAlertRow = ({ classNames, alertName, inputs }) => {
  const { render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const name = useMemo12(() => {
    const [, , above, threshold] = alertName.split(":;:");
    return above + " " + threshold;
  }, [alertName]);
  const unSubscribeAlert = useCallback13(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  return /* @__PURE__ */ React46.createElement(
    "div",
    {
      className: clsx17(
        "FusionMultiThresholdAlertRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React46.createElement(
      "div",
      {
        className: clsx17(
          "FusionMultiThresholdAlertRow__textContainer",
          classNames == null ? void 0 : classNames.textContainer
        )
      },
      /* @__PURE__ */ React46.createElement(
        "span",
        {
          className: clsx17(
            "FusionMultiThresholdAlertRow__name",
            classNames == null ? void 0 : classNames.name
          )
        },
        name
      )
    ),
    /* @__PURE__ */ React46.createElement(
      "div",
      {
        className: clsx17(
          "FusionMultiThresholdAlertRow__deleteIcon",
          classNames == null ? void 0 : classNames.deleteIcon
        ),
        onClick: () => {
          unSubscribeAlert({
            eventType: {
              name: alertName
            },
            // We only need alertName to unsubscribe
            inputs
          }).then(() => {
            isUsingFrontendClient && frontendClient.fetchData().then(render);
          });
        }
      },
      /* @__PURE__ */ React46.createElement(DeleteIcon, null)
    )
  );
};
var FusionMultiThresholdSettingsRow = ({
  classNames,
  config,
  inputs,
  onSave
}) => {
  const [above, setAbove] = useState17(true);
  const [threshold, setThreshold] = useState17(0);
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { render } = useNotifiSubscriptionContext();
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const fusionEventId = useMemo12(
    () => resolveStringRef(config.name, config.fusionEventId, inputs),
    [config, inputs]
  );
  const fusionSourceAddress = useMemo12(
    () => resolveStringRef(config.name, config.sourceAddress, inputs),
    [config, inputs]
  );
  const alertConfiguration = useMemo12(() => {
    return fusionHealthCheckConfiguration({
      maintainSourceGroup: config == null ? void 0 : config.maintainSourceGroup,
      fusionId: fusionEventId,
      fusionSourceAddress,
      alertFrequency: config.alertFrequency,
      thresholdDirection: above ? "above" : "below",
      threshold: config.numberType === "percentage" ? threshold / 100 : threshold
    });
  }, [above, threshold]);
  const alertName = useMemo12(() => {
    const now = (/* @__PURE__ */ new Date()).toISOString();
    return `${config.name}:;:${now}:;:${above ? "Above" : "Below"}:;:${threshold.toFixed(2)}${config.numberType === "percentage" ? "%" : ""}`;
  }, [config, above, threshold]);
  const subscribeAlert = useCallback13(
    async (alertDetail, threshold2) => {
      if (isUsingFrontendClient) {
        const fusionEventType = {
          name: alertDetail.eventType.name,
          type: "fusion",
          fusionEventId: alertDetail.eventType.fusionEventId,
          sourceAddress: alertDetail.eventType.sourceAddress,
          maintainSourceGroup: alertDetail.eventType.maintainSourceGroup,
          alertFrequency: alertDetail.eventType.alertFrequency,
          selectedUIType: "HEALTH_CHECK",
          numberType: alertDetail.eventType.numberType,
          healthCheckSubtitle: "",
          checkRatios: [{ type: above ? "above" : "below", ratio: threshold2 }]
        };
        alertDetail.inputs[`${alertDetail.eventType.name}__healthRatio`] = threshold2;
        alertDetail.inputs[`${alertDetail.eventType.name}__healthThresholdDirection`] = above ? "above" : "below";
        return subscribeAlertByFrontendClient(frontendClient, {
          eventType: fusionEventType,
          inputs: alertDetail.inputs
        });
      }
      if (!alertConfiguration)
        throw new Error("alertConfiguration is undefinded");
      return instantSubscribe({
        alertName,
        alertConfiguration
      });
    },
    [isUsingFrontendClient, frontendClient, above, alertConfiguration]
  );
  return /* @__PURE__ */ React46.createElement(
    "div",
    {
      className: clsx17(
        "FusionMultiThresholdSettingsRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React46.createElement(
      "div",
      {
        className: clsx17(
          "FusionMultiThresholdSettingsRow__buttonContainer",
          classNames == null ? void 0 : classNames.buttonContainer
        )
      },
      /* @__PURE__ */ React46.createElement(
        "button",
        {
          className: clsx17(
            "FusionMultiThresholdSettingsRow__radioButton",
            classNames == null ? void 0 : classNames.radioButton,
            { FusionMultiThresholdSettingsRow__radioSelected: above }
          ),
          onClick: () => setAbove(true)
        },
        "Above"
      ),
      /* @__PURE__ */ React46.createElement(
        "button",
        {
          className: clsx17(
            "FusionMultiThresholdSettingsRow__radioButton",
            classNames == null ? void 0 : classNames.radioButton,
            { FusionMultiThresholdSettingsRow__radioSelected: !above }
          ),
          onClick: () => setAbove(false)
        },
        "Below"
      )
    ),
    /* @__PURE__ */ React46.createElement(
      "div",
      {
        className: clsx17(
          "FusionMultiThresholdSettingsRow__thresholdInputContainer",
          classNames == null ? void 0 : classNames.thresholdInputContainer
        )
      },
      /* @__PURE__ */ React46.createElement(
        "input",
        {
          className: clsx17(
            "FusionMultiThresholdSettingsRow__thresholdInput",
            classNames == null ? void 0 : classNames.thresholdInput
          ),
          name: "notifi-fusionmultithreshold-threshold",
          type: "number",
          inputMode: "decimal",
          value: threshold,
          onChange: (e) => {
            setThreshold(e.target.valueAsNumber);
          }
        }
      )
    ),
    /* @__PURE__ */ React46.createElement(
      "button",
      {
        className: clsx17(
          "FusionMultiThresholdSettingsRow__saveButton",
          classNames == null ? void 0 : classNames.saveButton
        ),
        disabled: threshold === void 0,
        onClick: async () => {
          await subscribeAlert(
            {
              eventType: __spreadProps(__spreadValues({}, config), { name: alertName }),
              inputs
            },
            threshold
          );
          frontendClient.fetchData().then(render);
          setAbove(true);
          setThreshold(0);
          onSave();
        }
      },
      "Save"
    )
  );
};

// lib/components/subscription/EventTypeUnsupportedRow.tsx
import clsx18 from "clsx";
import React47 from "react";
var EventTypeUnsupportedRow = ({ classNames }) => {
  return /* @__PURE__ */ React47.createElement(
    "div",
    {
      className: clsx18(
        "EventTypeUnsupportedRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React47.createElement(
      "div",
      {
        className: clsx18("EventTypeUnsupportedRow__label", classNames == null ? void 0 : classNames.label)
      },
      "Unsupported Event Type"
    )
  );
};

// lib/components/subscription/EventTypeWalletBalanceRow.tsx
import clsx19 from "clsx";
import React48, {
  useCallback as useCallback14,
  useEffect as useEffect15,
  useMemo as useMemo13,
  useRef as useRef9,
  useState as useState18
} from "react";
var EventTypeWalletBalanceRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, connectedWallets, render, setLoading } = useNotifiSubscriptionContext();
  const [isNotificationLoading, setIsNotificationLoading] = useState18(false);
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = useState18(false);
  const alertName = useMemo13(() => config.name, [config]);
  const tooltipContent = config.tooltipContent;
  const didFetch = useRef9(false);
  useEffect15(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const subscribeAlert = useCallback14(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: walletBalanceConfiguration({ connectedWallets }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient, config]
  );
  const unSubscribeAlert = useCallback14(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleNewSubscription = useCallback14(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setLoading(true);
    if (!enabled) {
      subscribeAlert({
        eventType: config,
        inputs
      }).then(() => {
        isUsingFrontendClient && frontendClient.fetchData().then(render);
        setEnabled(true);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => setLoading(false));
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== true) {
            setEnabled(false);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(true);
      }).finally(() => {
        setIsNotificationLoading(false);
        setLoading(false);
      });
    }
  }, [
    enabled,
    instantSubscribe,
    alertName,
    setIsNotificationLoading,
    isNotificationLoading,
    setEnabled
  ]);
  return /* @__PURE__ */ React48.createElement(
    "div",
    {
      className: clsx19(
        "EventTypeWalletBalanceRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React48.createElement(
      "div",
      {
        className: clsx19("EventTypeWalletBalanceRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React48.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    /* @__PURE__ */ React48.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        checked: enabled,
        setChecked: handleNewSubscription
      }
    )
  );
};

// lib/components/subscription/FetchedStateCard.tsx
import React88 from "react";

// lib/components/subscription/SubscriptionCardUnsupported.tsx
import React49 from "react";
var SubscriptionCardUnsupported = () => {
  return /* @__PURE__ */ React49.createElement(React49.Fragment, null, /* @__PURE__ */ React49.createElement("div", null, "Unsupported configuration"));
};

// lib/components/subscription/SubscriptionCardV1.tsx
import clsx46 from "clsx";

// lib/hooks/useDestinationState.ts
import { useMemo as useMemo14 } from "react";
var useDestinationState = () => {
  const {
    useDiscord,
    email,
    phoneNumber,
    telegramId,
    discordTargetData,
    destinationErrorMessages
  } = useNotifiSubscriptionContext();
  const isTargetsExist = useMemo14(() => {
    return !!email || !!phoneNumber || !!telegramId || useDiscord && !!(discordTargetData == null ? void 0 : discordTargetData.id);
  }, [email, phoneNumber, telegramId, discordTargetData, useDiscord]);
  const unverifiedDestinations = useMemo14(() => {
    const {
      email: emailError,
      phoneNumber: phoneNumberError,
      telegram: telegramError,
      discord: discordError
    } = destinationErrorMessages;
    const unConfirmedTargets = {
      email: (emailError == null ? void 0 : emailError.type) === "recoverableError",
      phoneNumber: (phoneNumberError == null ? void 0 : phoneNumberError.type) == "recoverableError",
      telegram: (telegramError == null ? void 0 : telegramError.type) === "recoverableError",
      discord: useDiscord && (discordError == null ? void 0 : discordError.type) === "recoverableError" && /**
       * @TODO Improve type safety
       * discordError.message === 'Join Server' also counted as verified (discordError.message now either 'Join Server' or 'Enable Bot' as values).
       */
      discordError.message === "Enable Bot"
    };
    return objectKeys(unConfirmedTargets).map((key) => {
      if (unConfirmedTargets[key]) {
        return key;
      }
    }).filter((item) => !!item);
  }, [destinationErrorMessages]);
  return { isTargetsExist, unverifiedDestinations };
};

// lib/components/subscription/SubscriptionCardV1.tsx
import React87, { useCallback as useCallback24, useEffect as useEffect20, useMemo as useMemo26, useState as useState26 } from "react";

// lib/components/AlertHistory/AlertDetailsCard.tsx
import clsx20 from "clsx";
import DOMPurify from "dompurify";
import React50, { useMemo as useMemo15 } from "react";
var AlertDetailsCard = ({
  notificationEntry,
  classNames
}) => {
  const { bottomContent, otherContent, topContent, bottomContentHtml } = useMemo15(
    () => getAlertDetailsContents(notificationEntry),
    [notificationEntry]
  );
  const sanitizedBottomContentHtml = useMemo15(() => {
    const sanitizedBottomContentHtml2 = bottomContentHtml && DOMPurify.sanitize(bottomContentHtml);
    return sanitizedBottomContentHtml2;
  }, [bottomContentHtml]);
  return /* @__PURE__ */ React50.createElement(
    "div",
    {
      className: clsx20(
        "NotifiAlertDetails__container",
        classNames == null ? void 0 : classNames.detailsContainer
      )
    },
    /* @__PURE__ */ React50.createElement("div", { className: clsx20("NotifiAlertDetails__topContentContainer") }, /* @__PURE__ */ React50.createElement("div", { className: clsx20("NotifiAlertDetails__topContent") }, topContent), /* @__PURE__ */ React50.createElement("div", { className: clsx20("NotifiAlertDetails__timestamp") }, formatAlertDetailsTimestamp(notificationEntry.createdDate))),
    /* @__PURE__ */ React50.createElement("div", { className: clsx20("NotifiAlertDetails__bottomContent") }, sanitizedBottomContentHtml ? (
      // If `messageHtml` exists just use it, otherwise use `message` (which is plain text)
      /* @__PURE__ */ React50.createElement(
        "div",
        {
          dangerouslySetInnerHTML: { __html: sanitizedBottomContentHtml }
        }
      )
    ) : /* @__PURE__ */ React50.createElement("div", null, bottomContent), /* @__PURE__ */ React50.createElement("div", null, otherContent))
  );
};

// lib/components/ConfigAlertModal.tsx
import clsx21 from "clsx";
import React55 from "react";

// lib/components/AlertBox/AlertActionIcon.tsx
import React54 from "react";

// lib/assets/BackArrowIcon.tsx
import React51 from "react";
var BackArrowIcon = (props) => {
  return /* @__PURE__ */ React51.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    /* @__PURE__ */ React51.createElement(
      "path",
      {
        d: "M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/CloseIcon.tsx
import React52 from "react";
var CloseIcon = (props) => {
  return /* @__PURE__ */ React52.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    /* @__PURE__ */ React52.createElement(
      "path",
      {
        fillRule: "evenodd",
        d: "M6.71751 5.28249L5.3033 6.6967L10.6066 12L5.3033 17.3033L6.71751 18.7175L12.0208 13.4142L17.3241 18.7175L18.7383 17.3033L13.435 12L18.7383 6.6967L17.3241 5.28249L12.0208 10.5858L6.71751 5.28249Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/assets/SettingIcon.tsx
import React53 from "react";
var SettingIcon = (props) => {
  return /* @__PURE__ */ React53.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React53.createElement(
      "path",
      {
        d: "M3 17V19H9V17H3ZM3 5V7H13V5H3ZM13 21V19H21V17H13V15H11V21H13ZM7 9V11H3V13H7V15H9V9H7ZM21 13V11H11V13H21ZM15 9H17V7H21V5H17V3H15V9Z",
        fill: "currentColor"
      }
    )
  );
};

// lib/components/AlertBox/AlertActionIcon.tsx
var icons2 = {
  back: BackArrowIcon,
  close: CloseIcon,
  settings: SettingIcon
};
var AlertActionIcon = ({
  name,
  className
}) => {
  const View = icons2[name];
  return /* @__PURE__ */ React54.createElement(View, { className });
};
var AlertActionIcon_default = AlertActionIcon;

// lib/components/ConfigAlertModal.tsx
var ConfigAlertModal = ({
  classNames,
  updateFtuStage,
  data,
  inputDisabled,
  inputs
}) => {
  var _a;
  return /* @__PURE__ */ React55.createElement(React55.Fragment, null, /* @__PURE__ */ React55.createElement(
    "div",
    {
      className: clsx21("configAlertModal__overlay", classNames == null ? void 0 : classNames.overlay)
    }
  ), /* @__PURE__ */ React55.createElement(
    "div",
    {
      "data-cy": "configAlertModal",
      className: clsx21("configAlertModal__container", classNames == null ? void 0 : classNames.container)
    },
    /* @__PURE__ */ React55.createElement(
      "div",
      {
        className: clsx21(
          "configAlertModal__headerContainer",
          classNames == null ? void 0 : classNames.headerContainer
        )
      },
      data.isContactInfoRequired ? /* @__PURE__ */ React55.createElement(
        "div",
        {
          className: clsx21(
            "configAlertModal__backIcon",
            classNames == null ? void 0 : classNames.backIcon
          ),
          onClick: () => {
            updateFtuStage(3 /* Destination */);
          }
        },
        /* @__PURE__ */ React55.createElement(
          AlertActionIcon_default,
          {
            name: "back",
            className: clsx21(
              "configAlertModal__ctaIcon",
              classNames == null ? void 0 : classNames.ctaIcon
            )
          }
        )
      ) : null,
      /* @__PURE__ */ React55.createElement(
        "div",
        {
          className: clsx21(
            "configAlertModal__headerTitle",
            classNames == null ? void 0 : classNames.headerTitle
          )
        },
        /* @__PURE__ */ React55.createElement("div", null, "Select alerts")
      )
    ),
    /* @__PURE__ */ React55.createElement(
      AlertsPanel,
      {
        classNames: (_a = classNames == null ? void 0 : classNames.alertsPanel) != null ? _a : {
          EventTypeContainer: "configAlertModal__EventTypeContainer",
          EventTypeBroadcastRow: {
            container: "configAlertModal__EventTypeBroadcastRow"
          },
          EventTypeCustomHealthCheckRow: {
            container: "configAlertModal__EventTypeCustomHealthCheckRow",
            content: "configAlertModal__EventTypeCustomHealthCheckRow__Subtitle",
            buttonContainer: "configAlertModal__EventTypeCustomHealthCheckRow__ButtonContainer"
          },
          EventTypeDirectPushRow: {
            container: "configAlertModal__EventTypeDirectPushRow"
          },
          EventTypeHealthCheckRow: {
            container: "configAlertModal__EventTypeHealthCheckRow",
            content: "configAlertModal__EventTypeHealthCheckRow__Subtitle",
            buttonContainer: "configAlertModal__EventTypeHealthCheckRow__ButtonContainer"
          },
          EventTypePriceChangeRow: {
            container: "configAlertModal__EventTypePriceChangeRow"
          },
          EventTypeTradingPairsRow: {
            container: "configAlertModal__EventTypeTradingPairsRow"
          },
          EventTypeFusionMultiThresholdRow: {
            container: "configAlertModal__EventTypeFusionMultiThresholdRow"
          },
          EventTypeWalletBalanceRow: {
            container: "configAlertModal__EventTypeWalletBalanceRow"
          },
          EventTypeXMTPRow: {
            container: "configAlertModal__EventTypeXMTPRow"
          },
          EventTypeFusionToggleRow: {
            container: "configAlertModal__EventTypeFusionToggleRow"
          },
          EventTypeFusionHealthCheckRow: {
            container: "configAlertModal__EventTypeFusionHealthCheckRow",
            content: "configAlertModal__EventTypeFusionHealthCheckRow__Subtitle",
            buttonContainer: "configAlertModal__EventTypeFusionHealthCheckRow__ButtonContainer"
          }
        },
        data,
        inputDisabled,
        inputs
      }
    ),
    /* @__PURE__ */ React55.createElement(
      "div",
      {
        className: clsx21(
          "configAlertModal__footerContainer",
          classNames == null ? void 0 : classNames.footerContainer
        )
      },
      /* @__PURE__ */ React55.createElement(
        "button",
        {
          "data-cy": "configAlertModalDoneButton",
          onClick: () => {
            updateFtuStage(1 /* Done */);
          }
        },
        "Done"
      )
    )
  ));
};

// lib/components/ConfigDestinationModal.tsx
import clsx23 from "clsx";
import React58, { useCallback as useCallback15, useState as useState19 } from "react";

// lib/assets/DiscordIcon.tsx
import React56 from "react";
var DiscordIcon = ({ className }) => {
  return /* @__PURE__ */ React56.createElement(
    "svg",
    {
      width: "17",
      height: "13",
      viewBox: "0 0 17 13",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className
    },
    /* @__PURE__ */ React56.createElement(
      "path",
      {
        d: "M14.0728 1.05036C13.0133 0.564196 11.8771 0.206009 10.6891 0.000860571C10.6675 -0.00309873 10.6459 0.00679578 10.6347 0.0265853C10.4886 0.286483 10.3267 0.62554 10.2134 0.892038C8.93563 0.700746 7.66444 0.700746 6.4129 0.892038C6.29953 0.619617 6.13179 0.286483 5.98501 0.0265853C5.97386 0.00745605 5.95225 -0.00243846 5.93062 0.000860571C4.74329 0.205353 3.60709 0.56354 2.54688 1.05036C2.5377 1.05432 2.52983 1.06092 2.52461 1.06949C0.369461 4.28924 -0.220925 7.42985 0.0686984 10.5315C0.0700089 10.5467 0.0785271 10.5612 0.0903219 10.5704C1.51223 11.6146 2.88959 12.2486 4.24137 12.6688C4.263 12.6754 4.28593 12.6675 4.29969 12.6496C4.61946 12.213 4.9045 11.7525 5.14889 11.2683C5.16332 11.24 5.14955 11.2063 5.12007 11.1951C4.66795 11.0236 4.23744 10.8145 3.82331 10.577C3.79056 10.5579 3.78793 10.5111 3.81807 10.4886C3.90522 10.4233 3.99239 10.3554 4.0756 10.2868C4.09065 10.2742 4.11163 10.2716 4.12933 10.2795C6.84994 11.5217 9.79533 11.5217 12.4838 10.2795C12.5015 10.2709 12.5225 10.2736 12.5382 10.2861C12.6215 10.3547 12.7086 10.4233 12.7964 10.4886C12.8265 10.5111 12.8246 10.5579 12.7918 10.577C12.3777 10.8191 11.9472 11.0236 11.4944 11.1945C11.4649 11.2057 11.4518 11.24 11.4662 11.2683C11.7159 11.7519 12.0009 12.2123 12.3148 12.649C12.3279 12.6675 12.3515 12.6754 12.3731 12.6688C13.7314 12.2486 15.1088 11.6146 16.5307 10.5704C16.5432 10.5612 16.551 10.5473 16.5523 10.5322C16.899 6.9463 15.9718 3.83145 14.0945 1.07015C14.0899 1.06092 14.082 1.05432 14.0728 1.05036ZM5.55517 8.64293C4.73608 8.64293 4.06118 7.89094 4.06118 6.96742C4.06118 6.04391 4.72299 5.29192 5.55517 5.29192C6.39389 5.29192 7.06226 6.05051 7.04915 6.96742C7.04915 7.89094 6.38733 8.64293 5.55517 8.64293ZM11.079 8.64293C10.2599 8.64293 9.585 7.89094 9.585 6.96742C9.585 6.04391 10.2468 5.29192 11.079 5.29192C11.9177 5.29192 12.5861 6.05051 12.573 6.96742C12.573 7.89094 11.9177 8.64293 11.079 8.64293Z",
        fill: "#B6B8D5"
      }
    )
  );
};

// lib/components/subscription/subscription-card-views/preview-panel/DestinationErrorMessage.tsx
import clsx22 from "clsx";
import React57 from "react";
var DestinationErrorMessage = ({
  classNames,
  tooltipContent,
  errorMessage,
  onClick
}) => {
  return /* @__PURE__ */ React57.createElement(
    "div",
    {
      className: clsx22(
        "DestinationErrorMessage__ErrorMessageContainer",
        classNames == null ? void 0 : classNames.errorMessageContainer
      )
    },
    onClick !== void 0 ? /* @__PURE__ */ React57.createElement(
      "a",
      {
        target: "_blank",
        rel: "noopener noreferrer",
        onClick: () => onClick(),
        className: clsx22("DestinationErrorMessage__emailConfirmationLink")
      },
      /* @__PURE__ */ React57.createElement(
        "label",
        {
          className: clsx22(
            "DestinationErrorMessage__confirmationLinkLabel",
            classNames == null ? void 0 : classNames.errorMessage
          )
        },
        errorMessage
      )
    ) : /* @__PURE__ */ React57.createElement(
      "label",
      {
        className: clsx22(
          "DestinationErrorMessage__ErrorMessageLabel",
          classNames == null ? void 0 : classNames.errorMessage,
          {
            DestinationErrorMessage__errorMessage: errorMessage !== ""
          }
        )
      },
      errorMessage
    ),
    tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React57.createElement(
      NotifiTooltip,
      {
        classNames: {
          icon: clsx22(
            "DestinationErrorMessage__tooltipIcon",
            classNames == null ? void 0 : classNames.tooltipContent
          )
        },
        content: tooltipContent
      }
    ) : null
  );
};

// lib/components/ConfigDestinationModal.tsx
var ConfigDestinationModal = ({
  classNames,
  updateFtuStage,
  contactInfo
}) => {
  var _a, _b, _c, _d, _e;
  const {
    destinationErrorMessages,
    email,
    phoneNumber,
    telegramId,
    useDiscord
  } = useNotifiSubscriptionContext();
  const [isEmailConfirmationSent, setIsEmailConfirmationSent] = useState19(false);
  const {
    telegram: telegramErrorMessage,
    email: emailErrorMessage,
    phoneNumber: phoneNumberErrorMessage,
    discord: discordErrrorMessage
  } = destinationErrorMessages;
  const handleResendEmailVerificationClick = useCallback15(() => {
    if ((emailErrorMessage == null ? void 0 : emailErrorMessage.type) !== "recoverableError")
      return;
    setIsEmailConfirmationSent(true);
    emailErrorMessage.onClick();
    setTimeout(() => {
      setIsEmailConfirmationSent(false);
    }, 3e3);
  }, [emailErrorMessage]);
  return /* @__PURE__ */ React58.createElement("div", { "data-cy": "configDestinationModal" }, /* @__PURE__ */ React58.createElement(
    "div",
    {
      className: clsx23("configDestinationModal__overlay", classNames == null ? void 0 : classNames.overlay)
    }
  ), /* @__PURE__ */ React58.createElement(
    "div",
    {
      className: clsx23(
        "configDestinationModal__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React58.createElement(
      "div",
      {
        className: clsx23(
          "configDestinationModal__headerContainer",
          classNames == null ? void 0 : classNames.headerContainer
        )
      },
      /* @__PURE__ */ React58.createElement(
        "div",
        {
          className: clsx23(
            "configDestinationModal__headerTitle",
            classNames == null ? void 0 : classNames.headerTitle
          )
        },
        /* @__PURE__ */ React58.createElement("div", null, "Verify your destinations")
      )
    ),
    /* @__PURE__ */ React58.createElement(
      "div",
      {
        className: clsx23(
          "configDestinationModal__destinationsContainer",
          classNames == null ? void 0 : classNames.container
        )
      },
      contactInfo.email.active && email ? /* @__PURE__ */ React58.createElement(
        "div",
        {
          className: clsx23(
            "configDestinationModal__email",
            classNames == null ? void 0 : classNames.emailContainer
          )
        },
        /* @__PURE__ */ React58.createElement(
          "div",
          {
            className: clsx23(
              "configDestinationModal__emailLabel",
              classNames == null ? void 0 : classNames.emailLabel
            )
          },
          /* @__PURE__ */ React58.createElement(
            "div",
            {
              className: clsx23(
                "configDestinationModal__emailLabelIcon",
                classNames == null ? void 0 : classNames.emailLabelIcon
              )
            },
            /* @__PURE__ */ React58.createElement(EmailIcon, null)
          ),
          /* @__PURE__ */ React58.createElement("div", null, "Email")
        ),
        (emailErrorMessage == null ? void 0 : emailErrorMessage.type) === "recoverableError" ? /* @__PURE__ */ React58.createElement(React58.Fragment, null, /* @__PURE__ */ React58.createElement(
          "div",
          {
            className: clsx23(
              "configDestinationModal__emailHelpPhrase",
              classNames == null ? void 0 : classNames.emailHelpPhrase
            )
          },
          "We\u2019ve sent a verification email to:"
        ), /* @__PURE__ */ React58.createElement(
          "div",
          {
            className: clsx23(
              "configDestinationModal__emailAddress",
              classNames == null ? void 0 : classNames.emailAddress
            )
          },
          email
        ), /* @__PURE__ */ React58.createElement(
          DestinationErrorMessage,
          {
            classNames: {
              errorMessage: clsx23(
                "configDestinationModal__emailResendLink",
                classNames == null ? void 0 : classNames.emailResendLink
              )
            },
            onClick: () => {
              handleResendEmailVerificationClick();
            },
            errorMessage: isEmailConfirmationSent ? "Sent" : emailErrorMessage.message,
            tooltipContent: emailErrorMessage == null ? void 0 : emailErrorMessage.tooltip
          }
        )) : /* @__PURE__ */ React58.createElement(VerifiedButton, { className: classNames == null ? void 0 : classNames.verifiedButton })
      ) : null,
      contactInfo.sms.active && phoneNumber ? /* @__PURE__ */ React58.createElement(
        "div",
        {
          className: clsx23(
            "configDestinationModal__sms",
            classNames == null ? void 0 : classNames.smsContainer
          )
        },
        /* @__PURE__ */ React58.createElement(
          "div",
          {
            className: clsx23(
              "configDestination__smsLabel",
              classNames == null ? void 0 : classNames.smsLabel
            )
          },
          /* @__PURE__ */ React58.createElement(
            "div",
            {
              className: clsx23(
                "configDestination__smsLabelIcon",
                classNames == null ? void 0 : classNames.smsLabelIcon
              )
            },
            /* @__PURE__ */ React58.createElement(SmsIcon, null)
          ),
          /* @__PURE__ */ React58.createElement(
            "div",
            {
              className: clsx23(
                "configDestinationModal__phoneNumber",
                classNames == null ? void 0 : classNames.phoneNumber
              )
            },
            "Phone Number"
          )
        ),
        /* @__PURE__ */ React58.createElement("div", null, phoneNumber),
        (phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.type) !== void 0 ? /* @__PURE__ */ React58.createElement(
          DestinationErrorMessage,
          {
            errorMessage: phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.message,
            tooltipContent: phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.tooltip
          }
        ) : /* @__PURE__ */ React58.createElement(VerifiedButton, { className: classNames == null ? void 0 : classNames.verifiedButton })
      ) : null,
      contactInfo.telegram.active && telegramId ? /* @__PURE__ */ React58.createElement(
        "div",
        {
          className: clsx23(
            "configDestinationModal__telegram",
            classNames == null ? void 0 : classNames.telegramContainer
          )
        },
        /* @__PURE__ */ React58.createElement(
          "div",
          {
            className: clsx23(
              "configDestinationModal__telegramLabel",
              classNames == null ? void 0 : classNames.telegramLabel
            )
          },
          /* @__PURE__ */ React58.createElement(
            "div",
            {
              className: clsx23(
                "configDestinationModal__telegramLabelIcon",
                classNames == null ? void 0 : classNames.telegramLabelIcon
              )
            },
            /* @__PURE__ */ React58.createElement(TelegramIcon, null)
          ),
          /* @__PURE__ */ React58.createElement("div", null, "Telegram")
        ),
        (telegramErrorMessage == null ? void 0 : telegramErrorMessage.type) === "recoverableError" ? /* @__PURE__ */ React58.createElement(React58.Fragment, null, /* @__PURE__ */ React58.createElement(
          "div",
          {
            className: clsx23(
              "configDestinationModal__telegramId",
              classNames == null ? void 0 : classNames.telegramId
            )
          },
          telegramId
        ), /* @__PURE__ */ React58.createElement(
          "div",
          {
            "data-cy": "configDestinationModalConfirmTelegramButton",
            onClick: () => {
              telegramErrorMessage == null ? void 0 : telegramErrorMessage.onClick();
            }
          },
          /* @__PURE__ */ React58.createElement(
            DestinationErrorMessage,
            {
              classNames: {
                errorMessage: clsx23(
                  "configDestinationModal__verifyButtonMessage",
                  classNames == null ? void 0 : classNames.verifyButtonMessage
                ),
                errorMessageContainer: clsx23(
                  "configDestinationModal__verifyButtonContainer",
                  classNames == null ? void 0 : classNames.verifyButtonContainer
                )
              },
              errorMessage: (_a = telegramErrorMessage == null ? void 0 : telegramErrorMessage.message) != null ? _a : "",
              tooltipContent: (_b = destinationErrorMessages == null ? void 0 : destinationErrorMessages.telegram) == null ? void 0 : _b.tooltip
            }
          )
        )) : /* @__PURE__ */ React58.createElement(VerifiedButton, { className: classNames == null ? void 0 : classNames.verifiedButton })
      ) : null,
      ((_c = contactInfo == null ? void 0 : contactInfo.discord) == null ? void 0 : _c.active) && useDiscord ? /* @__PURE__ */ React58.createElement(
        "div",
        {
          className: clsx23(
            "configDestinationModal__discord",
            classNames == null ? void 0 : classNames.discordContainer
          )
        },
        /* @__PURE__ */ React58.createElement(
          "label",
          {
            className: clsx23(
              "configDestinationModal__discordLabel",
              classNames == null ? void 0 : classNames.discordLabel
            )
          },
          /* @__PURE__ */ React58.createElement(
            "div",
            {
              className: clsx23(
                "configDestinationModal__discordLabelIcon",
                classNames == null ? void 0 : classNames.discordLabelIcon
              )
            },
            /* @__PURE__ */ React58.createElement(DiscordIcon, null)
          ),
          /* @__PURE__ */ React58.createElement("div", null, "Discord")
        ),
        (discordErrrorMessage == null ? void 0 : discordErrrorMessage.type) === "recoverableError" ? /* @__PURE__ */ React58.createElement(React58.Fragment, null, /* @__PURE__ */ React58.createElement(
          DestinationErrorMessage,
          {
            classNames: {
              errorMessage: clsx23(
                "configDestinationModal__verifyButtonMessage",
                classNames == null ? void 0 : classNames.verifyButtonMessage
              ),
              errorMessageContainer: clsx23(
                "configDestinationModal__verifyButtonContainer",
                classNames == null ? void 0 : classNames.verifyButtonContainer
              )
            },
            onClick: () => {
              discordErrrorMessage == null ? void 0 : discordErrrorMessage.onClick();
            },
            errorMessage: (_d = discordErrrorMessage == null ? void 0 : discordErrrorMessage.message) != null ? _d : "",
            tooltipContent: (_e = destinationErrorMessages == null ? void 0 : destinationErrorMessages.discord) == null ? void 0 : _e.tooltip
          }
        )) : /* @__PURE__ */ React58.createElement(VerifiedButton, { className: classNames == null ? void 0 : classNames.verifiedButton })
      ) : null
    ),
    /* @__PURE__ */ React58.createElement(
      "div",
      {
        "data-cy": "configDestinationModalNextButton",
        className: clsx23(
          "configDestinationModal__footerContainer",
          classNames == null ? void 0 : classNames.footerContainer
        )
      },
      /* @__PURE__ */ React58.createElement(
        "button",
        {
          onClick: () => {
            updateFtuStage(2 /* Alerts */);
          }
        },
        "Next"
      )
    )
  ));
};
var VerifiedButton = ({ className }) => {
  return /* @__PURE__ */ React58.createElement(
    "div",
    {
      "data-cy": "configDestinationModalVerifyLabel",
      className: clsx23("configDestinationModal__verifiedButton", className)
    },
    /* @__PURE__ */ React58.createElement("div", null, "Verified")
  );
};

// lib/components/NotifiAlertBox.tsx
import clsx24 from "clsx";
import React59 from "react";
var NotifiAlertBox = ({ classNames, children, leftIcon, rightIcon }) => {
  return /* @__PURE__ */ React59.createElement("div", { className: clsx24("NotifiAlertBox__container", classNames == null ? void 0 : classNames.container) }, leftIcon !== void 0 ? /* @__PURE__ */ React59.createElement(
    "div",
    {
      className: clsx24("NotifiAlertBox__btn--left", classNames == null ? void 0 : classNames.btnLeft),
      onClick: leftIcon.onClick
    },
    /* @__PURE__ */ React59.createElement(
      AlertActionIcon_default,
      {
        name: leftIcon.name,
        className: clsx24("NotifiAlertBox__iconSvg", classNames == null ? void 0 : classNames.iconSvg)
      }
    )
  ) : /* @__PURE__ */ React59.createElement(
    "div",
    {
      className: clsx24("NotifiAlertBox__btn--spacer", classNames == null ? void 0 : classNames.spacer)
    }
  ), /* @__PURE__ */ React59.createElement("div", { className: clsx24("NotifiAlertBox__content", classNames == null ? void 0 : classNames.content) }, children), rightIcon !== void 0 ? /* @__PURE__ */ React59.createElement(
    "div",
    {
      className: clsx24("NotifiAlertBox__btn--right", classNames == null ? void 0 : classNames.btnRight),
      onClick: rightIcon.onClick
    },
    /* @__PURE__ */ React59.createElement(
      AlertActionIcon_default,
      {
        name: rightIcon.name,
        className: clsx24("NotifiAlertBox__iconSvg", classNames == null ? void 0 : classNames.iconSvg)
      }
    )
  ) : /* @__PURE__ */ React59.createElement(
    "div",
    {
      className: clsx24("NotifiAlertBox__btn--spacer", classNames == null ? void 0 : classNames.spacer)
    }
  ));
};
var NotifiAlertBox_default = NotifiAlertBox;

// lib/components/SignupBanner.tsx
import clsx25 from "clsx";
import React61, { useMemo as useMemo16 } from "react";

// lib/assets/CircleBellIcon.tsx
import React60 from "react";
var CircleBellIcon = (props) => {
  return /* @__PURE__ */ React60.createElement(
    "svg",
    __spreadValues({
      width: "21",
      height: "21",
      viewBox: "0 0 21 21",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React60.createElement(
      "circle",
      {
        cx: "10.5",
        cy: "10.5",
        r: "9.5",
        fill: "white",
        stroke: "url(#paint0_linear_1316_3580)",
        strokeWidth: "2"
      }
    ),
    /* @__PURE__ */ React60.createElement(
      "path",
      {
        d: "M10.4901 16.1875C11.1212 16.1875 11.6376 15.6712 11.6376 15.0401H9.3427C9.3427 15.6712 9.85331 16.1875 10.4901 16.1875ZM13.9324 12.7452V9.8766C13.9324 8.11529 12.9915 6.64083 11.3507 6.25071V5.86058C11.3507 5.38439 10.9663 5 10.4901 5C10.0139 5 9.62956 5.38439 9.62956 5.86058V6.25071C7.98299 6.64083 7.04783 8.10955 7.04783 9.8766V12.7452L5.90039 13.8926V14.4663H15.0799V13.8926L13.9324 12.7452Z",
        fill: "#262949"
      }
    ),
    /* @__PURE__ */ React60.createElement("defs", null, /* @__PURE__ */ React60.createElement(
      "linearGradient",
      {
        id: "paint0_linear_1316_3580",
        x1: "15.6331",
        y1: "3.32468",
        x2: "7.46429",
        y2: "19",
        gradientUnits: "userSpaceOnUse"
      },
      /* @__PURE__ */ React60.createElement("stop", { stopColor: "#FE7970" }),
      /* @__PURE__ */ React60.createElement("stop", { offset: "1", stopColor: "#FEB776" })
    ))
  );
};

// lib/components/SignupBanner.tsx
var SignupBanner = ({
  classNames,
  data
}) => {
  const { cardView, setCardView } = useNotifiSubscriptionContext();
  const targets = useMemo16(() => {
    const supportedTargets = Object.keys(data.contactInfo).filter((target) => {
      return data.contactInfo[target].active;
    }).map((target) => target.charAt(0).toLocaleUpperCase() + target.slice(1));
    return supportedTargets.length > 1 ? supportedTargets.join(", ") : supportedTargets[0];
  }, []);
  const onClick = () => {
    setCardView({
      state: "edit"
    });
  };
  return /* @__PURE__ */ React61.createElement(React61.Fragment, null, /* @__PURE__ */ React61.createElement(
    "div",
    {
      className: clsx25(
        (classNames == null ? void 0 : classNames.banner) ? classNames.banner : "SignupBanner",
        cardView.state === "preview" && "SignupBanner__Column"
      )
    },
    /* @__PURE__ */ React61.createElement("div", { className: clsx25("SignupBanner__Label", classNames == null ? void 0 : classNames.bannerLabel) }, /* @__PURE__ */ React61.createElement(
      "div",
      {
        className: clsx25(
          (classNames == null ? void 0 : classNames.bannerImage) ? classNames == null ? void 0 : classNames.bannerImage : "SignupBanner__Image"
        )
      },
      /* @__PURE__ */ React61.createElement(CircleBellIcon, null)
    ), /* @__PURE__ */ React61.createElement(
      "div",
      {
        className: clsx25(
          (classNames == null ? void 0 : classNames.bannerContent) ? classNames.bannerContent : "SignupBanner__Content"
        )
      },
      /* @__PURE__ */ React61.createElement(
        "div",
        {
          className: clsx25(
            (classNames == null ? void 0 : classNames.bannerTitle) ? classNames.bannerTitle : "SignupBanner__Title"
          )
        },
        "Get alerts via"
      ),
      /* @__PURE__ */ React61.createElement(
        "div",
        {
          className: clsx25(
            (classNames == null ? void 0 : classNames.bannerSubject) ? classNames.bannerSubject : "SignupBanner__Subject"
          )
        },
        targets
      )
    )),
    /* @__PURE__ */ React61.createElement(
      "button",
      {
        "data-cy": "signupBannerButton",
        className: clsx25(
          (classNames == null ? void 0 : classNames.bannerButton) ? classNames.bannerButton : "SignupBanner__Button"
        ),
        onClick
      },
      "Sign Up"
    )
  ));
};

// lib/components/VerifyBanner.tsx
import clsx26 from "clsx";
import React62, { useMemo as useMemo17 } from "react";
var VerifyBanner = ({
  classNames,
  unVerifiedDestinations
}) => {
  const { setCardView } = useNotifiSubscriptionContext();
  const unVerifiedDestinationsString = useMemo17(() => {
    const convertedUnVerifiedDestinations = unVerifiedDestinations.map(
      (target) => {
        switch (target) {
          case "telegram":
            return "Telegram ID";
          case "discord":
            return "Discord";
          case "phoneNumber":
            return "Phone Number";
          default:
            return target;
        }
      }
    );
    return convertedUnVerifiedDestinations.length > 1 ? convertedUnVerifiedDestinations.join(" and ") : convertedUnVerifiedDestinations[0];
  }, [unVerifiedDestinations]);
  const onClick = () => {
    setCardView({
      state: "preview"
    });
  };
  return /* @__PURE__ */ React62.createElement(
    "div",
    {
      className: clsx26("verifyBanner__container", classNames == null ? void 0 : classNames.bannerContainer)
    },
    /* @__PURE__ */ React62.createElement("div", { className: clsx26("verifyBanner__label", classNames == null ? void 0 : classNames.bannerLabel) }, /* @__PURE__ */ React62.createElement(
      "div",
      {
        className: clsx26(
          (classNames == null ? void 0 : classNames.bannerImage) ? classNames == null ? void 0 : classNames.bannerImageContainer : "verifyBanner__imageContainer"
        )
      },
      /* @__PURE__ */ React62.createElement(CheckIcon, { className: "verifyBanner__image" })
    ), /* @__PURE__ */ React62.createElement(
      "div",
      {
        className: clsx26("verifyBanner__subject", classNames == null ? void 0 : classNames.bannerSubject)
      },
      "Verify your ",
      unVerifiedDestinationsString
    )),
    /* @__PURE__ */ React62.createElement(
      "button",
      {
        "data-cy": "verifyBannerButton",
        className: clsx26(
          (classNames == null ? void 0 : classNames.bannerButton) ? classNames.bannerButton : "verifyBanner__button"
        ),
        onClick
      },
      "Verify"
    )
  );
};

// lib/components/common/ErrorStateCard.tsx
import clsx27 from "clsx";

// lib/utils/errorUtils.ts
function getErrorMessageKey(err) {
  let errMsg;
  if (err instanceof Error) {
    errMsg = err.message;
  } else if (typeof err === "string") {
    errMsg = err;
  } else {
    errMsg = "unknown error";
  }
  return errMsg;
}

// lib/components/common/ErrorStateCard.tsx
import React63 from "react";
var ErrorStateCard = ({
  copy,
  classNames,
  onClose,
  reason
}) => {
  var _a;
  const message = getErrorMessageKey(reason);
  return /* @__PURE__ */ React63.createElement(React63.Fragment, null, /* @__PURE__ */ React63.createElement(
    NotifiAlertBox_default,
    {
      classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
      rightIcon: onClose === void 0 ? void 0 : {
        name: "close",
        onClick: onClose
      }
    },
    /* @__PURE__ */ React63.createElement("h2", null, (_a = copy == null ? void 0 : copy.header) != null ? _a : "Something went wrong")
  ), /* @__PURE__ */ React63.createElement(
    "div",
    {
      className: clsx27(
        "ErrorStateCard__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    message != null ? message : "Something went wrong"
  ));
};

// lib/components/common/LoadingStateCard.tsx
import clsx28 from "clsx";
import React65 from "react";

// lib/components/common/Spinner.tsx
import React64 from "react";
var Spinner = ({ size, ringColor }) => {
  return /* @__PURE__ */ React64.createElement(
    "div",
    {
      className: "NotifiSpinner",
      style: { height: size, width: size, borderTopColor: ringColor }
    }
  );
};
var Spinner_default = Spinner;

// lib/components/common/LoadingStateCard.tsx
var LoadingStateCard = ({
  copy,
  classNames,
  spinnerSize,
  ringColor,
  onClose
}) => {
  var _a, _b;
  return /* @__PURE__ */ React65.createElement(React65.Fragment, null, /* @__PURE__ */ React65.createElement(
    NotifiAlertBox_default,
    {
      classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
      rightIcon: onClose === void 0 ? void 0 : {
        name: "close",
        onClick: onClose
      }
    },
    /* @__PURE__ */ React65.createElement("h2", null, (_a = copy == null ? void 0 : copy.header) != null ? _a : "Loading")
  ), /* @__PURE__ */ React65.createElement(
    "div",
    {
      className: clsx28(
        "NotifiLoadingStateCard__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React65.createElement(
      "label",
      {
        className: clsx28("NotifiLoadingStateCard__label", classNames == null ? void 0 : classNames.label)
      },
      (_b = copy == null ? void 0 : copy.content) != null ? _b : "Loading\u2026"
    ),
    /* @__PURE__ */ React65.createElement(Spinner_default, { size: spinnerSize, ringColor })
  ));
};

// lib/components/subscription/subscription-card-views/EditCardView.tsx
import clsx34 from "clsx";
import React71 from "react";

// lib/components/subscription/NotifiSubscribeButton.tsx
import clsx29 from "clsx";
import React66, { useCallback as useCallback16, useMemo as useMemo18 } from "react";
var NotifiSubscribeButton = ({
  buttonText,
  classNames,
  data,
  inputs
}) => {
  var _a, _b;
  const eventTypes = data.eventTypes;
  const { isInitialized, subscribe, updateTargetGroups } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const frontendClientLogin = useFrontendClientLogin();
  const {
    client,
    params: { multiWallet },
    isUsingFrontendClient,
    frontendClient
  } = useNotifiClientContext();
  const {
    cardView,
    connectedWallets,
    loading,
    setCardView,
    useDiscord,
    render,
    setLoading,
    syncFtuStage
  } = useNotifiSubscriptionContext();
  const { formErrorMessages, formState } = useNotifiForm();
  const { phoneNumber, telegram: telegramId, email } = formState;
  const { email: emailErrorMessage, phoneNumber: smsErrorMessage } = formErrorMessages;
  const isMultiWallet = ((_b = (_a = multiWallet == null ? void 0 : multiWallet.ownedWallets) == null ? void 0 : _a.length) != null ? _b : 0) > 0;
  const targetGroup = useMemo18(
    () => ({
      name: "Default",
      emailAddress: email === "" ? void 0 : email,
      phoneNumber: isValidPhoneNumber2(phoneNumber) ? phoneNumber : void 0,
      telegramId: telegramId === "" ? void 0 : formatTelegramForSubscription(telegramId),
      discordId: useDiscord ? "Default" : void 0
    }),
    [email, phoneNumber, telegramId, useDiscord]
  );
  const renewTargetGroups = useCallback16(
    async (targetGroup2) => {
      if (isUsingFrontendClient) {
        return frontendClient.ensureTargetGroup(targetGroup2);
      }
      return updateTargetGroups();
    },
    [updateTargetGroups, frontendClient, isUsingFrontendClient]
  );
  const subscribeAlerts = useCallback16(
    async (eventTypes2, inputs2) => {
      if (isUsingFrontendClient) {
        await renewTargetGroups(targetGroup);
        return subscribeAlertsByFrontendClient(
          frontendClient,
          eventTypes2,
          inputs2
        );
      }
      return subscribe(
        createConfigurations(eventTypes2, inputs2, connectedWallets)
      );
    },
    [
      targetGroup,
      isUsingFrontendClient,
      frontendClient,
      connectedWallets,
      renewTargetGroups,
      subscribeAlertsByFrontendClient,
      subscribe,
      createConfigurations
    ]
  );
  const onClick = useCallback16(async () => {
    var _a2, _b2, _c, _d, _e, _f;
    let isFirstTimeUser = ((_c = (_b2 = (_a2 = client.data) == null ? void 0 : _a2.targetGroups) == null ? void 0 : _b2.length) != null ? _c : 0) === 0;
    if (isUsingFrontendClient && ((_d = frontendClient.userState) == null ? void 0 : _d.status) !== "authenticated") {
      await frontendClientLogin();
      const data2 = await frontendClient.fetchData();
      isFirstTimeUser = ((_f = (_e = data2.targetGroup) == null ? void 0 : _e.length) != null ? _f : 0) === 0;
    }
    setLoading(true);
    try {
      let success = false;
      if (isFirstTimeUser && !isMultiWallet) {
        const subEvents = eventTypes.filter((event) => {
          return event.optOutAtSignup ? false : true;
        });
        const result2 = await subscribeAlerts(subEvents, inputs);
        success = !!result2;
      } else {
        const result2 = await renewTargetGroups(targetGroup);
        success = !!result2;
      }
      if (isUsingFrontendClient && success) {
        const newData = await frontendClient.fetchData();
        render(newData);
      }
      if (success === true) {
        await syncFtuStage(data.isContactInfoRequired);
        const nextState = !isMultiWallet ? "history" : cardView.state === "signup" ? "verifyonboarding" : "verify";
        setCardView({
          state: nextState
        });
      }
    } catch (e) {
      setCardView({ state: "error", reason: e });
    }
    setLoading(false);
  }, [
    isMultiWallet,
    frontendClient,
    isUsingFrontendClient,
    client,
    eventTypes,
    frontendClientLogin,
    subscribe,
    updateTargetGroups,
    setCardView
  ]);
  const hasErrors = emailErrorMessage !== "" || smsErrorMessage !== "";
  const isInputFieldsValid = useMemo18(() => {
    return data.isContactInfoRequired ? email || phoneNumber || telegramId || useDiscord : true;
  }, [email, phoneNumber, telegramId, useDiscord, data.isContactInfoRequired]);
  return /* @__PURE__ */ React66.createElement(
    "button",
    {
      "data-cy": "notifiSubscribeButton",
      className: clsx29("NotifiSubscribeButton__button", classNames == null ? void 0 : classNames.button),
      disabled: !isInitialized || loading || hasErrors || !isInputFieldsValid,
      onClick
    },
    /* @__PURE__ */ React66.createElement("span", { className: clsx29("NotifiSubscribeButton__label", classNames == null ? void 0 : classNames.label) }, loading ? "Loading" : buttonText)
  );
};

// lib/components/subscription/subscription-card-views/AlertListPreview.tsx
import clsx30 from "clsx";
import React67 from "react";
var AlertListPreview = ({
  eventTypes,
  copy,
  classNames
}) => {
  var _a;
  const alertNames = eventTypes.map((eventType) => {
    var _a2;
    if (eventType.type === "label") {
      return;
    }
    return /* @__PURE__ */ React67.createElement("div", { className: "NotifiAlertList__listItem", key: eventType.name }, /* @__PURE__ */ React67.createElement(
      CheckIcon,
      {
        className: clsx30(
          "NotifiAlertListContainer__checkmarkIcon",
          classNames == null ? void 0 : classNames.checkmarkIcon
        )
      }
    ), /* @__PURE__ */ React67.createElement(
      "label",
      {
        className: clsx30(
          "NotifiAlertListContainer__listItemContent",
          classNames == null ? void 0 : classNames.eventListItem
        ),
        key: eventType.name
      },
      eventType.type === "fusion" ? (_a2 = eventType.displayNameOverride) != null ? _a2 : eventType.name : eventType.name
    ));
  });
  return /* @__PURE__ */ React67.createElement(
    "div",
    {
      className: clsx30(
        "NotifiAlertListContainer__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React67.createElement(
      "label",
      {
        className: clsx30(
          "NotifiAlertListPreview__descriptionText",
          classNames == null ? void 0 : classNames.description
        )
      },
      (_a = copy == null ? void 0 : copy.description) != null ? _a : "Subscribe to any of these alerts"
    ),
    /* @__PURE__ */ React67.createElement("div", { className: clsx30("NotifiAlertLisPreview__checkmarkContainer") }, alertNames)
  );
};

// lib/components/subscription/subscription-card-views/InputFields.tsx
import clsx33 from "clsx";
import React70 from "react";

// lib/components/NotifiDiscordToggle.tsx
import clsx31 from "clsx";
import React68 from "react";
var NotifiDiscordToggle = ({
  classNames,
  disabled
}) => {
  const { useDiscord, setUseDiscord } = useNotifiSubscriptionContext();
  return /* @__PURE__ */ React68.createElement(
    "div",
    {
      className: clsx31("NotifiDiscordToggle__container", classNames == null ? void 0 : classNames.container)
    },
    /* @__PURE__ */ React68.createElement("div", { className: clsx31("NotifiDiscordToggle__label", classNames == null ? void 0 : classNames.label) }, "Discord DM Bot"),
    /* @__PURE__ */ React68.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled,
        checked: useDiscord,
        setChecked: setUseDiscord
      }
    )
  );
};

// lib/components/NotifiHwWalletToggle.tsx
import clsx32 from "clsx";
import React69 from "react";
var NotifiHwWalletToggle = ({
  classNames,
  disabled
}) => {
  const { useHardwareWallet, setUseHardwareWallet } = useNotifiSubscriptionContext();
  return /* @__PURE__ */ React69.createElement(
    "div",
    {
      className: clsx32("NotifiHwWalletToggle__container", classNames == null ? void 0 : classNames.container)
    },
    /* @__PURE__ */ React69.createElement("div", { className: clsx32("NotifiHwWalletToggle__label", classNames == null ? void 0 : classNames.label) }, "Use hardware wallet"),
    /* @__PURE__ */ React69.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled,
        checked: useHardwareWallet,
        setChecked: setUseHardwareWallet
      }
    )
  );
};

// lib/components/subscription/subscription-card-views/InputFields.tsx
var InputFields = ({
  data,
  classNames,
  inputSeparators,
  inputTextFields,
  allowedCountryCodes,
  inputDisabled,
  hideContactInputs
}) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w;
  const { params } = useNotifiClientContext();
  return /* @__PURE__ */ React70.createElement(React70.Fragment, null, !hideContactInputs ? /* @__PURE__ */ React70.createElement(React70.Fragment, null, data.contactInfo.email.active ? /* @__PURE__ */ React70.createElement(
    NotifiEmailInput,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiEmailInput,
      copy: {
        label: (_a = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _a.email,
        placeholder: (_b = inputTextFields == null ? void 0 : inputTextFields.placeholderText) == null ? void 0 : _b.email
      }
    }
  ) : null, ((_c = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _c.content) ? /* @__PURE__ */ React70.createElement(
    "div",
    {
      className: clsx33(
        "NotifiInputSeparator__container",
        (_e = (_d = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _d.classNames) == null ? void 0 : _e.container
      )
    },
    /* @__PURE__ */ React70.createElement(
      "div",
      {
        className: clsx33(
          "NotifiInputSeparator__content",
          (_f = inputSeparators.emailSeparator.classNames) == null ? void 0 : _f.content
        )
      },
      (_g = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _g.content
    )
  ) : null, data.contactInfo.sms.active ? /* @__PURE__ */ React70.createElement(
    NotifiSmsInput,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiSmsInput,
      allowedCountryCodes,
      copy: {
        label: (_h = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _h.sms,
        placeholder: (_i = inputTextFields == null ? void 0 : inputTextFields.placeholderText) == null ? void 0 : _i.sms
      }
    }
  ) : null, ((_j = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _j.content) ? /* @__PURE__ */ React70.createElement(
    "div",
    {
      className: clsx33(
        "NotifiInputSeparator__container",
        (_l = (_k = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _k.classNames) == null ? void 0 : _l.container
      )
    },
    /* @__PURE__ */ React70.createElement(
      "div",
      {
        className: clsx33(
          "NotifiInputSeparator__content",
          (_m = inputSeparators.smsSeparator.classNames) == null ? void 0 : _m.content
        )
      },
      (_n = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _n.content
    )
  ) : null, data.contactInfo.telegram.active ? /* @__PURE__ */ React70.createElement(
    NotifiTelegramInput,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiTelegramInput,
      copy: {
        label: (_o = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _o.telegram,
        placeholder: (_p = inputTextFields == null ? void 0 : inputTextFields.placeholderText) == null ? void 0 : _p.telegram
      }
    }
  ) : null, ((_q = inputSeparators == null ? void 0 : inputSeparators.telegramSeparator) == null ? void 0 : _q.content) ? /* @__PURE__ */ React70.createElement(
    "div",
    {
      className: clsx33(
        "NotifiInputSeparator__container",
        (_s = (_r = inputSeparators == null ? void 0 : inputSeparators.telegramSeparator) == null ? void 0 : _r.classNames) == null ? void 0 : _s.container
      )
    },
    /* @__PURE__ */ React70.createElement(
      "div",
      {
        className: clsx33(
          "NotifiInputSeparator__content",
          (_t = inputSeparators.telegramSeparator.classNames) == null ? void 0 : _t.content
        )
      },
      (_u = inputSeparators == null ? void 0 : inputSeparators.telegramSeparator) == null ? void 0 : _u.content
    )
  ) : null, ((_w = (_v = data.contactInfo) == null ? void 0 : _v.discord) == null ? void 0 : _w.active) ? /* @__PURE__ */ React70.createElement(
    NotifiDiscordToggle,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiDiscordToggle
    }
  ) : null) : null, params.walletBlockchain === "SOLANA" ? /* @__PURE__ */ React70.createElement(
    NotifiHwWalletToggle,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiHwWalletToggle
    }
  ) : null);
};

// lib/components/subscription/subscription-card-views/EditCardView.tsx
var EditCardView = ({
  allowedCountryCodes,
  buttonText,
  copy,
  classNames,
  showPreview,
  data,
  inputDisabled,
  inputSeparators,
  inputTextFields,
  inputs
}) => {
  const { loading } = useNotifiSubscriptionContext();
  return /* @__PURE__ */ React71.createElement(
    "div",
    {
      className: clsx34("NotifiInputContainer", classNames == null ? void 0 : classNames.NotifiInputContainer)
    },
    showPreview ? /* @__PURE__ */ React71.createElement(
      AlertListPreview,
      {
        copy: copy == null ? void 0 : copy.AlertListPreview,
        classNames: classNames == null ? void 0 : classNames.AlertListPreview,
        eventTypes: data.eventTypes
      }
    ) : null,
    loading ? /* @__PURE__ */ React71.createElement("div", { className: "NotifiInputContainer__LoadingSpinner" }, /* @__PURE__ */ React71.createElement(Spinner_default, { size: "70px" })) : /* @__PURE__ */ React71.createElement(
      InputFields,
      {
        hideContactInputs: showPreview && !data.isContactInfoRequired,
        data,
        allowedCountryCodes,
        inputDisabled,
        inputSeparators,
        inputTextFields
      }
    ),
    /* @__PURE__ */ React71.createElement(
      NotifiSubscribeButton,
      {
        buttonText,
        data,
        classNames: classNames == null ? void 0 : classNames.NotifiSubscribeButton,
        inputs
      }
    )
  );
};

// lib/components/subscription/subscription-card-views/ExpiredTokenViewCard.tsx
import clsx35 from "clsx";
import React72 from "react";
var ExpiredTokenView = ({
  classNames
}) => {
  const { logIn } = useNotifiSubscribe({ targetGroupName: "Default" });
  const { isUsingFrontendClient } = useNotifiClientContext();
  const { setCardView } = useNotifiSubscriptionContext();
  const frontendClientLogin = useFrontendClientLogin();
  const handleClick = async () => {
    let success = false;
    const result2 = isUsingFrontendClient ? await frontendClientLogin() : await logIn();
    success = !!result2;
    if (success === true) {
      setCardView({ state: "preview" });
    }
  };
  return /* @__PURE__ */ React72.createElement(
    "div",
    {
      className: clsx35(
        "NotifiExpiredTokenCard__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React72.createElement("div", { className: clsx35("NotifiExpiredTokenCard__title", classNames == null ? void 0 : classNames.title) }, "Connect to Notifi"),
    /* @__PURE__ */ React72.createElement(
      "div",
      {
        className: clsx35(
          "NotifiExpiredTokenCard__subtitle",
          classNames == null ? void 0 : classNames.subtitle
        )
      },
      "It's been a while! Connect to Notifi to load your ",
      /* @__PURE__ */ React72.createElement("br", null),
      "notification details."
    ),
    /* @__PURE__ */ React72.createElement(
      "button",
      {
        className: clsx35("NotifiExpiredTokenCard__button", classNames == null ? void 0 : classNames.button),
        onClick: handleClick
      },
      /* @__PURE__ */ React72.createElement(
        "span",
        {
          className: clsx35(
            "NotifiExpiredTokenCard__buttonLabel",
            classNames == null ? void 0 : classNames.buttonLabel
          )
        },
        "Connect to Notifi"
      )
    )
  );
};

// lib/components/subscription/subscription-card-views/HistoryCardView.tsx
import clsx37 from "clsx";
import React75, {
  useCallback as useCallback17,
  useEffect as useEffect16,
  useMemo as useMemo19,
  useRef as useRef10,
  useState as useState20
} from "react";
import { Virtuoso } from "react-virtuoso";

// lib/assets/NotificationEmptyBellIcon.tsx
import React73 from "react";
var NotificationEmptyBellIcon = (props) => {
  return /* @__PURE__ */ React73.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "25",
      height: "30",
      viewBox: "0 0 25 30",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    /* @__PURE__ */ React73.createElement(
      "path",
      {
        d: "M12.2179 29.7812C13.8979 29.7812 15.2724 28.4067 15.2724 26.7268H9.16346C9.16346 28.4067 10.5227 29.7812 12.2179 29.7812ZM21.3814 20.6178V12.9816C21.3814 8.29293 18.8767 4.36792 14.5088 3.32939V2.29087C14.5088 1.02325 13.4856 0 12.2179 0C10.9503 0 9.92708 1.02325 9.92708 2.29087V3.32939C5.54389 4.36792 3.05449 8.27766 3.05449 12.9816V20.6178L0 23.6723V25.1995H24.4359V23.6723L21.3814 20.6178Z",
        fill: "#F5F6FB"
      }
    )
  );
};

// lib/utils/constants.ts
var MESSAGES_PER_PAGE = 50;

// lib/components/AlertHistory/AlertNotificationRow.tsx
import clsx36 from "clsx";
import React74 from "react";
var AlertNotificationRow = ({
  notificationTitle,
  classNames,
  notificationImage,
  notificationSubject,
  notificationDate,
  handleAlertEntrySelection
}) => {
  return /* @__PURE__ */ React74.createElement(
    "div",
    {
      className: clsx36(
        "NotifiAlertHistory__notificationRow",
        classNames == null ? void 0 : classNames.notificationRow
      ),
      onClick: handleAlertEntrySelection
    },
    /* @__PURE__ */ React74.createElement(
      "div",
      {
        className: clsx36(
          "NotifiAlertHistory__notificationImage",
          classNames == null ? void 0 : classNames.notificationImage
        )
      },
      notificationImage
    ),
    /* @__PURE__ */ React74.createElement(
      "div",
      {
        className: clsx36(
          "NotifiAlertHistory__content",
          classNames == null ? void 0 : classNames.notificationContent
        )
      },
      /* @__PURE__ */ React74.createElement(
        "div",
        {
          className: clsx36(
            "NotifiAlertHistory__notificationTitle",
            classNames == null ? void 0 : classNames.notificationTitle
          )
        },
        notificationTitle
      ),
      /* @__PURE__ */ React74.createElement(
        "div",
        {
          className: clsx36(
            "NotifiAlertHistory__notificationSubject",
            classNames == null ? void 0 : classNames.notificationSubject
          )
        },
        notificationSubject
      )
    ),
    /* @__PURE__ */ React74.createElement(
      "div",
      {
        className: clsx36(
          "NotifiAlertHistory__notificationDate",
          classNames == null ? void 0 : classNames.notificationDate
        )
      },
      formatTimestamp(notificationDate)
    )
  );
};

// lib/components/subscription/subscription-card-views/HistoryCardView.tsx
var AlertHistoryView = ({
  classNames,
  isHidden,
  noAlertDescription,
  setAlertEntry,
  copy
}) => {
  var _a;
  noAlertDescription = noAlertDescription ? noAlertDescription : "You haven\u2019t received any notifications yet";
  const [endCursor, setEndCursor] = useState20();
  const [hasNextPage, setHasNextPage] = useState20();
  const [isLoading, setIsLoading] = useState20(false);
  const fetched = useRef10(false);
  const { client, isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [allNodes, setAllNodes] = useState20([]);
  const { isClientInitialized, isClientAuthenticated } = useMemo19(() => {
    var _a2;
    return {
      isClientInitialized: isUsingFrontendClient ? !!frontendClient.userState : client.isInitialized,
      isClientAuthenticated: isUsingFrontendClient ? ((_a2 = frontendClient.userState) == null ? void 0 : _a2.status) === "authenticated" : client.isAuthenticated
    };
  }, [isUsingFrontendClient, client, frontendClient]);
  const getNotificationHistory = useCallback17(
    async ({ first, after }) => {
      var _a2;
      if (isLoading) {
        return;
      }
      const result2 = isUsingFrontendClient ? await frontendClient.getFusionNotificationHistory({
        first,
        after,
        includeHidden: false
      }) : await client.getNotificationHistory({
        first,
        after
      });
      const nodes = (_a2 = result2 == null ? void 0 : result2.nodes) != null ? _a2 : [];
      setAllNodes((existing) => existing.concat(nodes));
      setEndCursor(result2 == null ? void 0 : result2.pageInfo.endCursor);
      setHasNextPage(result2 == null ? void 0 : result2.pageInfo.hasNextPage);
      setIsLoading(false);
      return result2;
    },
    [
      client,
      frontendClient,
      isUsingFrontendClient,
      setAllNodes,
      setEndCursor,
      setHasNextPage
    ]
  );
  useEffect16(() => {
    if (!isClientInitialized || !isClientAuthenticated) {
      return;
    }
    if (!fetched.current) {
      fetched.current = true;
      setIsLoading(true);
      getNotificationHistory({
        first: MESSAGES_PER_PAGE
      }).finally(() => setIsLoading(false));
    }
  }, [client, frontendClient, isUsingFrontendClient]);
  useEffect16(() => {
    if (isUsingFrontendClient && allNodes.length > 0) {
      frontendClient.markFusionNotificationHistoryAsRead({
        ids: [],
        beforeId: allNodes[0].id
      }).catch((e) => console.log("Failed to mark as read", e));
    }
  }, [allNodes]);
  if (isLoading) {
    return /* @__PURE__ */ React75.createElement(
      LoadingStateCard,
      {
        copy: {
          header: (_a = copy == null ? void 0 : copy.loadingHeader) != null ? _a : "",
          content: copy == null ? void 0 : copy.loadingContent
        },
        spinnerSize: copy == null ? void 0 : copy.loadingSpinnerSize,
        ringColor: copy == null ? void 0 : copy.loadingRingColor,
        classNames: classNames == null ? void 0 : classNames.LoadingStateCard
      }
    );
  }
  return /* @__PURE__ */ React75.createElement(
    "div",
    {
      className: clsx37(
        "NotifiAlertHistory__container",
        classNames == null ? void 0 : classNames.historyContainer,
        { "NotifiAlertHistory__container--hidden": isHidden }
      )
    },
    allNodes.length > 0 ? /* @__PURE__ */ React75.createElement(
      Virtuoso,
      {
        className: clsx37("NotifiAlertHistory__virtuoso", classNames == null ? void 0 : classNames.virtuoso),
        style: { flex: 1 },
        endReached: () => {
          if (hasNextPage && endCursor) {
            getNotificationHistory({
              first: MESSAGES_PER_PAGE,
              after: endCursor
            });
          }
        },
        data: allNodes.filter(validateIsSupported),
        itemContent: (_index, notification) => {
          return /* @__PURE__ */ React75.createElement(
            AlertNotificationRow,
            __spreadProps(__spreadValues({}, getAlertNotificationViewBaseProps(notification)), {
              handleAlertEntrySelection: () => setAlertEntry(notification),
              classNames: classNames == null ? void 0 : classNames.AlertCard
            })
          );
        }
      }
    ) : /* @__PURE__ */ React75.createElement("div", { className: "NotifiAlertHistory__noAlertContainer" }, /* @__PURE__ */ React75.createElement(
      NotificationEmptyBellIcon,
      {
        className: clsx37(
          "NotifiAlertHistory__emptyAlertsBellIcon",
          classNames == null ? void 0 : classNames.emptyAlertsBellIcon
        )
      }
    ), /* @__PURE__ */ React75.createElement(
      "span",
      {
        className: clsx37(
          "NotifiAlertHistory_noAlertDescription",
          classNames == null ? void 0 : classNames.noAlertDescription
        )
      },
      noAlertDescription
    ))
  );
};

// lib/components/subscription/subscription-card-views/PreviewCard.tsx
import clsx43 from "clsx";
import React82 from "react";

// lib/components/subscription/subscription-card-views/preview-panel/AlertsPanel.tsx
import clsx41 from "clsx";
import React79 from "react";

// lib/components/subscription/EventTypeFusionHealthCheckRow.tsx
import clsx38 from "clsx";
import React76, {
  useCallback as useCallback18,
  useEffect as useEffect17,
  useMemo as useMemo20,
  useRef as useRef11,
  useState as useState21
} from "react";
var getParsedPercentage2 = (input) => {
  var _a;
  if (input.indexOf("%") === input.length - 1) {
    return (_a = parseFloat(input.slice(0, -1))) != null ? _a : null;
  }
  return null;
};
var getParsedPrice2 = (input) => {
  var _a;
  if (input.indexOf("$") === 0) {
    return (_a = parseFloat(input.slice(1))) != null ? _a : null;
  }
  return null;
};
var EventTypeFusionHealthCheckRow = ({ classNames, config, disabled, inputs }) => {
  var _a, _b, _c;
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = useState21(false);
  const [selectedIndex, setSelectedIndex] = useState21(null);
  const [isNotificationLoading, setIsNotificationLoading] = useState21(false);
  const [customValue, setCustomValue] = useState21("");
  const customInputRef = useRef11(null);
  const thresholdDirection = "below";
  const [errorMessage, setErrorMessage] = useState21("");
  const fusionEventId = useMemo20(
    () => resolveStringRef(config.name, config.fusionEventId, inputs),
    [config, inputs]
  );
  const fusionSourceAddress = useMemo20(
    () => resolveStringRef(config.name, config.sourceAddress, inputs),
    [config, inputs]
  );
  const alertName = useMemo20(() => {
    if (config.fusionEventId.type === "value") {
      return config.name;
    }
    return `${config.name}:${fusionEventId}`;
  }, [config, fusionEventId]);
  const tooltipContent = config.tooltipContent;
  const UNABLE_TO_SUBSCRIBE2 = "Unable to subscribe, please try again";
  const UNABLE_TO_UNSUBSCRIBE = "Unable to unsubscribe, please try again";
  const INVALID_NUMBER2 = "Please enter a valid number";
  const INVALID_RANGE = (validInputRange) => {
    return `Please enter a number between ${validInputRange.min} and ${validInputRange.max}`;
  };
  const handleSuffixPercentage = (value) => {
    value = value.replace("%", "");
    setCustomValue(value + "%");
  };
  const handlePrefixDollar = (value) => {
    value = value.replace("$", "");
    setCustomValue("$" + value);
  };
  const subscribingRatioValue = useMemo20(() => {
    const alert = alerts[alertName];
    if (!alert || !alert.filterOptions)
      return null;
    let alertRatioValue = null;
    switch (config.numberType) {
      case "percentage":
        alertRatioValue = JSON.parse(alert.filterOptions).threshold * 100;
        break;
      default:
        alertRatioValue = JSON.parse(alert.filterOptions).threshold;
    }
    return alertRatioValue;
  }, [alerts]);
  const defaultRatios = useMemo20(() => {
    var _a2;
    const ratios = (_a2 = config.checkRatios) != null ? _a2 : [];
    return ratios.map((ratio) => ratio.ratio);
  }, [config]);
  useEffect17(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    if (!subscribingRatioValue) {
      setEnabled(false);
      setSelectedIndex(defaultRatios.length - 1);
      return;
    }
    setEnabled(true);
    const selectedRatioIndex = defaultRatios.findIndex(
      (ratio) => ratio === subscribingRatioValue
    );
    if (selectedRatioIndex !== -1 && customValue === "") {
      setSelectedIndex(selectedRatioIndex);
    }
    if (!defaultRatios.includes(subscribingRatioValue) && customValue === "") {
      setSelectedIndex(3);
      setCustomValue(() => {
        switch (config.numberType) {
          case "percentage":
            return subscribingRatioValue + "%";
          case "price":
            return "$" + subscribingRatioValue;
          default:
            return subscribingRatioValue.toString();
        }
      });
    }
  }, [loading, enabled, setEnabled, defaultRatios, subscribingRatioValue]);
  const validateInput = useCallback18(
    (inputValue, regex, inputNumber) => {
      if (!regex.test(inputValue)) {
        return { isInputValid: false, inputInvalidWarning: INVALID_NUMBER2 };
      }
      if (!inputNumber) {
        return { isInputValid: false, inputInvalidWarning: INVALID_NUMBER2 };
      }
      if (config.validInputRange && (inputNumber > config.validInputRange.max || inputNumber < config.validInputRange.min)) {
        return {
          isInputValid: false,
          inputInvalidWarning: INVALID_RANGE(config.validInputRange)
        };
      }
      return { isInputValid: true, inputInvalidWarning: "" };
    },
    [config]
  );
  const subscribeAlert = useCallback18(
    async (alertDetail, ratioNumber) => {
      var _a2, _b2;
      if (isUsingFrontendClient) {
        alertDetail.inputs[`${alertDetail.eventType.name}__healthRatio`] = ratioNumber;
        alertDetail.inputs[`${alertDetail.eventType.name}__healthThresholdDirection`] = (_a2 = config.checkRatios[0].type) != null ? _a2 : thresholdDirection;
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: fusionHealthCheckConfiguration({
            maintainSourceGroup: config == null ? void 0 : config.maintainSourceGroup,
            fusionId: fusionEventId,
            fusionSourceAddress,
            alertFrequency: config.alertFrequency,
            thresholdDirection: (_b2 = config.checkRatios[0].type) != null ? _b2 : thresholdDirection,
            threshold: config.numberType === "percentage" ? ratioNumber / 100 : ratioNumber
          }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const unSubscribeAlert = useCallback18(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleCustomRatioButtonNewSubscription = () => {
    if (loading || isNotificationLoading || !customInputRef.current) {
      return;
    }
    const inputValue = customInputRef.current.value;
    let regex = new RegExp(/^[0-9.]+$/);
    let inputNumber = null;
    switch (config.numberType) {
      case "percentage":
        regex = new RegExp(/^[0-9.%]+$/);
        inputNumber = getParsedPercentage2(inputValue);
        break;
      case "price":
        regex = new RegExp(/^[0-9.$]+$/);
        inputNumber = getParsedPrice2(inputValue);
        break;
      default:
        inputNumber = parseFloat(inputValue);
    }
    const { isInputValid, inputInvalidWarning } = validateInput(
      inputValue,
      regex,
      inputNumber
    );
    if (!isInputValid) {
      return setErrorMessage(inputInvalidWarning);
    }
    setErrorMessage("");
    setIsNotificationLoading(true);
    customInputRef.current.placeholder = "Custom";
    if (inputNumber && customValue) {
      subscribeAlert({ eventType: config, inputs }, inputNumber).then(() => {
        setSelectedIndex(3);
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_UNSUBSCRIBE)).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setErrorMessage(INVALID_NUMBER2);
      setSelectedIndex(defaultRatios[defaultRatios.length - 1]);
      setIsNotificationLoading(false);
    }
  };
  const handleKeypressUp = (event) => {
    if (event.key === "Enter") {
      if (customInputRef.current) {
        customInputRef.current.blur();
        event.preventDefault();
      }
    }
  };
  const handleRatioButtonNewSubscription = (value, index) => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    setErrorMessage("");
    if (value) {
      subscribeAlert({ eventType: config, inputs }, value).then(() => {
        isUsingFrontendClient && frontendClient.fetchData().then(render);
        setSelectedIndex(index);
        setCustomValue("");
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE2)).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setErrorMessage(INVALID_NUMBER2);
      setIsNotificationLoading(false);
    }
  };
  const handleHealthCheckSubscription = useCallback18(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    setErrorMessage("");
    if (!enabled && !subscribingRatioValue) {
      setEnabled(true);
      subscribeAlert(
        { eventType: config, inputs },
        defaultRatios[defaultRatios.length - 1]
      ).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        setErrorMessage(UNABLE_TO_SUBSCRIBE2);
        setEnabled(false);
        throw e;
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({ eventType: config, inputs }).then((res) => {
        setCustomValue("");
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        setErrorMessage(UNABLE_TO_SUBSCRIBE2);
        setEnabled(true);
        throw e;
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    subscribingRatioValue,
    enabled,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return /* @__PURE__ */ React76.createElement("div", null, /* @__PURE__ */ React76.createElement(
    "div",
    {
      className: clsx38(
        "EventTypeCustomHealthCheckRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React76.createElement(
      "div",
      {
        className: clsx38("EventTypeHealthCheckRow__label", classNames == null ? void 0 : classNames.label)
      },
      (_a = config.displayNameOverride) != null ? _a : config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React76.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    /* @__PURE__ */ React76.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleHealthCheckSubscription
      }
    )
  ), enabled && ((_b = config.checkRatios) == null ? void 0 : _b.length) ? /* @__PURE__ */ React76.createElement(React76.Fragment, null, /* @__PURE__ */ React76.createElement(
    "div",
    {
      className: clsx38(
        "EventTypeHealthCheckRow__content",
        classNames == null ? void 0 : classNames.content
      )
    },
    config.healthCheckSubtitle ? config.healthCheckSubtitle : `Alert me when my margin ratio is ${(_c = config.checkRatios[0]) == null ? void 0 : _c.type}`
  ), /* @__PURE__ */ React76.createElement(
    "div",
    {
      className: clsx38(
        "EventTypeHealthCheckRow__buttonContainer",
        classNames == null ? void 0 : classNames.buttonContainer
      )
    },
    config.checkRatios.map((value, index) => {
      const numberType = config.numberType;
      let valueToShow = null;
      switch (numberType) {
        case "percentage":
          valueToShow = value.ratio + "%";
          break;
        case "price":
          valueToShow = "$" + value.ratio;
          break;
        default:
          valueToShow = value.ratio;
      }
      return /* @__PURE__ */ React76.createElement(
        "div",
        {
          key: index,
          className: clsx38(
            "EventTypeHealthCheckRow__button",
            `${index === selectedIndex ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
            isNotificationLoading ? "buttonDisabled" : void 0,
            classNames == null ? void 0 : classNames.button
          ),
          onClick: () => {
            if (isNotificationLoading === true || selectedIndex === index) {
              return;
            }
            handleRatioButtonNewSubscription(value.ratio, index);
          }
        },
        valueToShow
      );
    }),
    /* @__PURE__ */ React76.createElement(
      "input",
      {
        ref: customInputRef,
        onKeyUp: (e) => handleKeypressUp(e),
        onFocus: (e) => e.target.placeholder = config.numberType === "percentage" ? "0.00%" : "0",
        onClick: () => {
          setErrorMessage("");
          setSelectedIndex(null);
        },
        disabled: isNotificationLoading,
        onBlur: handleCustomRatioButtonNewSubscription,
        value: customValue,
        placeholder: "Custom",
        className: clsx38(
          "EventTypeHealthCheckRow__button",
          "EventTypeHealthCheckRow__customButton",
          `${selectedIndex === 3 ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
          classNames == null ? void 0 : classNames.button
        ),
        onChange: (e) => {
          var _a2;
          if (config.numberType === "percentage") {
            handleSuffixPercentage(e.target.value);
          } else if (config.numberType === "price") {
            handlePrefixDollar(e.target.value);
          } else {
            setCustomValue((_a2 = e.target.value) != null ? _a2 : "");
          }
        }
      }
    )
  ), /* @__PURE__ */ React76.createElement(
    "label",
    {
      className: clsx38(
        "NotifiEmailInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    errorMessage
  )) : null);
};

// lib/components/subscription/EventTypeFusionToggleRow.tsx
import clsx39 from "clsx";
import React77, {
  useCallback as useCallback19,
  useEffect as useEffect18,
  useMemo as useMemo21,
  useRef as useRef12,
  useState as useState22
} from "react";
var EventTypeFusionToggleRow = ({
  classNames,
  config,
  disabled,
  inputs
}) => {
  var _a;
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = useState22(false);
  const [isNotificationLoading, setIsNotificationLoading] = useState22(false);
  const fusionEventId = useMemo21(
    () => resolveStringRef(config.name, config.fusionEventId, inputs),
    [config, inputs]
  );
  const fusionSourceAddress = useMemo21(
    () => resolveStringRef(config.name, config.sourceAddress, inputs),
    [config, inputs]
  );
  const alertName = useMemo21(() => {
    if (config.fusionEventId.type === "value") {
      return config.name;
    }
    return `${config.name}:${fusionEventId}`;
  }, [config, fusionEventId]);
  const alertConfiguration = useMemo21(() => {
    return fusionToggleConfiguration({
      maintainSourceGroup: config == null ? void 0 : config.maintainSourceGroup,
      fusionId: fusionEventId,
      fusionSourceAddress,
      alertFrequency: config == null ? void 0 : config.alertFrequency
    });
  }, [alertName, config, inputs]);
  const subscribeAlert = useCallback19(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const unSubscribeAlert = useCallback19(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const tooltipContent = config.tooltipContent;
  const didFetch = useRef12(false);
  useEffect18(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const handleNewSubscription = useCallback19(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    loading,
    enabled,
    instantSubscribe,
    alertConfiguration,
    alertName,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return /* @__PURE__ */ React77.createElement(
    "div",
    {
      className: clsx39(
        "EventTypeFusionToggleRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React77.createElement(
      "div",
      {
        className: clsx39("EventTypeFusionToggleRow__label", classNames == null ? void 0 : classNames.label)
      },
      (_a = config.displayNameOverride) != null ? _a : config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React77.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    /* @__PURE__ */ React77.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleNewSubscription
      }
    )
  );
};

// lib/components/subscription/EventTypeXMTPRow.tsx
import clsx40 from "clsx";
import React78, {
  useCallback as useCallback20,
  useEffect as useEffect19,
  useMemo as useMemo22,
  useRef as useRef13,
  useState as useState23
} from "react";
var EventTypeXMTPRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const alertName = useMemo22(() => config.name, [config]);
  const alertConfiguration = useMemo22(() => {
    return XMTPToggleConfiguration({
      XMTPTopics: resolveStringArrayRef(config.name, config.XMTPTopics, inputs)
    });
  }, [alertName, config]);
  const [enabled, setEnabled] = useState23(false);
  const [isNotificationLoading, setIsNotificationLoading] = useState23(false);
  const tooltipContent = config.tooltipContent;
  const didFetch = useRef13(false);
  useEffect19(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const subscribeAlert = useCallback20(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration,
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const unSubscribeAlert = useCallback20(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleNewSubscription = useCallback20(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        console.log("Failed to subscribeAlert", e);
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(true);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    enabled,
    alerts,
    instantSubscribe,
    alertName,
    isNotificationLoading,
    setEnabled,
    setIsNotificationLoading
  ]);
  return /* @__PURE__ */ React78.createElement("div", { className: clsx40("EventTypeXMTPRow__container", classNames == null ? void 0 : classNames.container) }, /* @__PURE__ */ React78.createElement("div", { className: clsx40("EventTypeXMTPRow__label", classNames == null ? void 0 : classNames.label) }, config.name, tooltipContent !== void 0 && tooltipContent.length > 0 ? /* @__PURE__ */ React78.createElement(
    NotifiTooltip,
    {
      classNames: classNames == null ? void 0 : classNames.tooltip,
      content: tooltipContent
    }
  ) : null), /* @__PURE__ */ React78.createElement(
    NotifiToggle,
    {
      classNames: classNames == null ? void 0 : classNames.toggle,
      disabled: disabled || isNotificationLoading,
      checked: enabled,
      setChecked: handleNewSubscription
    }
  ));
};

// lib/components/subscription/subscription-card-views/preview-panel/AlertsPanel.tsx
var AlertsPanel = ({
  data,
  inputDisabled,
  classNames,
  inputs
}) => {
  var _a;
  return /* @__PURE__ */ React79.createElement(
    "div",
    {
      className: clsx41(
        "NotifiEventTypeContainer",
        classNames == null ? void 0 : classNames.EventTypeContainer
      )
    },
    (_a = data.eventTypes) == null ? void 0 : _a.map((eventType) => {
      switch (eventType.type) {
        case "broadcast":
          return /* @__PURE__ */ React79.createElement(
            EventTypeBroadcastRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeBroadcastRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        case "custom": {
          return eventType.selectedUIType === "HEALTH_CHECK" ? /* @__PURE__ */ React79.createElement(
            EventTypeCustomHealthCheckRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeCustomHealthCheckRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          ) : /* @__PURE__ */ React79.createElement(
            EventTypeCustomToggleRow,
            {
              key: eventType.name,
              disabled: inputDisabled,
              config: eventType,
              classNames: classNames == null ? void 0 : classNames.EventTypeCustomHealthCheckRow,
              inputs
            }
          );
        }
        case "directPush":
          return /* @__PURE__ */ React79.createElement(
            EventTypeDirectPushRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeDirectPushRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        case "XMTP":
          return /* @__PURE__ */ React79.createElement(
            EventTypeXMTPRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeXMTPRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        case "healthCheck":
          return /* @__PURE__ */ React79.createElement(
            EventTypeHealthCheckRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeHealthCheckRow,
              disabled: inputDisabled,
              config: eventType
            }
          );
        case "label":
          return /* @__PURE__ */ React79.createElement(
            EventTypeLabelRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeLabelRow,
              config: eventType
            }
          );
        case "tradingPair":
          return /* @__PURE__ */ React79.createElement(
            EventTypeTradingPairsRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeTradingPairsRow,
              config: eventType,
              inputs
            }
          );
        case "walletBalance":
          return /* @__PURE__ */ React79.createElement(
            EventTypeWalletBalanceRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeWalletBalanceRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        case "fusionToggle":
        case "fusion":
          switch (eventType.selectedUIType) {
            case "HEALTH_CHECK":
              return /* @__PURE__ */ React79.createElement(
                EventTypeFusionHealthCheckRow,
                {
                  key: eventType.name,
                  disabled: inputDisabled,
                  config: eventType,
                  classNames: classNames == null ? void 0 : classNames.EventTypeFusionHealthCheckRow,
                  inputs
                }
              );
            case "TOGGLE":
              return /* @__PURE__ */ React79.createElement(
                EventTypeFusionToggleRow,
                {
                  key: eventType.name,
                  classNames: classNames == null ? void 0 : classNames.EventTypeFusionToggleRow,
                  disabled: inputDisabled,
                  config: eventType,
                  inputs
                }
              );
            case "MULTI_THRESHOLD":
              return /* @__PURE__ */ React79.createElement(
                EventTypeFusionMultiThresholdRow,
                {
                  key: eventType.name,
                  classNames: classNames == null ? void 0 : classNames.EventTypeFusionMultiThresholdRow,
                  config: eventType,
                  inputs
                }
              );
            default:
              throw new Error(`Unknown fusion UI type`);
          }
        case "priceChange":
          return /* @__PURE__ */ React79.createElement(
            EventTypePriceChangeRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypePriceChangeRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        default:
          return /* @__PURE__ */ React79.createElement(
            EventTypeUnsupportedRow,
            {
              key: JSON.stringify(eventType),
              classNames: classNames == null ? void 0 : classNames.EventTypeUnsupportedRow
            }
          );
      }
    })
  );
};

// lib/components/subscription/subscription-card-views/preview-panel/UserInfoPanel.tsx
import clsx42 from "clsx";

// lib/assets/PenIcon.tsx
import React80 from "react";
var PenIcon = (props) => {
  return /* @__PURE__ */ React80.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    /* @__PURE__ */ React80.createElement(
      "path",
      {
        d: "M5.293 15.619L15.619 5.29299C16.009 4.90299 16.642 4.90299 17.032 5.29299L18.708 6.96899C19.098 7.35899 19.098 7.99199 18.708 8.38199L8.381 18.707C8.194 18.895 7.94 19 7.675 19H5V16.325C5 16.06 5.105 15.806 5.293 15.619V15.619Z",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    ),
    /* @__PURE__ */ React80.createElement(
      "path",
      {
        d: "M13.75 7.16003L16.84 10.25",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  );
};

// lib/components/subscription/subscription-card-views/preview-panel/UserInfoPanel.tsx
import React81, { useCallback as useCallback21, useMemo as useMemo23, useState as useState24 } from "react";
var UserInfoPanel = ({
  classNames,
  contactInfo,
  confirmationLabels
}) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F;
  const [isEmailConfirmationSent, setIsEmailConfirmationSent] = useState24(false);
  const {
    phoneNumber,
    email,
    telegramId,
    setCardView,
    destinationErrorMessages,
    useDiscord,
    discordTargetData
  } = useNotifiSubscriptionContext();
  const {
    params: { multiWallet }
  } = useNotifiClientContext();
  const handleEditClick = useCallback21(() => {
    setCardView({ state: "edit" });
  }, [setCardView, phoneNumber, email, telegramId]);
  const {
    telegram: telegramErrorMessage,
    email: emailErrorMessage,
    phoneNumber: phoneNumberErrorMessage,
    discord: discordErrrorMessage
  } = destinationErrorMessages;
  const handleResendEmailVerificationClick = useCallback21(() => {
    if ((emailErrorMessage == null ? void 0 : emailErrorMessage.type) !== "recoverableError")
      return;
    setIsEmailConfirmationSent(true);
    emailErrorMessage.onClick();
    setTimeout(() => setIsEmailConfirmationSent(false), 3e3);
  }, [emailErrorMessage]);
  const discordUserName = useMemo23(() => {
    const { username, discriminator } = discordTargetData || {};
    return discriminator === "0" ? username : `${username}#${discriminator}`;
  }, [discordTargetData]);
  return /* @__PURE__ */ React81.createElement(
    "div",
    {
      className: clsx42("NotifiUserInfoPanelContainer", classNames == null ? void 0 : classNames.container)
    },
    contactInfo.email.active && email ? /* @__PURE__ */ React81.createElement(
      "div",
      {
        className: clsx42(
          "NotifiUserInfoPanel__email",
          (_a = classNames == null ? void 0 : classNames.email) == null ? void 0 : _a.container
        )
      },
      /* @__PURE__ */ React81.createElement(
        "label",
        {
          className: clsx42(
            "NotifiUserInfoPanel__emailLabel",
            (_b = classNames == null ? void 0 : classNames.email) == null ? void 0 : _b.label
          )
        },
        email
      ),
      (emailErrorMessage == null ? void 0 : emailErrorMessage.type) === "recoverableError" ? /* @__PURE__ */ React81.createElement(
        DestinationErrorMessage,
        {
          classNames: {
            errorMessage: clsx42((_c = classNames == null ? void 0 : classNames.email) == null ? void 0 : _c.errorMessage, {
              DestinationError__emailConfirmationSent: isEmailConfirmationSent
            }),
            errorMessageContainer: (_d = classNames == null ? void 0 : classNames.email) == null ? void 0 : _d.errorMessageContainer,
            tooltipContent: (_e = classNames == null ? void 0 : classNames.email) == null ? void 0 : _e.tooltipContent
          },
          onClick: () => handleResendEmailVerificationClick(),
          errorMessage: isEmailConfirmationSent ? "Sent" : emailErrorMessage.message,
          tooltipContent: emailErrorMessage == null ? void 0 : emailErrorMessage.tooltip
        }
      ) : null
    ) : null,
    contactInfo.sms.active && phoneNumber ? /* @__PURE__ */ React81.createElement(
      "div",
      {
        className: clsx42(
          "NotifiUserInfoPanel__sms",
          (_f = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _f.container
        )
      },
      /* @__PURE__ */ React81.createElement(
        "label",
        {
          className: clsx42(
            "NotifiUserInfoPanel__smsLabel",
            (_g = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _g.label
          )
        },
        phoneNumber
      ),
      (phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.type) !== void 0 ? /* @__PURE__ */ React81.createElement(
        DestinationErrorMessage,
        {
          classNames: {
            errorMessage: (_h = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _h.errorMessage,
            errorMessageContainer: (_i = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _i.errorMessageContainer,
            tooltipContent: (_j = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _j.tooltipContent
          },
          errorMessage: phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.message,
          tooltipContent: phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.tooltip
        }
      ) : null
    ) : null,
    contactInfo.telegram.active && telegramId ? /* @__PURE__ */ React81.createElement(
      "div",
      {
        className: clsx42(
          "NotifiUserInfoPanel__telegram",
          (_k = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _k.container
        )
      },
      /* @__PURE__ */ React81.createElement(
        "label",
        {
          className: clsx42(
            "NotifiUserInfoPanel__telegramLabel",
            (_l = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _l.label
          )
        },
        telegramId
      ),
      (telegramErrorMessage == null ? void 0 : telegramErrorMessage.type) === "recoverableError" ? /* @__PURE__ */ React81.createElement(
        DestinationErrorMessage,
        {
          classNames: {
            errorMessage: clsx42(
              (_m = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _m.errorMessage,
              (_n = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _n.confirmationLink
            ),
            errorMessageContainer: (_o = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _o.errorMessageContainer,
            tooltipContent: (_p = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _p.tooltipContent
          },
          onClick: () => {
            telegramErrorMessage == null ? void 0 : telegramErrorMessage.onClick();
          },
          errorMessage: (_r = (_q = telegramErrorMessage == null ? void 0 : telegramErrorMessage.message) != null ? _q : confirmationLabels == null ? void 0 : confirmationLabels.telegram) != null ? _r : "",
          tooltipContent: (_s = destinationErrorMessages == null ? void 0 : destinationErrorMessages.telegram) == null ? void 0 : _s.tooltip
        }
      ) : null
    ) : null,
    ((_t = contactInfo == null ? void 0 : contactInfo.discord) == null ? void 0 : _t.active) && useDiscord ? /* @__PURE__ */ React81.createElement(
      "div",
      {
        className: clsx42(
          "NotifiUserInfoPanel__discord",
          (_u = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _u.container
        )
      },
      /* @__PURE__ */ React81.createElement(
        "label",
        {
          className: clsx42(
            "NotifiUserInfoPanel__discordLabel",
            (_v = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _v.label
          )
        },
        (discordTargetData == null ? void 0 : discordTargetData.isConfirmed) === true ? discordUserName : "Discord"
      ),
      (discordErrrorMessage == null ? void 0 : discordErrrorMessage.type) === "recoverableError" ? /* @__PURE__ */ React81.createElement(
        DestinationErrorMessage,
        {
          classNames: {
            errorMessage: clsx42(
              (_w = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _w.errorMessage,
              (_x = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _x.confirmationLink
            ),
            errorMessageContainer: (_y = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _y.errorMessageContainer,
            tooltipContent: (_z = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _z.tooltipContent
          },
          onClick: () => {
            discordErrrorMessage == null ? void 0 : discordErrrorMessage.onClick();
          },
          errorMessage: (_B = (_A = discordErrrorMessage == null ? void 0 : discordErrrorMessage.message) != null ? _A : confirmationLabels == null ? void 0 : confirmationLabels.telegram) != null ? _B : "",
          tooltipContent: (_C = destinationErrorMessages == null ? void 0 : destinationErrorMessages.discord) == null ? void 0 : _C.tooltip
        }
      ) : null
    ) : null,
    multiWallet !== void 0 && multiWallet.ownedWallets.length > 0 ? /* @__PURE__ */ React81.createElement(
      "div",
      {
        className: clsx42(
          "NotifiUserInfoPanel__myWallet",
          (_D = classNames == null ? void 0 : classNames.myWallet) == null ? void 0 : _D.container
        )
      },
      /* @__PURE__ */ React81.createElement(
        "label",
        {
          className: clsx42(
            "NotifiUserInfoPanel__myWalletLabel",
            (_E = classNames == null ? void 0 : classNames.myWallet) == null ? void 0 : _E.label
          )
        },
        "My wallets"
      ),
      /* @__PURE__ */ React81.createElement(
        "button",
        {
          className: clsx42(
            "NotifiUserInfoPanel__myWalletConfirmation",
            (_F = classNames == null ? void 0 : classNames.myWallet) == null ? void 0 : _F.confirmationLink
          ),
          onClick: () => {
            setCardView({ state: "verify" });
          }
        },
        "Edit"
      )
    ) : null,
    /* @__PURE__ */ React81.createElement(
      "button",
      {
        className: clsx42(
          "NotifiPreviewCard__editButton",
          classNames == null ? void 0 : classNames.EditButton
        ),
        onClick: handleEditClick
      },
      /* @__PURE__ */ React81.createElement(PenIcon, null),
      "Edit"
    )
  );
};

// lib/components/subscription/subscription-card-views/PreviewCard.tsx
var PreviewCard = ({
  classNames,
  data,
  inputDisabled,
  inputs = {}
}) => {
  const { isTargetsExist } = useDestinationState();
  return /* @__PURE__ */ React82.createElement(
    "div",
    {
      "data-cy": "previewCard",
      className: clsx43(
        "NotifiPreviewCard__container",
        classNames == null ? void 0 : classNames.NotifiPreviewCardContainer
      )
    },
    isTargetsExist ? /* @__PURE__ */ React82.createElement(
      UserInfoPanel,
      {
        classNames: classNames == null ? void 0 : classNames.UserInfoPanel,
        contactInfo: data.contactInfo
      }
    ) : null,
    /* @__PURE__ */ React82.createElement(
      "div",
      {
        className: clsx43(
          "NotifiPreviewCard__dividerLine",
          classNames == null ? void 0 : classNames.NotifiPreviewCardDividerLine
        )
      }
    ),
    /* @__PURE__ */ React82.createElement(
      "div",
      {
        className: clsx43(
          "NotifiPreviewCard__title",
          classNames == null ? void 0 : classNames.NotifiPreviewCardTitle
        )
      },
      "Select the alerts you want to receive:"
    ),
    /* @__PURE__ */ React82.createElement(
      AlertsPanel,
      {
        classNames: classNames == null ? void 0 : classNames.AlertsPanel,
        data,
        inputDisabled,
        inputs
      }
    )
  );
};

// lib/components/subscription/subscription-card-views/VerifyWalletView.tsx
import clsx45 from "clsx";
import React86, { useCallback as useCallback23, useMemo as useMemo25 } from "react";

// lib/components/WalletList/ConnectWalletRow.tsx
import { GqlError } from "@notifi-network/notifi-react-hooks";
import React83, { useCallback as useCallback22, useMemo as useMemo24, useState as useState25 } from "react";
var hasKey3 = (obj, key) => {
  return typeof obj === "object" && obj !== null && key in obj;
};
var findError = (errors, code) => {
  return errors.find(
    (err) => typeof err === "object" && err !== null && hasKey3(err, "extensions") && typeof err.extensions === "object" && err.extensions !== null && hasKey3(err.extensions, "code") && code === err.extensions.code
  );
};
var ConnectWalletRow = (_a) => {
  var _b = _a, {
    connectedWallets,
    displayName,
    disabled
  } = _b, walletParams = __objRest(_b, [
    "connectedWallets",
    "displayName",
    "disabled"
  ]);
  const { subscribeWallet } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const isConnected = useMemo24(() => {
    const key = "accountAddress";
    const address = hasKey3(walletParams, key) ? walletParams[key] : walletParams.walletPublicKey;
    return connectedWallets.some(
      (it) => it.address === address && it.walletBlockchain === walletParams.walletBlockchain
    );
  }, [connectedWallets, walletParams]);
  const shortenedAddress = useMemo24(() => {
    if (walletParams === null || walletParams.walletPublicKey === null) {
      return null;
    }
    return addressEllipsis(walletParams.walletPublicKey);
  }, [walletParams]);
  const [isLoading, setIsLoading] = useState25(false);
  const [isConnectedElsewhere, setIsConnectedElsewhere] = useState25(false);
  const connectWallet = useCallback22(
    async (technique) => {
      var _a2;
      setIsLoading(true);
      try {
        await subscribeWallet({
          walletParams,
          connectWalletConflictResolutionTechnique: technique
        });
        setIsConnectedElsewhere(false);
      } catch (e) {
        if (e instanceof GqlError) {
          const alreadyConnectedError = (_a2 = findError(
            e.errors,
            "ERROR_WALLETCONNECT_ALREADY_CONNECTED_TO_ANOTHER_ACCOUNT_AND_LAST"
          )) != null ? _a2 : findError(
            e.errors,
            "ERROR_WALLETCONNECT_ALREADY_CONNECTED_TO_ANOTHER_ACCOUNT"
          );
          if (alreadyConnectedError !== void 0) {
            setIsConnectedElsewhere(true);
          }
        }
        throw e;
      } finally {
        setIsLoading(false);
      }
    },
    [subscribeWallet, walletParams]
  );
  return /* @__PURE__ */ React83.createElement("div", { className: "ConnectWalletRow__container" }, /* @__PURE__ */ React83.createElement("div", { className: "ConnectWalletRow__topRow" }, /* @__PURE__ */ React83.createElement("p", { className: "ConnectWalletRow__publicKey" }, displayName != null ? displayName : shortenedAddress), isConnected || isConnectedElsewhere ? null : /* @__PURE__ */ React83.createElement(
    "button",
    {
      disabled: disabled || isLoading || isConnectedElsewhere,
      className: "ConnectWalletRow__button",
      onClick: () => {
        connectWallet("FAIL").catch((e) => {
          console.log("Error connecting wallet", e);
        });
      }
    },
    "Verify"
  ), isConnected ? /* @__PURE__ */ React83.createElement("p", { className: "ConnectWalletRow__verified" }, "Verified") : null), isConnectedElsewhere ? /* @__PURE__ */ React83.createElement(React83.Fragment, null, /* @__PURE__ */ React83.createElement("div", { className: "ConnectWalletRow__messageRow" }, "This wallet is already connected to another Notifi Hub account. If you continue, this wallet can only be used to access this account. You will lose access to the subscriptions in your other account."), /* @__PURE__ */ React83.createElement("div", { className: "ConnectWalletRow__bottomRow" }, /* @__PURE__ */ React83.createElement(
    "button",
    {
      disabled: disabled || isLoading,
      className: "ConnectWalletRow__connectAnywayButton",
      onClick: () => {
        connectWallet("DISCONNECT_AND_CLOSE_OLD_ACCOUNT").catch((e) => {
          console.log("Error connecting wallet", e);
        });
      }
    },
    "Verify anyway"
  ))) : null);
};

// lib/components/WalletList/WalletList.tsx
import React84 from "react";
var WalletListInternal = ({
  connectedWallets,
  ownedWallets,
  disabled
}) => {
  return /* @__PURE__ */ React84.createElement("ul", null, ownedWallets.map((wallet) => {
    return /* @__PURE__ */ React84.createElement(
      ConnectWalletRow,
      __spreadProps(__spreadValues({
        key: wallet.walletPublicKey
      }, wallet), {
        connectedWallets,
        disabled
      })
    );
  }));
};
var WalletList = () => {
  const {
    params: { multiWallet }
  } = useNotifiClientContext();
  const { connectedWallets, loading } = useNotifiSubscriptionContext();
  const owned = multiWallet == null ? void 0 : multiWallet.ownedWallets;
  if (owned === void 0 || owned.length === 0) {
    return null;
  }
  return /* @__PURE__ */ React84.createElement(
    WalletListInternal,
    {
      ownedWallets: owned,
      connectedWallets: connectedWallets.filter(
        (wallet) => !!wallet
      ),
      disabled: loading
    }
  );
};

// lib/components/common/NotifiCardButton.tsx
import clsx44 from "clsx";
import React85 from "react";
var NotifiCardButton = ({
  buttonText,
  classNames,
  disabled,
  onClick
}) => {
  return /* @__PURE__ */ React85.createElement(
    "button",
    {
      className: clsx44("NotifiCardButton__button", classNames == null ? void 0 : classNames.button),
      disabled,
      onClick
    },
    /* @__PURE__ */ React85.createElement("span", { className: clsx44("NotifiCardButtonn__label", classNames == null ? void 0 : classNames.label) }, buttonText)
  );
};
var NotifiCardButton_default = NotifiCardButton;

// lib/components/subscription/subscription-card-views/VerifyWalletView.tsx
var VerifyWalletView = ({
  classNames,
  buttonText,
  data,
  inputs
}) => {
  const {
    cardView,
    setCardView,
    loading,
    setLoading,
    connectedWallets,
    useDiscord
  } = useNotifiSubscriptionContext();
  const {
    formState: { phoneNumber, telegram: telegramId, email }
  } = useNotifiForm();
  const { subscribe, updateWallets } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const targetGroup = useMemo25(
    () => ({
      name: "Default",
      emailAddress: email === "" ? void 0 : email,
      phoneNumber: isValidPhoneNumber2(phoneNumber) ? phoneNumber : void 0,
      telegramId: telegramId === "" ? void 0 : formatTelegramForSubscription(telegramId),
      discordId: useDiscord ? "Default" : void 0
    }),
    [email, phoneNumber, telegramId, useDiscord]
  );
  const subscribeAlerts = useCallback23(
    async (eventTypes, inputs2) => {
      if (isUsingFrontendClient) {
        await frontendClient.ensureTargetGroup(targetGroup);
        return subscribeAlertsByFrontendClient(
          frontendClient,
          eventTypes,
          inputs2
        );
      }
      return subscribe(
        createConfigurations(data.eventTypes, inputs2, connectedWallets)
      );
    },
    [
      isUsingFrontendClient,
      frontendClient,
      email,
      phoneNumber,
      telegramId,
      useDiscord,
      subscribe
    ]
  );
  const renewWallets = useCallback23(async () => {
    if (isUsingFrontendClient) {
      return frontendClient.updateWallets();
    }
    return updateWallets();
  }, [isUsingFrontendClient, frontendClient, updateWallets]);
  const onClick = useCallback23(async () => {
    if (cardView.state === "verifyonboarding") {
      setLoading(true);
      try {
        const subEvents = data.eventTypes.filter((event) => {
          return event.optOutAtSignup ? false : true;
        });
        await subscribeAlerts(subEvents, inputs);
      } finally {
        setLoading(false);
      }
    } else {
      setLoading(true);
      try {
        await renewWallets();
      } finally {
        setLoading(false);
      }
    }
    setCardView({ state: "preview" });
  }, [setLoading, data, inputs, connectedWallets, subscribe, renewWallets]);
  return /* @__PURE__ */ React86.createElement(
    "div",
    {
      className: clsx45(
        "NotifiVerifyContainer",
        classNames == null ? void 0 : classNames.NotifiVerifyContainer
      )
    },
    /* @__PURE__ */ React86.createElement(WalletList, null),
    /* @__PURE__ */ React86.createElement(
      NotifiCardButton_default,
      {
        buttonText,
        disabled: loading,
        onClick
      }
    )
  );
};
var VerifyWalletView_default = VerifyWalletView;

// lib/components/subscription/SubscriptionCardV1.tsx
var SubscriptionCardV1 = ({
  classNames,
  copy,
  data,
  inputDisabled,
  inputs,
  inputLabels,
  inputSeparators,
  onClose
}) => {
  var _a, _b;
  const allowedCountryCodes = [...data.contactInfo.sms.supportedCountryCodes];
  const {
    cardView,
    email,
    phoneNumber,
    telegramId,
    setCardView,
    ftuStage,
    syncFtuStage,
    updateFtuStage,
    loading,
    setLoading
  } = useNotifiSubscriptionContext();
  const { demoPreview } = useNotifiDemoPreviewContext();
  const {
    setEmail,
    setTelegram,
    setPhoneNumber,
    setEmailErrorMessage,
    setTelegramErrorMessage,
    setPhoneNumberErrorMessage
  } = useNotifiForm();
  const { isAuthenticated, isTokenExpired } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const { isClientTokenExpired, isClientAuthenticated } = useMemo26(() => {
    var _a2, _b2;
    let isClientTokenExpired2 = false;
    let isClientAuthenticated2 = false;
    if (isUsingFrontendClient) {
      isClientTokenExpired2 = ((_a2 = frontendClient.userState) == null ? void 0 : _a2.status) === "expired";
      isClientAuthenticated2 = ((_b2 = frontendClient.userState) == null ? void 0 : _b2.status) === "authenticated";
    } else {
      isClientTokenExpired2 = isTokenExpired;
      isClientAuthenticated2 = isAuthenticated;
    }
    return { isClientTokenExpired: isClientTokenExpired2, isClientAuthenticated: isClientAuthenticated2 };
  }, [
    (_a = frontendClient.userState) == null ? void 0 : _a.status,
    isTokenExpired,
    isAuthenticated,
    isUsingFrontendClient
  ]);
  const { unverifiedDestinations, isTargetsExist } = useDestinationState();
  const [selectedAlertEntry, setAlertEntry] = useState26(void 0);
  let view = null;
  const resetFormState = useCallback24(() => {
    setEmail(email);
    setPhoneNumber(phoneNumber);
    setTelegram(telegramId);
    setEmailErrorMessage("");
    setTelegramErrorMessage("");
    setPhoneNumberErrorMessage("");
  }, [email, phoneNumber, telegramId]);
  useEffect20(() => {
    setCardView(() => {
      if (demoPreview) {
        return {
          state: demoPreview.view,
          reason: demoPreview.view === "error" ? "test example reason" : void 0
        };
      }
      if (isClientTokenExpired) {
        return { state: "expired" };
      }
      if (!isClientAuthenticated) {
        return { state: "signup" };
      }
      setLoading(true);
      syncFtuStage(data.isContactInfoRequired).catch((e) => {
        console.log(`Failed to syncFtuStage: ${e}`);
      }).finally(() => setLoading(false));
      return { state: "history" };
    });
  }, []);
  const rightIcon = useMemo26(() => {
    if (onClose === void 0) {
      return void 0;
    }
    return {
      name: "close",
      onClick: onClose
    };
  }, [onClose]);
  const useCustomTitles = ((_b = data == null ? void 0 : data.titles) == null ? void 0 : _b.active) === true;
  const expiredHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.expiredView) !== "" ? data == null ? void 0 : data.titles.expiredView : (_a2 = copy == null ? void 0 : copy.expiredHeader) != null ? _a2 : "Welcome Back";
  };
  const previewHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.previewView) !== "" ? data == null ? void 0 : data.titles.previewView : (_a2 = copy == null ? void 0 : copy.manageAlertsHeader) != null ? _a2 : "Manage Alerts";
  };
  const signUpHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.signupView) !== "" ? data == null ? void 0 : data.titles.signupView : (_a2 = copy == null ? void 0 : copy.signUpHeader) != null ? _a2 : "Get Notified";
  };
  const editHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.editView) !== "" ? data == null ? void 0 : data.titles.editView : (_a2 = copy == null ? void 0 : copy.editHeader) != null ? _a2 : "Update Settings";
  };
  const verifyOnboardingHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.verifyWalletsView) !== "" ? data == null ? void 0 : data.titles.verifyWalletsView : (_a2 = copy == null ? void 0 : copy.verifyWalletsHeader) != null ? _a2 : "Verify Wallets";
  };
  const historyView = () => {
    if (!useCustomTitles) {
      return selectedAlertEntry ? "Alert Details" : "Alert History";
    }
    return selectedAlertEntry ? (data == null ? void 0 : data.titles.alertDetailsView) || "Alert Details" : (data == null ? void 0 : data.titles.historyView) || "Alert History";
  };
  switch (cardView.state) {
    case "expired":
      view = /* @__PURE__ */ React87.createElement(React87.Fragment, null, /* @__PURE__ */ React87.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          rightIcon
        },
        /* @__PURE__ */ React87.createElement("h2", null, expiredHeader())
      ), /* @__PURE__ */ React87.createElement(
        "div",
        {
          className: clsx46("DividerLine expired", classNames == null ? void 0 : classNames.dividerLine)
        }
      ), /* @__PURE__ */ React87.createElement(ExpiredTokenView, { classNames: classNames == null ? void 0 : classNames.ExpiredTokenView }));
      break;
    case "preview":
      view = /* @__PURE__ */ React87.createElement(React87.Fragment, null, /* @__PURE__ */ React87.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          leftIcon: {
            name: "back",
            onClick: () => setCardView({ state: "history" })
          },
          rightIcon
        },
        /* @__PURE__ */ React87.createElement("h2", null, previewHeader())
      ), /* @__PURE__ */ React87.createElement(
        "div",
        {
          className: clsx46("DividerLine preview", classNames == null ? void 0 : classNames.dividerLine)
        }
      ), !isTargetsExist ? /* @__PURE__ */ React87.createElement(SignupBanner, { data, classNames: classNames == null ? void 0 : classNames.signupBanner }) : null, /* @__PURE__ */ React87.createElement(
        PreviewCard,
        {
          data,
          inputs,
          inputDisabled,
          classNames: classNames == null ? void 0 : classNames.PreviewCard
        }
      ));
      break;
    case "edit":
    case "signup":
      view = /* @__PURE__ */ React87.createElement(React87.Fragment, null, /* @__PURE__ */ React87.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          leftIcon: cardView.state === "signup" ? void 0 : {
            name: "back",
            onClick: () => {
              resetFormState();
              setCardView({ state: "preview" });
            }
          },
          rightIcon
        },
        cardView.state === "signup" ? /* @__PURE__ */ React87.createElement("h2", null, signUpHeader()) : /* @__PURE__ */ React87.createElement("h2", null, editHeader())
      ), /* @__PURE__ */ React87.createElement(
        "div",
        {
          className: clsx46("DividerLine signup", classNames == null ? void 0 : classNames.dividerLine)
        }
      ), /* @__PURE__ */ React87.createElement(
        EditCardView,
        {
          buttonText: cardView.state === "signup" ? "Next" : "Update",
          data,
          copy: copy == null ? void 0 : copy.EditCard,
          classNames: classNames == null ? void 0 : classNames.EditCard,
          inputDisabled,
          inputTextFields: inputLabels,
          inputSeparators,
          allowedCountryCodes,
          showPreview: cardView.state === "signup",
          inputs
        }
      ));
      break;
    case "verifyonboarding":
    case "verify":
      view = /* @__PURE__ */ React87.createElement(React87.Fragment, null, /* @__PURE__ */ React87.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          leftIcon: {
            name: "back",
            onClick: () => setCardView({
              state: cardView.state === "verifyonboarding" ? "signup" : "preview"
            })
          },
          rightIcon
        },
        /* @__PURE__ */ React87.createElement("h2", null, verifyOnboardingHeader())
      ), /* @__PURE__ */ React87.createElement(
        "div",
        {
          className: clsx46("DividerLine verify", classNames == null ? void 0 : classNames.dividerLine)
        }
      ), /* @__PURE__ */ React87.createElement(
        VerifyWalletView_default,
        {
          classNames: classNames == null ? void 0 : classNames.VerifyWalletView,
          data,
          inputs,
          buttonText: cardView.state === "verifyonboarding" ? "Next" : "Confirm"
        }
      ));
      break;
    case "history":
      view = /* @__PURE__ */ React87.createElement(React87.Fragment, null, ftuStage === 2 /* Alerts */ ? /* @__PURE__ */ React87.createElement(
        ConfigAlertModal,
        {
          classNames: classNames == null ? void 0 : classNames.ConfigAlertModal,
          updateFtuStage,
          data,
          inputDisabled,
          inputs
        }
      ) : null, ftuStage === 3 /* Destination */ ? /* @__PURE__ */ React87.createElement(
        ConfigDestinationModal,
        {
          classNames: classNames == null ? void 0 : classNames.ConfigDestinationModal,
          updateFtuStage,
          contactInfo: data.contactInfo
        }
      ) : null, /* @__PURE__ */ React87.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          leftIcon: selectedAlertEntry === void 0 ? {
            name: "settings",
            onClick: () => setCardView({ state: "preview" })
          } : {
            name: "back",
            onClick: () => setAlertEntry(void 0)
          },
          rightIcon
        },
        /* @__PURE__ */ React87.createElement("h2", null, historyView())
      ), /* @__PURE__ */ React87.createElement(
        "div",
        {
          className: clsx46(
            "NotifiSubscriptionCardV1__alertContainer",
            classNames == null ? void 0 : classNames.alertContainer
          )
        },
        /* @__PURE__ */ React87.createElement(
          "div",
          {
            className: clsx46("DividerLine history", classNames == null ? void 0 : classNames.dividerLine)
          }
        ),
        unverifiedDestinations.length > 0 ? /* @__PURE__ */ React87.createElement(
          VerifyBanner,
          {
            classNames: classNames == null ? void 0 : classNames.verifyBanner,
            unVerifiedDestinations: unverifiedDestinations
          }
        ) : null,
        !isTargetsExist ? /* @__PURE__ */ React87.createElement(SignupBanner, { data, classNames: classNames == null ? void 0 : classNames.signupBanner }) : null,
        selectedAlertEntry === void 0 ? null : /* @__PURE__ */ React87.createElement(
          AlertDetailsCard,
          {
            notificationEntry: selectedAlertEntry,
            classNames: classNames == null ? void 0 : classNames.AlertDetailsCard
          }
        ),
        /* @__PURE__ */ React87.createElement(
          AlertHistoryView,
          {
            classNames: classNames == null ? void 0 : classNames.AlertHistoryView,
            copy: copy == null ? void 0 : copy.AlertHistory,
            isHidden: selectedAlertEntry !== void 0,
            setAlertEntry,
            data
          }
        )
      ));
      break;
    case "error":
      view = /* @__PURE__ */ React87.createElement(ErrorStateCard, { reason: cardView.reason });
      break;
    default:
      view = /* @__PURE__ */ React87.createElement("div", null, "Not supported view");
  }
  return /* @__PURE__ */ React87.createElement(React87.Fragment, null, " ", loading ? /* @__PURE__ */ React87.createElement(LoadingStateCard, null) : view);
};

// lib/components/subscription/FetchedStateCard.tsx
var FetchedStateCard = ({
  inputDisabled,
  classNames,
  copy,
  card,
  inputs,
  inputLabels,
  inputSeparators,
  onClose
}) => {
  let contents = /* @__PURE__ */ React88.createElement(SubscriptionCardUnsupported, null);
  switch (card.data.version) {
    case "v1":
      contents = /* @__PURE__ */ React88.createElement(
        SubscriptionCardV1,
        {
          classNames: classNames == null ? void 0 : classNames.SubscriptionCardV1,
          copy: copy == null ? void 0 : copy.SubscriptionCardV1,
          data: card.data,
          inputs,
          inputDisabled,
          inputLabels,
          inputSeparators,
          onClose
        }
      );
  }
  return /* @__PURE__ */ React88.createElement(React88.Fragment, null, contents);
};

// lib/components/subscription/NotifiSubscriptionCard.tsx
import clsx47 from "clsx";
import React89, { useEffect as useEffect21, useMemo as useMemo27 } from "react";
var NotifiSubscriptionCard = ({
  classNames,
  copy,
  cardId,
  darkMode,
  inputLabels,
  inputs = {},
  inputSeparators,
  disclosureCopy,
  children,
  loadingRingColor,
  loadingSpinnerSize,
  onClose
}) => {
  var _a;
  const { isInitialized, reload, isAuthenticated } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const { isClientInitialized, isClientAuthenticated } = useMemo27(() => {
    var _a2;
    return {
      isClientInitialized: isUsingFrontendClient ? !!frontendClient.userState : isInitialized,
      isClientAuthenticated: isUsingFrontendClient ? ((_a2 = frontendClient.userState) == null ? void 0 : _a2.status) === "authenticated" : isAuthenticated
    };
  }, [
    isUsingFrontendClient,
    isInitialized,
    (_a = frontendClient.userState) == null ? void 0 : _a.status,
    isAuthenticated
  ]);
  const { loading, render } = useNotifiSubscriptionContext();
  const inputDisabled = loading || !isClientInitialized;
  const card = useSubscriptionCard({
    id: cardId,
    type: "SUBSCRIPTION_CARD"
  });
  let contents = null;
  useEffect21(() => {
    const handler = () => {
      if (!isClientInitialized || !isClientAuthenticated) {
        return;
      }
      if (isUsingFrontendClient) {
        return frontendClient.fetchData().then(render);
      }
      reload();
    };
    window.addEventListener("focus", handler);
    return () => {
      window.removeEventListener("focus", handler);
    };
  }, [
    isClientInitialized,
    isAuthenticated,
    isClientAuthenticated,
    isUsingFrontendClient,
    frontendClient
  ]);
  switch (card.state) {
    case "loading":
      contents = /* @__PURE__ */ React89.createElement(
        LoadingStateCard,
        {
          copy: copy == null ? void 0 : copy.LoadingStateCard,
          spinnerSize: loadingSpinnerSize,
          ringColor: loadingRingColor,
          classNames: classNames == null ? void 0 : classNames.LoadingStateCard,
          onClose
        }
      );
      break;
    case "error":
      contents = /* @__PURE__ */ React89.createElement(
        ErrorStateCard,
        {
          copy: copy == null ? void 0 : copy.ErrorStateCard,
          classNames: classNames == null ? void 0 : classNames.ErrorStateCard,
          reason: card.reason,
          onClose
        }
      );
      break;
    case "fetched":
      contents = /* @__PURE__ */ React89.createElement(
        FetchedStateCard,
        {
          classNames: classNames == null ? void 0 : classNames.FetchedStateCard,
          copy: copy == null ? void 0 : copy.FetchedStateCard,
          card,
          inputs,
          inputDisabled,
          inputLabels,
          inputSeparators,
          onClose
        }
      );
      break;
  }
  return /* @__PURE__ */ React89.createElement(
    "div",
    {
      className: clsx47(
        darkMode ? "notifi__dark" : "notifi__light",
        "NotifiSubscriptionCard__container",
        classNames == null ? void 0 : classNames.container
      ),
      "data-cy": "notifiSubscriptionCardContainer"
    },
    children,
    contents,
    /* @__PURE__ */ React89.createElement(
      NotifiFooter,
      {
        classNames: classNames == null ? void 0 : classNames.NotifiFooter,
        copy: { disclosure: disclosureCopy }
      }
    )
  );
};

// lib/components/intercom/ChatMessageDate.tsx
import clsx48 from "clsx";
import React90 from "react";

// lib/utils/datetimeUtils.ts
import { format as format2, parseISO as parseISO2 } from "date-fns";
var sortByDate = (getDate, direction) => {
  return (a, b) => {
    const aDate = getDate(a);
    const bDate = getDate(b);
    switch (direction) {
      case "ASC":
        return aDate.getTime() - bDate.getTime();
      case "DESC":
        return bDate.getTime() - aDate.getTime();
    }
  };
};
var formatConversationDateTimestamp = (date) => {
  try {
    const parsedDate = parseISO2(date);
    const month = parsedDate.toLocaleString("default", { month: "short" });
    const day = format2(parsedDate, "d");
    return `${month} ${day}`;
  } catch (e) {
    return "";
  }
};
var formatHourTimestamp = (date) => {
  const parsedDate = parseISO2(date);
  return format2(parsedDate, "H:mm");
};
var formatConversationStartTimestamp = (date) => {
  try {
    const parsedDate = parseISO2(date);
    const month = parsedDate.toLocaleString("default", { month: "short" });
    const day = format2(parsedDate, "d");
    const finalTimestamp = isToday2(parsedDate) ? "Today" : `${month} ${day}`;
    return finalTimestamp;
  } catch (e) {
    return "";
  }
};
var isToday2 = (date) => {
  const today = /* @__PURE__ */ new Date();
  return date.getDate() == today.getDate() && date.getMonth() == today.getMonth() && date.getFullYear() == today.getFullYear();
};

// lib/components/intercom/ChatMessageDate.tsx
var ChatMessageDate = ({
  classNames,
  createdDate,
  isStartDate = true
}) => {
  return /* @__PURE__ */ React90.createElement(
    "div",
    {
      className: clsx48(
        "NotifiIntercomChatMessageDate__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React90.createElement(
      "div",
      {
        className: clsx48(
          "NotifiIntercomChatMessageDate__body",
          classNames == null ? void 0 : classNames.body
        )
      },
      /* @__PURE__ */ React90.createElement(
        "div",
        {
          className: clsx48(
            "NotifiIntercomChatMessageDate__content",
            classNames == null ? void 0 : classNames.content
          )
        },
        isStartDate ? formatConversationStartTimestamp(createdDate) : formatConversationDateTimestamp(createdDate)
      )
    )
  );
};

// lib/components/intercom/ChatMessageSection.tsx
import React95 from "react";
import { Virtuoso as Virtuoso2 } from "react-virtuoso";

// lib/hooks/useIntercomChat.ts
import { useCallback as useCallback25, useEffect as useEffect22, useMemo as useMemo28, useState as useState27 } from "react";
var MESSAGES_NUMBER = 5;
var useIntercomChat = ({
  conversationId,
  userId
}) => {
  const [chatMessages, setChatMessages] = useState27([]);
  const [endCursor, setEndCursor] = useState27();
  const [hasNextPage, setHasNextPage] = useState27(null);
  const [isLoading, setIsLoading] = useState27(false);
  const [atTop, setAtTop] = useState27(false);
  const [visibleRange, setVisibleRange] = useState27({
    startIndex: 0,
    endIndex: 0
  });
  const [isScrolling, setIsScrolling] = useState27();
  const { client } = useNotifiClientContext();
  useEffect22(() => {
    const intervalId = setInterval(function() {
      client.getConversationMessages({
        first: 50,
        getConversationMessagesInput: { conversationId }
      }).then((response) => {
        if (Array.isArray(response.nodes)) {
          const nodes = response.nodes;
          const chatMessageIds = new Set(
            chatMessages.map((message) => message.id)
          );
          const dedupeNewMessages = nodes.filter(
            (node) => chatMessageIds.has(node.id) === false
          );
          const dedupeMessages = [...dedupeNewMessages, ...chatMessages];
          const sortedMessages = dedupeMessages.sort(
            sortByDate((message) => new Date(message.createdDate), "DESC")
          );
          setChatMessages([...sortedMessages]);
        }
      });
    }, 5e3);
    return () => clearInterval(intervalId);
  }, [chatMessages]);
  const getConversationMessages = useCallback25(
    (first = MESSAGES_NUMBER) => {
      setIsLoading(true);
      if (conversationId) {
        client.getConversationMessages({
          first,
          after: endCursor,
          getConversationMessagesInput: { conversationId }
        }).then((response) => {
          if (Array.isArray(response.nodes)) {
            setChatMessages([...chatMessages, ...response.nodes]);
          }
          if (response.pageInfo) {
            setEndCursor(response.pageInfo.endCursor);
            setHasNextPage(response.pageInfo.hasNextPage);
          }
          setIsLoading(false);
        });
      }
    },
    [conversationId, endCursor, chatMessages]
  );
  useEffect22(() => {
    getConversationMessages();
  }, []);
  useEffect22(() => {
    if (hasNextPage && atTop && isScrolling && visibleRange.startIndex === 0) {
      getConversationMessages();
    }
  }, [
    getConversationMessages,
    hasNextPage,
    atTop,
    isScrolling,
    visibleRange.startIndex
  ]);
  const conversation = useMemo28(() => {
    var _a, _b;
    const messageGroups = [];
    let messages = [];
    chatMessages == null ? void 0 : chatMessages.forEach((message, index) => {
      const nextMessage = chatMessages[index + 1];
      const isSameUserId = (message == null ? void 0 : message.userId) === (nextMessage == null ? void 0 : nextMessage.userId);
      const isSameDate = formatConversationDateTimestamp(message == null ? void 0 : message.createdDate) === formatConversationDateTimestamp(nextMessage == null ? void 0 : nextMessage.createdDate);
      messages.unshift(message);
      if (!isSameUserId || !isSameDate) {
        messageGroups.unshift(messages);
        messages = [];
      }
    });
    const feed = messageGroups.map((messageGroup, index) => {
      const firstMessage = messageGroup[0];
      const isSameDate = () => {
        if (messageGroups.length === 1 && index === 0) {
          return false;
        } else if (index >= 1) {
          const prevMessageGroup = messageGroups[index - 1];
          const prevGroupFirstMessage = prevMessageGroup[0];
          return formatConversationDateTimestamp(firstMessage == null ? void 0 : firstMessage.createdDate) === formatConversationDateTimestamp(prevGroupFirstMessage == null ? void 0 : prevGroupFirstMessage.createdDate);
        }
      };
      return {
        isSameDate: isSameDate(),
        direction: (firstMessage == null ? void 0 : firstMessage.userId) === userId ? "OUTGOING" : "INCOMING",
        id: firstMessage == null ? void 0 : firstMessage.id,
        messages: messageGroup,
        timestamp: firstMessage == null ? void 0 : firstMessage.createdDate,
        type: "MESSAGES_BLOCK"
      };
    });
    return {
      feed,
      createdDate: (_b = (_a = chatMessages == null ? void 0 : chatMessages[chatMessages.length - 1]) == null ? void 0 : _a.createdDate) != null ? _b : (/* @__PURE__ */ new Date()).toISOString(),
      lastMessage: chatMessages == null ? void 0 : chatMessages[0]
    };
  }, [chatMessages, conversationId]);
  const sendConversationMessages = useCallback25(
    (message) => {
      if (message === "") {
        return;
      } else {
        client.sendConversationMessages({
          sendConversationMessageInput: {
            conversationId,
            message
          }
        }).then((response) => {
          setChatMessages([response, ...chatMessages]);
        });
      }
    },
    [conversationId, chatMessages]
  );
  return {
    conversation,
    getConversationMessages,
    setIsScrolling,
    setVisibleRange,
    setAtTop,
    hasNextPage,
    isLoading,
    sendConversationMessages
  };
};

// lib/components/intercom/ChatWindowIntroSection.tsx
import clsx49 from "clsx";
import React91 from "react";
var ChatWindowIntroSection = ({
  classNames,
  startDate,
  children,
  inVirtualContainerStyle,
  chatIntroQuestion
}) => {
  return /* @__PURE__ */ React91.createElement(
    "div",
    {
      className: clsx49(
        "NotifiIntercomChatMessageSection__container",
        inVirtualContainerStyle,
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React91.createElement(ChatMessageDate, { classNames: classNames == null ? void 0 : classNames.date, createdDate: startDate }),
    /* @__PURE__ */ React91.createElement(
      "div",
      {
        className: clsx49(
          "NotifiIntercomChatMessageSectionIntro__content",
          classNames == null ? void 0 : classNames.content
        )
      },
      chatIntroQuestion
    ),
    children
  );
};

// lib/components/intercom/MessageList.tsx
import clsx51 from "clsx";
import React93 from "react";

// lib/components/intercom/MessageGroup.tsx
import clsx50 from "clsx";
import React92 from "react";
var MessageGroup = ({
  classNames,
  messages,
  direction
}) => {
  const isIncoming = direction === "INCOMING";
  return /* @__PURE__ */ React92.createElement(
    "div",
    {
      className: clsx50(
        isIncoming ? "NotifiIntercomChatIncomingMessageGroup__container" : "NotifiIntercomChatOutgoingMessageGroup__container",
        classNames == null ? void 0 : classNames.messageGroupContainer
      )
    },
    messages.map((message, index) => {
      var _a;
      return /* @__PURE__ */ React92.createElement(
        "div",
        {
          className: clsx50(
            isIncoming ? "NotifiIntercomChatIncomingMessage__container" : "NotifiIntercomChatOutgoingMessage__container",
            classNames == null ? void 0 : classNames.messageContainer
          ),
          key: index
        },
        /* @__PURE__ */ React92.createElement(
          "div",
          {
            key: index,
            className: clsx50(
              isIncoming ? "NotifiIntercomChatIncomingMessage__body" : "NotifiIntercomChatOutgoingMessage__body",
              classNames == null ? void 0 : classNames.messageBody
            )
          },
          isIncoming && index === 0 ? /* @__PURE__ */ React92.createElement(
            "div",
            {
              className: clsx50(
                "NotifiIntercomChatOutgoingMessage__sender",
                classNames == null ? void 0 : classNames.sender
              )
            },
            (_a = message.conversationParticipant) == null ? void 0 : _a.resolvedName
          ) : null,
          /* @__PURE__ */ React92.createElement("div", { key: index }, message.message),
          /* @__PURE__ */ React92.createElement(
            "div",
            {
              className: clsx50(
                "NotifiIntercomChatOutgoingMessage__timeStamp",
                classNames == null ? void 0 : classNames.timeStamp
              )
            },
            formatHourTimestamp(message.createdDate)
          )
        )
      );
    })
  );
};

// lib/components/intercom/MessageList.tsx
var MessageList = ({
  classNames,
  feed
}) => {
  var _a;
  const isIncoming = feed.direction === "INCOMING";
  const participantProfile = (_a = feed.messages[0].conversationParticipant) == null ? void 0 : _a.profile;
  return /* @__PURE__ */ React93.createElement(
    "div",
    {
      className: clsx51(
        "NotifiIntercomChatMessageList__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    isIncoming ? /* @__PURE__ */ React93.createElement(
      "div",
      {
        className: clsx51(
          "NotifiIntercomChatMessageList__groupContainer",
          classNames == null ? void 0 : classNames.container
        )
      },
      /* @__PURE__ */ React93.createElement(
        "img",
        {
          src: (participantProfile == null ? void 0 : participantProfile.avatarDataType) === "URL" ? participantProfile.avatarData : "",
          onError: (e) => {
            const img = e.target;
            img.style.display = "none";
          },
          className: clsx51(
            "NotifiIntercomChatMessage__avatar",
            classNames == null ? void 0 : classNames.avatar
          )
        }
      ),
      /* @__PURE__ */ React93.createElement(
        MessageGroup,
        {
          classNames: classNames == null ? void 0 : classNames.messageGroup,
          messages: feed.messages,
          direction: feed.direction
        }
      )
    ) : /* @__PURE__ */ React93.createElement(React93.Fragment, null, /* @__PURE__ */ React93.createElement(
      MessageGroup,
      {
        classNames: classNames == null ? void 0 : classNames.messageGroup,
        messages: feed.messages,
        direction: feed.direction
      }
    ))
  );
};

// lib/components/intercom/SendMessageSection.tsx
import clsx52 from "clsx";
import React94, { useCallback as useCallback26, useState as useState28 } from "react";
var SendMessageSection = ({
  classNames,
  sendConversationMessages
}) => {
  const [sendMessage, setSendMessage] = useState28(void 0);
  const disabled = (sendMessage == null ? void 0 : sendMessage.trim().length) === 0 || sendMessage === void 0;
  const handleSend = () => {
    if (sendMessage) {
      sendConversationMessages(sendMessage);
      setSendMessage("");
    }
  };
  const handleKeypressUp = useCallback26(
    (event) => {
      if (event.key === "Enter" && !event.shiftKey && !disabled) {
        handleSend();
        event.preventDefault();
      }
    },
    [handleSend]
  );
  return /* @__PURE__ */ React94.createElement(
    "div",
    {
      className: clsx52(
        "NotifiIntercomSendMessageSection__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    /* @__PURE__ */ React94.createElement(
      "textarea",
      {
        onKeyUp: (e) => handleKeypressUp(e),
        className: clsx52(
          "NotifiIntercomSendMessageSection__textarea",
          classNames == null ? void 0 : classNames.textarea
        ),
        value: sendMessage,
        onChange: (e) => {
          var _a;
          setSendMessage((_a = e.target.value) != null ? _a : "");
        },
        placeholder: "Write a message..."
      }
    ),
    /* @__PURE__ */ React94.createElement(
      "button",
      {
        disabled,
        onClick: handleSend,
        className: clsx52(
          "NotifiIntercomSendMessageSection__button",
          classNames == null ? void 0 : classNames.button
        )
      },
      "Send"
    )
  );
};

// lib/components/intercom/ChatMessageSection.tsx
var ChatMessageSection = ({
  classNames,
  chatIntroQuestion
}) => {
  const { conversationId, userId } = useNotifiSubscriptionContext();
  const {
    conversation,
    setIsScrolling,
    setVisibleRange,
    setAtTop,
    isLoading,
    hasNextPage,
    sendConversationMessages
  } = useIntercomChat({
    conversationId,
    userId
  });
  return /* @__PURE__ */ React95.createElement(React95.Fragment, null, conversation.feed.length === 0 ? /* @__PURE__ */ React95.createElement(
    ChatWindowIntroSection,
    {
      chatIntroQuestion,
      classNames: classNames == null ? void 0 : classNames.chatWindowIntro,
      startDate: conversation.createdDate
    }
  ) : /* @__PURE__ */ React95.createElement(
    Virtuoso2,
    {
      atTopStateChange: setAtTop,
      className: "virtual-container",
      data: conversation.feed,
      followOutput: "auto",
      isScrolling: setIsScrolling,
      rangeChanged: setVisibleRange,
      itemContent: (index, feed) => {
        const isFirstIndexOnLastPage = index === 0 && !hasNextPage;
        return /* @__PURE__ */ React95.createElement("div", { key: index }, isLoading ? /* @__PURE__ */ React95.createElement(
          "div",
          {
            style: {
              display: "flex",
              justifyContent: "center",
              padding: "10px"
            }
          },
          "Loading..."
        ) : null, isFirstIndexOnLastPage && /* @__PURE__ */ React95.createElement(
          ChatWindowIntroSection,
          {
            classNames: classNames == null ? void 0 : classNames.chatWindowIntro,
            startDate: conversation.createdDate,
            chatIntroQuestion,
            inVirtualContainerStyle: "ChatWindowIntro__virtualContainer"
          }
        ), index != 0 && !feed.isSameDate && /* @__PURE__ */ React95.createElement(
          ChatMessageDate,
          {
            classNames: classNames == null ? void 0 : classNames.date,
            createdDate: feed.timestamp,
            isStartDate: false
          }
        ), /* @__PURE__ */ React95.createElement(MessageList, { classNames: classNames == null ? void 0 : classNames.messageList, feed }));
      },
      style: {
        flexGrow: 1,
        scrollbarGutter: "stable",
        overflowY: "scroll"
      }
    }
  ), /* @__PURE__ */ React95.createElement(
    SendMessageSection,
    {
      classNames: classNames == null ? void 0 : classNames.sendMessageSection,
      sendConversationMessages
    }
  ));
};

// lib/components/intercom/ChatWindowHeader.tsx
import clsx53 from "clsx";
import React97 from "react";

// lib/assets/ChatIcon.tsx
import React96 from "react";
var ChatIcon = (props) => {
  return /* @__PURE__ */ React96.createElement(
    "svg",
    __spreadValues({
      viewBox: "0 0 25 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    /* @__PURE__ */ React96.createElement(
      "path",
      {
        d: "M3.15311 3.40909C3.15311 2.07859 4.2317 1 5.5622 1H17.0455C18.376 1 19.4545 2.07859 19.4545 3.40909V6.81818C19.4545 8.14869 18.376 9.22727 17.0455 9.22727H4.96513C4.60464 9.22727 4.2455 9.27148 3.89577 9.35892L2.08876 9.81067C2.04981 9.82041 2.02716 9.81574 2.01212 9.8104C1.99287 9.80356 1.97002 9.78898 1.95023 9.76483C1.93043 9.74069 1.92062 9.71542 1.91769 9.6952C1.9154 9.67941 1.91526 9.65628 1.93245 9.62L2.72868 7.93906C3.00814 7.34909 3.15311 6.70441 3.15311 6.05159V3.40909Z",
        stroke: "currentColor",
        strokeWidth: "2"
      }
    ),
    /* @__PURE__ */ React96.createElement(
      "path",
      {
        d: "M20.9831 16.0454C20.9831 14.7149 19.9045 13.6364 18.574 13.6364H7.09077C5.76027 13.6364 4.68168 14.7149 4.68168 16.0454V19.4545C4.68168 20.785 5.76027 21.8636 7.09078 21.8636H19.1711C19.5316 21.8636 19.8907 21.9078 20.2405 21.9953L22.0475 22.447C22.0864 22.4568 22.1091 22.4521 22.1241 22.4467C22.1434 22.4399 22.1662 22.4253 22.186 22.4012C22.2058 22.377 22.2156 22.3518 22.2185 22.3316C22.2208 22.3158 22.221 22.2926 22.2038 22.2564L21.4075 20.5754C21.1281 19.9854 20.9831 19.3408 20.9831 18.6879V16.0454Z",
        stroke: "currentColor",
        strokeWidth: "2"
      }
    ),
    /* @__PURE__ */ React96.createElement("mask", { id: "path-3-inside-1_136_525", fill: "white" }, /* @__PURE__ */ React96.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M11.6362 17.75C11.6362 18.3776 12.1449 18.8864 12.7725 18.8864C13.4001 18.8864 13.9089 18.3776 13.9089 17.75C13.9089 17.1224 13.4001 16.6136 12.7725 16.6136C12.1449 16.6136 11.6362 17.1224 11.6362 17.75ZM16.1816 17.75C16.1816 18.3776 16.6904 18.8864 17.318 18.8864C17.9456 18.8864 18.4543 18.3776 18.4543 17.75C18.4543 17.1224 17.9456 16.6137 17.318 16.6137C16.6904 16.6137 16.1816 17.1224 16.1816 17.75ZM8.22709 18.8864C7.59949 18.8864 7.09073 18.3776 7.09073 17.75C7.09073 17.1224 7.59949 16.6136 8.22709 16.6136C8.85469 16.6136 9.36345 17.1224 9.36345 17.75C9.36345 18.3776 8.85469 18.8864 8.22709 18.8864Z"
      }
    )),
    /* @__PURE__ */ React96.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M11.6362 17.75C11.6362 18.3776 12.1449 18.8864 12.7725 18.8864C13.4001 18.8864 13.9089 18.3776 13.9089 17.75C13.9089 17.1224 13.4001 16.6136 12.7725 16.6136C12.1449 16.6136 11.6362 17.1224 11.6362 17.75ZM16.1816 17.75C16.1816 18.3776 16.6904 18.8864 17.318 18.8864C17.9456 18.8864 18.4543 18.3776 18.4543 17.75C18.4543 17.1224 17.9456 16.6137 17.318 16.6137C16.6904 16.6137 16.1816 17.1224 16.1816 17.75ZM8.22709 18.8864C7.59949 18.8864 7.09073 18.3776 7.09073 17.75C7.09073 17.1224 7.59949 16.6136 8.22709 16.6136C8.85469 16.6136 9.36345 17.1224 9.36345 17.75C9.36345 18.3776 8.85469 18.8864 8.22709 18.8864Z",
        fill: "currentColor"
      }
    ),
    /* @__PURE__ */ React96.createElement(
      "path",
      {
        d: "M12.7725 20.8864C11.0404 20.8864 9.63618 19.4822 9.63618 17.75H13.6362C13.6362 17.273 13.2495 16.8864 12.7725 16.8864V20.8864ZM15.9089 17.75C15.9089 19.4822 14.5047 20.8864 12.7725 20.8864V16.8864C12.2956 16.8864 11.9089 17.273 11.9089 17.75H15.9089ZM12.7725 14.6136C14.5047 14.6136 15.9089 16.0178 15.9089 17.75H11.9089C11.9089 18.227 12.2956 18.6136 12.7725 18.6136V14.6136ZM9.63618 17.75C9.63618 16.0178 11.0404 14.6136 12.7725 14.6136V18.6136C13.2495 18.6136 13.6362 18.227 13.6362 17.75H9.63618ZM17.318 20.8864C15.5858 20.8864 14.1816 19.4822 14.1816 17.75H18.1816C18.1816 17.273 17.795 16.8864 17.318 16.8864V20.8864ZM20.4543 17.75C20.4543 19.4822 19.0501 20.8864 17.318 20.8864V16.8864C16.841 16.8864 16.4543 17.273 16.4543 17.75H20.4543ZM17.318 14.6137C19.0501 14.6137 20.4543 16.0178 20.4543 17.75H16.4543C16.4543 18.227 16.841 18.6137 17.318 18.6137V14.6137ZM14.1816 17.75C14.1816 16.0178 15.5858 14.6137 17.318 14.6137V18.6137C17.795 18.6137 18.1816 18.227 18.1816 17.75H14.1816ZM9.09073 17.75C9.09073 17.273 8.70406 16.8864 8.22709 16.8864V20.8864C6.49492 20.8864 5.09073 19.4822 5.09073 17.75H9.09073ZM8.22709 18.6136C8.70406 18.6136 9.09073 18.227 9.09073 17.75H5.09073C5.09073 16.0178 6.49492 14.6136 8.22709 14.6136V18.6136ZM7.36345 17.75C7.36345 18.227 7.75012 18.6136 8.22709 18.6136V14.6136C9.95926 14.6136 11.3635 16.0178 11.3635 17.75H7.36345ZM8.22709 16.8864C7.75012 16.8864 7.36345 17.273 7.36345 17.75H11.3635C11.3635 19.4822 9.95926 20.8864 8.22709 20.8864V16.8864Z",
        fill: "currentColor",
        mask: "url(#path-3-inside-1_136_525)"
      }
    )
  );
};

// lib/components/intercom/ChatWindowHeader.tsx
var ChatWindowHeader = ({
  classNames,
  chatWindowHeaderContent
}) => {
  const { setIntercomCardView } = useNotifiSubscriptionContext();
  const handleClick = () => {
    setIntercomCardView({ state: "settingView" });
  };
  return /* @__PURE__ */ React97.createElement(
    "div",
    {
      className: clsx53("NotifiIntercomHeader__container", classNames == null ? void 0 : classNames.container)
    },
    /* @__PURE__ */ React97.createElement("div", { className: "NotifiIntercomHeader__leftContainer" }, /* @__PURE__ */ React97.createElement(ChatIcon, { width: 25, height: 24 }), /* @__PURE__ */ React97.createElement(
      "div",
      {
        className: clsx53("NotifiIntercomHeader__content", classNames == null ? void 0 : classNames.content)
      },
      chatWindowHeaderContent
    )),
    /* @__PURE__ */ React97.createElement(
      "div",
      {
        onClick: handleClick,
        className: "NotifiIntercomChatWindow__settingIcon"
      },
      /* @__PURE__ */ React97.createElement(SettingIcon, null)
    )
  );
};

// lib/components/intercom/IntercomCard.tsx
import clsx57 from "clsx";
import React102, { useCallback as useCallback27, useEffect as useEffect23, useMemo as useMemo29, useState as useState29 } from "react";

// lib/components/intercom/NotifiIntercomChatWindowContainer.tsx
import React98 from "react";
var NotifiIntercomChatWindowContainer = ({
  classNames,
  chatWindowHeaderContent,
  chatIntroQuestion
}) => {
  return /* @__PURE__ */ React98.createElement(React98.Fragment, null, /* @__PURE__ */ React98.createElement(
    ChatWindowHeader,
    {
      classNames: classNames == null ? void 0 : classNames.header,
      chatWindowHeaderContent
    }
  ), /* @__PURE__ */ React98.createElement(
    ChatMessageSection,
    {
      classNames: classNames == null ? void 0 : classNames.chatMessageSection,
      chatIntroQuestion
    }
  ));
};

// lib/components/intercom/NotifiIntercomFTUNotificationTargetSection.tsx
import clsx54 from "clsx";
import React99 from "react";
var NotifiIntercomFTUNotificationTargetSection = ({ data, inputSeparators, classNames, inputTextFields }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
  const allowedCountryCodes = [...data.contactInfo.sms.supportedCountryCodes];
  return /* @__PURE__ */ React99.createElement("div", { className: "NotifiSupportNotificationOption__container" }, data.contactInfo.email.active ? /* @__PURE__ */ React99.createElement(
    NotifiEmailInput,
    {
      disabled: false,
      classNames: classNames == null ? void 0 : classNames.NotifiEmailInput,
      copy: { label: (_a = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _a.email },
      intercomEmailInputContainerStyle: "NotifiIntercomEmailInput__container",
      intercomEmailInputStyle: "NotifiIntercomEmailInput__input",
      intercomView: true
    }
  ) : null, ((_b = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _b.content) ? /* @__PURE__ */ React99.createElement(
    "div",
    {
      className: clsx54(
        "NotifiInputSeparator__container",
        "NotifiIntercomInputSeparator__container",
        (_d = (_c = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _c.classNames) == null ? void 0 : _d.container
      )
    },
    /* @__PURE__ */ React99.createElement(
      "div",
      {
        className: clsx54(
          "NotifiInputSeparator__content",
          (_e = inputSeparators.emailSeparator.classNames) == null ? void 0 : _e.content
        )
      },
      (_f = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _f.content
    )
  ) : null, data.contactInfo.sms.active ? /* @__PURE__ */ React99.createElement(
    NotifiSmsInput,
    {
      disabled: false,
      classNames: classNames == null ? void 0 : classNames.NotifiSmsInput,
      allowedCountryCodes,
      copy: { label: (_g = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _g.sms },
      intercomSmsInputContainerStyle: "NotifiIntercomSmsInput__container",
      intercomSmsInputStyle: "NotifiIntercomSmsInput__input",
      intercomSmsDropdownContainerStyle: "NotifiIntercomSmsInput__dropdownContainer",
      intercomSmsDropdownSelectStyle: "NotifiIntercomSmsInput__dropdownSelect",
      intercomView: true
    }
  ) : null, ((_h = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _h.content) ? /* @__PURE__ */ React99.createElement(
    "div",
    {
      className: clsx54(
        "NotifiInputSeparator__container",
        "NotifiIntercomInputSeparator__container",
        (_j = (_i = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _i.classNames) == null ? void 0 : _j.container
      )
    },
    /* @__PURE__ */ React99.createElement(
      "div",
      {
        className: clsx54(
          "NotifiInputSeparator__content",
          (_k = inputSeparators.smsSeparator.classNames) == null ? void 0 : _k.content
        )
      },
      (_l = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _l.content
    )
  ) : null, data.contactInfo.telegram.active ? /* @__PURE__ */ React99.createElement(
    NotifiTelegramInput,
    {
      disabled: false,
      classNames: classNames == null ? void 0 : classNames.NotifiTelegramInput,
      copy: { label: (_m = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _m.telegram },
      intercomTelegramInputContainerStyle: "NotifiIntercomTelegramInput__container",
      intercomTelegramInputStyle: "NotifiIntercomTelegramInput__input",
      intercomView: true
    }
  ) : null);
};

// lib/components/intercom/NotifiStartChatButton.tsx
import clsx55 from "clsx";
import React100 from "react";
var NotifiStartChatButton = ({
  classNames,
  disabled,
  onClick
}) => {
  const { intercomCardView } = useNotifiSubscriptionContext();
  return /* @__PURE__ */ React100.createElement(
    "button",
    {
      disabled,
      className: clsx55("NotifiStartChatButton__button", classNames == null ? void 0 : classNames.button),
      onClick
    },
    /* @__PURE__ */ React100.createElement("span", { className: clsx55("NotifiStartChatButton__label", classNames == null ? void 0 : classNames.label) }, intercomCardView.state === "settingView" ? "Save Changes" : "Start Chatting")
  );
};

// lib/components/intercom/SettingHeader.tsx
import clsx56 from "clsx";
import React101 from "react";
var SettingHeader = ({ classNames }) => {
  const { setIntercomCardView } = useNotifiSubscriptionContext();
  const handleClick = () => {
    setIntercomCardView({ state: "chatWindowView" });
  };
  return /* @__PURE__ */ React101.createElement(
    "div",
    {
      className: clsx56("NotifiIntercomHeader__container", classNames == null ? void 0 : classNames.container)
    },
    /* @__PURE__ */ React101.createElement("div", { className: "NotifiIntercomHeader__leftContainer" }, /* @__PURE__ */ React101.createElement(
      "div",
      {
        onClick: handleClick,
        className: "NotifiIntercomSettingHeader__backArrow"
      },
      /* @__PURE__ */ React101.createElement(BackArrowIcon, null)
    ), /* @__PURE__ */ React101.createElement(
      "div",
      {
        className: clsx56("NotifiIntercomHeader__content", classNames == null ? void 0 : classNames.content)
      },
      "Settings"
    ))
  );
};

// lib/components/intercom/IntercomCard.tsx
var IntercomCard = ({
  classNames,
  inputLabels,
  inputs = {},
  inputSeparators,
  data
}) => {
  const [chatAlertErrorMessage, setChatAlertErrorMessage] = useState29("");
  const { instantSubscribe, isAuthenticated, isInitialized } = useNotifiSubscribe({
    targetGroupName: "Intercom"
  });
  const { client, isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const { isClientInitialized, isClientAuthenticated } = useMemo29(() => {
    var _a;
    return {
      isClientInitialized: isUsingFrontendClient ? !!frontendClient.userState : isInitialized,
      isClientAuthenticated: isUsingFrontendClient ? ((_a = frontendClient.userState) == null ? void 0 : _a.status) === "authenticated" : isAuthenticated
    };
  }, [isUsingFrontendClient, client, frontendClient]);
  const subscribeAlert = useCallback27(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: chatConfiguration(),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  useEffect23(() => {
    if (isClientAuthenticated && isClientInitialized && hasChanges === false) {
      checkForExistingTargetGroups();
    }
  }, [instantSubscribe, isClientAuthenticated, isClientInitialized]);
  const {
    alerts,
    intercomCardView,
    loading,
    setConversationId,
    setHasChatAlert,
    setIntercomCardView,
    setUserId
  } = useNotifiSubscriptionContext();
  const {
    formErrorMessages,
    formState,
    setEmail: setFormEmail,
    setTelegram: setFormTelegram,
    hasChanges
  } = useNotifiForm();
  const { email, phoneNumber, telegram: telegramId } = formState;
  const {
    email: emailErrorMessage,
    phoneNumber: smsErrorMessage,
    telegram: telegramErrorMessage
  } = formErrorMessages;
  const createSupportConversation = useCallback27(() => {
    if (isUsingFrontendClient) {
      return frontendClient.createSupportConversation(
        inputs
      ).then((result2) => {
        var _a;
        (_a = result2.createSupportConversation.participants) == null ? void 0 : _a.forEach(
          (participant) => {
            if ((participant == null ? void 0 : participant.conversationParticipantType) === "MEMBER") {
              setUserId(participant.profile.id);
            }
          }
        );
        setConversationId(result2.createSupportConversation.id);
        setIntercomCardView({
          state: "chatWindowView"
        });
      });
    }
    return client.createSupportConversation().then((result2) => {
      result2.participants.forEach((participant) => {
        if (participant.conversationParticipantType === "MEMBER") {
          setUserId(participant.profile.id);
        }
      });
      setConversationId(result2.id);
      setIntercomCardView({
        state: "chatWindowView"
      });
    });
  }, [inputs]);
  const checkForExistingTargetGroups = useCallback27(() => {
    var _a, _b, _c, _d, _e, _f;
    for (const alert of Object.values(alerts)) {
      if (!alert)
        continue;
      const { targetGroup } = alert;
      const confirmedEmailTarget = (_a = targetGroup.emailTargets) == null ? void 0 : _a.find(
        (email2) => (email2 == null ? void 0 : email2.isConfirmed) === true
      );
      if (confirmedEmailTarget == null ? void 0 : confirmedEmailTarget.emailAddress) {
        setFormEmail(confirmedEmailTarget.emailAddress);
      }
      const confirmedTelegramTarget = (_b = targetGroup.telegramTargets) == null ? void 0 : _b.find(
        (telegram) => (telegram == null ? void 0 : telegram.isConfirmed) === true
      );
      if (confirmedTelegramTarget == null ? void 0 : confirmedTelegramTarget.telegramId) {
        setFormTelegram(confirmedTelegramTarget == null ? void 0 : confirmedTelegramTarget.telegramId);
      }
      if (confirmedEmailTarget || confirmedTelegramTarget) {
        break;
      }
      const unconfirmedEmailTarget = (_c = targetGroup.emailTargets) == null ? void 0 : _c.find(
        (email2) => (email2 == null ? void 0 : email2.isConfirmed) === false
      );
      setFormEmail((_d = unconfirmedEmailTarget == null ? void 0 : unconfirmedEmailTarget.emailAddress) != null ? _d : "");
      const unconfirmedTelegramTarget = (_e = targetGroup.telegramTargets) == null ? void 0 : _e.find(
        (telegram) => (telegram == null ? void 0 : telegram.isConfirmed) === false
      );
      setFormTelegram((_f = unconfirmedTelegramTarget == null ? void 0 : unconfirmedTelegramTarget.telegramId) != null ? _f : "");
      if (unconfirmedEmailTarget || unconfirmedTelegramTarget) {
        break;
      }
    }
  }, [alerts]);
  const alertName = "NOTIFI_CHAT_MESSAGES";
  useEffect23(() => {
    if (loading || !isClientInitialized || intercomCardView.state === "settingView") {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setHasChatAlert(hasAlert);
    if (hasAlert) {
      createSupportConversation();
    } else {
      setIntercomCardView({
        state: "startChatView"
      });
    }
  }, [alerts, loading, isClientInitialized]);
  const hasErrors = emailErrorMessage !== "" || smsErrorMessage !== "" || telegramErrorMessage !== "";
  const disabled = email === "" && telegramId === "" && phoneNumber === "" || hasErrors;
  const labels = data.labels;
  const labelsValues = {};
  labels.forEach((label) => {
    labelsValues[label.type] = label.name;
  });
  const companySupportTitle = labelsValues.ChatFTUTitle || "Your Company Support";
  const companySupportSubtitle = labelsValues.ChatFTUSubTitle || "Start chatting with our team to get support. We\u2019re here for you 24/7!";
  const companySupportDescription = labelsValues.ChatFTUDescription || "Get notifications for your support request";
  const companyHeaderContent = labelsValues.ChatBannerTitle || "Company Support";
  const chatIntroQuestion = labelsValues.ChatIntroQuestion || "What can we help you with today?";
  const handleStartChatClick = async () => {
    if (loading) {
      return;
    }
    try {
      await subscribeAlert({
        eventType: {
          type: "createSupportConversation",
          name: alertName,
          sourceType: "NOTIFI_CHAT",
          filterType: "NOTIFI_CHAT_MESSAGES",
          alertFrequency: "THREE_MINUTES"
        },
        inputs
      });
      const result2 = await client.createSupportConversation();
      setConversationId(result2.id);
      result2.participants.forEach((participant) => {
        if (participant.conversationParticipantType === "MEMBER") {
          setUserId(participant.profile.id);
        }
      });
      setIntercomCardView({ state: "chatWindowView" });
    } catch (e) {
      setChatAlertErrorMessage("An error occurred, please try again.");
      setTimeout(() => {
        setChatAlertErrorMessage("");
      }, 5e3);
    }
  };
  let view = null;
  switch (intercomCardView.state) {
    case "startChatView":
      view = /* @__PURE__ */ React102.createElement(React102.Fragment, null, /* @__PURE__ */ React102.createElement("h1", { className: clsx57("NotifiIntercomCard__title", classNames == null ? void 0 : classNames.title) }, companySupportTitle), /* @__PURE__ */ React102.createElement(
        "div",
        {
          className: clsx57(
            "NotifiIntercomCard__subtitle1",
            classNames == null ? void 0 : classNames.subtitle1
          )
        },
        companySupportSubtitle
      ), /* @__PURE__ */ React102.createElement(
        "div",
        {
          className: clsx57(
            "NotifiIntercomCard__subtitle2",
            classNames == null ? void 0 : classNames.subtitle2
          )
        },
        companySupportDescription
      ), /* @__PURE__ */ React102.createElement(
        NotifiIntercomFTUNotificationTargetSection,
        {
          data,
          inputSeparators,
          inputTextFields: inputLabels,
          inputs
        }
      ), /* @__PURE__ */ React102.createElement(
        "label",
        {
          className: clsx57(
            "NotifiEmailInput__errorMessage",
            classNames == null ? void 0 : classNames.errorMessage
          )
        },
        chatAlertErrorMessage
      ), /* @__PURE__ */ React102.createElement(
        NotifiStartChatButton,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiStartChatButton,
          disabled,
          onClick: handleStartChatClick
        }
      ));
      break;
    case "chatWindowView":
      view = /* @__PURE__ */ React102.createElement(
        NotifiIntercomChatWindowContainer,
        {
          chatIntroQuestion,
          chatWindowHeaderContent: companyHeaderContent,
          classNames: classNames == null ? void 0 : classNames.NotifiIntercomChatWindowContainer
        }
      );
      break;
    case "settingView":
      view = /* @__PURE__ */ React102.createElement(React102.Fragment, null, /* @__PURE__ */ React102.createElement(SettingHeader, { classNames: classNames == null ? void 0 : classNames.NotifiIntercomSettingHeader }), /* @__PURE__ */ React102.createElement("div", { className: "NotifiIntercomCardSettingContent__container" }, /* @__PURE__ */ React102.createElement(
        "div",
        {
          className: clsx57(
            "NotifiIntercomCard__subtitle2",
            classNames == null ? void 0 : classNames.subtitle2
          )
        },
        companySupportDescription
      ), /* @__PURE__ */ React102.createElement(
        NotifiIntercomFTUNotificationTargetSection,
        {
          data,
          inputSeparators,
          inputTextFields: inputLabels,
          inputs
        }
      ), /* @__PURE__ */ React102.createElement(
        "label",
        {
          className: clsx57(
            "NotifiEmailInput__errorMessage",
            classNames == null ? void 0 : classNames.errorMessage
          )
        },
        chatAlertErrorMessage
      ), /* @__PURE__ */ React102.createElement(
        NotifiStartChatButton,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiStartChatButton,
          disabled,
          onClick: handleStartChatClick
        }
      )));
      break;
    case "loadingView":
      view = /* @__PURE__ */ React102.createElement(
        "div",
        {
          style: {
            display: "flex",
            justifyContent: "center"
          }
        },
        "Loading\u2026"
      );
      break;
  }
  return /* @__PURE__ */ React102.createElement(React102.Fragment, null, view);
};

// lib/components/intercom/NotifiIntercomCard.tsx
import React104 from "react";

// lib/components/intercom/NotifiIntercomCardContainer.tsx
import clsx58 from "clsx";
import React103 from "react";

// lib/hooks/useIntercomCard.ts
import { useEffect as useEffect24, useState as useState30 } from "react";
var useIntercomCard = (cardId) => {
  const [state, setState] = useState30({
    state: "loading"
  });
  const { client, isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  useEffect24(() => {
    setState({ state: "loading" });
    let card;
    (isUsingFrontendClient ? frontendClient : client).fetchSubscriptionCard({
      type: "INTERCOM_CARD",
      id: cardId
    }).then((result2) => {
      if ("dataJson" in result2) {
        if (!result2.dataJson) {
          return Promise.reject(new Error("Failed to fetch data"));
        }
        card = JSON.parse(result2.dataJson);
      } else if ("version" in result2) {
        card = result2;
      }
      if ((card == null ? void 0 : card.version) !== "IntercomV1") {
        return Promise.reject(new Error("Unsupported config format"));
      }
      setState({
        state: "fetched",
        data: card
      });
    }).catch((error) => {
      setState({
        state: "error",
        reason: error
      });
    });
  }, [cardId]);
  return state;
};

// lib/components/intercom/NotifiIntercomCardContainer.tsx
var NotifiIntercomCardContainer = ({
  classNames,
  darkMode,
  inputLabels,
  inputs = {},
  inputSeparators,
  children,
  cardId
}) => {
  let contents = null;
  const card = useIntercomCard(cardId);
  switch (card.state) {
    case "loading":
      contents = /* @__PURE__ */ React103.createElement(LoadingStateCard, { classNames: classNames == null ? void 0 : classNames.LoadingStateCard });
      break;
    case "error":
      contents = /* @__PURE__ */ React103.createElement(
        ErrorStateCard,
        {
          classNames: classNames == null ? void 0 : classNames.ErrorStateCard,
          reason: card.reason
        }
      );
      break;
    case "fetched":
      contents = /* @__PURE__ */ React103.createElement(
        IntercomCard,
        {
          data: card.data,
          inputs,
          inputLabels,
          inputSeparators,
          classNames
        }
      );
      break;
  }
  return /* @__PURE__ */ React103.createElement(
    "div",
    {
      className: clsx58(
        darkMode ? "notifi__dark" : "notifi__light",
        "NotifiIntercomCard__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    children,
    contents
  );
};

// lib/components/intercom/NotifiIntercomCard.tsx
var NotifiIntercomCard = (props) => {
  const { params } = useNotifiClientContext();
  return /* @__PURE__ */ React104.createElement(NotifiSubscriptionContextProvider, __spreadValues({}, params), /* @__PURE__ */ React104.createElement(NotifiFormProvider, null, /* @__PURE__ */ React104.createElement(NotifiIntercomCardContainer, __spreadValues({}, props))));
};
export {
  AlertHistoryView,
  AlertListPreview,
  AlertsPanel,
  ChatMessageDate,
  ChatMessageSection,
  ChatWindowHeader,
  ChatWindowIntroSection,
  EditCardView,
  EventTypeBroadcastRow,
  EventTypeCustomHealthCheckRow,
  EventTypeCustomToggleRow,
  EventTypeDirectPushRow,
  EventTypeFusionMultiThresholdRow,
  EventTypeHealthCheckRow,
  EventTypeLabelRow,
  EventTypePriceChangeRow,
  EventTypeTradingPairsRow,
  EventTypeUnsupportedRow,
  EventTypeWalletBalanceRow,
  FetchedStateCard,
  FtuStage,
  FusionMultiThresholdAlertRow,
  FusionMultiThresholdSettingsRow,
  InputFields,
  IntercomCard,
  MessageGroup,
  MessageList,
  NotifiClientContextProvider,
  NotifiContext,
  NotifiDemoPreviewContextProvider,
  NotifiEmailInput,
  NotifiFooter,
  NotifiFormProvider,
  NotifiIntercomCard,
  NotifiIntercomCardContainer,
  NotifiIntercomChatWindowContainer,
  NotifiIntercomFTUNotificationTargetSection,
  NotifiLogo,
  NotifiSmsInput,
  NotifiStartChatButton,
  NotifiSubscribeButton,
  NotifiSubscriptionCard,
  NotifiSubscriptionContextProvider,
  NotifiTelegramInput,
  NotifiToggle,
  NotifiTooltip,
  PreviewCard,
  SendMessageSection,
  SettingHeader,
  SubscriptionCardUnsupported,
  SubscriptionCardV1,
  TradingPairAlertRow,
  TradingPairSettingsRow,
  UserInfoPanel,
  XMTPToggleConfiguration,
  broadcastMessageConfiguration,
  chatConfiguration,
  createConfigurations,
  customThresholdConfiguration,
  customToggleConfiguration,
  defaultDemoConfigV1,
  directMessageConfiguration,
  fusionHealthCheckConfiguration,
  fusionToggleConfiguration,
  getAlertDetailsContents,
  getAlertNotificationViewBaseProps,
  healthThresholdConfiguration,
  hedgeProtocolConfiguration,
  objectKeys,
  priceChangeConfiguration,
  resolveStringArrayRef,
  resolveStringRef,
  subscribeAlertByFrontendClient,
  subscribeAlertsByFrontendClient,
  tradingPairConfiguration,
  unsubscribeAlertByFrontendClient,
  useFetchedCardState,
  useFrontendClientLogin,
  useNotifiClientContext,
  useNotifiDemoPreviewContext,
  useNotifiForm,
  useNotifiSubscribe,
  useNotifiSubscriptionContext,
  useSubscriptionCard,
  useUnreadState,
  validateIsSupported,
  walletBalanceConfiguration
};
//# sourceMappingURL=index.mjs.map