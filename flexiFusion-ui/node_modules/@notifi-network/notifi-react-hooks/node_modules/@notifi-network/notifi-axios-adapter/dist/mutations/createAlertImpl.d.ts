declare const createAlertImpl: (axiosInstance: Readonly<{
    post: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
}>, variables: Readonly<{
    name: string;
    sourceGroupId: string;
    filterId: string;
    targetGroupId: string;
    filterOptions: string;
    groupName: string;
}>) => Promise<{
    __typename?: "Alert" | undefined;
    id: string;
    groupName?: string | undefined;
    name?: string | undefined;
    filterOptions: string;
    filter: {
        __typename?: "Filter" | undefined;
        id: string;
        name?: string | undefined;
        filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
    };
    sourceGroup: {
        __typename?: "SourceGroup" | undefined;
        id: string;
        name?: string | undefined;
        sources?: ({
            __typename?: "Source" | undefined;
            id: string;
            name?: string | undefined;
            type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: ({
                __typename?: "Filter" | undefined;
                id: string;
                name?: string | undefined;
                filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
            } | undefined)[] | undefined;
        } | undefined)[] | undefined;
    };
    targetGroup: {
        __typename?: "TargetGroup" | undefined;
        id: string;
        name?: string | undefined;
        emailTargets?: ({
            __typename?: "EmailTarget" | undefined;
            emailAddress?: string | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
        } | undefined)[] | undefined;
        smsTargets?: ({
            __typename?: "SmsTarget" | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            phoneNumber?: string | undefined;
        } | undefined)[] | undefined;
        telegramTargets?: ({
            __typename?: "TelegramTarget" | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            telegramId: string;
            confirmationUrl?: string | undefined;
        } | undefined)[] | undefined;
        webhookTargets?: ({
            __typename?: "WebhookTarget" | undefined;
            id: string;
            url: string;
            status: "ERROR" | "OK" | "RATE_LIMITED" | "UNCONFIRMED";
            format: "BROWSER_PUSH_CHROME" | "BROWSER_PUSH_MOZILLA" | "BROWSER_PUSH_NOTIFI" | "PAGER_DUTY" | "RAW";
            name?: string | undefined;
            headers?: {
                __typename?: "KeyValuePairOfStringAndString" | undefined;
                key: string;
                value: string;
            }[] | undefined;
        } | undefined)[] | undefined;
        discordTargets?: ({
            __typename?: "DiscordTarget" | undefined;
            id: string;
            discordAccountId?: string | undefined;
            discriminator?: string | undefined;
            isConfirmed: boolean;
            username?: string | undefined;
            name?: string | undefined;
            userStatus: "COMPLETE" | "DISCORD_SERVER_NOT_JOINED" | "UNVERIFIED";
            verificationLink?: string | undefined;
            discordServerInviteLink?: string | undefined;
        } | undefined)[] | undefined;
    };
}>;
export default createAlertImpl;
//# sourceMappingURL=createAlertImpl.d.ts.map