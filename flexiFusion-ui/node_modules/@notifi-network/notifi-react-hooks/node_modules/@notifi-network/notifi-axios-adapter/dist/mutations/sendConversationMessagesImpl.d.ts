declare const sendConversationMessageImpl: (axiosInstance: Readonly<{
    post: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
}>, variables: Readonly<{
    sendConversationMessageInput: {
        conversationId: string;
        message: string;
    };
}>) => Promise<{
    __typename?: "ConversationMessage" | undefined;
    id: string;
    userId: string;
    conversationId: string;
    createdDate: string;
    updatedDate: string;
    message: string;
    conversationParticipant?: {
        __typename?: "ConversationParticipant" | undefined;
        conversationId: string;
        conversationParticipantType: "SUPPORT" | "ADMIN" | "BANNED" | "MEMBER";
        resolvedName?: string | undefined;
        userId: string;
        walletAddress: string;
        walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
        profile: {
            __typename?: "UserProfile" | undefined;
            avatarData?: string | undefined;
            avatarDataType: "STOCK_NOTIFI" | "URL";
            id: string;
            preferredAddress?: string | undefined;
            preferredBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
            preferredName?: string | undefined;
        };
    } | undefined;
}>;
export default sendConversationMessageImpl;
//# sourceMappingURL=sendConversationMessagesImpl.d.ts.map