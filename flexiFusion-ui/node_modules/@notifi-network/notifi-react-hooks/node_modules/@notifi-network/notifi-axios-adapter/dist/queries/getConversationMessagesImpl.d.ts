declare const getConversationMessagesImpl: (axiosInstance: Readonly<{
    post: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
}>, variables: Readonly<{
    first?: number | undefined;
    after?: string | undefined;
    getConversationMessagesInput: Readonly<{
        conversationId: string;
    }>;
}>) => Promise<Readonly<{
    nodes?: {
        __typename?: "ConversationMessage" | undefined;
        id: string;
        userId: string;
        conversationId: string;
        createdDate: string;
        updatedDate: string;
        message: string;
        conversationParticipant?: {
            __typename?: "ConversationParticipant" | undefined;
            conversationId: string;
            conversationParticipantType: "SUPPORT" | "ADMIN" | "BANNED" | "MEMBER";
            resolvedName?: string | undefined;
            userId: string;
            walletAddress: string;
            walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
            profile: {
                __typename?: "UserProfile" | undefined;
                avatarData?: string | undefined;
                avatarDataType: "STOCK_NOTIFI" | "URL";
                id: string;
                preferredAddress?: string | undefined;
                preferredBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                preferredName?: string | undefined;
            };
        } | undefined;
    }[] | undefined;
    pageInfo: {
        hasNextPage: boolean;
        endCursor?: string | undefined;
    };
}>>;
export default getConversationMessagesImpl;
//# sourceMappingURL=getConversationMessagesImpl.d.ts.map