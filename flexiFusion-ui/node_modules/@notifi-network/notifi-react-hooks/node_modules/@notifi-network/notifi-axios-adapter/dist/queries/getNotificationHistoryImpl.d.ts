declare const getNotificationHistoryImpl: (axiosInstance: Readonly<{
    post: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
}>, variables: Readonly<{
    first?: number | undefined;
    after?: string | undefined;
}>) => Promise<Readonly<{
    nodes: {
        __typename: "NotificationHistoryEntry";
        id: string;
        createdDate: string;
        eventId: string;
        read: boolean;
        sourceAddress?: string | undefined;
        category?: ("BALANCE_CHANGE" | "CHAT" | "COIN_PRICE_CHANGE" | "CREATOR_MESSAGE" | "DAO_PROPOSAL" | "NFT_AUCTION") | undefined;
        transactionSignature?: string | undefined;
        targets: {
            __typename?: "NotificationTarget" | undefined;
            type: "DISCORD" | "EMAIL" | "FCM" | "SMS" | "TELEGRAM" | "PLATFORM" | "WEB3" | "WEBHOOK";
            name?: string | undefined;
        }[];
        detail?: {
            __typename: "AccountBalanceChangedEventDetails";
            walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
            direction: "INCOMING" | "OUTGOING";
            newValue: number;
            previousValue: number;
            tokenSymbol: string;
            isWhaleWatch: boolean;
        } | {
            __typename: "BroadcastMessageEventDetails";
            subject?: string | undefined;
            message?: string | undefined;
            messageHtml?: string | undefined;
            messageType: string;
        } | {
            __typename: "ChatMessageReceivedEventDetails";
            senderName: string;
            conversationId: string;
            messageId: string;
            senderId: string;
            senderBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
            messageBody: string;
        } | {
            __typename: "DAOProposalChangedEventDetails";
            tenantName: string;
            description: string;
            state?: string | undefined;
            daoUrl?: string | undefined;
            proposalUrl?: string | undefined;
            proposalTitle?: string | undefined;
        } | {
            __typename: "DirectTenantMessageEventDetails";
            tenantName: string;
            targetTemplatesJson?: string | undefined;
            templateVariablesJson?: string | undefined;
        } | {
            __typename: "GenericEventDetails";
            sourceName: string;
            notificationTypeName: string;
            eventDetailsJson?: string | undefined;
            icon: "CHART" | "CHECKMARK" | "CLOCK" | "DAO" | "DOWN_ARROW" | "FLAG" | "GRAPH" | "INFO" | "MEGAPHONE" | "PERCENT" | "STAR" | "SWAP" | "UP_ARROW" | "URGENT" | "WATCH";
            genericMessage: string;
            genericMessageHtml?: string | undefined;
            action?: {
                __typename?: "GenericEventAction" | undefined;
                name: string;
                url: string;
            } | undefined;
        } | {
            __typename: "HealthValueOverThresholdEventDetails";
            name: string;
            value: string;
            threshold: string;
            url: string;
        } | {
            __typename: "NftAuctionChangedEventDetails";
            auctionUrl?: string | undefined;
            walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
            highBidAmount: number;
            highBidSymbol?: string | undefined;
            imageUrl?: string | undefined;
            auctionTitle: string;
        } | {
            __typename: "NftCollectionsReportEventDetails";
            type: "HOT" | "MOST_TRADED";
            providerName: string;
            sourceLink: string;
            collections: {
                __typename?: "NftCollectionStats" | undefined;
                collectionId: string;
                name: string;
                imgUrl?: string | undefined;
                volume1Day?: string | undefined;
                volume1DayChange?: string | undefined;
            }[];
        } | {
            __typename: "WalletsActivityReportEventDetails";
            providerName: string;
            sourceLink: string;
            walletActivityType: "MOST_ACTIVE";
            wallets: {
                __typename?: "WalletsActivityReportWallet" | undefined;
                address: string;
                volume1Day: string;
                maxPurchase1Day?: string | undefined;
                maxPurchaseName?: string | undefined;
                maxPurchaseImgUrl?: string | undefined;
                maxPurchaseTokenAddress?: string | undefined;
            }[];
        } | undefined;
    }[] | undefined;
    pageInfo: {
        hasNextPage: boolean;
        endCursor?: string | undefined;
    };
}>>;
export default getNotificationHistoryImpl;
//# sourceMappingURL=getNotificationHistoryImpl.d.ts.map