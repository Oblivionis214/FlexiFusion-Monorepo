import { Alert, ConnectedWallet, DiscordTarget, EmailTarget, GetAlertsService, GetConnectedWalletsService, GetDiscordTargetsService, GetEmailTargetsService, GetSmsTargetsService, GetSourceGroupsService, GetSourcesService, GetTargetGroupsService, GetTelegramTargetsService, GetTopicsService, GetWebhookTargetsService, SmsTarget, SourceGroup, TargetGroup, TelegramTarget, WebhookTarget } from '@notifi-network/notifi-core';
import { Types } from '@notifi-network/notifi-graphql';
export declare type InternalData = {
    alerts: Alert[];
    connectedWallets: ConnectedWallet[];
    filters: Types.FilterFragmentFragment[];
    sources: Types.SourceFragmentFragment[];
    sourceGroups: SourceGroup[];
    targetGroups: TargetGroup[];
    emailTargets: EmailTarget[];
    smsTargets: SmsTarget[];
    telegramTargets: TelegramTarget[];
    webhookTargets: WebhookTarget[];
    discordTargets: DiscordTarget[];
};
export declare type FetchDataState = {
    pendingPromise?: Promise<InternalData>;
    lastSuccessTime?: number;
    lastSuccessData?: InternalData;
};
export declare type TimeProvider = Readonly<{
    now(): number;
}>;
declare type Service = GetAlertsService & GetConnectedWalletsService & GetSourcesService & GetSourceGroupsService & GetTargetGroupsService & GetEmailTargetsService & GetDiscordTargetsService & GetSmsTargetsService & GetTelegramTargetsService & GetTopicsService & GetWebhookTargetsService;
declare const fetchDataImpl: (service: Service, timeProvider: TimeProvider, state: FetchDataState) => Promise<InternalData>;
export default fetchDataImpl;
//# sourceMappingURL=fetchDataImpl.d.ts.map