"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const localforage_1 = __importDefault(require("localforage"));
localforage_1.default.config({
    name: 'notifi',
});
const storage = ({ dappAddress, jwtPrefix, walletPublicKey, }) => {
    const oldKey = `${jwtPrefix}:${dappAddress}:${walletPublicKey}`;
    const newKey = `${jwtPrefix}:${dappAddress}:${walletPublicKey}:authorization`;
    const getAuthorization = async () => {
        const oldValue = await localforage_1.default.getItem(oldKey);
        if (oldValue !== null) {
            const expiry = new Date();
            expiry.setMinutes(expiry.getMinutes() - 1); // Assume expired
            const migrated = {
                token: oldValue,
                expiry: expiry.toISOString(),
            };
            await localforage_1.default.removeItem(oldKey);
            await localforage_1.default.setItem(newKey, migrated);
        }
        return await localforage_1.default.getItem(newKey);
    };
    const setAuthorization = async (authorization) => {
        await localforage_1.default.setItem(newKey, authorization);
    };
    const rolesKey = `${jwtPrefix}:${dappAddress}:${walletPublicKey}:roles`;
    const getRoles = async () => {
        return await localforage_1.default.getItem(rolesKey);
    };
    const setRoles = async (roles) => {
        await localforage_1.default.setItem(rolesKey, roles);
    };
    return {
        getAuthorization,
        getRoles,
        setAuthorization,
        setRoles,
    };
};
exports.default = storage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91dGlscy9zdG9yYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOERBQXNDO0FBRXRDLHFCQUFXLENBQUMsTUFBTSxDQUFDO0lBQ2pCLElBQUksRUFBRSxRQUFRO0NBQ2YsQ0FBQyxDQUFDO0FBc0JILE1BQU0sT0FBTyxHQUFHLENBQUMsRUFDZixXQUFXLEVBQ1gsU0FBUyxFQUNULGVBQWUsR0FDSixFQUFXLEVBQUU7SUFDeEIsTUFBTSxNQUFNLEdBQUcsR0FBRyxTQUFTLElBQUksV0FBVyxJQUFJLGVBQWUsRUFBRSxDQUFDO0lBQ2hFLE1BQU0sTUFBTSxHQUFHLEdBQUcsU0FBUyxJQUFJLFdBQVcsSUFBSSxlQUFlLGdCQUFnQixDQUFDO0lBRTlFLE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDbEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxxQkFBVyxDQUFDLE9BQU8sQ0FBUyxNQUFNLENBQUMsQ0FBQztRQUMzRCxJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUU7WUFDckIsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUMxQixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQjtZQUM3RCxNQUFNLFFBQVEsR0FBa0I7Z0JBQzlCLEtBQUssRUFBRSxRQUFRO2dCQUNmLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxFQUFFO2FBQzdCLENBQUM7WUFFRixNQUFNLHFCQUFXLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLE1BQU0scUJBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzdDO1FBRUQsT0FBTyxNQUFNLHFCQUFXLENBQUMsT0FBTyxDQUFnQixNQUFNLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUM7SUFFRixNQUFNLGdCQUFnQixHQUFHLEtBQUssRUFDNUIsYUFBbUMsRUFDcEIsRUFBRTtRQUNqQixNQUFNLHFCQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUM7SUFFRixNQUFNLFFBQVEsR0FBRyxHQUFHLFNBQVMsSUFBSSxXQUFXLElBQUksZUFBZSxRQUFRLENBQUM7SUFDeEUsTUFBTSxRQUFRLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDMUIsT0FBTyxNQUFNLHFCQUFXLENBQUMsT0FBTyxDQUFRLFFBQVEsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLEtBQUssRUFBRSxLQUFtQixFQUFpQixFQUFFO1FBQzVELE1BQU0scUJBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztJQUVGLE9BQU87UUFDTCxnQkFBZ0I7UUFDaEIsUUFBUTtRQUNSLGdCQUFnQjtRQUNoQixRQUFRO0tBQ1QsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLGtCQUFlLE9BQU8sQ0FBQyJ9