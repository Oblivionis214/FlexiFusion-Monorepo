"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const doFetchData = async (service) => {
    const [alerts, connectedWallets, sources, sourceGroups, targetGroups, emailTargets, smsTargets, telegramTargets, webhookTargets, discordTargets,] = await Promise.all([
        service.getAlerts(),
        service.getConnectedWallets(),
        service.getSources(),
        service.getSourceGroups(),
        service.getTargetGroups(),
        service.getEmailTargets(),
        service.getSmsTargets(),
        service.getTelegramTargets(),
        service.getWebhookTargets(),
        service.getDiscordTargets(),
    ]);
    const filterIds = new Set();
    const filters = [];
    sources.forEach((source) => {
        var _a;
        (_a = source.applicableFilters) === null || _a === void 0 ? void 0 : _a.forEach((filter) => {
            var _a;
            if (filter && !filterIds.has((_a = filter === null || filter === void 0 ? void 0 : filter.id) !== null && _a !== void 0 ? _a : '')) {
                filters.push(filter);
                filterIds.add(filter.id);
            }
        });
    });
    return {
        alerts: [...alerts],
        connectedWallets: [...connectedWallets],
        filters,
        sources: [...sources],
        discordTargets: [...discordTargets],
        sourceGroups: [...sourceGroups],
        targetGroups: [...targetGroups],
        emailTargets: [...emailTargets],
        smsTargets: [...smsTargets],
        telegramTargets: [...telegramTargets],
        webhookTargets: [...webhookTargets],
    };
};
const DataTtlMs = 1000;
const fetchDataImpl = async (service, timeProvider, state) => {
    if (state.pendingPromise !== undefined) {
        return await state.pendingPromise;
    }
    if (state.lastSuccessTime !== undefined &&
        state.lastSuccessData !== undefined) {
        const currentTime = timeProvider.now();
        if (currentTime <= state.lastSuccessTime + DataTtlMs) {
            return state.lastSuccessData;
        }
    }
    const promise = doFetchData(service);
    state.pendingPromise = promise;
    const results = await promise;
    state.pendingPromise = undefined;
    state.lastSuccessTime = timeProvider.now();
    state.lastSuccessData = results;
    return results;
};
exports.default = fetchDataImpl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2hEYXRhSW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91dGlscy9mZXRjaERhdGFJbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBNERBLE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxPQUFnQixFQUF5QixFQUFFO0lBQ3BFLE1BQU0sQ0FDSixNQUFNLEVBQ04sZ0JBQWdCLEVBQ2hCLE9BQU8sRUFDUCxZQUFZLEVBQ1osWUFBWSxFQUNaLFlBQVksRUFDWixVQUFVLEVBQ1YsZUFBZSxFQUNmLGNBQWMsRUFDZCxjQUFjLEVBQ2YsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDcEIsT0FBTyxDQUFDLFNBQVMsRUFBRTtRQUNuQixPQUFPLENBQUMsbUJBQW1CLEVBQUU7UUFDN0IsT0FBTyxDQUFDLFVBQVUsRUFBRTtRQUNwQixPQUFPLENBQUMsZUFBZSxFQUFFO1FBQ3pCLE9BQU8sQ0FBQyxlQUFlLEVBQUU7UUFDekIsT0FBTyxDQUFDLGVBQWUsRUFBRTtRQUN6QixPQUFPLENBQUMsYUFBYSxFQUFFO1FBQ3ZCLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRTtRQUM1QixPQUFPLENBQUMsaUJBQWlCLEVBQUU7UUFDM0IsT0FBTyxDQUFDLGlCQUFpQixFQUFFO0tBQzVCLENBQUMsQ0FBQztJQUVILE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFpQixDQUFDO0lBQzNDLE1BQU0sT0FBTyxHQUFtQyxFQUFFLENBQUM7SUFDbkQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFOztRQUN6QixNQUFBLE1BQU0sQ0FBQyxpQkFBaUIsMENBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7O1lBQzNDLElBQUksTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxFQUFFLG1DQUFJLEVBQUUsQ0FBQyxFQUFFO2dCQUM5QyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNyQixTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUMxQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDbkIsZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixDQUFDO1FBQ3ZDLE9BQU87UUFDUCxPQUFPLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUNyQixjQUFjLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQztRQUNuQyxZQUFZLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQztRQUMvQixZQUFZLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQztRQUMvQixZQUFZLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQztRQUMvQixVQUFVLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUMzQixlQUFlLEVBQUUsQ0FBQyxHQUFHLGVBQWUsQ0FBQztRQUNyQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQztLQUNwQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBRXZCLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFDekIsT0FBZ0IsRUFDaEIsWUFBMEIsRUFDMUIsS0FBcUIsRUFDRSxFQUFFO0lBQ3pCLElBQUksS0FBSyxDQUFDLGNBQWMsS0FBSyxTQUFTLEVBQUU7UUFDdEMsT0FBTyxNQUFNLEtBQUssQ0FBQyxjQUFjLENBQUM7S0FDbkM7SUFFRCxJQUNFLEtBQUssQ0FBQyxlQUFlLEtBQUssU0FBUztRQUNuQyxLQUFLLENBQUMsZUFBZSxLQUFLLFNBQVMsRUFDbkM7UUFDQSxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkMsSUFBSSxXQUFXLElBQUksS0FBSyxDQUFDLGVBQWUsR0FBRyxTQUFTLEVBQUU7WUFDcEQsT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDO1NBQzlCO0tBQ0Y7SUFFRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsS0FBSyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7SUFDL0IsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUM7SUFDOUIsS0FBSyxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUM7SUFDakMsS0FBSyxDQUFDLGVBQWUsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDM0MsS0FBSyxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUM7SUFDaEMsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsa0JBQWUsYUFBYSxDQUFDIn0=