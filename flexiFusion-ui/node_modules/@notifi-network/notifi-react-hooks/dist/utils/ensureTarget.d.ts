import { ClientCreateWebhookParams, CreateWebhookTargetService, WebhookTarget } from '@notifi-network/notifi-core';
export declare type CreateFunc<Service, T> = (service: Service, value: string) => Promise<T>;
export declare type IdentifyFunc<T> = (arg: T) => string | undefined;
export declare type ValueTransformFunc = (value: string) => string;
declare const ensureTarget: <Service, T extends Readonly<{
    id: string | undefined;
}>>(create: CreateFunc<Service, T>, identify: IdentifyFunc<T>, valueTransform?: ValueTransformFunc) => (service: Service, existing: T[] | undefined, value: string | undefined) => Promise<string | undefined>;
declare const ensureEmail: (service: Readonly<{
    createEmailTarget: import("@notifi-network/notifi-core").Operation<Readonly<{
        name: string;
        value: string;
    }>, {
        __typename?: "EmailTarget" | undefined;
        emailAddress?: string | undefined;
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
    }>;
}>, existing: {
    __typename?: "EmailTarget" | undefined;
    emailAddress?: string | undefined;
    id: string;
    isConfirmed: boolean;
    name?: string | undefined;
}[] | undefined, value: string | undefined) => Promise<string | undefined>;
declare const ensureSms: (service: Readonly<{
    createSmsTarget: import("@notifi-network/notifi-core").Operation<Readonly<{
        name: string;
        value: string;
    }>, {
        __typename?: "SmsTarget" | undefined;
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        phoneNumber?: string | undefined;
    }>;
}>, existing: {
    __typename?: "SmsTarget" | undefined;
    id: string;
    isConfirmed: boolean;
    name?: string | undefined;
    phoneNumber?: string | undefined;
}[] | undefined, value: string | undefined) => Promise<string | undefined>;
declare const ensureTelegram: (service: Readonly<{
    createTelegramTarget: import("@notifi-network/notifi-core").Operation<Readonly<{
        name: string;
        value: string;
    }>, {
        __typename?: "TelegramTarget" | undefined;
        id: string;
        isConfirmed: boolean;
        name?: string | undefined;
        telegramId: string;
        confirmationUrl?: string | undefined;
    }>;
}>, existing: {
    __typename?: "TelegramTarget" | undefined;
    id: string;
    isConfirmed: boolean;
    name?: string | undefined;
    telegramId: string;
    confirmationUrl?: string | undefined;
}[] | undefined, value: string | undefined) => Promise<string | undefined>;
declare const ensureWebhook: (service: CreateWebhookTargetService, existing: Array<WebhookTarget> | undefined, params: ClientCreateWebhookParams | undefined) => Promise<string | null>;
declare const ensureDiscord: (service: Readonly<{
    createDiscordTarget: import("@notifi-network/notifi-core").Operation<Readonly<{
        name: string;
        value: string;
    }>, {
        __typename?: "DiscordTarget" | undefined;
        id: string;
        discordAccountId?: string | undefined;
        discriminator?: string | undefined;
        isConfirmed: boolean;
        username?: string | undefined;
        name?: string | undefined;
        userStatus: "COMPLETE" | "DISCORD_SERVER_NOT_JOINED" | "UNVERIFIED";
        verificationLink?: string | undefined;
        discordServerInviteLink?: string | undefined;
    }>;
}>, existing: {
    __typename?: "DiscordTarget" | undefined;
    id: string;
    discordAccountId?: string | undefined;
    discriminator?: string | undefined;
    isConfirmed: boolean;
    username?: string | undefined;
    name?: string | undefined;
    userStatus: "COMPLETE" | "DISCORD_SERVER_NOT_JOINED" | "UNVERIFIED";
    verificationLink?: string | undefined;
    discordServerInviteLink?: string | undefined;
}[] | undefined, value: string | undefined) => Promise<string | undefined>;
export { ensureEmail, ensureSms, ensureTelegram, ensureWebhook, ensureDiscord };
export default ensureTarget;
//# sourceMappingURL=ensureTarget.d.ts.map