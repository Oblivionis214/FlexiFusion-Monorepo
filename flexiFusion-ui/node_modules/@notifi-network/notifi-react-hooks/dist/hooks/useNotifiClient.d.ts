import type { NotifiEnvironment } from '@notifi-network/notifi-axios-utils';
import { ClientData, ClientFetchSubscriptionCardInput, NotifiClient, SignMessageParams, TargetType, WalletParams } from '@notifi-network/notifi-core';
import { BlockchainEnvironment } from './useNotifiConfig';
/**
 * Config options for Notifi SDK
 *
 * @remarks
 * Configuration object for new Notifi SDK instance
 *
 * @property dappAddress - Blockchain address of the dapp
 * @property walletPublicKey - User's wallet address
 * @property env - Solana blockchain env to use
 * <br>
 * <br>
 * See [Alert Creation Guide]{@link https://docs.notifi.network} for more information on creating Alerts
 */
export declare type NotifiClientConfig = Readonly<{
    dappAddress: string;
    env?: BlockchainEnvironment | NotifiEnvironment;
}> & WalletParams;
export declare class NotifiClientError extends Error {
    underlying: unknown;
    constructor(underlying: unknown);
}
export declare const SIGNING_MESSAGE = "Sign in with Notifi \n\n    No password needed or gas is needed. \n\n    Clicking \u201CApprove\u201D only means you have proved this wallet is owned by you! \n\n    This request will not trigger any transaction or cost any gas fees. \n\n    Use of our website and service is subject to our terms of service and privacy policy. \n \n 'Nonce:' ";
/**
 * React hook for Notifi SDK
 *
 * @remarks
 * Used to interact with Notifi services
 *
 * @param config - Options to configure the Notifi client
 * <br>
 * <br>
 * See [Alert Creation Guide]{@link https://docs.notifi.network} for more information on creating Alerts
 */
declare const useNotifiClient: (config: NotifiClientConfig) => Readonly<{
    beginLoginViaTransaction: () => Promise<Readonly<{
        logValue: string;
    }>>;
    broadcastMessage: (input: Readonly<{
        topic: Readonly<{
            name: string | null;
            topicName: string | null;
            targetCollections: readonly string[] | null;
            targetTemplate: string | null;
        }>;
        subject: string;
        message: string;
        isHolderOnly: boolean;
        variables?: Readonly<Record<string, string>> | undefined;
    }>, signer: SignMessageParams) => Promise<string | null>;
    completeLoginViaTransaction: (input: Readonly<{
        transactionSignature: string;
    }>) => Promise<Readonly<Readonly<{
        email: string | null;
        emailConfirmed: boolean;
        authorization: Readonly<{
            token: string | null;
            expiry: string | null;
        }> | null;
        roles: readonly string[] | null;
    }>>>;
    fetchData: (forceFetch?: boolean | undefined) => Promise<Readonly<{
        alerts: readonly {
            __typename?: "Alert" | undefined;
            id: string;
            groupName?: string | undefined;
            name?: string | undefined;
            filterOptions: string;
            filter: {
                __typename?: "Filter" | undefined;
                id: string;
                name?: string | undefined;
                filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
            };
            sourceGroup: {
                __typename?: "SourceGroup" | undefined;
                id: string;
                name?: string | undefined;
                sources?: ({
                    __typename?: "Source" | undefined;
                    id: string;
                    name?: string | undefined;
                    type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
                    blockchainAddress: string;
                    fusionEventTypeId?: string | undefined;
                    applicableFilters?: ({
                        __typename?: "Filter" | undefined;
                        id: string;
                        name?: string | undefined;
                        filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
                    } | undefined)[] | undefined;
                } | undefined)[] | undefined;
            };
            targetGroup: {
                __typename?: "TargetGroup" | undefined;
                id: string;
                name?: string | undefined;
                emailTargets?: ({
                    __typename?: "EmailTarget" | undefined;
                    emailAddress?: string | undefined;
                    id: string;
                    isConfirmed: boolean;
                    name?: string | undefined;
                } | undefined)[] | undefined;
                smsTargets?: ({
                    __typename?: "SmsTarget" | undefined;
                    id: string;
                    isConfirmed: boolean;
                    name?: string | undefined;
                    phoneNumber?: string | undefined;
                } | undefined)[] | undefined;
                telegramTargets?: ({
                    __typename?: "TelegramTarget" | undefined;
                    id: string;
                    isConfirmed: boolean;
                    name?: string | undefined;
                    telegramId: string;
                    confirmationUrl?: string | undefined;
                } | undefined)[] | undefined;
                webhookTargets?: ({
                    __typename?: "WebhookTarget" | undefined;
                    id: string;
                    url: string;
                    status: "ERROR" | "OK" | "RATE_LIMITED" | "UNCONFIRMED";
                    format: "BROWSER_PUSH_CHROME" | "BROWSER_PUSH_MOZILLA" | "BROWSER_PUSH_NOTIFI" | "PAGER_DUTY" | "RAW";
                    name?: string | undefined;
                    headers?: {
                        __typename?: "KeyValuePairOfStringAndString" | undefined;
                        key: string;
                        value: string;
                    }[] | undefined;
                } | undefined)[] | undefined;
                discordTargets?: ({
                    __typename?: "DiscordTarget" | undefined;
                    id: string;
                    discordAccountId?: string | undefined;
                    discriminator?: string | undefined;
                    isConfirmed: boolean;
                    username?: string | undefined;
                    name?: string | undefined;
                    userStatus: "COMPLETE" | "DISCORD_SERVER_NOT_JOINED" | "UNVERIFIED";
                    verificationLink?: string | undefined;
                    discordServerInviteLink?: string | undefined;
                } | undefined)[] | undefined;
            };
        }[];
        connectedWallets: readonly {
            __typename?: "ConnectedWallet" | undefined;
            address?: string | undefined;
            walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
        }[];
        emailTargets: readonly {
            __typename?: "EmailTarget" | undefined;
            emailAddress?: string | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
        }[];
        filters: readonly {
            __typename?: "Filter" | undefined;
            id: string;
            name?: string | undefined;
            filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
        }[];
        smsTargets: readonly {
            __typename?: "SmsTarget" | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            phoneNumber?: string | undefined;
        }[];
        sources: readonly {
            __typename?: "Source" | undefined;
            id: string;
            name?: string | undefined;
            type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: ({
                __typename?: "Filter" | undefined;
                id: string;
                name?: string | undefined;
                filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
            } | undefined)[] | undefined;
        }[];
        sourceGroups: readonly {
            __typename?: "SourceGroup" | undefined;
            id: string;
            name?: string | undefined;
            sources?: ({
                __typename?: "Source" | undefined;
                id: string;
                name?: string | undefined;
                type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
                blockchainAddress: string;
                fusionEventTypeId?: string | undefined;
                applicableFilters?: ({
                    __typename?: "Filter" | undefined;
                    id: string;
                    name?: string | undefined;
                    filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
                } | undefined)[] | undefined;
            } | undefined)[] | undefined;
        }[];
        targetGroups: readonly {
            __typename?: "TargetGroup" | undefined;
            id: string;
            name?: string | undefined;
            emailTargets?: ({
                __typename?: "EmailTarget" | undefined;
                emailAddress?: string | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
            } | undefined)[] | undefined;
            smsTargets?: ({
                __typename?: "SmsTarget" | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                phoneNumber?: string | undefined;
            } | undefined)[] | undefined;
            telegramTargets?: ({
                __typename?: "TelegramTarget" | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                telegramId: string;
                confirmationUrl?: string | undefined;
            } | undefined)[] | undefined;
            webhookTargets?: ({
                __typename?: "WebhookTarget" | undefined;
                id: string;
                url: string;
                status: "ERROR" | "OK" | "RATE_LIMITED" | "UNCONFIRMED";
                format: "BROWSER_PUSH_CHROME" | "BROWSER_PUSH_MOZILLA" | "BROWSER_PUSH_NOTIFI" | "PAGER_DUTY" | "RAW";
                name?: string | undefined;
                headers?: {
                    __typename?: "KeyValuePairOfStringAndString" | undefined;
                    key: string;
                    value: string;
                }[] | undefined;
            } | undefined)[] | undefined;
            discordTargets?: ({
                __typename?: "DiscordTarget" | undefined;
                id: string;
                discordAccountId?: string | undefined;
                discriminator?: string | undefined;
                isConfirmed: boolean;
                username?: string | undefined;
                name?: string | undefined;
                userStatus: "COMPLETE" | "DISCORD_SERVER_NOT_JOINED" | "UNVERIFIED";
                verificationLink?: string | undefined;
                discordServerInviteLink?: string | undefined;
            } | undefined)[] | undefined;
        }[];
        telegramTargets: readonly {
            __typename?: "TelegramTarget" | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            telegramId: string;
            confirmationUrl?: string | undefined;
        }[];
        discordTargets: readonly {
            __typename?: "DiscordTarget" | undefined;
            id: string;
            discordAccountId?: string | undefined;
            discriminator?: string | undefined;
            isConfirmed: boolean;
            username?: string | undefined;
            name?: string | undefined;
            userStatus: "COMPLETE" | "DISCORD_SERVER_NOT_JOINED" | "UNVERIFIED";
            verificationLink?: string | undefined;
            discordServerInviteLink?: string | undefined;
        }[];
    }>>;
    logIn: (signer: SignMessageParams) => Promise<Readonly<{
        email: string | null;
        emailConfirmed: boolean;
        authorization: Readonly<{
            token: string | null;
            expiry: string | null;
        }> | null;
        roles: readonly string[] | null;
    }>>;
    logOut: () => Promise<void>;
    connectWallet: (input: Readonly<{
        walletParams: import("@notifi-network/notifi-core").WalletWithSignParams;
        connectWalletConflictResolutionTechnique: "DISCONNECT" | "DISCONNECT_AND_CLOSE_OLD_ACCOUNT" | "FAIL" | undefined;
    }>) => Promise<{
        __typename?: "ConnectedWallet" | undefined;
        address?: string | undefined;
        walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
    }>;
    createAlert: (input: Readonly<{
        name: string;
        sourceId: string;
        filterId: string;
        filterOptions?: Readonly<Partial<{
            alertFrequency: import("@notifi-network/notifi-core").AlertFrequency;
            directMessageType: string;
            threshold: number;
            delayProcessingUntil: string;
            thresholdDirection: import("@notifi-network/notifi-core").ThresholdDirection;
            values: Readonly<{
                and: readonly Readonly<{
                    key: string;
                    op: "lt" | "lte" | "eq" | "gt" | "gte";
                    value: string;
                }>[];
            } | {
                or: readonly Readonly<{
                    key: string;
                    op: "lt" | "lte" | "eq" | "gt" | "gte";
                    value: string;
                }>[];
            }>;
            tradingPair: string;
        }>> | undefined;
        emailAddress: string | undefined;
        phoneNumber: string | undefined;
        telegramId: string | undefined;
        groupName?: string | undefined;
        targetGroupName?: string | undefined;
        webhook?: import("@notifi-network/notifi-core").ClientCreateWebhookParams | undefined;
        sourceIds?: readonly string[] | undefined;
        sourceGroupName?: string | undefined;
        includeDiscord: boolean;
    }>) => Promise<{
        __typename?: "Alert" | undefined;
        id: string;
        groupName?: string | undefined;
        name?: string | undefined;
        filterOptions: string;
        filter: {
            __typename?: "Filter" | undefined;
            id: string;
            name?: string | undefined;
            filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
        };
        sourceGroup: {
            __typename?: "SourceGroup" | undefined;
            id: string;
            name?: string | undefined;
            sources?: ({
                __typename?: "Source" | undefined;
                id: string;
                name?: string | undefined;
                type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
                blockchainAddress: string;
                fusionEventTypeId?: string | undefined;
                applicableFilters?: ({
                    __typename?: "Filter" | undefined;
                    id: string;
                    name?: string | undefined;
                    filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
                } | undefined)[] | undefined;
            } | undefined)[] | undefined;
        };
        targetGroup: {
            __typename?: "TargetGroup" | undefined;
            id: string;
            name?: string | undefined;
            emailTargets?: ({
                __typename?: "EmailTarget" | undefined;
                emailAddress?: string | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
            } | undefined)[] | undefined;
            smsTargets?: ({
                __typename?: "SmsTarget" | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                phoneNumber?: string | undefined;
            } | undefined)[] | undefined;
            telegramTargets?: ({
                __typename?: "TelegramTarget" | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                telegramId: string;
                confirmationUrl?: string | undefined;
            } | undefined)[] | undefined;
            webhookTargets?: ({
                __typename?: "WebhookTarget" | undefined;
                id: string;
                url: string;
                status: "ERROR" | "OK" | "RATE_LIMITED" | "UNCONFIRMED";
                format: "BROWSER_PUSH_CHROME" | "BROWSER_PUSH_MOZILLA" | "BROWSER_PUSH_NOTIFI" | "PAGER_DUTY" | "RAW";
                name?: string | undefined;
                headers?: {
                    __typename?: "KeyValuePairOfStringAndString" | undefined;
                    key: string;
                    value: string;
                }[] | undefined;
            } | undefined)[] | undefined;
            discordTargets?: ({
                __typename?: "DiscordTarget" | undefined;
                id: string;
                discordAccountId?: string | undefined;
                discriminator?: string | undefined;
                isConfirmed: boolean;
                username?: string | undefined;
                name?: string | undefined;
                userStatus: "COMPLETE" | "DISCORD_SERVER_NOT_JOINED" | "UNVERIFIED";
                verificationLink?: string | undefined;
                discordServerInviteLink?: string | undefined;
            } | undefined)[] | undefined;
        };
    }>;
    createSource: (input: {
        blockchainAddress?: string | undefined;
        fusionEventTypeId?: string | undefined;
        name?: string | undefined;
        type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
    }) => Promise<{
        __typename?: "Source" | undefined;
        id: string;
        name?: string | undefined;
        type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
        blockchainAddress: string;
        fusionEventTypeId?: string | undefined;
        applicableFilters?: ({
            __typename?: "Filter" | undefined;
            id: string;
            name?: string | undefined;
            filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
        } | undefined)[] | undefined;
    }>;
    createSupportConversation: () => Promise<Readonly<{
        __typename?: "SupportConversation" | undefined;
        id: string;
        conversationType: string;
        conversationGates?: Readonly<{
            __typename?: "ConversationGates" | undefined;
            id: string;
        }> | undefined;
        name: string;
        createdDate: string;
        participants: Readonly<{
            __typename?: "Participant" | undefined;
            profile: {
                __typename?: "Profile" | undefined;
                avatarData?: string | undefined;
                avatarDataType: string;
                id: string;
                preferredAddress?: string | undefined;
                preferredBlockchain?: string | undefined;
                preferredName?: string | undefined;
            };
            conversationId: string;
            conversationParticipantType: string;
            resolvedName?: string | undefined;
            userId: string;
            walletAddress: string;
            walletBlockchain: string;
        }>[];
        backgroundImageUrl: string;
    }>>;
    createMetaplexAuctionSource: (input: Readonly<{
        auctionAddressBase58: string;
        auctionWebUrl: string;
    }>) => Promise<{
        __typename?: "Source" | undefined;
        id: string;
        name?: string | undefined;
        type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
        blockchainAddress: string;
        fusionEventTypeId?: string | undefined;
        applicableFilters?: ({
            __typename?: "Filter" | undefined;
            id: string;
            name?: string | undefined;
            filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
        } | undefined)[] | undefined;
    }>;
    createBonfidaAuctionSource: (input: Readonly<{
        auctionAddressBase58: string;
        auctionName: string;
    }>) => Promise<{
        __typename?: "Source" | undefined;
        id: string;
        name?: string | undefined;
        type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
        blockchainAddress: string;
        fusionEventTypeId?: string | undefined;
        applicableFilters?: ({
            __typename?: "Filter" | undefined;
            id: string;
            name?: string | undefined;
            filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
        } | undefined)[] | undefined;
    }>;
    deleteAlert: (input: Readonly<{
        alertId: string;
        keepTargetGroup?: boolean | undefined;
        keepSourceGroup?: boolean | undefined;
    }>) => Promise<string>;
    getConfiguration: () => Promise<Readonly<{
        supportedTargetTypes: readonly TargetType[];
        supportedSmsCountryCodes: readonly string[];
    }>>;
    getFusionNotificationHistory: (input: {
        after?: string | undefined;
        first?: number | undefined;
        includeHidden?: boolean | undefined;
    }) => Promise<{
        __typename?: "FusionNotificationHistoryConnection" | undefined;
        nodes?: {
            __typename: "FusionNotificationHistoryEntry";
            id: string;
            createdDate: string;
            read: boolean;
            fusionEventVariables: string;
            detail?: {
                __typename: "AccountBalanceChangedEventDetails";
                walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                direction: "INCOMING" | "OUTGOING";
                newValue: number;
                previousValue: number;
                tokenSymbol: string;
                isWhaleWatch: boolean;
            } | {
                __typename: "BroadcastMessageEventDetails";
                subject?: string | undefined;
                message?: string | undefined;
                messageHtml?: string | undefined;
                messageType: string;
            } | {
                __typename: "ChatMessageReceivedEventDetails";
                senderName: string;
                conversationId: string;
                messageId: string;
                senderId: string;
                senderBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                messageBody: string;
            } | {
                __typename: "DAOProposalChangedEventDetails";
                tenantName: string;
                description: string;
                state?: string | undefined;
                daoUrl?: string | undefined;
                proposalUrl?: string | undefined;
                proposalTitle?: string | undefined;
            } | {
                __typename: "DirectTenantMessageEventDetails";
                tenantName: string;
                targetTemplatesJson?: string | undefined;
                templateVariablesJson?: string | undefined;
            } | {
                __typename: "GenericEventDetails";
                sourceName: string;
                notificationTypeName: string;
                eventDetailsJson?: string | undefined;
                icon: "CHART" | "CHECKMARK" | "CLOCK" | "DAO" | "DOWN_ARROW" | "FLAG" | "GRAPH" | "INFO" | "MEGAPHONE" | "PERCENT" | "STAR" | "SWAP" | "UP_ARROW" | "URGENT" | "WATCH";
                genericMessage: string;
                genericMessageHtml?: string | undefined;
                action?: {
                    __typename?: "GenericEventAction" | undefined;
                    name: string;
                    url: string;
                } | undefined;
            } | {
                __typename: "HealthValueOverThresholdEventDetails";
                name: string;
                value: string;
                threshold: string;
                url: string;
            } | {
                __typename: "NftAuctionChangedEventDetails";
                auctionUrl?: string | undefined;
                walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                highBidAmount: number;
                highBidSymbol?: string | undefined;
                imageUrl?: string | undefined;
                auctionTitle: string;
            } | {
                __typename: "NftCollectionsReportEventDetails";
                type: "HOT" | "MOST_TRADED";
                providerName: string;
                sourceLink: string;
                collections: {
                    __typename?: "NftCollectionStats" | undefined;
                    collectionId: string;
                    name: string;
                    imgUrl?: string | undefined;
                    volume1Day?: string | undefined;
                    volume1DayChange?: string | undefined;
                }[];
            } | {
                __typename: "WalletsActivityReportEventDetails";
                providerName: string;
                sourceLink: string;
                walletActivityType: "MOST_ACTIVE";
                wallets: {
                    __typename?: "WalletsActivityReportWallet" | undefined;
                    address: string;
                    volume1Day: string;
                    maxPurchase1Day?: string | undefined;
                    maxPurchaseName?: string | undefined;
                    maxPurchaseImgUrl?: string | undefined;
                    maxPurchaseTokenAddress?: string | undefined;
                }[];
            } | undefined;
        }[] | undefined;
        pageInfo: {
            __typename?: "PageInfo" | undefined;
            hasNextPage: boolean;
            endCursor?: string | undefined;
        };
    } | undefined>;
    getNotificationHistory: (input: Readonly<{
        first?: number | undefined;
        after?: string | undefined;
    }>) => Promise<Readonly<{
        nodes: {
            __typename: "NotificationHistoryEntry";
            id: string;
            createdDate: string;
            eventId: string;
            read: boolean;
            sourceAddress?: string | undefined;
            category?: ("BALANCE_CHANGE" | "CHAT" | "COIN_PRICE_CHANGE" | "CREATOR_MESSAGE" | "DAO_PROPOSAL" | "NFT_AUCTION") | undefined;
            transactionSignature?: string | undefined;
            targets: {
                __typename?: "NotificationTarget" | undefined;
                type: "DISCORD" | "EMAIL" | "FCM" | "SMS" | "TELEGRAM" | "PLATFORM" | "WEB3" | "WEBHOOK";
                name?: string | undefined;
            }[];
            detail?: {
                __typename: "AccountBalanceChangedEventDetails";
                walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                direction: "INCOMING" | "OUTGOING";
                newValue: number;
                previousValue: number;
                tokenSymbol: string;
                isWhaleWatch: boolean;
            } | {
                __typename: "BroadcastMessageEventDetails";
                subject?: string | undefined;
                message?: string | undefined;
                messageHtml?: string | undefined;
                messageType: string;
            } | {
                __typename: "ChatMessageReceivedEventDetails";
                senderName: string;
                conversationId: string;
                messageId: string;
                senderId: string;
                senderBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                messageBody: string;
            } | {
                __typename: "DAOProposalChangedEventDetails";
                tenantName: string;
                description: string;
                state?: string | undefined;
                daoUrl?: string | undefined;
                proposalUrl?: string | undefined;
                proposalTitle?: string | undefined;
            } | {
                __typename: "DirectTenantMessageEventDetails";
                tenantName: string;
                targetTemplatesJson?: string | undefined;
                templateVariablesJson?: string | undefined;
            } | {
                __typename: "GenericEventDetails";
                sourceName: string;
                notificationTypeName: string;
                eventDetailsJson?: string | undefined;
                icon: "CHART" | "CHECKMARK" | "CLOCK" | "DAO" | "DOWN_ARROW" | "FLAG" | "GRAPH" | "INFO" | "MEGAPHONE" | "PERCENT" | "STAR" | "SWAP" | "UP_ARROW" | "URGENT" | "WATCH";
                genericMessage: string;
                genericMessageHtml?: string | undefined;
                action?: {
                    __typename?: "GenericEventAction" | undefined;
                    name: string;
                    url: string;
                } | undefined;
            } | {
                __typename: "HealthValueOverThresholdEventDetails";
                name: string;
                value: string;
                threshold: string;
                url: string;
            } | {
                __typename: "NftAuctionChangedEventDetails";
                auctionUrl?: string | undefined;
                walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                highBidAmount: number;
                highBidSymbol?: string | undefined;
                imageUrl?: string | undefined;
                auctionTitle: string;
            } | {
                __typename: "NftCollectionsReportEventDetails";
                type: "HOT" | "MOST_TRADED";
                providerName: string;
                sourceLink: string;
                collections: {
                    __typename?: "NftCollectionStats" | undefined;
                    collectionId: string;
                    name: string;
                    imgUrl?: string | undefined;
                    volume1Day?: string | undefined;
                    volume1DayChange?: string | undefined;
                }[];
            } | {
                __typename: "WalletsActivityReportEventDetails";
                providerName: string;
                sourceLink: string;
                walletActivityType: "MOST_ACTIVE";
                wallets: {
                    __typename?: "WalletsActivityReportWallet" | undefined;
                    address: string;
                    volume1Day: string;
                    maxPurchase1Day?: string | undefined;
                    maxPurchaseName?: string | undefined;
                    maxPurchaseImgUrl?: string | undefined;
                    maxPurchaseTokenAddress?: string | undefined;
                }[];
            } | undefined;
        }[] | undefined;
        pageInfo: {
            hasNextPage: boolean;
            endCursor?: string | undefined;
        };
    }>>;
    getTopics: () => Promise<readonly Readonly<{
        name: string | null;
        topicName: string | null;
        targetCollections: readonly string[] | null;
        targetTemplate: string | null;
    }>[]>;
    getUnreadNotificationHistoryCount: () => Promise<{
        __typename?: "GetUnreadNotificationHistoryCountResponse" | undefined;
        count: number;
    }>;
    updateAlert: (input: Readonly<{
        alertId: string;
        emailAddress: string | undefined;
        phoneNumber: string | undefined;
        telegramId: string | undefined;
        webhook?: import("@notifi-network/notifi-core").ClientCreateWebhookParams | undefined;
        includeDiscord: boolean;
    }>) => Promise<{
        __typename?: "Alert" | undefined;
        id: string;
        groupName?: string | undefined;
        name?: string | undefined;
        filterOptions: string;
        filter: {
            __typename?: "Filter" | undefined;
            id: string;
            name?: string | undefined;
            filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
        };
        sourceGroup: {
            __typename?: "SourceGroup" | undefined;
            id: string;
            name?: string | undefined;
            sources?: ({
                __typename?: "Source" | undefined;
                id: string;
                name?: string | undefined;
                type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
                blockchainAddress: string;
                fusionEventTypeId?: string | undefined;
                applicableFilters?: ({
                    __typename?: "Filter" | undefined;
                    id: string;
                    name?: string | undefined;
                    filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
                } | undefined)[] | undefined;
            } | undefined)[] | undefined;
        };
        targetGroup: {
            __typename?: "TargetGroup" | undefined;
            id: string;
            name?: string | undefined;
            emailTargets?: ({
                __typename?: "EmailTarget" | undefined;
                emailAddress?: string | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
            } | undefined)[] | undefined;
            smsTargets?: ({
                __typename?: "SmsTarget" | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                phoneNumber?: string | undefined;
            } | undefined)[] | undefined;
            telegramTargets?: ({
                __typename?: "TelegramTarget" | undefined;
                id: string;
                isConfirmed: boolean;
                name?: string | undefined;
                telegramId: string;
                confirmationUrl?: string | undefined;
            } | undefined)[] | undefined;
            webhookTargets?: ({
                __typename?: "WebhookTarget" | undefined;
                id: string;
                url: string;
                status: "ERROR" | "OK" | "RATE_LIMITED" | "UNCONFIRMED";
                format: "BROWSER_PUSH_CHROME" | "BROWSER_PUSH_MOZILLA" | "BROWSER_PUSH_NOTIFI" | "PAGER_DUTY" | "RAW";
                name?: string | undefined;
                headers?: {
                    __typename?: "KeyValuePairOfStringAndString" | undefined;
                    key: string;
                    value: string;
                }[] | undefined;
            } | undefined)[] | undefined;
            discordTargets?: ({
                __typename?: "DiscordTarget" | undefined;
                id: string;
                discordAccountId?: string | undefined;
                discriminator?: string | undefined;
                isConfirmed: boolean;
                username?: string | undefined;
                name?: string | undefined;
                userStatus: "COMPLETE" | "DISCORD_SERVER_NOT_JOINED" | "UNVERIFIED";
                verificationLink?: string | undefined;
                discordServerInviteLink?: string | undefined;
            } | undefined)[] | undefined;
        };
    }>;
    ensureTargetGroup: (input: Readonly<{
        name: string;
        emailAddress: string | undefined;
        phoneNumber: string | undefined;
        telegramId: string | undefined;
        webhook?: import("@notifi-network/notifi-core").ClientCreateWebhookParams | undefined;
        includeDiscord: boolean;
    }>) => Promise<{
        __typename?: "TargetGroup" | undefined;
        id: string;
        name?: string | undefined;
        emailTargets?: ({
            __typename?: "EmailTarget" | undefined;
            emailAddress?: string | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
        } | undefined)[] | undefined;
        smsTargets?: ({
            __typename?: "SmsTarget" | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            phoneNumber?: string | undefined;
        } | undefined)[] | undefined;
        telegramTargets?: ({
            __typename?: "TelegramTarget" | undefined;
            id: string;
            isConfirmed: boolean;
            name?: string | undefined;
            telegramId: string;
            confirmationUrl?: string | undefined;
        } | undefined)[] | undefined;
        webhookTargets?: ({
            __typename?: "WebhookTarget" | undefined;
            id: string;
            url: string;
            status: "ERROR" | "OK" | "RATE_LIMITED" | "UNCONFIRMED";
            format: "BROWSER_PUSH_CHROME" | "BROWSER_PUSH_MOZILLA" | "BROWSER_PUSH_NOTIFI" | "PAGER_DUTY" | "RAW";
            name?: string | undefined;
            headers?: {
                __typename?: "KeyValuePairOfStringAndString" | undefined;
                key: string;
                value: string;
            }[] | undefined;
        } | undefined)[] | undefined;
        discordTargets?: ({
            __typename?: "DiscordTarget" | undefined;
            id: string;
            discordAccountId?: string | undefined;
            discriminator?: string | undefined;
            isConfirmed: boolean;
            username?: string | undefined;
            name?: string | undefined;
            userStatus: "COMPLETE" | "DISCORD_SERVER_NOT_JOINED" | "UNVERIFIED";
            verificationLink?: string | undefined;
            discordServerInviteLink?: string | undefined;
        } | undefined)[] | undefined;
    }>;
    ensureSourceGroup: (input: Readonly<{
        name: string;
        sources: readonly {
            blockchainAddress?: string | undefined;
            fusionEventTypeId?: string | undefined;
            name?: string | undefined;
            type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
        }[];
    }>) => Promise<{
        __typename?: "SourceGroup" | undefined;
        id: string;
        name?: string | undefined;
        sources?: ({
            __typename?: "Source" | undefined;
            id: string;
            name?: string | undefined;
            type: "ZKSYNC" | "ACALA_WALLET" | "APTOS_WALLET" | "ARBITRUM_WALLET" | "AVALANCHE_WALLET" | "BASE_WALLET" | "BENQI" | "BINANCE_WALLET" | "BONFIDA_NAME_AUCTIONING" | "BONFIDA_NAME_OFFERS" | "BROADCAST" | "COIN_PRICE_CHANGES" | "DELTA_PRIME" | "DELTA_PRIME_LENDING_RATES" | "DIRECT_PUSH" | "ETHEREUM_WALLET" | "FUSION_SOURCE" | "HAWK_SIGHT" | "HEDGE_PROTOCOL" | "METAPLEX_AUCTION_HOUSE" | "NOTIFI_CHAT" | "OPTIMISM_WALLET" | "ORCA" | "POLYGON_WALLET" | "PORT_FINANCE" | "REALM_PROPOSALS" | "SHARKY_PROTOCOL" | "SNAPSHOT" | "SOLANA_BONFIDA_AUCTION" | "SOLANA_JABBER_V1" | "SOLANA_METAPLEX_AUCTION" | "SOLANA_SNOWFLAKE" | "SOLANA_WALLET" | "SUI_WALLET" | "TERRA_WALLET" | "TOPAZ" | "TRIBECA_PROPOSALS" | "XMTP" | "ZKSYNC_WALLET";
            blockchainAddress: string;
            fusionEventTypeId?: string | undefined;
            applicableFilters?: ({
                __typename?: "Filter" | undefined;
                id: string;
                name?: string | undefined;
                filterType: "FUSION_SOURCE" | "ASSET_BUYER_EVENTS" | "ASSET_CATALOG_EVENTS" | "ASSET_SELLER_EVENTS" | "BALANCE" | "BENQI_LENDING_HEALTH_EVENTS" | "BROADCAST_MESSAGES" | "COIN_PRICE_CHANGE_EVENTS" | "DAO_PROPOSAL_EVENTS" | "DELTA_PRIME_BORROW_RATE_EVENTS" | "DELTA_PRIME_LENDING_HEALTH_EVENTS" | "DELTA_PRIME_SUPPLY_RATE_EVENTS" | "DEPOSITS" | "DE_FI_YIELD_STRATEGIES" | "DIRECT_TENANT_MESSAGES" | "LIQUIDATIONS" | "LIQUIDITY_POOL_PRICE_CHANGES" | "MULTI_SIG_SAFE_EVENTS" | "NFT_AUCTIONS" | "NFT_BACKED_LOANS" | "NOTIFI_CHAT_MESSAGES" | "REALM_DAO_PROPOSAL_STATES" | "STAKING_CONFIRMATION_EVENTS" | "STAKING_REMINDER_EVENTS" | "TRIBECA_DAO_PROPOSAL_STATES" | "VALUE_THRESHOLD" | "WEB3_CHAT_MESSAGES" | "WITHDRAWALS";
            } | undefined)[] | undefined;
        } | undefined)[] | undefined;
    }>;
    sendConversationMessages: (input: Readonly<{
        sendConversationMessageInput: {
            conversationId: string;
            message: string;
        };
    }>) => Promise<{
        __typename?: "ConversationMessage" | undefined;
        id: string;
        userId: string;
        conversationId: string;
        createdDate: string;
        updatedDate: string;
        message: string;
        conversationParticipant?: {
            __typename?: "ConversationParticipant" | undefined;
            conversationId: string;
            conversationParticipantType: "SUPPORT" | "ADMIN" | "BANNED" | "MEMBER";
            resolvedName?: string | undefined;
            userId: string;
            walletAddress: string;
            walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
            profile: {
                __typename?: "UserProfile" | undefined;
                avatarData?: string | undefined;
                avatarDataType: "STOCK_NOTIFI" | "URL";
                id: string;
                preferredAddress?: string | undefined;
                preferredBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                preferredName?: string | undefined;
            };
        } | undefined;
    }>;
    sendEmailTargetVerification: (input: Readonly<{
        targetId: string;
    }>) => Promise<string>;
    fetchSubscriptionCard: (input: ClientFetchSubscriptionCardInput) => Promise<Readonly<{
        id: string | null;
        type: string;
        dataJson: string | null;
    }>>;
    getConversationMessages: (input: Readonly<{
        first?: number | undefined;
        after?: string | undefined;
        getConversationMessagesInput: Readonly<{
            conversationId: string;
        }>;
    }>) => Promise<Readonly<{
        nodes?: {
            __typename?: "ConversationMessage" | undefined;
            id: string;
            userId: string;
            conversationId: string;
            createdDate: string;
            updatedDate: string;
            message: string;
            conversationParticipant?: {
                __typename?: "ConversationParticipant" | undefined;
                conversationId: string;
                conversationParticipantType: "SUPPORT" | "ADMIN" | "BANNED" | "MEMBER";
                resolvedName?: string | undefined;
                userId: string;
                walletAddress: string;
                walletBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                profile: {
                    __typename?: "UserProfile" | undefined;
                    avatarData?: string | undefined;
                    avatarDataType: "STOCK_NOTIFI" | "URL";
                    id: string;
                    preferredAddress?: string | undefined;
                    preferredBlockchain: "ACALA" | "APTOS" | "ARBITRUM" | "AVALANCHE" | "BASE" | "BINANCE" | "ETHEREUM" | "EVMOS" | "INJECTIVE" | "NEAR" | "NIBIRU" | "OFF_CHAIN" | "OPTIMISM" | "OSMOSIS" | "POLYGON" | "SOLANA" | "SUI" | "ZKSYNC";
                    preferredName?: string | undefined;
                };
            } | undefined;
        }[] | undefined;
        pageInfo: {
            hasNextPage: boolean;
            endCursor?: string | undefined;
        };
    }>>;
    createDiscordTarget: (input: string) => Promise<string | undefined>;
    markFusionNotificationHistoryAsRead: (input: {
        ids: string | string[];
        beforeId?: string | undefined;
        readState?: ("HIDDEN" | "NONE" | "READ") | undefined;
    }) => Promise<string[]>;
}> & Readonly<{
    data: ClientData | null;
    error: Error | null;
    loading: boolean;
    isAuthenticated: boolean;
    isInitialized: boolean;
    isTokenExpired: boolean;
    expiry: string | null;
    copyAuthorization: (publicKey: string) => Promise<void>;
}>;
export default useNotifiClient;
//# sourceMappingURL=useNotifiClient.d.ts.map