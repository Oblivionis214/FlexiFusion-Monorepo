{
  "version": 3,
  "sources": ["../../@uniswap/sdk-core/src/constants.ts", "../../@uniswap/sdk-core/src/entities/fractions/fraction.ts", "../../@uniswap/sdk-core/src/entities/fractions/currencyAmount.ts", "../../@uniswap/sdk-core/src/entities/fractions/percent.ts", "../../@uniswap/sdk-core/src/entities/fractions/price.ts", "../../@uniswap/sdk-core/src/entities/baseCurrency.ts", "../../@uniswap/sdk-core/src/entities/nativeCurrency.ts", "../../@uniswap/sdk-core/src/utils/validateAndParseAddress.ts", "../../@uniswap/sdk-core/src/entities/token.ts", "../../@uniswap/sdk-core/src/entities/weth9.ts", "../../@uniswap/sdk-core/src/entities/ether.ts", "../../@uniswap/sdk-core/src/utils/computePriceImpact.ts", "../../@uniswap/sdk-core/src/utils/sortedInsert.ts", "../../@uniswap/sdk-core/src/utils/sqrt.ts"],
  "sourcesContent": ["import JSBI from 'jsbi'\n\nexport enum SupportedChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n\n  BNB = 56\n}\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n", "import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n", "import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n", "import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n", "import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n", "import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n", "import invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n", "import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n", "import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n", "import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n", "import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],
  "mappings": "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",
  "names": ["SupportedChainId", "TradeType", "Rounding", "MaxUint256", "JSBI", "BigInt", "Decimal", "toFormat", "_Decimal", "Big", "_Big", "toSignificantRounding", "ROUND_DOWN", "ROUND_HALF_UP", "ROUND_UP", "toFixedRounding", "Fraction", "numerator", "denominator", "tryParseFraction", "fractionish", "Error", "invert", "add", "other", "otherParsed", "equal", "multiply", "subtract", "lessThan", "equalTo", "greaterThan", "divide", "toSignificant", "significantDigits", "format", "rounding", "groupSeparator", "Number", "isInteger", "process", "invariant", "set", "precision", "quotient", "toString", "div", "toSignificantDigits", "decimalPlaces", "toFixed", "DP", "RM", "remainder", "CurrencyAmount", "currency", "lessThanOrEqual", "decimalScale", "exponentiate", "decimals", "fromRawAmount", "rawAmount", "fromFractionalAmount", "equals", "added", "subtracted", "multiplied", "divided", "toExact", "isToken", "wrapped", "ONE_HUNDRED", "toPercent", "fraction", "Percent", "Price", "baseCurrency", "quoteCurrency", "args", "length", "result", "quoteAmount", "baseAmount", "scalar", "quote", "currencyAmount", "adjustedForDecimals", "BaseCurrency", "chainId", "symbol", "name", "isSafeInteger", "NativeCurrency", "validateAndParseAddress", "address", "getAddress", "error", "startsWith0xLen42HexRegex", "checkValidAddress", "test", "Token", "bypassChecksum", "toLowerCase", "sortsBefore", "WETH9", "Ether", "onChain", "_etherCache", "isNative", "weth9", "computePriceImpact", "midPrice", "inputAmount", "outputAmount", "quotedOutputAmount", "priceImpact", "sortedInsert", "items", "maxSize", "comparator", "push", "isFull", "lo", "hi", "mid", "splice", "pop", "MAX_SAFE_INTEGER", "ZERO", "ONE", "TWO", "sqrt", "value", "greaterThanOrEqual", "Math", "floor", "toNumber", "z", "x"]
}
