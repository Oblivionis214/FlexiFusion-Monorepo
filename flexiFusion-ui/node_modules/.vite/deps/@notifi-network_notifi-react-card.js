import {
  require_react_dom
} from "./chunk-HOHIXJ5O.js";
import {
  format,
  parseISO
} from "./chunk-4BIYYE4W.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-YIGK2WMB.js";
import {
  purify
} from "./chunk-2C2BET3H.js";
import {
  require_react
} from "./chunk-ETH773EG.js";
import {
  newFrontendClient,
  require_localforage
} from "./chunk-32H7G742.js";
import "./chunk-BUPNLOT2.js";
import "./chunk-Y2ZB3BXP.js";
import {
  __commonJS,
  __toESM,
  import_buffer,
  import_process,
  init_shim
} from "./chunk-KEE3FHXB.js";

// node_modules/@notifi-network/notifi-react-hooks/dist/utils/alertUtils.js
var require_alertUtils = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/utils/alertUtils.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isAlertPaused = exports.isAlertObsolete = void 0;
    var hasKey4 = (obj, key) => {
      return Object.prototype.hasOwnProperty.call(obj, key);
    };
    var parseFilterOptions = (alert) => {
      const filterOptions = {};
      if (alert.filterOptions === null) {
        return filterOptions;
      }
      let jsonObject = {};
      try {
        jsonObject = JSON.parse(alert.filterOptions);
      } catch (e) {
        jsonObject = {};
      }
      if (hasKey4(jsonObject, "alertFrequency") && (jsonObject.alertFrequency === "ALWAYS" || jsonObject.alertFrequency === "SINGLE")) {
        filterOptions.alertFrequency = jsonObject.alertFrequency;
      }
      if (hasKey4(jsonObject, "threshold") && typeof jsonObject.threshold === "string") {
        try {
          filterOptions.threshold = parseInt(jsonObject.threshold, 10);
        } catch (e) {
          filterOptions.threshold = NaN;
        }
      }
      if (hasKey4(jsonObject, "delayProcessingUntil") && typeof jsonObject.delayProcessingUntil === "string") {
        filterOptions.delayProcessingUntil = jsonObject.delayProcessingUntil;
      }
      return filterOptions;
    };
    var isAlertPaused = (alert) => {
      if (alert.filterOptions === null) {
        return false;
      }
      const filterOptions = parseFilterOptions(alert);
      if (filterOptions.delayProcessingUntil === void 0) {
        return false;
      }
      const delayProcessingUntil = Date.parse(filterOptions.delayProcessingUntil);
      return !isNaN(delayProcessingUntil) && delayProcessingUntil > Date.now();
    };
    exports.isAlertPaused = isAlertPaused;
    var isAlertObsolete = (alert) => {
      if (alert.filterOptions === null) {
        return false;
      }
      const filterOptions = parseFilterOptions(alert);
      return filterOptions.alertFrequency === "SINGLE" && isAlertPaused(alert);
    };
    exports.isAlertObsolete = isAlertObsolete;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/types/GqlError.js
var require_GqlError = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/types/GqlError.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var hasKey4 = (obj, prop) => {
      return typeof obj === "object" && obj !== null && Object.prototype.hasOwnProperty.call(obj, prop);
    };
    var packageErrors = (errors) => {
      const messages = [];
      errors.forEach((error) => {
        if (hasKey4(error, "message") && typeof error.message === "string") {
          messages.push(error.message);
        }
      });
      return messages;
    };
    var GqlError2 = class extends Error {
      constructor(operationName, errors) {
        super(`GQL Errors occurred during ${operationName}`);
        this.operationName = operationName;
        this.errors = errors;
      }
      getErrorMessages() {
        return packageErrors(this.errors);
      }
    };
    exports.default = GqlError2;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/types/AxiosCreate.js
var require_AxiosCreate = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/types/AxiosCreate.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/types/AxiosPost.js
var require_AxiosPost = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/types/AxiosPost.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/types/index.js
var require_types = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/types/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GqlError = void 0;
    var GqlError_1 = __importDefault(require_GqlError());
    exports.GqlError = GqlError_1.default;
    __exportStar(require_AxiosCreate(), exports);
    __exportStar(require_AxiosPost(), exports);
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/utils/axiosRequest.js
var require_axiosRequest = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/utils/axiosRequest.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.makeRequest = exports.makeParameterLessRequest = exports.makeAuthenticatedRequest = void 0;
    var types_1 = require_types();
    var makeRequestInternal = async (query, resultKey, axiosInstance, variables, config) => {
      var _a;
      const { data } = await axiosInstance.post(`/${encodeURIComponent(resultKey)}`, {
        query,
        variables
      }, config);
      const result2 = (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a[resultKey];
      const errors = data === null || data === void 0 ? void 0 : data.errors;
      if (result2 != null) {
        return result2;
      }
      if (errors != null) {
        throw new types_1.GqlError(resultKey, errors);
      }
      throw new Error("Unknown error in makeRequest");
    };
    var makeAuthenticatedRequest = (query, resultKey) => {
      return (axiosInstance, jwt, variables) => makeRequestInternal(query, resultKey, axiosInstance, variables, {
        headers: { Authorization: `Bearer ${jwt}` }
      });
    };
    exports.makeAuthenticatedRequest = makeAuthenticatedRequest;
    var makeRequest = (query, resultKey) => {
      return (axiosInstance, variables) => makeRequestInternal(query, resultKey, axiosInstance, variables);
    };
    exports.makeRequest = makeRequest;
    var makeParameterLessRequest = (query, resultKey) => {
      return (axiosInstance) => makeRequestInternal(query, resultKey, axiosInstance, void 0);
    };
    exports.makeParameterLessRequest = makeParameterLessRequest;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/utils/collectDependencies.js
var require_collectDependencies = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/utils/collectDependencies.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var collectDependencies = (...dependencies) => {
      const set = /* @__PURE__ */ new Set();
      const array = new Array();
      dependencies === null || dependencies === void 0 ? void 0 : dependencies.forEach((dependency) => {
        if (!set.has(dependency)) {
          set.add(dependency);
          array.push(dependency);
        }
      });
      return array.join("\n");
    };
    exports.default = collectDependencies;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/utils/notifiConfigs.js
var require_notifiConfigs = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/utils/notifiConfigs.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOTIFI_CONFIGS = void 0;
    exports.NOTIFI_CONFIGS = {
      Production: {
        gqlUrl: "https://api.notifi.network/gql",
        storagePrefix: "notifi-jwt",
        wsUrl: "wss://api.notifi.network/gql",
        dpapiUrl: "https://dpapi.prd.notifi.network"
      },
      Staging: {
        gqlUrl: "https://api.stg.notifi.network/gql",
        storagePrefix: "notifi-jwt:stg",
        wsUrl: "wss://api.stg.notifi.network/gql",
        dpapiUrl: "https://dpapi.stg.notifi.network"
      },
      Development: {
        gqlUrl: "https://api.dev.notifi.network/gql",
        storagePrefix: "notifi-jwt:dev",
        wsUrl: "wss://api.dev.notifi.network/gql",
        dpapiUrl: "https://dpapi.dev.notifi.network"
      },
      Local: {
        gqlUrl: "https://localhost:5001/gql",
        storagePrefix: "notifi-jwt:local",
        wsUrl: "wss://localhost:5001/gql",
        dpapiUrl: "http://localhost:5005"
      }
    };
    var notifiConfigs = (environment) => {
      return exports.NOTIFI_CONFIGS[environment];
    };
    exports.default = notifiConfigs;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/utils/index.js
var require_utils = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/utils/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result2 = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result2, mod, k2);
      }
      __setModuleDefault(result2, mod);
      return result2;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOTIFI_CONFIGS = exports.notifiConfigs = exports.makeRequest = exports.makeParameterLessRequest = exports.makeAuthenticatedRequest = exports.collectDependencies = void 0;
    var axiosRequest_1 = require_axiosRequest();
    Object.defineProperty(exports, "makeAuthenticatedRequest", { enumerable: true, get: function() {
      return axiosRequest_1.makeAuthenticatedRequest;
    } });
    Object.defineProperty(exports, "makeParameterLessRequest", { enumerable: true, get: function() {
      return axiosRequest_1.makeParameterLessRequest;
    } });
    Object.defineProperty(exports, "makeRequest", { enumerable: true, get: function() {
      return axiosRequest_1.makeRequest;
    } });
    var collectDependencies_1 = __importDefault(require_collectDependencies());
    exports.collectDependencies = collectDependencies_1.default;
    var notifiConfigs_1 = __importStar(require_notifiConfigs());
    exports.notifiConfigs = notifiConfigs_1.default;
    Object.defineProperty(exports, "NOTIFI_CONFIGS", { enumerable: true, get: function() {
      return notifiConfigs_1.NOTIFI_CONFIGS;
    } });
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/index.js
var require_dist = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-utils/dist/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_types(), exports);
    __exportStar(require_utils(), exports);
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureSource.js
var require_ensureSource = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureSource.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ensureMetaplexAuctionSource = exports.ensureBonfidaAuctionSource = void 0;
    var ensureSource = async (service, existing, input) => {
      const found = existing.find((it2) => input.name === it2.name);
      if (found !== void 0) {
        return found;
      }
      const newSource = await service.createSource(input);
      existing.push(newSource);
      return newSource;
    };
    var ensureBonfidaAuctionSource = async (service, existing, input) => {
      const { auctionAddressBase58, auctionName } = input;
      const underlyingAddress = `${auctionName}:;:${auctionAddressBase58}`;
      return await ensureSource(service, existing, {
        name: auctionAddressBase58,
        blockchainAddress: underlyingAddress,
        type: "SOLANA_BONFIDA_AUCTION"
      });
    };
    exports.ensureBonfidaAuctionSource = ensureBonfidaAuctionSource;
    var ensureMetaplexAuctionSource = async (service, existing, input) => {
      const { auctionAddressBase58, auctionWebUrl } = input;
      const underlyingAddress = `${auctionWebUrl}:;:${auctionAddressBase58}`;
      return await ensureSource(service, existing, {
        name: auctionAddressBase58,
        blockchainAddress: underlyingAddress,
        type: "SOLANA_METAPLEX_AUCTION"
      });
    };
    exports.ensureMetaplexAuctionSource = ensureMetaplexAuctionSource;
    exports.default = ensureSource;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureSourceGroup.js
var require_ensureSourceGroup = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureSourceGroup.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var updateSourceGroup = async (service, existing, input) => {
      const sourceGroupId = existing.id;
      if (sourceGroupId === null) {
        throw new Error("Invalid source group");
      }
      return await service.updateSourceGroup(Object.assign({ id: sourceGroupId }, input));
    };
    var ensureSourceGroup = async (service, existing, input) => {
      const existingIndex = existing.findIndex((it2) => it2.name === input.name);
      if (existingIndex >= 0) {
        const result2 = await updateSourceGroup(service, existing[existingIndex], input);
        existing[existingIndex] = result2;
        return result2;
      } else {
        const result2 = await service.createSourceGroup(input);
        existing.push(result2);
        return result2;
      }
    };
    exports.default = ensureSourceGroup;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureTarget.js
var require_ensureTarget = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureTarget.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ensureDiscord = exports.ensureWebhook = exports.ensureTelegram = exports.ensureSms = exports.ensureEmail = void 0;
    var ensureTarget = (create, identify, valueTransform) => {
      return async (service, existing, value) => {
        if (value === void 0) {
          return void 0;
        }
        const transformedValue = valueTransform !== void 0 ? valueTransform(value) : value;
        const found = existing === null || existing === void 0 ? void 0 : existing.find((it2) => identify(it2) === transformedValue);
        if (found !== void 0) {
          return found.id;
        }
        const created = await create(service, transformedValue);
        existing === null || existing === void 0 ? void 0 : existing.push(created);
        return created.id;
      };
    };
    var ensureEmail = ensureTarget(async (service, value) => await service.createEmailTarget({
      name: value.toLowerCase(),
      value: value.toLowerCase()
    }), (arg) => {
      var _a, _b;
      return (_b = (_a = arg.emailAddress) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : void 0;
    }, (value) => value.toLowerCase());
    exports.ensureEmail = ensureEmail;
    var ensureSms = ensureTarget(async (service, value) => await service.createSmsTarget({
      name: value,
      value
    }), (arg) => arg.phoneNumber);
    exports.ensureSms = ensureSms;
    var ensureTelegram = ensureTarget(async (service, value) => await service.createTelegramTarget({
      name: value.toLowerCase(),
      value: value.toLowerCase()
    }), (arg) => {
      var _a, _b;
      return (_b = (_a = arg.telegramId) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : null;
    }, (value) => value.toLowerCase());
    exports.ensureTelegram = ensureTelegram;
    var ensureWebhook = async (service, existing, params) => {
      if (params === void 0) {
        return null;
      }
      const found = existing === null || existing === void 0 ? void 0 : existing.find((it2) => it2.url.toLowerCase() === params.url.toLowerCase() && it2.format === params.format);
      if (found !== void 0) {
        return found.id;
      }
      const created = await service.createWebhookTarget(Object.assign(Object.assign({}, params), { name: params.url.toLowerCase(), url: params.url.toLowerCase() }));
      existing === null || existing === void 0 ? void 0 : existing.push(created);
      return created.id;
    };
    exports.ensureWebhook = ensureWebhook;
    var ensureDiscord = ensureTarget(async (service, value) => await service.createDiscordTarget({
      name: value,
      value
    }), (arg) => arg.name, () => "Default");
    exports.ensureDiscord = ensureDiscord;
    exports.default = ensureTarget;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureTargetGroup.js
var require_ensureTargetGroup = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureTargetGroup.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var updateTargetGroup = async (service, existing, input) => {
      const targetGroupId = existing.id;
      if (targetGroupId === null) {
        throw new Error("Invalid target group");
      }
      return await service.updateTargetGroup(Object.assign({ id: targetGroupId }, input));
    };
    var ensureTargetGroup = async (service, existing, input) => {
      const existingIndex = existing.findIndex((it2) => it2.name === input.name);
      if (existingIndex >= 0) {
        const result2 = await updateTargetGroup(service, existing[existingIndex], input);
        existing[existingIndex] = result2;
        return result2;
      } else {
        const result2 = await service.createTargetGroup(input);
        existing.push(result2);
        return result2;
      }
    };
    exports.default = ensureTargetGroup;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureTargetIds.js
var require_ensureTargetIds = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/utils/ensureTargetIds.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var ensureTarget_1 = require_ensureTarget();
    var ensureTargetIds = async (service, existing, input) => {
      const { emailAddress, phoneNumber, telegramId, webhook, includeDiscord } = input;
      const [emailTargetId, smsTargetId, telegramTargetId, webhookTargetId, discordTargetId] = await Promise.all([
        (0, ensureTarget_1.ensureEmail)(service, existing.emailTargets, emailAddress),
        (0, ensureTarget_1.ensureSms)(service, existing.smsTargets, phoneNumber),
        (0, ensureTarget_1.ensureTelegram)(service, existing.telegramTargets, telegramId),
        (0, ensureTarget_1.ensureWebhook)(service, existing.webhookTargets, webhook),
        includeDiscord ? (0, ensureTarget_1.ensureDiscord)(service, existing.discordTargets, "Default") : Promise.resolve(null)
      ]);
      const emailTargetIds = [];
      if (emailTargetId !== null) {
        emailTargetIds.push(emailTargetId);
      }
      const smsTargetIds = [];
      if (smsTargetId !== null) {
        smsTargetIds.push(smsTargetId);
      }
      const telegramTargetIds = [];
      if (telegramTargetId !== null) {
        telegramTargetIds.push(telegramTargetId);
      }
      const webhookTargetIds = [];
      if (webhookTargetId !== null) {
        webhookTargetIds.push(webhookTargetId);
      }
      const discordTargetIds = [];
      if (discordTargetId !== null) {
        discordTargetIds.push(discordTargetId);
      }
      return {
        emailTargetIds,
        smsTargetIds,
        telegramTargetIds,
        webhookTargetIds,
        discordTargetIds
      };
    };
    exports.default = ensureTargetIds;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/utils/fetchDataImpl.js
var require_fetchDataImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/utils/fetchDataImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var doFetchData = async (service) => {
      const [alerts, connectedWallets, sources, sourceGroups, targetGroups, emailTargets, smsTargets, telegramTargets, webhookTargets, discordTargets] = await Promise.all([
        service.getAlerts(),
        service.getConnectedWallets(),
        service.getSources(),
        service.getSourceGroups(),
        service.getTargetGroups(),
        service.getEmailTargets(),
        service.getSmsTargets(),
        service.getTelegramTargets(),
        service.getWebhookTargets(),
        service.getDiscordTargets()
      ]);
      const filterIds = /* @__PURE__ */ new Set();
      const filters = [];
      sources.forEach((source) => {
        var _a;
        (_a = source.applicableFilters) === null || _a === void 0 ? void 0 : _a.forEach((filter2) => {
          var _a2;
          if (filter2 && !filterIds.has((_a2 = filter2 === null || filter2 === void 0 ? void 0 : filter2.id) !== null && _a2 !== void 0 ? _a2 : "")) {
            filters.push(filter2);
            filterIds.add(filter2.id);
          }
        });
      });
      return {
        alerts: [...alerts],
        connectedWallets: [...connectedWallets],
        filters,
        sources: [...sources],
        discordTargets: [...discordTargets],
        sourceGroups: [...sourceGroups],
        targetGroups: [...targetGroups],
        emailTargets: [...emailTargets],
        smsTargets: [...smsTargets],
        telegramTargets: [...telegramTargets],
        webhookTargets: [...webhookTargets]
      };
    };
    var DataTtlMs = 1e3;
    var fetchDataImpl = async (service, timeProvider, state) => {
      if (state.pendingPromise !== void 0) {
        return await state.pendingPromise;
      }
      if (state.lastSuccessTime !== void 0 && state.lastSuccessData !== void 0) {
        const currentTime = timeProvider.now();
        if (currentTime <= state.lastSuccessTime + DataTtlMs) {
          return state.lastSuccessData;
        }
      }
      const promise = doFetchData(service);
      state.pendingPromise = promise;
      const results = await promise;
      state.pendingPromise = void 0;
      state.lastSuccessTime = timeProvider.now();
      state.lastSuccessData = results;
      return results;
    };
    exports.default = fetchDataImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/utils/packFilterOptions.js
var require_packFilterOptions = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/utils/packFilterOptions.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var packFilterOptions = (clientOptions) => {
      if (clientOptions === void 0) {
        return "{}";
      }
      return JSON.stringify(clientOptions);
    };
    exports.default = packFilterOptions;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/utils/storage.js
var require_storage = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/utils/storage.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var localforage_1 = __importDefault(require_localforage());
    localforage_1.default.config({
      name: "notifi"
    });
    var storage = ({ dappAddress, jwtPrefix, walletPublicKey }) => {
      const oldKey = `${jwtPrefix}:${dappAddress}:${walletPublicKey}`;
      const newKey = `${jwtPrefix}:${dappAddress}:${walletPublicKey}:authorization`;
      const getAuthorization = async () => {
        const oldValue = await localforage_1.default.getItem(oldKey);
        if (oldValue !== null) {
          const expiry = /* @__PURE__ */ new Date();
          expiry.setMinutes(expiry.getMinutes() - 1);
          const migrated = {
            token: oldValue,
            expiry: expiry.toISOString()
          };
          await localforage_1.default.removeItem(oldKey);
          await localforage_1.default.setItem(newKey, migrated);
        }
        return await localforage_1.default.getItem(newKey);
      };
      const setAuthorization = async (authorization) => {
        await localforage_1.default.setItem(newKey, authorization);
      };
      const rolesKey = `${jwtPrefix}:${dappAddress}:${walletPublicKey}:roles`;
      const getRoles = async () => {
        return await localforage_1.default.getItem(rolesKey);
      };
      const setRoles = async (roles) => {
        await localforage_1.default.setItem(rolesKey, roles);
      };
      return {
        getAuthorization,
        getRoles,
        setAuthorization,
        setRoles
      };
    };
    exports.default = storage;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/hooks/useNotifiConfig.js
var require_useNotifiConfig = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/hooks/useNotifiConfig.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlockchainEnvironment = void 0;
    var notifi_axios_utils_1 = require_dist();
    var BlockchainEnvironment;
    (function(BlockchainEnvironment2) {
      BlockchainEnvironment2[BlockchainEnvironment2["MainNetBeta"] = 0] = "MainNetBeta";
      BlockchainEnvironment2[BlockchainEnvironment2["TestNet"] = 1] = "TestNet";
      BlockchainEnvironment2[BlockchainEnvironment2["DevNet"] = 2] = "DevNet";
      BlockchainEnvironment2[BlockchainEnvironment2["LocalNet"] = 3] = "LocalNet";
    })(BlockchainEnvironment = exports.BlockchainEnvironment || (exports.BlockchainEnvironment = {}));
    var useNotifiConfig = (env = "Production") => {
      let notifiEnv;
      switch (env) {
        case BlockchainEnvironment.MainNetBeta:
          notifiEnv = "Production";
          break;
        case BlockchainEnvironment.TestNet:
          notifiEnv = "Staging";
          break;
        case BlockchainEnvironment.DevNet:
          notifiEnv = "Development";
          break;
        case BlockchainEnvironment.LocalNet:
          notifiEnv = "Local";
          break;
        default:
          notifiEnv = env;
      }
      const { gqlUrl, storagePrefix } = (0, notifi_axios_utils_1.notifiConfigs)(notifiEnv);
      return {
        gqlUrl,
        storagePrefix
      };
    };
    exports.default = useNotifiConfig;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i2 = 0; i2 < args.length; i2++) {
          args[i2] = arguments[i2];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    init_shim();
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return toString.call(val) === "[object FormData]";
    }
    function isArrayBufferView(val) {
      var result2;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result2 = ArrayBuffer.isView(val);
      } else {
        result2 = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result2;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject3(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject3(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return toString.call(val) === "[object URLSearchParams]";
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i2 = 0, l2 = obj.length; i2 < l2; i2++) {
          fn.call(null, obj[i2], i2, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge2() {
      var result2 = {};
      function assignValue(val, key) {
        if (isPlainObject(result2[key]) && isPlainObject(val)) {
          result2[key] = merge2(result2[key], val);
        } else if (isPlainObject(val)) {
          result2[key] = merge2({}, val);
        } else if (isArray(val)) {
          result2[key] = val.slice();
        } else {
          result2[key] = val;
        }
      }
      for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
        forEach(arguments[i2], assignValue);
      }
      return result2;
    }
    function extend(a2, b2, thisArg) {
      forEach(b2, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      });
      return a2;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject: isObject3,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge: merge2,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v2) {
            if (utils.isDate(v2)) {
              v2 = v2.toISOString();
            } else if (utils.isObject(v2)) {
              v2 = JSON.stringify(v2);
            }
            parts.push(encode(key) + "=" + encode(v2));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id3) {
      if (this.handlers[id3]) {
        this.handlers[id3] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h2) {
        if (h2 !== null) {
          fn(h2);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/defaults/transitional.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    init_shim();
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    init_shim();
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    init_shim();
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i2;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i2 = line.indexOf(":");
        key = utils.trim(line.substr(0, i2)).toLowerCase();
        val = utils.trim(line.substr(i2 + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    init_shim();
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var transitionalDefaults = require_transitional();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/defaults/index.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var transitionalDefaults = require_transitional();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof import_process.default !== "undefined" && Object.prototype.toString.call(import_process.default) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge2 = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge2(prop);
        utils.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/env/data.js"(exports, module) {
    init_shim();
    module.exports = {
      "version": "0.26.1"
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    init_shim();
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i2) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i2 = keys.length;
      while (i2-- > 0) {
        var opt = keys[i2];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result2 = value === void 0 || validator(value, opt, options);
          if (result2 !== true) {
            throw new TypeError("option " + opt + " must be " + result2);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    init_shim();
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i2;
        var l2 = token._listeners.length;
        for (i2 = 0; i2 < l2; i2++) {
          token._listeners[i2](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe2(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c2) {
        cancel = c2;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    module.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils2();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/axios/index.js"(exports, module) {
    init_shim();
    module.exports = require_axios();
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/filterFragment.js
var require_filterFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/filterFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filterFragmentDependencies = exports.filterFragment = void 0;
    exports.filterFragment = `
fragment filterFragment on Filter {
  id
  name
  filterType
}
`.trim();
    exports.filterFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/sourceFragment.js
var require_sourceFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/sourceFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sourceFragmentDependencies = exports.sourceFragment = void 0;
    var filterFragment_1 = require_filterFragment();
    exports.sourceFragment = `
fragment sourceFragment on Source {
  id
  name
  type
  blockchainAddress
  fusionEventTypeId
  applicableFilters {
    ...filterFragment
  }
}
`.trim();
    exports.sourceFragmentDependencies = [
      ...filterFragment_1.filterFragmentDependencies,
      filterFragment_1.filterFragment
    ];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/sourceGroupFragment.js
var require_sourceGroupFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/sourceGroupFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sourceGroupFragmentDependencies = exports.sourceGroupFragment = void 0;
    var sourceFragment_1 = require_sourceFragment();
    exports.sourceGroupFragment = `
fragment sourceGroupFragment on SourceGroup {
  id
  name
  sources {
    ...sourceFragment
  }
}
`.trim();
    exports.sourceGroupFragmentDependencies = [
      ...sourceFragment_1.sourceFragmentDependencies,
      sourceFragment_1.sourceFragment
    ];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/discordTargetFragment.js
var require_discordTargetFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/discordTargetFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.discordTargetFragmentDependencies = exports.discordTargetFragment = void 0;
    exports.discordTargetFragment = `
fragment discordTargetFragment on DiscordTarget {
  id
  discordAccountId
  discriminator
  isConfirmed
  username
  name
  userStatus
  verificationLink
  discordServerInviteLink
}
`.trim();
    exports.discordTargetFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/emailTargetFragment.js
var require_emailTargetFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/emailTargetFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emailTargetFragmentDependencies = exports.emailTargetFragment = void 0;
    exports.emailTargetFragment = `
fragment emailTargetFragment on EmailTarget {
  emailAddress
  id
  isConfirmed
  name
}
`.trim();
    exports.emailTargetFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/smsTargetFragment.js
var require_smsTargetFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/smsTargetFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.smsTargetFragmentDependencies = exports.smsTargetFragment = void 0;
    exports.smsTargetFragment = `
fragment smsTargetFragment on SmsTarget {
  id
  isConfirmed
  name
  phoneNumber
}
`.trim();
    exports.smsTargetFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/telegramTargetFragment.js
var require_telegramTargetFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/telegramTargetFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.telegramTargetFragmentDependencies = exports.telegramTargetFragment = void 0;
    exports.telegramTargetFragment = `
fragment telegramTargetFragment on TelegramTarget {
  id
  isConfirmed
  name
  telegramId
  confirmationUrl
}
`.trim();
    exports.telegramTargetFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/targetGroupFragment.js
var require_targetGroupFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/targetGroupFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.targetGroupFragmentDependencies = exports.targetGroupFragment = void 0;
    var discordTargetFragment_1 = require_discordTargetFragment();
    var emailTargetFragment_1 = require_emailTargetFragment();
    var smsTargetFragment_1 = require_smsTargetFragment();
    var telegramTargetFragment_1 = require_telegramTargetFragment();
    exports.targetGroupFragment = `
fragment targetGroupFragment on TargetGroup {
  id
  name
  emailTargets {
    ...emailTargetFragment
  }
  smsTargets {
    ...smsTargetFragment
  }
  telegramTargets {
    ...telegramTargetFragment
  }
  discordTargets {
    ...discordTargetFragment
  }
}
`.trim();
    exports.targetGroupFragmentDependencies = [
      ...emailTargetFragment_1.emailTargetFragmentDependencies,
      ...smsTargetFragment_1.smsTargetFragmentDependencies,
      ...telegramTargetFragment_1.telegramTargetFragmentDependencies,
      ...discordTargetFragment_1.discordTargetFragmentDependencies,
      emailTargetFragment_1.emailTargetFragment,
      smsTargetFragment_1.smsTargetFragment,
      telegramTargetFragment_1.telegramTargetFragment,
      discordTargetFragment_1.discordTargetFragment
    ];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/alertFragment.js
var require_alertFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/alertFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.alertFragmentDependencies = exports.alertFragment = void 0;
    var filterFragment_1 = require_filterFragment();
    var sourceGroupFragment_1 = require_sourceGroupFragment();
    var targetGroupFragment_1 = require_targetGroupFragment();
    exports.alertFragment = `
fragment alertFragment on Alert {
  id
  groupName
  name
  filterOptions
  filter {
    ...filterFragment
  }
  sourceGroup {
    ...sourceGroupFragment
  }
  targetGroup {
    ...targetGroupFragment
  }
}
`.trim();
    exports.alertFragmentDependencies = [
      ...sourceGroupFragment_1.sourceGroupFragmentDependencies,
      ...filterFragment_1.filterFragmentDependencies,
      ...targetGroupFragment_1.targetGroupFragmentDependencies,
      sourceGroupFragment_1.sourceGroupFragment,
      filterFragment_1.filterFragment,
      targetGroupFragment_1.targetGroupFragment
    ];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/authorizationFragment.js
var require_authorizationFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/authorizationFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.authorizationFragmentDependencies = exports.authorizationFragment = void 0;
    exports.authorizationFragment = `
fragment authorizationFragment on Authorization {
  token
  expiry
}
`.trim();
    exports.authorizationFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/beginLogInByTransactionFragment.js
var require_beginLogInByTransactionFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/beginLogInByTransactionFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beginLogInByTransactionFragmentDependencies = exports.beginLogInByTransactionFragment = void 0;
    exports.beginLogInByTransactionFragment = `
fragment beginLogInByTransactionFragment on BeginLogInByTransactionResult {
  nonce
}
`.trim();
    exports.beginLogInByTransactionFragmentDependencies = [
      exports.beginLogInByTransactionFragment
    ];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/clientConfigurationFragment.js
var require_clientConfigurationFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/clientConfigurationFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clientConfigurationFragmentDependencies = exports.clientConfigurationFragment = void 0;
    exports.clientConfigurationFragment = `
fragment clientConfigurationFragment on ClientConfiguration {
  supportedSmsCountryCodes
  supportedTargetTypes
}
`.trim();
    exports.clientConfigurationFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/userFragment.js
var require_userFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/userFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.userFragmentDependencies = exports.userFragment = void 0;
    var authorizationFragment_1 = require_authorizationFragment();
    exports.userFragment = `
fragment userFragment on User {
  email
  emailConfirmed
  authorization {
    ...authorizationFragment
  }
  roles
}
`.trim();
    exports.userFragmentDependencies = [
      ...authorizationFragment_1.authorizationFragmentDependencies,
      authorizationFragment_1.authorizationFragment
    ];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/completeLogInByTransactionFragment.js
var require_completeLogInByTransactionFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/completeLogInByTransactionFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.completeLogInByTransactionFragmentDependencies = exports.completeLogInByTransactionFragment = void 0;
    var userFragment_1 = require_userFragment();
    exports.completeLogInByTransactionFragment = `
fragment completeLogInByTransactionFragment on CompleteLogInByTransactionResult {
  ...userFragment
}
`.trim();
    exports.completeLogInByTransactionFragmentDependencies = [
      userFragment_1.userFragment,
      exports.completeLogInByTransactionFragment
    ];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/connectedWalletFragment.js
var require_connectedWalletFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/connectedWalletFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.connectedWalletFragmentDependencies = exports.connectedWalletFragment = void 0;
    exports.connectedWalletFragment = `
fragment connectedWalletFragment on ConnectedWallet {
  address
  walletBlockchain
}
`.trim();
    exports.connectedWalletFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/participantFragment.js
var require_participantFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/participantFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.participantFragmentDependencies = exports.participantFragment = void 0;
    exports.participantFragment = `
fragment Participant on ConversationParticipant {
  conversationId
  conversationParticipantType
  profile {
    avatarData
    avatarDataType
    id
    preferredAddress
    preferredBlockchain
    preferredName
  }
  resolvedName
  userId
  walletAddress
  walletBlockchain
}
`.trim();
    exports.participantFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/conversationMessageFragment.js
var require_conversationMessageFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/conversationMessageFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.conversationMessageFragmentDependencies = exports.conversationMessageFragment = void 0;
    var participantFragment_1 = require_participantFragment();
    exports.conversationMessageFragment = `
fragment ConversationMessage on ConversationMessage {
  id
  userId
  conversationId
  createdDate
  updatedDate
  message
  conversationParticipant {
    ...Participant
  }
}
`.trim();
    exports.conversationMessageFragmentDependencies = [
      ...participantFragment_1.participantFragmentDependencies,
      participantFragment_1.participantFragment
    ];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/convMessagePageInfoFragment.js
var require_convMessagePageInfoFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/convMessagePageInfoFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConvMessagePageInfoFragment = void 0;
    exports.ConvMessagePageInfoFragment = `
fragment ConvMessagePageInfo on PageInfo {
  hasNextPage
  endCursor
}
`.trim();
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/notificationHistoryEntryFragment.js
var require_notificationHistoryEntryFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/notificationHistoryEntryFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.notificationHistoryEntryFragmentDependencies = exports.notificationHistoryEntryFragment = exports.NotificationTypeName = void 0;
    var NotificationTypeName;
    (function(NotificationTypeName2) {
      NotificationTypeName2["ACCOUNT_BALANCE_CHANGED"] = "AccountBalanceChangedEventDetails";
      NotificationTypeName2["BROADCAST_MESSAGE"] = "BroadcastMessageEventDetails";
      NotificationTypeName2["DIRECT_TENANT_MESSAGE"] = "DirectTenantMessageEventDetails";
      NotificationTypeName2["NFT_COLLECTION_REPORT"] = "NftCollectionsReportEventDetails";
      NotificationTypeName2["CHAT_MESSAGE_RECEIVED"] = "ChatMessageReceivedEventDetails";
      NotificationTypeName2["DAO_PROPOSAL_CHANGED"] = "DaoProposalChangedEventDetails";
      NotificationTypeName2["NFT_AUCTION_CHANGED"] = "NftAuctionChangedEventDetails";
      NotificationTypeName2["WALLETS_ACTIVITY_CHANGED"] = "WalletsActivityChangedEventDetails";
      NotificationTypeName2["HEALTH_VALUE_OVER_THRESHOLD"] = "HealthValueOverThresholdEventDetails";
      NotificationTypeName2["GENERIC_EVENT"] = "GenericEventDetails";
    })(NotificationTypeName = exports.NotificationTypeName || (exports.NotificationTypeName = {}));
    exports.notificationHistoryEntryFragment = `
fragment NotificationHistoryEntry on NotificationHistoryEntry {
  __typename
  id
  createdDate
  eventId
  read
  sourceAddress
  category
  transactionSignature
  targets {
    type
    name
  }
  detail {
    __typename
    ... on AccountBalanceChangedEventDetails {
      walletBlockchain
      direction
      newValue
      previousValue
      tokenSymbol
      isWhaleWatch
    }
    ... on BroadcastMessageEventDetails {
      messageType: type
      subject
      message
      messageHtml
    }
    ... on DirectTenantMessageEventDetails {
      tenantName
    }
    ... on NftCollectionsReportEventDetails {
      type
      providerName
      sourceLink
      collections {
        collectionId
        name
        imgUrl
        volume1Day
        volume1DayChange
      }
    }
    ... on ChatMessageReceivedEventDetails {
      senderName
      conversationId
      messageId
      senderId
      senderBlockchain
      senderName
      messageBody
    }
    ... on DAOProposalChangedEventDetails {
      tenantName
      proposalTitle: title
      description
      state
      daoUrl
      proposalUrl
    }
    ... on NftAuctionChangedEventDetails {
      auctionTitle: title
      auctionUrl
      walletBlockchain
      highBidAmount
      highBidSymbol
      imageUrl
    }
    ... on WalletsActivityReportEventDetails {
      providerName
      sourceLink
      walletActivityType: type
      wallets {
        address
        volume1Day
        maxPurchase1Day
        maxPurchaseName
        maxPurchaseImgUrl
        maxPurchaseTokenAddress
      }
    }
    ... on HealthValueOverThresholdEventDetails {
      name
      value
      threshold
      url
    }
    ... on GenericEventDetails {
      sourceName
      notificationTypeName
      genericMessage: message
      genericMessageHtml: messageHtml
      eventDetailsJson
      action {
        name
        url
      }
      icon
    }
  }
}`.trim();
    exports.notificationHistoryEntryFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/userTopicFragment.js
var require_userTopicFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/userTopicFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.userTopicFragmentDependencies = exports.userTopicFragment = void 0;
    exports.userTopicFragment = `
fragment userTopicFragment on UserTopic {
  name
  topicName
  targetCollections
  targetTemplate
}
`.trim();
    exports.userTopicFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/webhookTargetFragment.js
var require_webhookTargetFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/webhookTargetFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.webhookTargetFragmentDependencies = exports.webhookTargetFragment = void 0;
    exports.webhookTargetFragment = `
fragment webhookTargetFragment on WebhookTarget {
  id
  url
  status
  format
  headers {
    key
    value
  }
  id
  name
}
`.trim();
    exports.webhookTargetFragmentDependencies = [];
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/fusionNotificationHistoryEntryFragment.js
var require_fusionNotificationHistoryEntryFragment = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/fusionNotificationHistoryEntryFragment.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fusionNotificationHistoryEntryFragment = void 0;
    exports.fusionNotificationHistoryEntryFragment = `
fragment FusionNotificationHistoryEntry on FusionNotificationHistoryEntry {
  __typename
  id
  createdDate
  read
  fusionEventVariables
  detail {
    __typename
    ... on AccountBalanceChangedEventDetails {
      walletBlockchain
      direction
      newValue
      previousValue
      tokenSymbol
      isWhaleWatch
    }
    ... on BroadcastMessageEventDetails {
      messageType: type
      subject
      message
      messageHtml
    }
    ... on DirectTenantMessageEventDetails {
      tenantName
    }
    ... on NftCollectionsReportEventDetails {
      type
      providerName
      sourceLink
      collections {
        collectionId
        name
        imgUrl
        volume1Day
        volume1DayChange
      }
    }
    ... on ChatMessageReceivedEventDetails {
      senderName
      conversationId
      messageId
      senderId
      senderBlockchain
      senderName
      messageBody
    }
    ... on DAOProposalChangedEventDetails {
      tenantName
      proposalTitle: title
      description
      state
      daoUrl
      proposalUrl
    }
    ... on NftAuctionChangedEventDetails {
      auctionTitle: title
      auctionUrl
      walletBlockchain
      highBidAmount
      highBidSymbol
      imageUrl
    }
    ... on WalletsActivityReportEventDetails {
      providerName
      sourceLink
      walletActivityType: type
      wallets {
        address
        volume1Day
        maxPurchase1Day
        maxPurchaseName
        maxPurchaseImgUrl
        maxPurchaseTokenAddress
      }
    }
    ... on HealthValueOverThresholdEventDetails {
      name
      value
      threshold
      url
    }
    ... on GenericEventDetails {
      sourceName
      notificationTypeName
      genericMessage: message
      genericMessageHtml: messageHtml
      eventDetailsJson
      action {
        name
        url
      }
      icon
    }
  }
}`.trim();
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/index.js
var require_fragments = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/fragments/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_alertFragment(), exports);
    __exportStar(require_authorizationFragment(), exports);
    __exportStar(require_beginLogInByTransactionFragment(), exports);
    __exportStar(require_clientConfigurationFragment(), exports);
    __exportStar(require_completeLogInByTransactionFragment(), exports);
    __exportStar(require_connectedWalletFragment(), exports);
    __exportStar(require_conversationMessageFragment(), exports);
    __exportStar(require_convMessagePageInfoFragment(), exports);
    __exportStar(require_emailTargetFragment(), exports);
    __exportStar(require_filterFragment(), exports);
    __exportStar(require_notificationHistoryEntryFragment(), exports);
    __exportStar(require_participantFragment(), exports);
    __exportStar(require_smsTargetFragment(), exports);
    __exportStar(require_sourceFragment(), exports);
    __exportStar(require_sourceGroupFragment(), exports);
    __exportStar(require_targetGroupFragment(), exports);
    __exportStar(require_telegramTargetFragment(), exports);
    __exportStar(require_userFragment(), exports);
    __exportStar(require_userTopicFragment(), exports);
    __exportStar(require_webhookTargetFragment(), exports);
    __exportStar(require_discordTargetFragment(), exports);
    __exportStar(require_fusionNotificationHistoryEntryFragment(), exports);
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/beginLogInByTransaction.js
var require_beginLogInByTransaction = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/beginLogInByTransaction.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.beginLogInByTransactionFragmentDependencies,
      fragments_1.beginLogInByTransactionFragment
    ];
    var MUTATION = `
mutation beginLogInByTransaction(
  $walletAddress: String!
  $walletBlockchain: WalletBlockchain!
  $dappAddress: String!
) {
  beginLogInByTransaction(beginLogInByTransactionInput: {
    walletAddress: $walletAddress
    walletBlockchain: $walletBlockchain
    dappAddress: $dappAddress
  }) {
    ...beginLogInByTransactionFragment
  }
}
`.trim();
    var beginLogInByTransactionImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "beginLogInByTransaction");
    exports.default = beginLogInByTransactionImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/broadcastMessageImpl.js
var require_broadcastMessageImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/broadcastMessageImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var DEPENDENCIES = [];
    var MUTATION = `
mutation broadcastMessage(
  $idempotencyKey: String
  $topicName: String!
  $targetTemplates: [KeyValuePairOfTargetTypeAndStringInput!]
  $variables: [KeyValuePairOfStringAndStringInput!]
  $timestamp: Long!
  $walletBlockchain: WalletBlockchain!
  $signature: String!
) {
  broadcastMessage(broadcastMessageInput: {
    idempotencyKey: $idempotencyKey
    sourceAddress: $topicName
    targetTemplates: $targetTemplates
    variables: $variables
    timestamp: $timestamp
    walletBlockchain: $walletBlockchain
  }, signature: $signature) {
    id
  }
}
`.trim();
    var broadcastMessageImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "broadcastMessage");
    exports.default = broadcastMessageImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/completeLogInByTransaction.js
var require_completeLogInByTransaction = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/completeLogInByTransaction.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.userFragmentDependencies, fragments_1.userFragment];
    var MUTATION = `
mutation completeLogInByTransaction(
  $walletAddress: String!,
  $walletBlockchain: WalletBlockchain!,
  $dappAddress: String!,
  $randomUuid: String!,
  $transactionSignature: String!
) {
  completeLogInByTransaction(completeLogInByTransactionInput: {
    walletAddress: $walletAddress
    walletBlockchain: $walletBlockchain
    dappAddress: $dappAddress
    randomUuid: $randomUuid
    transactionSignature: $transactionSignature
  }) {
    ...userFragment
  }
}
`.trim();
    var completeLogInByTransactionImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "completeLogInByTransaction");
    exports.default = completeLogInByTransactionImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/connectWalletImpl.js
var require_connectWalletImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/connectWalletImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.connectedWalletFragmentDependencies,
      fragments_1.connectedWalletFragment
    ];
    var MUTATION = `
mutation connectWallet(
  $walletPublicKey: String!
  $timestamp: Long!
  $signature: String!
  $walletBlockchain: WalletBlockchain!
  $accountId: String
  $connectWalletConflictResolutionTechnique: ConnectWalletConflictResolutionTechnique
) {
  connectWallet(connectWalletInput: {
    walletPublicKey: $walletPublicKey
    timestamp: $timestamp
    walletBlockchain: $walletBlockchain
    accountId: $accountId
    connectWalletConflictResolutionTechnique: $connectWalletConflictResolutionTechnique
  }, signature: $signature) {
    ...connectedWalletFragment
  }
}
`.trim();
    var connectWalletImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "connectWallet");
    exports.default = connectWalletImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createAlertImpl.js
var require_createAlertImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createAlertImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.alertFragmentDependencies, fragments_1.alertFragment];
    var MUTATION = `
mutation createAlert(
  $name: String!
  $sourceGroupId: String!
  $filterId: String!
  $targetGroupId: String!
  $filterOptions: String!
  $groupName: String!
) {
  createAlert(
    alertInput: {
      name: $name
      sourceGroupId: $sourceGroupId
      filterId: $filterId
      targetGroupId: $targetGroupId
      filterOptions: $filterOptions
      groupName: $groupName
    }
  ) {
    ...alertFragment
  }
}
`.trim();
    var createAlertImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createAlert");
    exports.default = createAlertImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createDiscordTargetImpl.js
var require_createDiscordTargetImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createDiscordTargetImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.discordTargetFragmentDependencies,
      fragments_1.discordTargetFragment
    ];
    var MUTATION = `
mutation createDiscordTarget(
  $name: String!
  $value: String!
) {
  createDiscordTarget(
    createTargetInput: {
      name: $name
      value: $value
    }
  ) {
    ...discordTargetFragment
  }
}
`.trim();
    var createDiscordTargetImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createDiscordTarget");
    exports.default = createDiscordTargetImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createEmailTargetImpl.js
var require_createEmailTargetImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createEmailTargetImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.emailTargetFragmentDependencies, fragments_1.emailTargetFragment];
    var MUTATION = `
mutation createEmailTarget(
  $name: String!
  $value: String!
) {
  createEmailTarget(
    createTargetInput: {
      name: $name
      value: $value
    }
  ) {
    ...emailTargetFragment
  }
}
`.trim();
    var createEmailTargetImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createEmailTarget");
    exports.default = createEmailTargetImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createSmsTargetImpl.js
var require_createSmsTargetImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createSmsTargetImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.smsTargetFragmentDependencies, fragments_1.smsTargetFragment];
    var MUTATION = `
mutation createSmsTarget(
  $name: String!
  $value: String!
) {
  createSmsTarget(
    createTargetInput: {
      name: $name
      value: $value
    }
  ) {
    ...smsTargetFragment
  }
}
`.trim();
    var createSmsTargetImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createSmsTarget");
    exports.default = createSmsTargetImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createSourceGroupImpl.js
var require_createSourceGroupImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createSourceGroupImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.sourceGroupFragmentDependencies, fragments_1.sourceGroupFragment];
    var MUTATION = `
mutation createSourceGroup(
  $name: String!
  $sourceIds: [String!]!
) {
  createSourceGroup(
    sourceGroupInput: {
      name: $name
      sourceIds: $sourceIds
    }
  ) {
    ...sourceGroupFragment
  }
}
`.trim();
    var createSourceGroupImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createSourceGroup");
    exports.default = createSourceGroupImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createSourceImpl.js
var require_createSourceImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createSourceImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.sourceFragmentDependencies, fragments_1.sourceFragment];
    var MUTATION = `
mutation createSource(
  $name: String!
  $blockchainAddress: String!
  $type: SourceType!
  $fusionEventTypeId: String
) {
  createSource(
    createSourceInput: {
      name: $name
      blockchainAddress: $blockchainAddress
      type: $type
      fusionEventTypeId: $fusionEventTypeId
    }
  ) {
    ...sourceFragment
  }
}
`.trim();
    var createSourceImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createSource");
    exports.default = createSourceImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createSupportConversationImpl.js
var require_createSupportConversationImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createSupportConversationImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var DEPENDENCIES = [];
    var MUTATION = `
mutation createSupportConversation {
  createSupportConversation {
    id
    conversationType
    conversationGates {
       id
    }
    name
    createdDate
    participants {
      conversationParticipantType
      profile {
        id
        preferredAddress
        preferredName
        avatarData
        avatarDataType
      }
      resolvedName
    }
    backgroundImageUrl
  }
}
`.trim();
    var createSupportConversationImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createSupportConversation");
    exports.default = createSupportConversationImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createTargetGroupImpl.js
var require_createTargetGroupImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createTargetGroupImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.targetGroupFragmentDependencies, fragments_1.targetGroupFragment];
    var MUTATION = `
mutation createTargetGroup(
  $name: String!
  $emailTargetIds: [String!]!
  $smsTargetIds: [String!]!
  $telegramTargetIds: [String!]!
  $discordTargetIds: [String!]!
) {
  createTargetGroup(targetGroupInput: {
    name: $name
    emailTargetIds: $emailTargetIds
    smsTargetIds: $smsTargetIds
    telegramTargetIds: $telegramTargetIds
    discordTargetIds: $discordTargetIds
  }) {
    ...targetGroupFragment
  }
}
`.trim();
    var createTargetGroupImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createTargetGroup");
    exports.default = createTargetGroupImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createTelegramTargetImpl.js
var require_createTelegramTargetImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createTelegramTargetImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.telegramTargetFragmentDependencies,
      fragments_1.telegramTargetFragment
    ];
    var MUTATION = `
mutation createTelegramTarget(
  $name: String!
  $value: String!
) {
  createTelegramTarget(
    createTargetInput: {
      name: $name
      value: $value
    }
  ) {
    ...telegramTargetFragment
  }
}
`.trim();
    var createTelegramTargetImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createTelegramTarget");
    exports.default = createTelegramTargetImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createWebhookTargetImpl.js
var require_createWebhookTargetImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/createWebhookTargetImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.webhookTargetFragmentDependencies,
      fragments_1.webhookTargetFragment
    ];
    var MUTATION = `
mutation createWebhookTarget(
  $name: String!
  $url: String!
  $format: WebhookPayloadFormat!
  $headers: [KeyValuePairOfStringAndStringInput!]!
) {
  createWebhookTarget(
    createTargetInput: {
      name: $name
      url: $url
      format: $format
      headers: $headers
    }
  ) {
    ...webhookTargetFragment
  }
}
`.trim();
    var createWebhookTargetImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "createWebhookTarget");
    exports.default = createWebhookTargetImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/deleteAlertImpl.js
var require_deleteAlertImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/deleteAlertImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var DEPENDENCIES = [];
    var MUTATION = `
mutation deleteAlert(
  $id: String!
) {
  deleteAlert(alertId: $id) {
    id
  }
}
`.trim();
    var deleteAlertImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "deleteAlert");
    exports.default = deleteAlertImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/deleteSourceGroupImpl.js
var require_deleteSourceGroupImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/deleteSourceGroupImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var DEPENDENCIES = [];
    var MUTATION = `
mutation deleteSourceGroup(
  $id: String!
) {
  deleteSourceGroup(sourceGroupInput: {
    id: $id
  }) {
    id
  }
}
`.trim();
    var deleteSourceGroupImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "deleteSourceGroup");
    exports.default = deleteSourceGroupImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/deleteTargetGroupImpl.js
var require_deleteTargetGroupImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/deleteTargetGroupImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var DEPENDENCIES = [];
    var MUTATION = `
mutation deleteTargetGroup(
  $id: String!
) {
  deleteTargetGroup(targetGroupInput: {
    id: $id
  }) {
    id
  }
}
`.trim();
    var deleteTargetGroupImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "deleteTargetGroup");
    exports.default = deleteTargetGroupImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/logInFromDappImpl.js
var require_logInFromDappImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/logInFromDappImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.userFragmentDependencies, fragments_1.userFragment];
    var MUTATION = `
mutation logInFromDapp(
  $walletPublicKey: String!
  $dappAddress: String!
  $timestamp: Long!
  $signature: String!
  $walletBlockchain: WalletBlockchain
  $accountId: String
) {
  logInFromDapp(dappLogInInput: {
    walletPublicKey: $walletPublicKey
    dappAddress: $dappAddress
    timestamp: $timestamp
    walletBlockchain: $walletBlockchain
    accountId: $accountId
  }, signature: $signature) {
    ...userFragment
  }
}
`.trim();
    var logInFromDaoImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "logInFromDapp");
    exports.default = logInFromDaoImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/markFusionNotificationHistoryAsRead.js
var require_markFusionNotificationHistoryAsRead = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/markFusionNotificationHistoryAsRead.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var DEPENDENCIES = [];
    var MUTATION = `
mutation markFusionNotificationHistoryAsRead(
  $ids: [String!]!
  $beforeId: String
  $readState: NotificationHistoryReadState
) {
  markFusionNotificationHistoryAsRead(
    input: { ids: $ids, beforeId: $beforeId, readState: $readState }
  )
}
`.trim();
    var markFusionNotificationHistoryAsReadImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "markFusionNotificationHistoryAsRead");
    exports.default = markFusionNotificationHistoryAsReadImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/refreshAuthorizationImpl.js
var require_refreshAuthorizationImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/refreshAuthorizationImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.authorizationFragmentDependencies,
      fragments_1.authorizationFragment
    ];
    var MUTATION = `
mutation refreshAuthorization {
  refreshAuthorization {
    ...authorizationFragment
  }
}
`.trim();
    var refreshAuthorizationImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "refreshAuthorization");
    exports.default = refreshAuthorizationImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/sendConversationMessagesImpl.js
var require_sendConversationMessagesImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/sendConversationMessagesImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var conversationMessageFragment_1 = require_conversationMessageFragment();
    var DEPENDENCIES = [
      ...conversationMessageFragment_1.conversationMessageFragmentDependencies,
      conversationMessageFragment_1.conversationMessageFragment
    ];
    var MUTATION = `
mutation sendConversationMessage($sendConversationMessageInput: SendConversationMessageInput!) {
  sendConversationMessage(sendConversationMessageInput: $sendConversationMessageInput) {
    ...ConversationMessage
  }
}
`.trim();
    var sendConversationMessageImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "sendConversationMessage");
    exports.default = sendConversationMessageImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/sendEmailTargetVerificationRequestImpl.js
var require_sendEmailTargetVerificationRequestImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/sendEmailTargetVerificationRequestImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.emailTargetFragmentDependencies, fragments_1.emailTargetFragment];
    var MUTATION = `
mutation sendEmailTargetVerificationRequest(
  $targetId: String!
) {
  sendEmailTargetVerificationRequest(sendTargetConfirmationRequestInput:{
    targetId: $targetId
  }) {
    ...emailTargetFragment
  }
}
`.trim();
    var sendEmailTargetVerificationRequestImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "sendEmailTargetVerificationRequest");
    exports.default = sendEmailTargetVerificationRequestImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/updateSourceGroupImpl.js
var require_updateSourceGroupImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/updateSourceGroupImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.sourceGroupFragmentDependencies, fragments_1.sourceGroupFragment];
    var MUTATION = `
mutation updateSourceGroup(
  $id: String!
  $name: String!
  $sourceIds: [String!]!
) {
  updateSourceGroup: createSourceGroup(
    sourceGroupInput: {
      id: $id
      name: $name
      sourceIds: $sourceIds
    }
  ) {
    ...sourceGroupFragment
  }
}
`.trim();
    var updateSourceGroupImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "updateSourceGroup");
    exports.default = updateSourceGroupImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/updateTargetGroupImpl.js
var require_updateTargetGroupImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/mutations/updateTargetGroupImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.targetGroupFragmentDependencies, fragments_1.targetGroupFragment];
    var MUTATION = `
mutation updateTargetGroup(
  $id: String!
  $name: String!
  $emailTargetIds: [String!]!
  $smsTargetIds: [String!]!
  $telegramTargetIds: [String!]!
  $discordTargetIds: [String!]!
) {
  updateTargetGroup: createTargetGroup(targetGroupInput: {
    id: $id
    name: $name
    emailTargetIds: $emailTargetIds
    smsTargetIds: $smsTargetIds
    telegramTargetIds: $telegramTargetIds
    discordTargetIds: $discordTargetIds
  }) {
    ...targetGroupFragment
  }
}
`.trim();
    var updateTargetGroupImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, MUTATION), "updateTargetGroup");
    exports.default = updateTargetGroupImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/findTenantConfigImpl.js
var require_findTenantConfigImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/findTenantConfigImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var DEPENDENCIES = [];
    var QUERY = `
query findTenantConfig(
  $tenant: String!
  $type: TenantConfigType!
  $id: String!
) {
  findTenantConfig(findTenantConfigInput: {
    tenant: $tenant
    type: $type
    id: $id
  }) {
    id
    type
    dataJson
  }
}
`.trim();
    var findTenantConfigImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "findTenantConfig");
    exports.default = findTenantConfigImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getAlertsImpl.js
var require_getAlertsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getAlertsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.alertFragmentDependencies, fragments_1.alertFragment];
    var QUERY = `
query getAlerts {
  alert {
    ...alertFragment
  }
}
`.trim();
    var getAlertsImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "alert");
    exports.default = getAlertsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getConfigurationForDappImpl.js
var require_getConfigurationForDappImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getConfigurationForDappImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.clientConfigurationFragmentDependencies,
      fragments_1.clientConfigurationFragment
    ];
    var QUERY = `
query getConfigurationForDapp($dappAddress: String!) {
  configurationForDapp(getConfigurationForDappInput: {
    dappAddress: $dappAddress
  }) {
    ...clientConfigurationFragment
  }
}
`.trim();
    var getConfigurationForDappImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "configurationForDapp");
    exports.default = getConfigurationForDappImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getConnectedWalletsImpl.js
var require_getConnectedWalletsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getConnectedWalletsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.connectedWalletFragmentDependencies,
      fragments_1.connectedWalletFragment
    ];
    var QUERY = `
query getConnectedWallets {
  connectedWallet {
    ...connectedWalletFragment
  }
}
`.trim();
    var getConnectedWalletsImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "connectedWallet");
    exports.default = getConnectedWalletsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getConversationMessagesImpl.js
var require_getConversationMessagesImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getConversationMessagesImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var convMessagePageInfoFragment_1 = require_convMessagePageInfoFragment();
    var conversationMessageFragment_1 = require_conversationMessageFragment();
    var DEPENDENCIES = [
      ...conversationMessageFragment_1.conversationMessageFragmentDependencies,
      convMessagePageInfoFragment_1.ConvMessagePageInfoFragment,
      conversationMessageFragment_1.conversationMessageFragment
    ];
    var QUERY = `query conversationMessages(
  $getConversationMessagesInput: GetConversationMessagesInput!
  $after: String
  $first: Int
) {
  conversationMessages(
    first: $first
    after: $after
    getConversationMessagesInput: $getConversationMessagesInput
  ) {
    nodes {
      ...ConversationMessage
    }
    pageInfo {
      ...ConvMessagePageInfo
    }
  }
}`.trim();
    var getConversationMessagesImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "conversationMessages");
    exports.default = getConversationMessagesImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getDiscordTargetsImpl.js
var require_getDiscordTargetsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getDiscordTargetsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.discordTargetFragmentDependencies,
      fragments_1.discordTargetFragment
    ];
    var QUERY = `
query getDiscordTargets {
  discordTarget {
    ...discordTargetFragment
  }
}
`.trim();
    var getDiscordTargetsImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "discordTarget");
    exports.default = getDiscordTargetsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getEmailTargetsImpl.js
var require_getEmailTargetsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getEmailTargetsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.emailTargetFragmentDependencies, fragments_1.emailTargetFragment];
    var QUERY = `
query getEmailTargets {
  emailTarget {
    ...emailTargetFragment
  }
}
`.trim();
    var getEmailTargetsImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "emailTarget");
    exports.default = getEmailTargetsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getFiltersImpl.js
var require_getFiltersImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getFiltersImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.filterFragmentDependencies, fragments_1.filterFragment];
    var QUERY = `
query getFilters {
  filter {
    ...filterFragment
  }
}
`.trim();
    var getFiltersImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "filter");
    exports.default = getFiltersImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getFusionNotificationHistoryImpl.js
var require_getFusionNotificationHistoryImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getFusionNotificationHistoryImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fusionNotificationHistoryEntryFragment_1 = require_fusionNotificationHistoryEntryFragment();
    var DEPENDENCIES = [fusionNotificationHistoryEntryFragment_1.fusionNotificationHistoryEntryFragment];
    var QUERY = `query getFusionNotificationHistory($after: String, $first: Int, $includeHidden: Boolean) {
  fusionNotificationHistory(after: $after, first: $first, includeHidden: $includeHidden) {
    nodes {
      ...FusionNotificationHistoryEntry
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}`.trim();
    var getFusionNotificationHistoryImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "fusionNotificationHistory");
    exports.default = getFusionNotificationHistoryImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getNotificationHistoryImpl.js
var require_getNotificationHistoryImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getNotificationHistoryImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var notificationHistoryEntryFragment_1 = require_notificationHistoryEntryFragment();
    var DEPENDENCIES = [
      ...notificationHistoryEntryFragment_1.notificationHistoryEntryFragmentDependencies,
      notificationHistoryEntryFragment_1.notificationHistoryEntryFragment
    ];
    var QUERY = `query getNotificationHistory($after: String, $first: Int) {
  notificationHistory(after: $after, first: $first) {
    nodes {
      ...NotificationHistoryEntry
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}`.trim();
    var getNotificationHistoryImpl = (0, notifi_axios_utils_1.makeRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "notificationHistory");
    exports.default = getNotificationHistoryImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getSmsTargetsImpl.js
var require_getSmsTargetsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getSmsTargetsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.smsTargetFragmentDependencies, fragments_1.smsTargetFragment];
    var QUERY = `
query getSmsTargets {
  smsTarget {
    ...smsTargetFragment
  }
}
`.trim();
    var getSmsTargetsImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "smsTarget");
    exports.default = getSmsTargetsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getSourceGroupsImpl.js
var require_getSourceGroupsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getSourceGroupsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.sourceGroupFragmentDependencies, fragments_1.sourceGroupFragment];
    var QUERY = `
query getSourceGroups {
  sourceGroup {
    ...sourceGroupFragment
  }
}
`.trim();
    var getSourceGroupsImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "sourceGroup");
    exports.default = getSourceGroupsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getSourcesImpl.js
var require_getSourcesImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getSourcesImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var sourceFragment_1 = require_sourceFragment();
    var DEPENDENCIES = [...sourceFragment_1.sourceFragmentDependencies, sourceFragment_1.sourceFragment];
    var QUERY = `
query getSources {
  source {
    ...sourceFragment
  }
}
`.trim();
    var getSourcesImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "source");
    exports.default = getSourcesImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getTargetGroupsImpl.js
var require_getTargetGroupsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getTargetGroupsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.targetGroupFragmentDependencies, fragments_1.targetGroupFragment];
    var QUERY = `
query getTargetGroups {
  targetGroup {
    ...targetGroupFragment
  }
}
`.trim();
    var getTargetGroupsImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "targetGroup");
    exports.default = getTargetGroupsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getTelegramTargetsImpl.js
var require_getTelegramTargetsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getTelegramTargetsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.telegramTargetFragmentDependencies,
      fragments_1.telegramTargetFragment
    ];
    var QUERY = `
query getTelegramTargets {
  telegramTarget {
    ...telegramTargetFragment
  }
}
`.trim();
    var getTelegramTargetsImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "telegramTarget");
    exports.default = getTelegramTargetsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getTopicsImpl.js
var require_getTopicsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getTopicsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [...fragments_1.userTopicFragmentDependencies, fragments_1.userTopicFragment];
    var QUERY = `
query getTopics {
  topics {
    nodes {
      ...userTopicFragment
    }
  }
}
`.trim();
    var getTopicsConnection = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "topics");
    var getTopicsImpl = (axiosInstance) => getTopicsConnection(axiosInstance).then((result2) => result2.nodes);
    exports.default = getTopicsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getUnreadNotificationHistoryCountImpl.js
var require_getUnreadNotificationHistoryCountImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getUnreadNotificationHistoryCountImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var QUERY = `
query getUnreadNotificationHistoryCount {
  unreadNotificationHistoryCount {
    count
  }
}
`.trim();
    var getUnreadNotificationHistoryCountImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(QUERY), "unreadNotificationHistoryCount");
    exports.default = getUnreadNotificationHistoryCountImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getWebhookTargetsImpl.js
var require_getWebhookTargetsImpl = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/queries/getWebhookTargetsImpl.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_utils_1 = require_dist();
    var fragments_1 = require_fragments();
    var DEPENDENCIES = [
      ...fragments_1.webhookTargetFragmentDependencies,
      fragments_1.webhookTargetFragment
    ];
    var QUERY = `
query getWebhookTargets {
  webhookTarget {
    ...webhookTargetFragment
  }
}
`.trim();
    var getWebhookTargetsImpl = (0, notifi_axios_utils_1.makeParameterLessRequest)((0, notifi_axios_utils_1.collectDependencies)(...DEPENDENCIES, QUERY), "webhookTarget");
    exports.default = getWebhookTargetsImpl;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/NotifiAxiosService.js
var require_NotifiAxiosService = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/NotifiAxiosService.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NotifiAxiosService = void 0;
    var axios_1 = __importDefault(require_axios2());
    var beginLogInByTransaction_1 = __importDefault(require_beginLogInByTransaction());
    var broadcastMessageImpl_1 = __importDefault(require_broadcastMessageImpl());
    var completeLogInByTransaction_1 = __importDefault(require_completeLogInByTransaction());
    var connectWalletImpl_1 = __importDefault(require_connectWalletImpl());
    var createAlertImpl_1 = __importDefault(require_createAlertImpl());
    var createDiscordTargetImpl_1 = __importDefault(require_createDiscordTargetImpl());
    var createEmailTargetImpl_1 = __importDefault(require_createEmailTargetImpl());
    var createSmsTargetImpl_1 = __importDefault(require_createSmsTargetImpl());
    var createSourceGroupImpl_1 = __importDefault(require_createSourceGroupImpl());
    var createSourceImpl_1 = __importDefault(require_createSourceImpl());
    var createSupportConversationImpl_1 = __importDefault(require_createSupportConversationImpl());
    var createTargetGroupImpl_1 = __importDefault(require_createTargetGroupImpl());
    var createTelegramTargetImpl_1 = __importDefault(require_createTelegramTargetImpl());
    var createWebhookTargetImpl_1 = __importDefault(require_createWebhookTargetImpl());
    var deleteAlertImpl_1 = __importDefault(require_deleteAlertImpl());
    var deleteSourceGroupImpl_1 = __importDefault(require_deleteSourceGroupImpl());
    var deleteTargetGroupImpl_1 = __importDefault(require_deleteTargetGroupImpl());
    var logInFromDappImpl_1 = __importDefault(require_logInFromDappImpl());
    var markFusionNotificationHistoryAsRead_1 = __importDefault(require_markFusionNotificationHistoryAsRead());
    var refreshAuthorizationImpl_1 = __importDefault(require_refreshAuthorizationImpl());
    var sendConversationMessagesImpl_1 = __importDefault(require_sendConversationMessagesImpl());
    var sendEmailTargetVerificationRequestImpl_1 = __importDefault(require_sendEmailTargetVerificationRequestImpl());
    var updateSourceGroupImpl_1 = __importDefault(require_updateSourceGroupImpl());
    var updateTargetGroupImpl_1 = __importDefault(require_updateTargetGroupImpl());
    var findTenantConfigImpl_1 = __importDefault(require_findTenantConfigImpl());
    var getAlertsImpl_1 = __importDefault(require_getAlertsImpl());
    var getConfigurationForDappImpl_1 = __importDefault(require_getConfigurationForDappImpl());
    var getConnectedWalletsImpl_1 = __importDefault(require_getConnectedWalletsImpl());
    var getConversationMessagesImpl_1 = __importDefault(require_getConversationMessagesImpl());
    var getDiscordTargetsImpl_1 = __importDefault(require_getDiscordTargetsImpl());
    var getEmailTargetsImpl_1 = __importDefault(require_getEmailTargetsImpl());
    var getFiltersImpl_1 = __importDefault(require_getFiltersImpl());
    var getFusionNotificationHistoryImpl_1 = __importDefault(require_getFusionNotificationHistoryImpl());
    var getNotificationHistoryImpl_1 = __importDefault(require_getNotificationHistoryImpl());
    var getSmsTargetsImpl_1 = __importDefault(require_getSmsTargetsImpl());
    var getSourceGroupsImpl_1 = __importDefault(require_getSourceGroupsImpl());
    var getSourcesImpl_1 = __importDefault(require_getSourcesImpl());
    var getTargetGroupsImpl_1 = __importDefault(require_getTargetGroupsImpl());
    var getTelegramTargetsImpl_1 = __importDefault(require_getTelegramTargetsImpl());
    var getTopicsImpl_1 = __importDefault(require_getTopicsImpl());
    var getUnreadNotificationHistoryCountImpl_1 = __importDefault(require_getUnreadNotificationHistoryCountImpl());
    var getWebhookTargetsImpl_1 = __importDefault(require_getWebhookTargetsImpl());
    var NotifiAxiosService = class {
      constructor(c2) {
        this.jwt = null;
        this.setJwt = (jwt) => {
          this.jwt = jwt;
        };
        const a2 = axios_1.default.create({
          baseURL: c2.gqlUrl
        });
        a2.interceptors.request.use((config) => {
          const jwt = this.jwt;
          if (jwt !== null) {
            return Object.assign(Object.assign({}, config), { headers: Object.assign(Object.assign({}, config.headers), { Authorization: `Bearer ${jwt}` }) });
          }
          return config;
        });
        this.beginLogInByTransaction = beginLogInByTransaction_1.default.bind(null, a2);
        this.broadcastMessage = broadcastMessageImpl_1.default.bind(null, a2);
        this.completeLogInByTransaction = completeLogInByTransaction_1.default.bind(null, a2);
        this.connectWallet = connectWalletImpl_1.default.bind(null, a2);
        this.createAlert = createAlertImpl_1.default.bind(null, a2);
        this.createEmailTarget = createEmailTargetImpl_1.default.bind(null, a2);
        this.createSmsTarget = createSmsTargetImpl_1.default.bind(null, a2);
        this.createTargetGroup = createTargetGroupImpl_1.default.bind(null, a2);
        this.createTelegramTarget = createTelegramTargetImpl_1.default.bind(null, a2);
        this.createDiscordTarget = createDiscordTargetImpl_1.default.bind(null, a2);
        this.createSource = createSourceImpl_1.default.bind(null, a2);
        this.createSourceGroup = createSourceGroupImpl_1.default.bind(null, a2);
        this.createSupportConversation = createSupportConversationImpl_1.default.bind(null, a2);
        this.createWebhookTarget = createWebhookTargetImpl_1.default.bind(null, a2);
        this.deleteAlert = deleteAlertImpl_1.default.bind(null, a2);
        this.deleteSourceGroup = deleteSourceGroupImpl_1.default.bind(null, a2);
        this.deleteTargetGroup = deleteTargetGroupImpl_1.default.bind(null, a2);
        this.findTenantConfig = findTenantConfigImpl_1.default.bind(null, a2);
        this.getAlerts = getAlertsImpl_1.default.bind(null, a2);
        this.getConfigurationForDapp = getConfigurationForDappImpl_1.default.bind(null, a2);
        this.getConnectedWallets = getConnectedWalletsImpl_1.default.bind(null, a2);
        this.getConversationMessages = getConversationMessagesImpl_1.default.bind(null, a2);
        this.getEmailTargets = getEmailTargetsImpl_1.default.bind(null, a2);
        this.getFilters = getFiltersImpl_1.default.bind(null, a2);
        this.getFusionNotificationHistory = getFusionNotificationHistoryImpl_1.default.bind(null, a2);
        this.getNotificationHistory = getNotificationHistoryImpl_1.default.bind(null, a2);
        this.getSmsTargets = getSmsTargetsImpl_1.default.bind(null, a2);
        this.getSourceGroups = getSourceGroupsImpl_1.default.bind(null, a2);
        this.getSources = getSourcesImpl_1.default.bind(null, a2);
        this.getTargetGroups = getTargetGroupsImpl_1.default.bind(null, a2);
        this.getTelegramTargets = getTelegramTargetsImpl_1.default.bind(null, a2);
        this.getDiscordTargets = getDiscordTargetsImpl_1.default.bind(null, a2);
        this.getTopics = getTopicsImpl_1.default.bind(null, a2);
        this.getUnreadNotificationHistoryCount = getUnreadNotificationHistoryCountImpl_1.default.bind(null, a2);
        this.getWebhookTargets = getWebhookTargetsImpl_1.default.bind(null, a2);
        this.logInFromDapp = logInFromDappImpl_1.default.bind(null, a2);
        this.refreshAuthorization = refreshAuthorizationImpl_1.default.bind(null, a2);
        this.sendEmailTargetVerificationRequest = sendEmailTargetVerificationRequestImpl_1.default.bind(null, a2);
        this.sendConversationMessages = sendConversationMessagesImpl_1.default.bind(null, a2);
        this.updateSourceGroup = updateSourceGroupImpl_1.default.bind(null, a2);
        this.updateTargetGroup = updateTargetGroupImpl_1.default.bind(null, a2);
        this.markFusionNotificationHistoryAsRead = markFusionNotificationHistoryAsRead_1.default.bind(null, a2);
      }
    };
    exports.NotifiAxiosService = NotifiAxiosService;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/node_modules/@notifi-network/notifi-axios-adapter/dist/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_NotifiAxiosService(), exports);
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/hooks/useNotifiService.js
var require_useNotifiService = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/hooks/useNotifiService.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var notifi_axios_adapter_1 = require_dist2();
    var react_1 = require_react();
    var useNotifiConfig_1 = __importDefault(require_useNotifiConfig());
    var useNotifiService = (env) => {
      const { gqlUrl } = (0, useNotifiConfig_1.default)(env);
      const service = (0, react_1.useMemo)(() => {
        const config = {
          gqlUrl
        };
        return new notifi_axios_adapter_1.NotifiAxiosService(config);
      }, [gqlUrl]);
      return service;
    };
    exports.default = useNotifiService;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/hooks/useNotifiClient.js
var require_useNotifiClient = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/hooks/useNotifiClient.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result2 = {};
      if (mod != null) {
        for (var k2 in mod)
          if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
            __createBinding(result2, mod, k2);
      }
      __setModuleDefault(result2, mod);
      return result2;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SIGNING_MESSAGE = exports.NotifiClientError = void 0;
    var react_1 = require_react();
    var ensureSource_1 = __importStar(require_ensureSource());
    var ensureSourceGroup_1 = __importDefault(require_ensureSourceGroup());
    var ensureTarget_1 = require_ensureTarget();
    var ensureTargetGroup_1 = __importDefault(require_ensureTargetGroup());
    var ensureTargetIds_1 = __importDefault(require_ensureTargetIds());
    var fetchDataImpl_1 = __importDefault(require_fetchDataImpl());
    var packFilterOptions_1 = __importDefault(require_packFilterOptions());
    var storage_1 = __importDefault(require_storage());
    var useNotifiConfig_1 = __importDefault(require_useNotifiConfig());
    var useNotifiService_1 = __importDefault(require_useNotifiService());
    var NotifiClientError = class extends Error {
      constructor(underlying) {
        super("NotifiClient encountered an error");
        this.underlying = underlying;
      }
    };
    exports.NotifiClientError = NotifiClientError;
    var projectData = (internalData) => {
      if (internalData == null) {
        return null;
      }
      const { alerts, connectedWallets, emailTargets, filters, smsTargets, sources, targetGroups, sourceGroups, telegramTargets, discordTargets } = internalData;
      return {
        alerts,
        connectedWallets,
        emailTargets,
        filters,
        smsTargets,
        sourceGroups,
        sources,
        targetGroups,
        telegramTargets,
        discordTargets
      };
    };
    exports.SIGNING_MESSAGE = `Sign in with Notifi 

    No password needed or gas is needed. 

    Clicking “Approve” only means you have proved this wallet is owned by you! 

    This request will not trigger any transaction or cost any gas fees. 

    Use of our website and service is subject to our terms of service and privacy policy. 
 
 'Nonce:' `;
    var signMessage = async ({ params, dappAddress, signer, timestamp }) => {
      switch (params.walletBlockchain) {
        case "INJECTIVE":
        case "OSMOSIS":
        case "NIBIRU":
        case "SOLANA": {
          if (signer.walletBlockchain !== params.walletBlockchain) {
            throw new Error("Signer and config have different walletBlockchain");
          }
          const { walletPublicKey } = params;
          const messageBuffer = new TextEncoder().encode(`${exports.SIGNING_MESSAGE}${walletPublicKey}${dappAddress}${timestamp.toString()}`);
          const signedBuffer = await signer.signMessage(messageBuffer);
          const signature = import_buffer.Buffer.from(signedBuffer).toString("base64");
          return signature;
        }
        case "ARBITRUM":
        case "POLYGON":
        case "BINANCE":
        case "OPTIMISM":
        case "AVALANCHE":
        case "ZKSYNC":
        case "BASE":
        case "ETHEREUM": {
          if (signer.walletBlockchain !== params.walletBlockchain) {
            throw new Error("Signer and config have different walletBlockchain");
          }
          const { walletPublicKey } = params;
          const messageBuffer = new TextEncoder().encode(`${exports.SIGNING_MESSAGE}${walletPublicKey}${dappAddress}${timestamp.toString()}`);
          const signedBuffer = await signer.signMessage(messageBuffer);
          const signature = import_buffer.Buffer.from(signedBuffer).toString("hex");
          return signature;
        }
        case "APTOS": {
          if (signer.walletBlockchain !== "APTOS") {
            throw new Error("Signer and config have different walletBlockchain");
          }
          const signature = await signer.signMessage(exports.SIGNING_MESSAGE, timestamp);
          return signature;
        }
        case "ACALA": {
          if (signer.walletBlockchain !== "ACALA") {
            throw new Error("Signer and config have different walletBlockchain");
          }
          const { accountAddress } = params;
          if (accountAddress === void 0 || accountAddress === null) {
            throw new Error("Must provide Acala Address to sign");
          }
          const message = `${exports.SIGNING_MESSAGE}${accountAddress}${dappAddress}${timestamp.toString()}`;
          const signedBuffer = await signer.signMessage(accountAddress, message);
          return signedBuffer;
        }
        case "NEAR": {
          if (signer.walletBlockchain !== "NEAR") {
            throw new Error("Signer and config have different walletBlockchain");
          }
          const { walletPublicKey, accountAddress } = params;
          const message = `${`ed25519:` + walletPublicKey}${dappAddress}${accountAddress}${timestamp.toString()}`;
          const textAsBuffer = new TextEncoder().encode(message);
          const hashBuffer = await window.crypto.subtle.digest("SHA-256", textAsBuffer);
          const messageBuffer = new Uint8Array(hashBuffer);
          const signedBuffer = await signer.signMessage(messageBuffer);
          const signature = import_buffer.Buffer.from(signedBuffer).toString("base64");
          return signature;
        }
        case "SUI": {
          if (signer.walletBlockchain !== "SUI") {
            throw new Error("Signer and config have different walletBlockchain");
          }
          const { walletPublicKey } = params;
          const messageBuffer = new TextEncoder().encode(`${exports.SIGNING_MESSAGE}${walletPublicKey}${dappAddress}${timestamp.toString()}`);
          const signedBuffer = await signer.signMessage(messageBuffer);
          const signature = signedBuffer.toString();
          return signature;
        }
      }
    };
    var useNotifiClient2 = (config) => {
      const { env, dappAddress, walletPublicKey, walletBlockchain } = config;
      const [isInitialized, setIsInitialized] = (0, react_1.useState)(false);
      const notifiConfig = (0, useNotifiConfig_1.default)(env);
      const { getAuthorization, getRoles, setAuthorization, setRoles } = (0, react_1.useMemo)(() => {
        return (0, storage_1.default)({
          dappAddress,
          walletPublicKey,
          jwtPrefix: notifiConfig.storagePrefix
        });
      }, [dappAddress, walletPublicKey, notifiConfig.storagePrefix]);
      const service = (0, useNotifiService_1.default)(env);
      const [internalData, setInternalData] = (0, react_1.useState)(null);
      const [error, setError] = (0, react_1.useState)(null);
      const [loading, setLoading] = (0, react_1.useState)(false);
      const [isAuthenticated, setIsAuthenticated] = (0, react_1.useState)(false);
      const [expiry, setExpiry] = (0, react_1.useState)(null);
      const [isTokenExpired, setisTokenExpired] = (0, react_1.useState)(false);
      const clientRandomUuid = (0, react_1.useRef)(null);
      const fetchDataRef = (0, react_1.useRef)({});
      const fetchData = (0, react_1.useCallback)(async (forceFetch) => {
        try {
          if (forceFetch === true) {
            fetchDataRef.current = {};
          }
          setLoading(true);
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          setInternalData(newData);
          const clientData = projectData(newData);
          if (clientData === null) {
            throw new Error("Unknown error");
          }
          return clientData;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service]);
      (0, react_1.useEffect)(() => {
        const doInitialLoad = async () => {
          const authorization = await getAuthorization();
          if (authorization === null) {
            setIsAuthenticated(false);
            setIsInitialized(true);
            setExpiry(null);
            setisTokenExpired(false);
            return;
          }
          const { token, expiry: expiry2 } = authorization;
          service.setJwt(token);
          const expiryDate = new Date(expiry2);
          const now = /* @__PURE__ */ new Date();
          if (expiryDate <= now) {
            setIsAuthenticated(false);
            setIsInitialized(true);
            setExpiry(expiry2);
            setisTokenExpired(true);
            return;
          }
          const refreshTime = /* @__PURE__ */ new Date();
          refreshTime.setDate(refreshTime.getDate() + 7);
          if (expiryDate < refreshTime) {
            try {
              const { token: newToken, expiry: newExpiry } = await service.refreshAuthorization();
              if (newToken !== null && newExpiry !== null) {
                service.setJwt(newToken);
                setAuthorization({ token: newToken, expiry: newExpiry });
                setIsAuthenticated(true);
                setExpiry(newExpiry);
                setisTokenExpired(false);
              }
            } catch (_e2) {
              setExpiry(expiry2);
              setIsAuthenticated(true);
            }
          } else {
            setExpiry(expiry2);
            setIsAuthenticated(true);
          }
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          setInternalData(newData);
          setLoading(false);
        };
        setIsInitialized(false);
        doInitialLoad().catch((_e2) => {
        }).then(() => {
          setIsInitialized(true);
        });
      }, [getAuthorization, service, setAuthorization]);
      const handleLogInResult = (0, react_1.useCallback)(async (result2) => {
        if (result2.authorization !== null) {
          const { token, expiry: expiry2 } = result2.authorization;
          if (token !== null && expiry2 !== null) {
            service.setJwt(token);
            setAuthorization({ token, expiry: expiry2 });
          }
        }
        if (result2.roles !== null) {
          setRoles(result2.roles);
        } else {
          setRoles(null);
        }
        const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
        setInternalData(newData);
        setIsAuthenticated(true);
      }, [
        service,
        fetchDataRef,
        setAuthorization,
        setRoles,
        setInternalData,
        setIsAuthenticated
      ]);
      const logIn = (0, react_1.useCallback)(async (signer) => {
        if (signer == null) {
          throw new Error("Signer cannot be null");
        }
        const timestamp = Math.round(Date.now() / 1e3);
        setLoading(true);
        try {
          const signature = await signMessage({
            params: config,
            dappAddress,
            timestamp,
            signer
          });
          const result2 = await service.logInFromDapp({
            accountId: walletBlockchain === "APTOS" || walletBlockchain === "ACALA" || walletBlockchain === "NEAR" || walletBlockchain === "SUI" || walletBlockchain === "INJECTIVE" || walletBlockchain === "OSMOSIS" || walletBlockchain === "NIBIRU" ? config.accountAddress : void 0,
            walletPublicKey,
            dappAddress,
            timestamp,
            signature,
            walletBlockchain
          });
          await handleLogInResult(result2);
          return result2;
        } catch (e) {
          setIsAuthenticated(false);
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [
        config,
        dappAddress,
        service,
        walletBlockchain,
        walletPublicKey,
        handleLogInResult
      ]);
      const beginLoginViaTransaction = (0, react_1.useCallback)(async () => {
        setLoading(true);
        try {
          const result2 = await service.beginLogInByTransaction({
            walletAddress: walletPublicKey,
            walletBlockchain: "SOLANA",
            dappAddress
          });
          if (result2.nonce !== null) {
            const ruuid = window.crypto.randomUUID();
            const encoder = new TextEncoder();
            const data2 = encoder.encode(result2.nonce + ruuid);
            const hashBuffer = await window.crypto.subtle.digest("SHA-256", data2);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const logValue = "Notifi Auth: 0x" + hashArray.map((b2) => b2.toString(16).padStart(2, "0")).join("");
            clientRandomUuid.current = ruuid;
            const retVal = {
              logValue
            };
            return retVal;
          }
          throw new Error("Failed to begin login process");
        } catch (e) {
          setIsAuthenticated(false);
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [
        setLoading,
        setIsAuthenticated,
        setError,
        service,
        walletPublicKey,
        dappAddress
      ]);
      const completeLoginViaTransaction = (0, react_1.useCallback)(async (input) => {
        const { transactionSignature } = input;
        setLoading(true);
        try {
          if (!clientRandomUuid.current) {
            throw new Error("BeginLoginViaTransaction is required to be called first");
          }
          const result2 = await service.completeLogInByTransaction({
            walletAddress: walletPublicKey,
            walletBlockchain: "SOLANA",
            dappAddress,
            randomUuid: clientRandomUuid.current,
            transactionSignature
          });
          await handleLogInResult(result2);
          return result2;
        } catch (e) {
          setIsAuthenticated(false);
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          clientRandomUuid.current = null;
          setLoading(false);
        }
      }, [
        setLoading,
        handleLogInResult,
        setIsAuthenticated,
        setError,
        service,
        dappAddress,
        clientRandomUuid,
        walletPublicKey
      ]);
      const createDiscordTarget = (0, react_1.useCallback)(async (input) => {
        setLoading(true);
        const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
        const existingDiscordTargets = newData.discordTargets;
        try {
          return await (0, ensureTarget_1.ensureDiscord)(service, existingDiscordTargets, input);
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, []);
      const ensureTargetGroup = (0, react_1.useCallback)(async (input) => {
        setLoading(true);
        try {
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          const { emailTargetIds, smsTargetIds, telegramTargetIds, webhookTargetIds, discordTargetIds } = await (0, ensureTargetIds_1.default)(service, newData, input);
          const targetGroup = await (0, ensureTargetGroup_1.default)(service, newData.targetGroups, {
            name: input.name,
            emailTargetIds: emailTargetIds.filter((id3) => !!id3),
            smsTargetIds: smsTargetIds.filter((id3) => !!id3),
            telegramTargetIds: telegramTargetIds.filter((id3) => !!id3),
            webhookTargetIds: webhookTargetIds.filter((id3) => !!id3),
            discordTargetIds: discordTargetIds.filter((id3) => !!id3)
          });
          setInternalData(newData);
          return targetGroup;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service]);
      const ensureSourceGroup = (0, react_1.useCallback)(async (input) => {
        setLoading(true);
        try {
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          let sourceIdsPromise = Promise.resolve([]);
          input.sources.forEach((sourceInput) => {
            sourceIdsPromise = sourceIdsPromise.then(async (results) => {
              const newSource = await (0, ensureSource_1.default)(service, newData.sources, sourceInput);
              if (newSource.id === null) {
                throw new Error("Failed to create source");
              }
              return [...results, newSource.id];
            });
          });
          const sourceIds = await sourceIdsPromise;
          const sourceGroup = await (0, ensureSourceGroup_1.default)(service, newData.sourceGroups, {
            name: input.name,
            sourceIds
          });
          setInternalData(newData);
          return sourceGroup;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service]);
      const updateAlert = (0, react_1.useCallback)(async (input) => {
        var _a;
        const { alertId } = input;
        setLoading(true);
        try {
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          const { emailTargetIds, smsTargetIds, telegramTargetIds, webhookTargetIds, discordTargetIds } = await (0, ensureTargetIds_1.default)(service, newData, input);
          const existingAlert = newData.alerts.find((a2) => a2.id === alertId);
          if (existingAlert === void 0) {
            throw new Error(`Unable to find alert ${alertId}`);
          }
          const name = existingAlert.name;
          if (!name) {
            throw new Error(`Invalid Alert ${alertId}`);
          }
          const targetGroup = await (0, ensureTargetGroup_1.default)(service, newData.targetGroups, {
            name: (_a = existingAlert.targetGroup.name) !== null && _a !== void 0 ? _a : "Default",
            emailTargetIds: emailTargetIds.filter((id3) => !!id3),
            smsTargetIds: smsTargetIds.filter((id3) => !!id3),
            telegramTargetIds: telegramTargetIds.filter((id3) => !!id3),
            webhookTargetIds: webhookTargetIds.filter((id3) => !!id3),
            discordTargetIds: discordTargetIds.filter((id3) => !!id3)
          });
          const alertIndex = newData.alerts.indexOf(existingAlert);
          const newAlert = Object.assign(Object.assign({}, existingAlert), { targetGroup });
          newData.alerts[alertIndex] = newAlert;
          setInternalData(Object.assign({}, newData));
          return newAlert;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service]);
      const connectWallet = (0, react_1.useCallback)(async ({ walletParams, connectWalletConflictResolutionTechnique }) => {
        const timestamp = Math.round(Date.now() / 1e3);
        const { walletBlockchain: walletBlockchain2, walletPublicKey: walletPublicKey2 } = walletParams;
        setLoading(true);
        try {
          const signature = await signMessage({
            params: walletParams,
            dappAddress,
            timestamp,
            signer: walletParams
          });
          const result2 = await service.connectWallet({
            walletBlockchain: walletBlockchain2,
            walletPublicKey: walletPublicKey2,
            accountId: walletBlockchain2 === "APTOS" || walletBlockchain2 === "ACALA" || walletBlockchain2 === "NEAR" || walletBlockchain2 === "SUI" ? walletParams.accountAddress : void 0,
            signature,
            timestamp,
            connectWalletConflictResolutionTechnique
          });
          if (internalData !== null) {
            const newList = [...internalData.connectedWallets];
            newList.push(result2);
            setInternalData(Object.assign(Object.assign({}, internalData), { connectedWallets: newList }));
          }
          return result2;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service, internalData]);
      const createAlert = (0, react_1.useCallback)(async (input) => {
        var _a;
        const { name, filterId, filterOptions, sourceId, groupName = "default", targetGroupName, sourceIds: sourceIdsInput, sourceGroupName } = input;
        setLoading(true);
        try {
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          const { emailTargetIds, smsTargetIds, telegramTargetIds, webhookTargetIds, discordTargetIds } = await (0, ensureTargetIds_1.default)(service, newData, input);
          const existingAlert = newData.alerts.find((a2) => a2.name === name);
          if (existingAlert !== void 0) {
            throw new Error(`Name must be unique! Found alert ${existingAlert.id} with name ${name}`);
          }
          let sourceIds = [];
          let sourceToUse;
          if (sourceId === "" && sourceIdsInput !== void 0) {
            sourceToUse = newData.sources.find((s2) => s2.id === sourceIdsInput[0]);
            sourceIds = sourceIdsInput;
          } else {
            sourceToUse = newData.sources.find((s2) => s2.id === sourceId);
            sourceIds = [sourceId];
          }
          if (sourceToUse === void 0) {
            throw new Error(`Invalid source id ${sourceId}`);
          }
          const existingFilter = (_a = sourceToUse.applicableFilters) === null || _a === void 0 ? void 0 : _a.find((f2) => (f2 === null || f2 === void 0 ? void 0 : f2.id) === filterId);
          if (existingFilter === void 0) {
            throw new Error(`Invalid filter id ${filterId}`);
          }
          const sourceGroup = await (0, ensureSourceGroup_1.default)(service, newData.sourceGroups, {
            name: sourceGroupName !== null && sourceGroupName !== void 0 ? sourceGroupName : name,
            sourceIds
          });
          const targetGroup = await (0, ensureTargetGroup_1.default)(service, newData.targetGroups, {
            name: targetGroupName !== null && targetGroupName !== void 0 ? targetGroupName : "Default",
            emailTargetIds: emailTargetIds.filter((id3) => !!id3),
            smsTargetIds: smsTargetIds.filter((id3) => !!id3),
            telegramTargetIds: telegramTargetIds.filter((id3) => !!id3),
            webhookTargetIds: webhookTargetIds.filter((id3) => !!id3),
            discordTargetIds: discordTargetIds.filter((id3) => !!id3)
          });
          const sourceGroupId = sourceGroup.id;
          if (sourceGroupId === null) {
            throw new Error(`Unknown error creating source group`);
          }
          const targetGroupId = targetGroup.id;
          if (targetGroupId === null) {
            throw new Error(`Unknown error creating target group`);
          }
          const alert = await service.createAlert({
            name,
            sourceGroupId,
            filterId,
            filterOptions: (0, packFilterOptions_1.default)(filterOptions),
            targetGroupId,
            groupName
          });
          const newAlert = Object.assign(Object.assign({}, alert), {
            sourceGroup,
            targetGroup
          });
          newData.alerts.push(newAlert);
          setInternalData(Object.assign({}, newData));
          return newAlert;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service]);
      const deleteAlert = (0, react_1.useCallback)(async (input) => {
        const { alertId, keepSourceGroup = false, keepTargetGroup = false } = input;
        try {
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          const alertToDelete = newData.alerts.find((a2) => {
            return a2.id === alertId;
          });
          if (alertToDelete === void 0) {
            throw new Error(`Unknown alert id ${alertId}`);
          }
          const targetGroupId = alertToDelete.targetGroup.id;
          const sourceGroupId = alertToDelete.sourceGroup.id;
          await service.deleteAlert({ id: alertId });
          newData.alerts = newData.alerts.filter((a2) => a2 !== alertToDelete);
          if (targetGroupId !== null && !keepTargetGroup) {
            await service.deleteTargetGroup({
              id: targetGroupId
            }).then(() => {
              newData.targetGroups = newData.targetGroups.filter((t) => t.id !== targetGroupId);
            });
          }
          if (sourceGroupId !== null && !keepSourceGroup) {
            await service.deleteSourceGroup({
              id: sourceGroupId
            }).then(() => {
              newData.sourceGroups = newData.sourceGroups.filter((s2) => s2.id !== sourceGroupId);
            });
          }
          setInternalData(Object.assign({}, newData));
          return alertId;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service]);
      const createSource = (0, react_1.useCallback)(async (input) => {
        var _a;
        setLoading(true);
        try {
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          const source = await (0, ensureSource_1.default)(service, newData.sources, input);
          (_a = source.applicableFilters) === null || _a === void 0 ? void 0 : _a.forEach((applicableFilter) => {
            const existing = newData.filters.find((existingFilter) => (applicableFilter === null || applicableFilter === void 0 ? void 0 : applicableFilter.id) === (existingFilter === null || existingFilter === void 0 ? void 0 : existingFilter.id));
            if (applicableFilter && existing !== void 0) {
              newData.filters.push(applicableFilter);
            }
          });
          setInternalData(newData);
          return source;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service]);
      const createBonfidaAuctionSource = (0, react_1.useCallback)(async (input) => {
        setLoading(true);
        try {
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          const source = await (0, ensureSource_1.ensureBonfidaAuctionSource)(service, newData.sources, input);
          setInternalData(newData);
          return source;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service]);
      const createMetaplexAuctionSource = (0, react_1.useCallback)(async (input) => {
        setLoading(true);
        try {
          const newData = await (0, fetchDataImpl_1.default)(service, Date, fetchDataRef.current);
          const source = await (0, ensureSource_1.ensureMetaplexAuctionSource)(service, newData.sources, input);
          setInternalData(newData);
          return source;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [service]);
      const getConfiguration = (0, react_1.useCallback)(async () => {
        setLoading(true);
        try {
          return await service.getConfigurationForDapp({
            dappAddress: config.dappAddress
          });
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [config.dappAddress, service]);
      const logOut = (0, react_1.useCallback)(async () => {
        service.setJwt(null);
        await setAuthorization(null);
        await setRoles(null);
        setIsAuthenticated(false);
        setInternalData(null);
      }, [
        setAuthorization,
        setIsAuthenticated,
        setInternalData,
        setRoles,
        service
      ]);
      const getTopics = (0, react_1.useCallback)(async () => {
        var _a;
        setLoading(true);
        try {
          const roles = await getRoles();
          const isUserMessenger = (_a = roles === null || roles === void 0 ? void 0 : roles.some((role) => role === "UserMessenger")) !== null && _a !== void 0 ? _a : false;
          if (!isUserMessenger) {
            throw new NotifiClientError("This user is not authorized for getTopics!");
          }
          return await service.getTopics();
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setLoading, getRoles, service, setError]);
      const data = (0, react_1.useMemo)(() => {
        return projectData(internalData);
      }, [internalData]);
      const broadcastMessage = (0, react_1.useCallback)(async ({ topic, subject, message, isHolderOnly, variables: extraVariables }, signer) => {
        var _a;
        setLoading(true);
        try {
          if (topic.topicName === null) {
            throw new NotifiClientError("Invalid UserTopic");
          }
          let targetTemplates;
          if (topic.targetTemplate !== null) {
            const value = topic.targetTemplate;
            targetTemplates = [
              {
                key: "EMAIL",
                value
              },
              {
                key: "SMS",
                value
              },
              {
                key: "TELEGRAM",
                value
              }
            ];
          }
          const timestamp = Math.round(Date.now() / 1e3);
          const variables = [
            {
              key: "message",
              value: message
            },
            {
              key: "subject",
              value: subject
            }
          ];
          if (isHolderOnly && topic.targetCollections !== null) {
            variables.push({
              key: "TargetCollection",
              value: JSON.stringify(topic.targetCollections)
            });
          }
          if (extraVariables !== void 0) {
            Object.keys(extraVariables).forEach((key) => {
              if (key === "message" || key === "subject" || key === "TargetCollection") {
                return;
              }
              variables.push({
                key,
                value: extraVariables[key]
              });
            });
          }
          const signature = await signMessage({
            params: config,
            dappAddress,
            timestamp,
            signer
          });
          const result2 = await service.broadcastMessage({
            topicName: topic.topicName,
            targetTemplates,
            timestamp,
            variables,
            walletBlockchain: "OFF_CHAIN",
            signature
          });
          return (_a = result2.id) !== null && _a !== void 0 ? _a : null;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [config, dappAddress, service]);
      const sendEmailTargetVerification = (0, react_1.useCallback)(async ({ targetId }) => {
        setLoading(true);
        try {
          const emailTarget = await service.sendEmailTargetVerificationRequest({
            targetId
          });
          const id3 = emailTarget.id;
          if (id3 === null) {
            throw new Error(`Unknown error requesting verification`);
          }
          return id3;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setError, setLoading, service]);
      const fetchSubscriptionCard = (0, react_1.useCallback)(async (input) => {
        setLoading(true);
        try {
          const tenantConfig = await service.findTenantConfig(Object.assign({ tenant: dappAddress }, input));
          return tenantConfig;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setError, setLoading, service, dappAddress]);
      const getFusionNotificationHistory = (0, react_1.useCallback)(async (input) => {
        try {
          const result2 = await service.getFusionNotificationHistory(input);
          return result2;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setLoading, setError, service]);
      const getNotificationHistory = (0, react_1.useCallback)(async (input) => {
        try {
          const result2 = await service.getNotificationHistory(input);
          return result2;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setLoading, setError, service]);
      const getUnreadNotificationHistoryCount = (0, react_1.useCallback)(async () => {
        try {
          const result2 = await service.getUnreadNotificationHistoryCount();
          return result2;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setLoading, setError, service]);
      const getConversationMessages = (0, react_1.useCallback)(async (input) => {
        try {
          const result2 = await service.getConversationMessages(input);
          return result2;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setLoading, setError, service]);
      const sendConversationMessages = (0, react_1.useCallback)(async (input) => {
        try {
          const result2 = await service.sendConversationMessages(input);
          return result2;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setLoading, setError, service]);
      const createSupportConversation = (0, react_1.useCallback)(async () => {
        try {
          const result2 = await service.createSupportConversation();
          return result2;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setLoading, setError, service]);
      const copyAuthorization = (0, react_1.useCallback)(async (publicKey) => {
        const [auth, roles] = await Promise.all([getAuthorization(), getRoles()]);
        const otherStorage = (0, storage_1.default)({
          walletPublicKey: publicKey,
          jwtPrefix: notifiConfig.storagePrefix,
          dappAddress
        });
        await Promise.all([
          otherStorage.setAuthorization(auth),
          otherStorage.setRoles(roles)
        ]);
      }, [storage_1.default, notifiConfig, dappAddress]);
      const markFusionNotificationHistoryAsRead = (0, react_1.useCallback)(async (input) => {
        try {
          const result2 = await service.markFusionNotificationHistoryAsRead(input);
          return result2;
        } catch (e) {
          if (e instanceof Error) {
            setError(e);
          } else {
            setError(new NotifiClientError(e));
          }
          throw e;
        } finally {
          setLoading(false);
        }
      }, [setLoading, setError, service]);
      const client = {
        beginLoginViaTransaction,
        broadcastMessage,
        completeLoginViaTransaction,
        connectWallet,
        logIn,
        logOut,
        createAlert,
        createBonfidaAuctionSource,
        createMetaplexAuctionSource,
        createSource,
        ensureSourceGroup,
        deleteAlert,
        fetchData,
        fetchSubscriptionCard,
        getConfiguration,
        getConversationMessages,
        getFusionNotificationHistory,
        getNotificationHistory,
        getTopics,
        updateAlert,
        ensureTargetGroup,
        sendConversationMessages,
        sendEmailTargetVerification,
        createSupportConversation,
        createDiscordTarget,
        getUnreadNotificationHistoryCount,
        markFusionNotificationHistoryAsRead
      };
      return Object.assign({
        data,
        error,
        expiry,
        isTokenExpired,
        isAuthenticated,
        isInitialized,
        loading,
        copyAuthorization
      }, client);
    };
    exports.default = useNotifiClient2;
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/hooks/index.js
var require_hooks = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/hooks/index.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useNotifiConfig = exports.useNotifiClient = exports.GqlError = exports.BlockchainEnvironment = void 0;
    var notifi_axios_utils_1 = require_dist();
    Object.defineProperty(exports, "GqlError", { enumerable: true, get: function() {
      return notifi_axios_utils_1.GqlError;
    } });
    var useNotifiClient_1 = __importDefault(require_useNotifiClient());
    exports.useNotifiClient = useNotifiClient_1.default;
    var useNotifiConfig_1 = __importDefault(require_useNotifiConfig());
    exports.useNotifiConfig = useNotifiConfig_1.default;
    var useNotifiConfig_2 = require_useNotifiConfig();
    Object.defineProperty(exports, "BlockchainEnvironment", { enumerable: true, get: function() {
      return useNotifiConfig_2.BlockchainEnvironment;
    } });
  }
});

// node_modules/@notifi-network/notifi-react-hooks/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@notifi-network/notifi-react-hooks/dist/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_alertUtils(), exports);
    __exportStar(require_hooks(), exports);
  }
});

// node_modules/@notifi-network/notifi-react-card/dist/index.mjs
init_shim();
init_clsx_m();
var import_react3 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_notifi_react_hooks = __toESM(require_dist3(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react7 = __toESM(require_react(), 1);
var import_react8 = __toESM(require_react(), 1);
var import_react9 = __toESM(require_react(), 1);
var import_react10 = __toESM(require_react(), 1);
var import_react11 = __toESM(require_react(), 1);
var import_react12 = __toESM(require_react(), 1);
var import_react13 = __toESM(require_react(), 1);
var import_react14 = __toESM(require_react(), 1);
var import_react15 = __toESM(require_react(), 1);
var import_react16 = __toESM(require_react(), 1);
init_clsx_m();
var import_react17 = __toESM(require_react(), 1);
init_clsx_m();
var import_react18 = __toESM(require_react(), 1);
var import_react19 = __toESM(require_react(), 1);
init_clsx_m();
var import_react20 = __toESM(require_react(), 1);
var import_react21 = __toESM(require_react(), 1);
init_clsx_m();
var import_react22 = __toESM(require_react(), 1);
init_clsx_m();
var import_react23 = __toESM(require_react(), 1);
var import_react24 = __toESM(require_react(), 1);
init_clsx_m();
var import_react25 = __toESM(require_react(), 1);
var import_react26 = __toESM(require_react(), 1);
var import_react27 = __toESM(require_react(), 1);
var import_react28 = __toESM(require_react(), 1);
var import_react29 = __toESM(require_react(), 1);
var import_react30 = __toESM(require_react(), 1);
var import_react31 = __toESM(require_react(), 1);
var import_react32 = __toESM(require_react(), 1);
var import_react33 = __toESM(require_react(), 1);
var import_react34 = __toESM(require_react(), 1);
var import_react35 = __toESM(require_react(), 1);
var import_react36 = __toESM(require_react(), 1);
var import_react37 = __toESM(require_react(), 1);
var import_react38 = __toESM(require_react(), 1);
var import_react39 = __toESM(require_react(), 1);
var import_react40 = __toESM(require_react(), 1);
var import_react41 = __toESM(require_react(), 1);
var import_react42 = __toESM(require_react(), 1);
var import_react43 = __toESM(require_react(), 1);
var import_react44 = __toESM(require_react(), 1);
init_clsx_m();
var import_react45 = __toESM(require_react(), 1);
init_clsx_m();
var import_react46 = __toESM(require_react(), 1);
init_clsx_m();
var import_react47 = __toESM(require_react(), 1);
init_clsx_m();
var import_react48 = __toESM(require_react(), 1);
init_clsx_m();
var import_react49 = __toESM(require_react(), 1);
init_clsx_m();
var import_react50 = __toESM(require_react(), 1);
init_clsx_m();
var import_react51 = __toESM(require_react(), 1);
init_clsx_m();
var import_react52 = __toESM(require_react(), 1);
init_clsx_m();
var import_react53 = __toESM(require_react(), 1);
var import_react54 = __toESM(require_react(), 1);
init_clsx_m();
var import_react55 = __toESM(require_react(), 1);
init_clsx_m();
var import_react56 = __toESM(require_react(), 1);
init_clsx_m();
var import_react57 = __toESM(require_react(), 1);
var import_react58 = __toESM(require_react(), 1);
var import_react59 = __toESM(require_react(), 1);
init_clsx_m();
var import_react60 = __toESM(require_react(), 1);
var import_react61 = __toESM(require_react(), 1);
init_clsx_m();
var import_react62 = __toESM(require_react(), 1);
init_clsx_m();
var import_react63 = __toESM(require_react(), 1);
var import_react64 = __toESM(require_react(), 1);
var import_react65 = __toESM(require_react(), 1);
var import_react66 = __toESM(require_react(), 1);
var import_react67 = __toESM(require_react(), 1);
init_clsx_m();
var import_react68 = __toESM(require_react(), 1);
var import_react69 = __toESM(require_react(), 1);
init_clsx_m();
var import_react70 = __toESM(require_react(), 1);
init_clsx_m();
var import_react71 = __toESM(require_react(), 1);
init_clsx_m();
var import_react72 = __toESM(require_react(), 1);
var import_react73 = __toESM(require_react(), 1);
init_clsx_m();
var import_react74 = __toESM(require_react(), 1);
init_clsx_m();
var import_react75 = __toESM(require_react(), 1);
init_clsx_m();
var import_react76 = __toESM(require_react(), 1);
var import_react77 = __toESM(require_react(), 1);
init_clsx_m();
var import_react78 = __toESM(require_react(), 1);
init_clsx_m();
var import_react79 = __toESM(require_react(), 1);
init_clsx_m();
var import_react80 = __toESM(require_react(), 1);
init_clsx_m();
var import_react81 = __toESM(require_react(), 1);
init_clsx_m();
var import_react82 = __toESM(require_react(), 1);
init_clsx_m();
var import_react83 = __toESM(require_react(), 1);
init_clsx_m();
var import_react84 = __toESM(require_react(), 1);
init_clsx_m();
var import_react85 = __toESM(require_react(), 1);

// node_modules/react-virtuoso/dist/index.m.js
init_shim();

// node_modules/@virtuoso.dev/react-urx/dist/react-urx.esm.js
init_shim();
var import_react = __toESM(require_react());

// node_modules/@virtuoso.dev/urx/dist/urx.esm.js
init_shim();
var PUBLISH = 0;
var SUBSCRIBE = 1;
var RESET = 2;
var VALUE = 4;
function compose(a2, b2) {
  return function(arg) {
    return a2(b2(arg));
  };
}
function thrush(arg, proc) {
  return proc(arg);
}
function curry2to1(proc, arg1) {
  return function(arg2) {
    return proc(arg1, arg2);
  };
}
function curry1to0(proc, arg) {
  return function() {
    return proc(arg);
  };
}
function tap(arg, proc) {
  proc(arg);
  return arg;
}
function tup() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return args;
}
function call(proc) {
  proc();
}
function always(value) {
  return function() {
    return value;
  };
}
function joinProc() {
  for (var _len2 = arguments.length, procs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    procs[_key2] = arguments[_key2];
  }
  return function() {
    procs.map(call);
  };
}
function noop() {
}
function subscribe(emitter, subscription) {
  return emitter(SUBSCRIBE, subscription);
}
function publish(publisher, value) {
  publisher(PUBLISH, value);
}
function reset(emitter) {
  emitter(RESET);
}
function getValue(depot) {
  return depot(VALUE);
}
function connect(emitter, publisher) {
  return subscribe(emitter, curry2to1(publisher, PUBLISH));
}
function handleNext(emitter, subscription) {
  var unsub = emitter(SUBSCRIBE, function(value) {
    unsub();
    subscription(value);
  });
  return unsub;
}
function stream() {
  var subscriptions = [];
  return function(action, arg) {
    switch (action) {
      case RESET:
        subscriptions.splice(0, subscriptions.length);
        return;
      case SUBSCRIBE:
        subscriptions.push(arg);
        return function() {
          var indexOf = subscriptions.indexOf(arg);
          if (indexOf > -1) {
            subscriptions.splice(indexOf, 1);
          }
        };
      case PUBLISH:
        subscriptions.slice().forEach(function(subscription) {
          subscription(arg);
        });
        return;
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function statefulStream(initial) {
  var value = initial;
  var innerSubject = stream();
  return function(action, arg) {
    switch (action) {
      case SUBSCRIBE:
        var subscription = arg;
        subscription(value);
        break;
      case PUBLISH:
        value = arg;
        break;
      case VALUE:
        return value;
    }
    return innerSubject(action, arg);
  };
}
function eventHandler(emitter) {
  var unsub;
  var currentSubscription;
  var cleanup = function cleanup2() {
    return unsub && unsub();
  };
  return function(action, subscription) {
    switch (action) {
      case SUBSCRIBE:
        if (subscription) {
          if (currentSubscription === subscription) {
            return;
          }
          cleanup();
          currentSubscription = subscription;
          unsub = subscribe(emitter, subscription);
          return unsub;
        } else {
          cleanup();
          return noop;
        }
      case RESET:
        cleanup();
        currentSubscription = null;
        return;
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function streamFromEmitter(emitter) {
  return tap(stream(), function(stream2) {
    return connect(emitter, stream2);
  });
}
function statefulStreamFromEmitter(emitter, initial) {
  return tap(statefulStream(initial), function(stream2) {
    return connect(emitter, stream2);
  });
}
function combineOperators() {
  for (var _len = arguments.length, operators = new Array(_len), _key = 0; _key < _len; _key++) {
    operators[_key] = arguments[_key];
  }
  return function(subscriber) {
    return operators.reduceRight(thrush, subscriber);
  };
}
function pipe(source) {
  for (var _len2 = arguments.length, operators = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    operators[_key2 - 1] = arguments[_key2];
  }
  var project = combineOperators.apply(void 0, operators);
  return function(action, subscription) {
    switch (action) {
      case SUBSCRIBE:
        return subscribe(source, project(subscription));
      case RESET:
        reset(source);
        return;
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function defaultComparator(previous, next) {
  return previous === next;
}
function distinctUntilChanged(comparator) {
  if (comparator === void 0) {
    comparator = defaultComparator;
  }
  var current;
  return function(done) {
    return function(next) {
      if (!comparator(current, next)) {
        current = next;
        done(next);
      }
    };
  };
}
function filter(predicate) {
  return function(done) {
    return function(value) {
      predicate(value) && done(value);
    };
  };
}
function map(project) {
  return function(done) {
    return compose(done, project);
  };
}
function mapTo(value) {
  return function(done) {
    return function() {
      return done(value);
    };
  };
}
function scan(scanner, initial) {
  return function(done) {
    return function(value) {
      return done(initial = scanner(initial, value));
    };
  };
}
function skip(times) {
  return function(done) {
    return function(value) {
      times > 0 ? times-- : done(value);
    };
  };
}
function throttleTime(interval) {
  var currentValue;
  var timeout;
  return function(done) {
    return function(value) {
      currentValue = value;
      if (timeout) {
        return;
      }
      timeout = setTimeout(function() {
        timeout = void 0;
        done(currentValue);
      }, interval);
    };
  };
}
function debounceTime(interval) {
  var currentValue;
  var timeout;
  return function(done) {
    return function(value) {
      currentValue = value;
      if (timeout) {
        clearTimeout(timeout);
      }
      timeout = setTimeout(function() {
        done(currentValue);
      }, interval);
    };
  };
}
function withLatestFrom() {
  for (var _len3 = arguments.length, sources = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    sources[_key3] = arguments[_key3];
  }
  var values = new Array(sources.length);
  var called = 0;
  var pendingCall = null;
  var allCalled = Math.pow(2, sources.length) - 1;
  sources.forEach(function(source, index) {
    var bit = Math.pow(2, index);
    subscribe(source, function(value) {
      var prevCalled = called;
      called = called | bit;
      values[index] = value;
      if (prevCalled !== allCalled && called === allCalled && pendingCall) {
        pendingCall();
        pendingCall = null;
      }
    });
  });
  return function(done) {
    return function(value) {
      var call2 = function call3() {
        return done([value].concat(values));
      };
      if (called === allCalled) {
        call2();
      } else {
        pendingCall = call2;
      }
    };
  };
}
function merge() {
  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }
  return function(action, subscription) {
    switch (action) {
      case SUBSCRIBE:
        return joinProc.apply(void 0, sources.map(function(source) {
          return subscribe(source, subscription);
        }));
      case RESET:
        return;
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function duc(source, comparator) {
  if (comparator === void 0) {
    comparator = defaultComparator;
  }
  return pipe(source, distinctUntilChanged(comparator));
}
function combineLatest() {
  var innerSubject = stream();
  for (var _len2 = arguments.length, emitters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    emitters[_key2] = arguments[_key2];
  }
  var values = new Array(emitters.length);
  var called = 0;
  var allCalled = Math.pow(2, emitters.length) - 1;
  emitters.forEach(function(source, index) {
    var bit = Math.pow(2, index);
    subscribe(source, function(value) {
      values[index] = value;
      called = called | bit;
      if (called === allCalled) {
        publish(innerSubject, values);
      }
    });
  });
  return function(action, subscription) {
    switch (action) {
      case SUBSCRIBE:
        if (called === allCalled) {
          subscription(values);
        }
        return subscribe(innerSubject, subscription);
      case RESET:
        return reset(innerSubject);
      default:
        throw new Error("unrecognized action " + action);
    }
  };
}
function system(constructor, dependencies, _temp) {
  if (dependencies === void 0) {
    dependencies = [];
  }
  var _ref = _temp === void 0 ? {
    singleton: true
  } : _temp, singleton = _ref.singleton;
  return {
    id: id(),
    constructor,
    dependencies,
    singleton
  };
}
var id = function id2() {
  return Symbol();
};
function init(systemSpec) {
  var singletons = /* @__PURE__ */ new Map();
  var _init = function _init2(_ref2) {
    var id3 = _ref2.id, constructor = _ref2.constructor, dependencies = _ref2.dependencies, singleton = _ref2.singleton;
    if (singleton && singletons.has(id3)) {
      return singletons.get(id3);
    }
    var system2 = constructor(dependencies.map(function(e) {
      return _init2(e);
    }));
    if (singleton) {
      singletons.set(id3, system2);
    }
    return system2;
  };
  return _init(systemSpec);
}

// node_modules/@virtuoso.dev/react-urx/dist/react-urx.esm.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _createForOfIteratorHelperLoose(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (it2)
    return (it2 = it2.call(o2)).next.bind(it2);
  if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
    if (it2)
      o2 = it2;
    var i2 = 0;
    return function() {
      if (i2 >= o2.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o2[i2++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var _excluded = ["children"];
function omit(keys, obj) {
  var result2 = {};
  var index = {};
  var idx = 0;
  var len = keys.length;
  while (idx < len) {
    index[keys[idx]] = 1;
    idx += 1;
  }
  for (var prop in obj) {
    if (!index.hasOwnProperty(prop)) {
      result2[prop] = obj[prop];
    }
  }
  return result2;
}
var useIsomorphicLayoutEffect = typeof document !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;
function systemToComponent(systemSpec, map2, Root) {
  var requiredPropNames = Object.keys(map2.required || {});
  var optionalPropNames = Object.keys(map2.optional || {});
  var methodNames = Object.keys(map2.methods || {});
  var eventNames = Object.keys(map2.events || {});
  var Context = (0, import_react.createContext)({});
  function applyPropsToSystem(system2, props) {
    if (system2["propsReady"]) {
      publish(system2["propsReady"], false);
    }
    for (var _iterator = _createForOfIteratorHelperLoose(requiredPropNames), _step; !(_step = _iterator()).done; ) {
      var requiredPropName = _step.value;
      var stream2 = system2[map2.required[requiredPropName]];
      publish(stream2, props[requiredPropName]);
    }
    for (var _iterator2 = _createForOfIteratorHelperLoose(optionalPropNames), _step2; !(_step2 = _iterator2()).done; ) {
      var optionalPropName = _step2.value;
      if (optionalPropName in props) {
        var _stream = system2[map2.optional[optionalPropName]];
        publish(_stream, props[optionalPropName]);
      }
    }
    if (system2["propsReady"]) {
      publish(system2["propsReady"], true);
    }
  }
  function buildMethods(system2) {
    return methodNames.reduce(function(acc, methodName) {
      acc[methodName] = function(value) {
        var stream2 = system2[map2.methods[methodName]];
        publish(stream2, value);
      };
      return acc;
    }, {});
  }
  function buildEventHandlers(system2) {
    return eventNames.reduce(function(handlers, eventName) {
      handlers[eventName] = eventHandler(system2[map2.events[eventName]]);
      return handlers;
    }, {});
  }
  var Component = (0, import_react.forwardRef)(function(propsWithChildren, ref) {
    var children = propsWithChildren.children, props = _objectWithoutPropertiesLoose(propsWithChildren, _excluded);
    var _useState = (0, import_react.useState)(function() {
      return tap(init(systemSpec), function(system3) {
        return applyPropsToSystem(system3, props);
      });
    }), system2 = _useState[0];
    var _useState2 = (0, import_react.useState)(curry1to0(buildEventHandlers, system2)), handlers = _useState2[0];
    useIsomorphicLayoutEffect(function() {
      for (var _iterator3 = _createForOfIteratorHelperLoose(eventNames), _step3; !(_step3 = _iterator3()).done; ) {
        var eventName = _step3.value;
        if (eventName in props) {
          subscribe(handlers[eventName], props[eventName]);
        }
      }
      return function() {
        Object.values(handlers).map(reset);
      };
    }, [props, handlers, system2]);
    useIsomorphicLayoutEffect(function() {
      applyPropsToSystem(system2, props);
    });
    (0, import_react.useImperativeHandle)(ref, always(buildMethods(system2)));
    return (0, import_react.createElement)(Context.Provider, {
      value: system2
    }, Root ? (0, import_react.createElement)(Root, omit([].concat(requiredPropNames, optionalPropNames, eventNames), props), children) : children);
  });
  var usePublisher = function usePublisher2(key) {
    return (0, import_react.useCallback)(curry2to1(publish, (0, import_react.useContext)(Context)[key]), [key]);
  };
  var useEmitterValue = function useEmitterValue2(key) {
    var context = (0, import_react.useContext)(Context);
    var source = context[key];
    var _useState3 = (0, import_react.useState)(curry1to0(getValue, source)), value = _useState3[0], setValue = _useState3[1];
    useIsomorphicLayoutEffect(function() {
      return subscribe(source, function(next) {
        if (next !== value) {
          setValue(always(next));
        }
      });
    }, [source, value]);
    return value;
  };
  var useEmitter = function useEmitter2(key, callback) {
    var context = (0, import_react.useContext)(Context);
    var source = context[key];
    useIsomorphicLayoutEffect(function() {
      return subscribe(source, callback);
    }, [callback, source]);
  };
  return {
    Component,
    usePublisher,
    useEmitterValue,
    useEmitter
  };
}

// node_modules/react-virtuoso/dist/index.m.js
var n = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
function c() {
  return c = Object.assign || function(t) {
    for (var e = 1; e < arguments.length; e++) {
      var n2 = arguments[e];
      for (var o2 in n2)
        Object.prototype.hasOwnProperty.call(n2, o2) && (t[o2] = n2[o2]);
    }
    return t;
  }, c.apply(this, arguments);
}
function m(t, e) {
  if (null == t)
    return {};
  var n2, o2, r2 = {}, i2 = Object.keys(t);
  for (o2 = 0; o2 < i2.length; o2++)
    e.indexOf(n2 = i2[o2]) >= 0 || (r2[n2] = t[n2]);
  return r2;
}
function d(t, e) {
  (null == e || e > t.length) && (e = t.length);
  for (var n2 = 0, o2 = new Array(e); n2 < e; n2++)
    o2[n2] = t[n2];
  return o2;
}
function f(t, e) {
  var n2 = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
  if (n2)
    return (n2 = n2.call(t)).next.bind(n2);
  if (Array.isArray(t) || (n2 = function(t2, e2) {
    if (t2) {
      if ("string" == typeof t2)
        return d(t2, e2);
      var n3 = Object.prototype.toString.call(t2).slice(8, -1);
      return "Object" === n3 && t2.constructor && (n3 = t2.constructor.name), "Map" === n3 || "Set" === n3 ? Array.from(t2) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? d(t2, e2) : void 0;
    }
  }(t)) || e && t && "number" == typeof t.length) {
    n2 && (t = n2);
    var o2 = 0;
    return function() {
      return o2 >= t.length ? { done: true } : { done: false, value: t[o2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var p;
var h;
var g = "undefined" != typeof document ? import_react2.useLayoutEffect : import_react2.useEffect;
!function(t) {
  t[t.DEBUG = 0] = "DEBUG", t[t.INFO = 1] = "INFO", t[t.WARN = 2] = "WARN", t[t.ERROR = 3] = "ERROR";
}(h || (h = {}));
var v = ((p = {})[h.DEBUG] = "debug", p[h.INFO] = "log", p[h.WARN] = "warn", p[h.ERROR] = "error", p);
var S = system(function() {
  var t = statefulStream(h.ERROR);
  return { log: statefulStream(function(n2, o2, r2) {
    var i2;
    void 0 === r2 && (r2 = h.INFO), r2 >= (null != (i2 = ("undefined" == typeof globalThis ? window : globalThis).VIRTUOSO_LOG_LEVEL) ? i2 : getValue(t)) && console[v[r2]]("%creact-virtuoso: %c%s %o", "color: #0253b3; font-weight: bold", "color: initial", n2, o2);
  }), logLevel: t };
}, [], { singleton: true });
function C(t, e) {
  void 0 === e && (e = true);
  var n2 = (0, import_react2.useRef)(null), o2 = function(t2) {
  };
  if ("undefined" != typeof ResizeObserver) {
    var r2 = new ResizeObserver(function(e2) {
      var n3 = e2[0].target;
      null !== n3.offsetParent && t(n3);
    });
    o2 = function(t2) {
      t2 && e ? (r2.observe(t2), n2.current = t2) : (n2.current && r2.unobserve(n2.current), n2.current = null);
    };
  }
  return { ref: n2, callbackRef: o2 };
}
function I(t, e) {
  return void 0 === e && (e = true), C(t, e).callbackRef;
}
function T(t, e, n2, o2, r2, i2, a2) {
  return C(function(n3) {
    for (var l2 = function(t2, e2, n4, o3) {
      var r3 = t2.length;
      if (0 === r3)
        return null;
      for (var i3 = [], a3 = 0; a3 < r3; a3++) {
        var l3 = t2.item(a3);
        if (l3 && void 0 !== l3.dataset.index) {
          var s3 = parseInt(l3.dataset.index), u3 = parseFloat(l3.dataset.knownSize), c3 = e2(l3, "offsetHeight");
          if (0 === c3 && o3("Zero-sized element, this should not happen", { child: l3 }, h.ERROR), c3 !== u3) {
            var m3 = i3[i3.length - 1];
            0 === i3.length || m3.size !== c3 || m3.endIndex !== s3 - 1 ? i3.push({ startIndex: s3, endIndex: s3, size: c3 }) : i3[i3.length - 1].endIndex++;
          }
        }
      }
      return i3;
    }(n3.children, e, 0, r2), s2 = n3.parentElement; !s2.dataset.virtuosoScroller; )
      s2 = s2.parentElement;
    var u2 = "window" === s2.firstElementChild.dataset.viewportType, c2 = a2 ? a2.scrollTop : u2 ? window.pageYOffset || document.documentElement.scrollTop : s2.scrollTop, m2 = a2 ? a2.scrollHeight : u2 ? document.documentElement.scrollHeight : s2.scrollHeight, d2 = a2 ? a2.offsetHeight : u2 ? window.innerHeight : s2.offsetHeight;
    o2({ scrollTop: Math.max(c2, 0), scrollHeight: m2, viewportHeight: d2 }), null == i2 || i2(function(t2, e2, n4) {
      return "normal" === e2 || null != e2 && e2.endsWith("px") || n4("row-gap was not resolved to pixel value correctly", e2, h.WARN), "normal" === e2 ? 0 : parseInt(null != e2 ? e2 : "0", 10);
    }(0, getComputedStyle(n3).rowGap, r2)), null !== l2 && t(l2);
  }, n2);
}
function w(t, e) {
  return Math.round(t.getBoundingClientRect()[e]);
}
function x(t, e) {
  return Math.abs(t - e) < 1.01;
}
function b(t, n2, o2, l2, s2) {
  void 0 === l2 && (l2 = noop);
  var c2 = (0, import_react2.useRef)(null), m2 = (0, import_react2.useRef)(null), d2 = (0, import_react2.useRef)(null), f2 = (0, import_react2.useRef)(false), p2 = (0, import_react2.useCallback)(function(e) {
    var o3 = e.target, r2 = o3 === window || o3 === document, i2 = r2 ? window.pageYOffset || document.documentElement.scrollTop : o3.scrollTop, a2 = r2 ? document.documentElement.scrollHeight : o3.scrollHeight, l3 = r2 ? window.innerHeight : o3.offsetHeight, s3 = function() {
      t({ scrollTop: Math.max(i2, 0), scrollHeight: a2, viewportHeight: l3 });
    };
    f2.current ? (0, import_react_dom.flushSync)(s3) : s3(), f2.current = false, null !== m2.current && (i2 === m2.current || i2 <= 0 || i2 === a2 - l3) && (m2.current = null, n2(true), d2.current && (clearTimeout(d2.current), d2.current = null));
  }, [t, n2]);
  return (0, import_react2.useEffect)(function() {
    var t2 = s2 || c2.current;
    return l2(s2 || c2.current), p2({ target: t2 }), t2.addEventListener("scroll", p2, { passive: true }), function() {
      l2(null), t2.removeEventListener("scroll", p2);
    };
  }, [c2, p2, o2, l2, s2]), { scrollerRef: c2, scrollByCallback: function(t2) {
    f2.current = true, c2.current.scrollBy(t2);
  }, scrollToCallback: function(e) {
    var o3 = c2.current;
    if (o3 && (!("offsetHeight" in o3) || 0 !== o3.offsetHeight)) {
      var r2, i2, a2, l3 = "smooth" === e.behavior;
      if (o3 === window ? (i2 = Math.max(w(document.documentElement, "height"), document.documentElement.scrollHeight), r2 = window.innerHeight, a2 = document.documentElement.scrollTop) : (i2 = o3.scrollHeight, r2 = w(o3, "height"), a2 = o3.scrollTop), e.top = Math.ceil(Math.max(Math.min(i2 - r2, e.top), 0)), x(r2, i2) || e.top === a2)
        return t({ scrollTop: a2, scrollHeight: i2, viewportHeight: r2 }), void (l3 && n2(true));
      l3 ? (m2.current = e.top, d2.current && clearTimeout(d2.current), d2.current = setTimeout(function() {
        d2.current = null, m2.current = null, n2(true);
      }, 1e3)) : m2.current = null, o3.scrollTo(e);
    }
  } };
}
var y = system(function() {
  var t = stream(), n2 = stream(), o2 = statefulStream(0), r2 = stream(), i2 = statefulStream(0), a2 = stream(), l2 = stream(), s2 = statefulStream(0), u2 = statefulStream(0), c2 = statefulStream(0), m2 = statefulStream(0), d2 = stream(), f2 = stream(), p2 = statefulStream(false), h2 = statefulStream(false);
  return connect(pipe(t, map(function(t2) {
    return t2.scrollTop;
  })), n2), connect(pipe(t, map(function(t2) {
    return t2.scrollHeight;
  })), l2), connect(n2, i2), { scrollContainerState: t, scrollTop: n2, viewportHeight: a2, headerHeight: s2, fixedHeaderHeight: u2, fixedFooterHeight: c2, footerHeight: m2, scrollHeight: l2, smoothScrollTargetReached: r2, react18ConcurrentRendering: h2, scrollTo: d2, scrollBy: f2, statefulScrollTop: i2, deviation: o2, scrollingInProgress: p2 };
}, [], { singleton: true });
var H = { lvl: 0 };
function E(t, e, n2, o2, r2) {
  return void 0 === o2 && (o2 = H), void 0 === r2 && (r2 = H), { k: t, v: e, lvl: n2, l: o2, r: r2 };
}
function R(t) {
  return t === H;
}
function L() {
  return H;
}
function F(t, e) {
  if (R(t))
    return H;
  var n2 = t.k, o2 = t.l, r2 = t.r;
  if (e === n2) {
    if (R(o2))
      return r2;
    if (R(r2))
      return o2;
    var i2 = O(o2);
    return U(W(t, { k: i2[0], v: i2[1], l: M(o2) }));
  }
  return U(W(t, e < n2 ? { l: F(o2, e) } : { r: F(r2, e) }));
}
function k(t, e, n2) {
  if (void 0 === n2 && (n2 = "k"), R(t))
    return [-Infinity, void 0];
  if (t[n2] === e)
    return [t.k, t.v];
  if (t[n2] < e) {
    var o2 = k(t.r, e, n2);
    return -Infinity === o2[0] ? [t.k, t.v] : o2;
  }
  return k(t.l, e, n2);
}
function z(t, e, n2) {
  return R(t) ? E(e, n2, 1) : e === t.k ? W(t, { k: e, v: n2 }) : function(t2) {
    return D(G(t2));
  }(W(t, e < t.k ? { l: z(t.l, e, n2) } : { r: z(t.r, e, n2) }));
}
function B(t, e, n2) {
  if (R(t))
    return [];
  var o2 = t.k, r2 = t.v, i2 = t.r, a2 = [];
  return o2 > e && (a2 = a2.concat(B(t.l, e, n2))), o2 >= e && o2 <= n2 && a2.push({ k: o2, v: r2 }), o2 <= n2 && (a2 = a2.concat(B(i2, e, n2))), a2;
}
function P(t) {
  return R(t) ? [] : [].concat(P(t.l), [{ k: t.k, v: t.v }], P(t.r));
}
function O(t) {
  return R(t.r) ? [t.k, t.v] : O(t.r);
}
function M(t) {
  return R(t.r) ? t.l : U(W(t, { r: M(t.r) }));
}
function W(t, e) {
  return E(void 0 !== e.k ? e.k : t.k, void 0 !== e.v ? e.v : t.v, void 0 !== e.lvl ? e.lvl : t.lvl, void 0 !== e.l ? e.l : t.l, void 0 !== e.r ? e.r : t.r);
}
function V(t) {
  return R(t) || t.lvl > t.r.lvl;
}
function U(t) {
  var e = t.l, n2 = t.r, o2 = t.lvl;
  if (n2.lvl >= o2 - 1 && e.lvl >= o2 - 1)
    return t;
  if (o2 > n2.lvl + 1) {
    if (V(e))
      return G(W(t, { lvl: o2 - 1 }));
    if (R(e) || R(e.r))
      throw new Error("Unexpected empty nodes");
    return W(e.r, { l: W(e, { r: e.r.l }), r: W(t, { l: e.r.r, lvl: o2 - 1 }), lvl: o2 });
  }
  if (V(t))
    return D(W(t, { lvl: o2 - 1 }));
  if (R(n2) || R(n2.l))
    throw new Error("Unexpected empty nodes");
  var r2 = n2.l, i2 = V(r2) ? n2.lvl - 1 : n2.lvl;
  return W(r2, { l: W(t, { r: r2.l, lvl: o2 - 1 }), r: D(W(n2, { l: r2.r, lvl: i2 })), lvl: r2.lvl + 1 });
}
function A(t, e, n2) {
  return R(t) ? [] : N(B(t, k(t, e)[0], n2), function(t2) {
    return { index: t2.k, value: t2.v };
  });
}
function N(t, e) {
  var n2 = t.length;
  if (0 === n2)
    return [];
  for (var o2 = e(t[0]), r2 = o2.index, i2 = o2.value, a2 = [], l2 = 1; l2 < n2; l2++) {
    var s2 = e(t[l2]), u2 = s2.index, c2 = s2.value;
    a2.push({ start: r2, end: u2 - 1, value: i2 }), r2 = u2, i2 = c2;
  }
  return a2.push({ start: r2, end: Infinity, value: i2 }), a2;
}
function D(t) {
  var e = t.r, n2 = t.lvl;
  return R(e) || R(e.r) || e.lvl !== n2 || e.r.lvl !== n2 ? t : W(e, { l: W(t, { r: e.l }), lvl: n2 + 1 });
}
function G(t) {
  var e = t.l;
  return R(e) || e.lvl !== t.lvl ? t : W(e, { r: W(t, { l: e.r }) });
}
function _(t, e, n2, o2) {
  void 0 === o2 && (o2 = 0);
  for (var r2 = t.length - 1; o2 <= r2; ) {
    var i2 = Math.floor((o2 + r2) / 2), a2 = n2(t[i2], e);
    if (0 === a2)
      return i2;
    if (-1 === a2) {
      if (r2 - o2 < 2)
        return i2 - 1;
      r2 = i2 - 1;
    } else {
      if (r2 === o2)
        return i2;
      o2 = i2 + 1;
    }
  }
  throw new Error("Failed binary finding record in array - " + t.join(",") + ", searched for " + e);
}
function j(t, e, n2) {
  return t[_(t, e, n2)];
}
var K = system(function() {
  return { recalcInProgress: statefulStream(false) };
}, [], { singleton: true });
function Y(t) {
  var e = t.size, n2 = t.startIndex, o2 = t.endIndex;
  return function(t2) {
    return t2.start === n2 && (t2.end === o2 || Infinity === t2.end) && t2.value === e;
  };
}
function q(t, e) {
  var n2 = t.index;
  return e === n2 ? 0 : e < n2 ? -1 : 1;
}
function Z(t, e) {
  var n2 = t.offset;
  return e === n2 ? 0 : e < n2 ? -1 : 1;
}
function J(t) {
  return { index: t.index, value: t };
}
function $(t, e, n2, o2) {
  var r2 = t, i2 = 0, a2 = 0, l2 = 0, s2 = 0;
  if (0 !== e) {
    l2 = r2[s2 = _(r2, e - 1, q)].offset;
    var u2 = k(n2, e - 1);
    i2 = u2[0], a2 = u2[1], r2.length && r2[s2].size === k(n2, e)[1] && (s2 -= 1), r2 = r2.slice(0, s2 + 1);
  } else
    r2 = [];
  for (var c2, m2 = f(A(n2, e, Infinity)); !(c2 = m2()).done; ) {
    var d2 = c2.value, p2 = d2.start, h2 = d2.value, g2 = p2 - i2, v2 = g2 * a2 + l2 + g2 * o2;
    r2.push({ offset: v2, size: h2, index: p2 }), i2 = p2, l2 = v2, a2 = h2;
  }
  return { offsetTree: r2, lastIndex: i2, lastOffset: l2, lastSize: a2 };
}
function Q(t, e) {
  var n2 = e[0], o2 = e[1], r2 = e[3];
  n2.length > 0 && (0, e[2])("received item sizes", n2, h.DEBUG);
  var i2 = t.sizeTree, a2 = i2, l2 = 0;
  if (o2.length > 0 && R(i2) && 2 === n2.length) {
    var s2 = n2[0].size, u2 = n2[1].size;
    a2 = o2.reduce(function(t2, e2) {
      return z(z(t2, e2, s2), e2 + 1, u2);
    }, a2);
  } else {
    var c2 = function(t2, e2) {
      for (var n3, o3 = R(t2) ? 0 : Infinity, r3 = f(e2); !(n3 = r3()).done; ) {
        var i3 = n3.value, a3 = i3.size, l3 = i3.startIndex, s3 = i3.endIndex;
        if (o3 = Math.min(o3, l3), R(t2))
          t2 = z(t2, 0, a3);
        else {
          var u3 = A(t2, l3 - 1, s3 + 1);
          if (!u3.some(Y(i3))) {
            for (var c3, m3 = false, d3 = false, p2 = f(u3); !(c3 = p2()).done; ) {
              var h2 = c3.value, g2 = h2.start, v2 = h2.end, S2 = h2.value;
              m3 ? (s3 >= g2 || a3 === S2) && (t2 = F(t2, g2)) : (d3 = S2 !== a3, m3 = true), v2 > s3 && s3 >= g2 && S2 !== a3 && (t2 = z(t2, s3 + 1, S2));
            }
            d3 && (t2 = z(t2, l3, a3));
          }
        }
      }
      return [t2, o3];
    }(a2, n2);
    a2 = c2[0], l2 = c2[1];
  }
  if (a2 === i2)
    return t;
  var m2 = $(t.offsetTree, l2, a2, r2), d2 = m2.offsetTree;
  return { sizeTree: a2, offsetTree: d2, lastIndex: m2.lastIndex, lastOffset: m2.lastOffset, lastSize: m2.lastSize, groupOffsetTree: o2.reduce(function(t2, e2) {
    return z(t2, e2, X(e2, d2, r2));
  }, L()), groupIndices: o2 };
}
function X(t, e, n2) {
  if (0 === e.length)
    return 0;
  var o2 = j(e, t, q), r2 = t - o2.index, i2 = o2.size * r2 + (r2 - 1) * n2 + o2.offset;
  return i2 > 0 ? i2 + n2 : i2;
}
function tt(t, e, n2) {
  if (function(t2) {
    return void 0 !== t2.groupIndex;
  }(t))
    return e.groupIndices[t.groupIndex] + 1;
  var o2 = et("LAST" === t.index ? n2 : t.index, e);
  return Math.max(0, o2, Math.min(n2, o2));
}
function et(t, e) {
  if (!nt(e))
    return t;
  for (var n2 = 0; e.groupIndices[n2] <= t + n2; )
    n2++;
  return t + n2;
}
function nt(t) {
  return !R(t.groupOffsetTree);
}
var ot = { offsetHeight: "height", offsetWidth: "width" };
var rt = system(function(t) {
  var n2 = t[0].log, o2 = t[1].recalcInProgress, r2 = stream(), i2 = stream(), a2 = statefulStreamFromEmitter(i2, 0), l2 = stream(), s2 = stream(), u2 = statefulStream(0), m2 = statefulStream([]), d2 = statefulStream(void 0), f2 = statefulStream(void 0), p2 = statefulStream(function(t2, e) {
    return w(t2, ot[e]);
  }), g2 = statefulStream(void 0), v2 = statefulStream(0), S2 = { offsetTree: [], sizeTree: L(), groupOffsetTree: L(), lastIndex: 0, lastOffset: 0, lastSize: 0, groupIndices: [] }, C2 = statefulStreamFromEmitter(pipe(r2, withLatestFrom(m2, n2, v2), scan(Q, S2), distinctUntilChanged()), S2);
  connect(pipe(m2, filter(function(t2) {
    return t2.length > 0;
  }), withLatestFrom(C2, v2), map(function(t2) {
    var e = t2[0], n3 = t2[1], o3 = t2[2], r3 = e.reduce(function(t3, e2, r4) {
      return z(t3, e2, X(e2, n3.offsetTree, o3) || r4);
    }, L());
    return c({}, n3, { groupIndices: e, groupOffsetTree: r3 });
  })), C2), connect(pipe(i2, withLatestFrom(C2), filter(function(t2) {
    return t2[0] < t2[1].lastIndex;
  }), map(function(t2) {
    var e = t2[1];
    return [{ startIndex: t2[0], endIndex: e.lastIndex, size: e.lastSize }];
  })), r2), connect(d2, f2);
  var I2 = statefulStreamFromEmitter(pipe(d2, map(function(t2) {
    return void 0 === t2;
  })), true);
  connect(pipe(f2, filter(function(t2) {
    return void 0 !== t2 && R(getValue(C2).sizeTree);
  }), map(function(t2) {
    return [{ startIndex: 0, endIndex: 0, size: t2 }];
  })), r2);
  var T2 = streamFromEmitter(pipe(r2, withLatestFrom(C2), scan(function(t2, e) {
    var n3 = e[1];
    return { changed: n3 !== t2.sizes, sizes: n3 };
  }, { changed: false, sizes: S2 }), map(function(t2) {
    return t2.changed;
  })));
  subscribe(pipe(u2, scan(function(t2, e) {
    return { diff: t2.prev - e, prev: e };
  }, { diff: 0, prev: 0 }), map(function(t2) {
    return t2.diff;
  })), function(t2) {
    t2 > 0 ? (publish(o2, true), publish(l2, t2)) : t2 < 0 && publish(s2, t2);
  }), subscribe(pipe(u2, withLatestFrom(n2)), function(t2) {
    t2[0] < 0 && (0, t2[1])("`firstItemIndex` prop should not be set to less than zero. If you don't know the total count, just use a very high value", { firstItemIndex: u2 }, h.ERROR);
  });
  var x2 = streamFromEmitter(l2);
  connect(pipe(l2, withLatestFrom(C2), map(function(t2) {
    var e = t2[0], n3 = t2[1];
    if (n3.groupIndices.length > 0)
      throw new Error("Virtuoso: prepending items does not work with groups");
    return P(n3.sizeTree).reduce(function(t3, n4) {
      var o3 = n4.k, r3 = n4.v;
      return { ranges: [].concat(t3.ranges, [{ startIndex: t3.prevIndex, endIndex: o3 + e - 1, size: t3.prevSize }]), prevIndex: o3 + e, prevSize: r3 };
    }, { ranges: [], prevIndex: 0, prevSize: n3.lastSize }).ranges;
  })), r2);
  var b2 = streamFromEmitter(pipe(s2, withLatestFrom(C2, v2), map(function(t2) {
    return X(-t2[0], t2[1].offsetTree, t2[2]);
  })));
  return connect(pipe(s2, withLatestFrom(C2, v2), map(function(t2) {
    var e = t2[0], n3 = t2[1], o3 = t2[2];
    if (n3.groupIndices.length > 0)
      throw new Error("Virtuoso: shifting items does not work with groups");
    var r3 = P(n3.sizeTree).reduce(function(t3, n4) {
      var o4 = n4.v;
      return z(t3, Math.max(0, n4.k + e), o4);
    }, L());
    return c({}, n3, { sizeTree: r3 }, $(n3.offsetTree, 0, r3, o3));
  })), C2), { data: g2, totalCount: i2, sizeRanges: r2, groupIndices: m2, defaultItemSize: f2, fixedItemSize: d2, unshiftWith: l2, shiftWith: s2, shiftWithOffset: b2, beforeUnshiftWith: x2, firstItemIndex: u2, gap: v2, sizes: C2, listRefresh: T2, statefulTotalCount: a2, trackItemSizes: I2, itemSize: p2 };
}, tup(S, K), { singleton: true });
var it = "undefined" != typeof document && "scrollBehavior" in document.documentElement.style;
function at(t) {
  var e = "number" == typeof t ? { index: t } : t;
  return e.align || (e.align = "start"), e.behavior && it || (e.behavior = "auto"), e.offset || (e.offset = 0), e;
}
var lt = system(function(t) {
  var n2 = t[0], o2 = n2.sizes, r2 = n2.totalCount, i2 = n2.listRefresh, a2 = n2.gap, l2 = t[1], s2 = l2.scrollingInProgress, u2 = l2.viewportHeight, c2 = l2.scrollTo, m2 = l2.smoothScrollTargetReached, d2 = l2.headerHeight, f2 = l2.footerHeight, p2 = l2.fixedHeaderHeight, g2 = l2.fixedFooterHeight, v2 = t[2].log, S2 = stream(), C2 = statefulStream(0), I2 = null, T2 = null, w2 = null;
  function x2() {
    I2 && (I2(), I2 = null), w2 && (w2(), w2 = null), T2 && (clearTimeout(T2), T2 = null), publish(s2, false);
  }
  return connect(pipe(S2, withLatestFrom(o2, u2, r2, C2, d2, f2, v2), withLatestFrom(a2, p2, g2), map(function(t2) {
    var n3 = t2[0], o3 = n3[0], r3 = n3[1], a3 = n3[2], l3 = n3[3], u3 = n3[4], c3 = n3[5], d3 = n3[6], f3 = n3[7], p3 = t2[1], g3 = t2[2], v3 = t2[3], C3 = at(o3), b2 = C3.align, y2 = C3.behavior, H2 = C3.offset, E2 = l3 - 1, R2 = tt(C3, r3, E2), L2 = X(R2, r3.offsetTree, p3) + c3;
    "end" === b2 ? (L2 += g3 + k(r3.sizeTree, R2)[1] - a3 + v3, R2 === E2 && (L2 += d3)) : "center" === b2 ? L2 += (g3 + k(r3.sizeTree, R2)[1] - a3 + v3) / 2 : L2 -= u3, H2 && (L2 += H2);
    var F2 = function(t3) {
      x2(), t3 ? (f3("retrying to scroll to", { location: o3 }, h.DEBUG), publish(S2, o3)) : f3("list did not change, scroll successful", {}, h.DEBUG);
    };
    if (x2(), "smooth" === y2) {
      var z2 = false;
      w2 = subscribe(i2, function(t3) {
        z2 = z2 || t3;
      }), I2 = handleNext(m2, function() {
        F2(z2);
      });
    } else
      I2 = handleNext(pipe(i2, function(t3) {
        var e = setTimeout(function() {
          t3(false);
        }, 150);
        return function(n4) {
          n4 && (t3(true), clearTimeout(e));
        };
      }), F2);
    return T2 = setTimeout(function() {
      x2();
    }, 1200), publish(s2, true), f3("scrolling from index to", { index: R2, top: L2, behavior: y2 }, h.DEBUG), { top: L2, behavior: y2 };
  })), c2), { scrollToIndex: S2, topListHeight: C2 };
}, tup(rt, y, S), { singleton: true });
var st = "up";
var ut = { atBottom: false, notAtBottomBecause: "NOT_SHOWING_LAST_ITEM", state: { offsetBottom: 0, scrollTop: 0, viewportHeight: 0, scrollHeight: 0 } };
var ct = system(function(t) {
  var n2 = t[0], o2 = n2.scrollContainerState, r2 = n2.scrollTop, i2 = n2.viewportHeight, a2 = n2.headerHeight, l2 = n2.footerHeight, s2 = n2.scrollBy, u2 = statefulStream(false), c2 = statefulStream(true), m2 = stream(), d2 = stream(), f2 = statefulStream(4), p2 = statefulStream(0), h2 = statefulStreamFromEmitter(pipe(merge(pipe(duc(r2), skip(1), mapTo(true)), pipe(duc(r2), skip(1), mapTo(false), debounceTime(100))), distinctUntilChanged()), false), g2 = statefulStreamFromEmitter(pipe(merge(pipe(s2, mapTo(true)), pipe(s2, mapTo(false), debounceTime(200))), distinctUntilChanged()), false);
  connect(pipe(combineLatest(duc(r2), duc(p2)), map(function(t2) {
    return t2[0] <= t2[1];
  }), distinctUntilChanged()), c2), connect(pipe(c2, throttleTime(50)), d2);
  var v2 = streamFromEmitter(pipe(combineLatest(o2, duc(i2), duc(a2), duc(l2), duc(f2)), scan(function(t2, e) {
    var n3, o3, r3 = e[0], i3 = r3.scrollTop, a3 = r3.scrollHeight, l3 = e[1], s3 = { viewportHeight: l3, scrollTop: i3, scrollHeight: a3 };
    return i3 + l3 - a3 > -e[4] ? (i3 > t2.state.scrollTop ? (n3 = "SCROLLED_DOWN", o3 = t2.state.scrollTop - i3) : (n3 = "SIZE_DECREASED", o3 = t2.state.scrollTop - i3 || t2.scrollTopDelta), { atBottom: true, state: s3, atBottomBecause: n3, scrollTopDelta: o3 }) : { atBottom: false, notAtBottomBecause: s3.scrollHeight > t2.state.scrollHeight ? "SIZE_INCREASED" : l3 < t2.state.viewportHeight ? "VIEWPORT_HEIGHT_DECREASING" : i3 < t2.state.scrollTop ? "SCROLLING_UPWARDS" : "NOT_FULLY_SCROLLED_TO_LAST_ITEM_BOTTOM", state: s3 };
  }, ut), distinctUntilChanged(function(t2, e) {
    return t2 && t2.atBottom === e.atBottom;
  }))), S2 = statefulStreamFromEmitter(pipe(o2, scan(function(t2, e) {
    var n3 = e.scrollTop, o3 = e.scrollHeight, r3 = e.viewportHeight;
    return x(t2.scrollHeight, o3) ? { scrollTop: n3, scrollHeight: o3, jump: 0, changed: false } : t2.scrollTop !== n3 && o3 - (n3 + r3) < 1 ? { scrollHeight: o3, scrollTop: n3, jump: t2.scrollTop - n3, changed: true } : { scrollHeight: o3, scrollTop: n3, jump: 0, changed: true };
  }, { scrollHeight: 0, jump: 0, scrollTop: 0, changed: false }), filter(function(t2) {
    return t2.changed;
  }), map(function(t2) {
    return t2.jump;
  })), 0);
  connect(pipe(v2, map(function(t2) {
    return t2.atBottom;
  })), u2), connect(pipe(u2, throttleTime(50)), m2);
  var C2 = statefulStream("down");
  connect(pipe(o2, map(function(t2) {
    return t2.scrollTop;
  }), distinctUntilChanged(), scan(function(t2, n3) {
    return getValue(g2) ? { direction: t2.direction, prevScrollTop: n3 } : { direction: n3 < t2.prevScrollTop ? st : "down", prevScrollTop: n3 };
  }, { direction: "down", prevScrollTop: 0 }), map(function(t2) {
    return t2.direction;
  })), C2), connect(pipe(o2, throttleTime(50), mapTo("none")), C2);
  var I2 = statefulStream(0);
  return connect(pipe(h2, filter(function(t2) {
    return !t2;
  }), mapTo(0)), I2), connect(pipe(r2, throttleTime(100), withLatestFrom(h2), filter(function(t2) {
    return !!t2[1];
  }), scan(function(t2, e) {
    return [t2[1], e[0]];
  }, [0, 0]), map(function(t2) {
    return t2[1] - t2[0];
  })), I2), { isScrolling: h2, isAtTop: c2, isAtBottom: u2, atBottomState: v2, atTopStateChange: d2, atBottomStateChange: m2, scrollDirection: C2, atBottomThreshold: f2, atTopThreshold: p2, scrollVelocity: I2, lastJumpDueToItemResize: S2 };
}, tup(y));
var mt = system(function(t) {
  var n2 = t[0].log, o2 = statefulStream(false), r2 = streamFromEmitter(pipe(o2, filter(function(t2) {
    return t2;
  }), distinctUntilChanged()));
  return subscribe(o2, function(t2) {
    t2 && getValue(n2)("props updated", {}, h.DEBUG);
  }), { propsReady: o2, didMount: r2 };
}, tup(S), { singleton: true });
var dt = system(function(t) {
  var n2 = t[0], o2 = n2.sizes, r2 = n2.listRefresh, i2 = n2.defaultItemSize, a2 = t[1].scrollTop, l2 = t[2].scrollToIndex, s2 = t[3].didMount, u2 = statefulStream(true), c2 = statefulStream(0);
  return connect(pipe(s2, withLatestFrom(c2), filter(function(t2) {
    return !!t2[1];
  }), mapTo(false)), u2), subscribe(pipe(combineLatest(r2, s2), withLatestFrom(u2, o2, i2), filter(function(t2) {
    var e = t2[1], n3 = t2[3];
    return t2[0][1] && (!R(t2[2].sizeTree) || void 0 !== n3) && !e;
  }), withLatestFrom(c2)), function(t2) {
    var n3 = t2[1];
    setTimeout(function() {
      handleNext(a2, function() {
        publish(u2, true);
      }), publish(l2, n3);
    });
  }), { scrolledToInitialItem: u2, initialTopMostItemIndex: c2 };
}, tup(rt, y, lt, mt), { singleton: true });
function ft(t) {
  return !!t && ("smooth" === t ? "smooth" : "auto");
}
var pt = system(function(t) {
  var n2 = t[0], o2 = n2.totalCount, r2 = n2.listRefresh, i2 = t[1], a2 = i2.isAtBottom, l2 = i2.atBottomState, s2 = t[2].scrollToIndex, u2 = t[3].scrolledToInitialItem, c2 = t[4], m2 = c2.propsReady, d2 = c2.didMount, f2 = t[5].log, p2 = t[6].scrollingInProgress, g2 = statefulStream(false), v2 = stream(), S2 = null;
  function C2(t2) {
    publish(s2, { index: "LAST", align: "end", behavior: t2 });
  }
  function I2(t2) {
    var n3 = handleNext(l2, function(n4) {
      !t2 || n4.atBottom || "SIZE_INCREASED" !== n4.notAtBottomBecause || S2 || (getValue(f2)("scrolling to bottom due to increased size", {}, h.DEBUG), C2("auto"));
    });
    setTimeout(n3, 100);
  }
  return subscribe(pipe(combineLatest(pipe(duc(o2), skip(1)), d2), withLatestFrom(duc(g2), a2, u2, p2), map(function(t2) {
    var e = t2[0], n3 = e[0], o3 = e[1] && t2[3], r3 = "auto";
    return o3 && (r3 = function(t3, e2) {
      return "function" == typeof t3 ? ft(t3(e2)) : e2 && ft(t3);
    }(t2[1], t2[2] || t2[4]), o3 = o3 && !!r3), { totalCount: n3, shouldFollow: o3, followOutputBehavior: r3 };
  }), filter(function(t2) {
    return t2.shouldFollow;
  })), function(t2) {
    var n3 = t2.totalCount, o3 = t2.followOutputBehavior;
    S2 && (S2(), S2 = null), S2 = handleNext(r2, function() {
      getValue(f2)("following output to ", { totalCount: n3 }, h.DEBUG), C2(o3), S2 = null;
    });
  }), subscribe(pipe(combineLatest(duc(g2), o2, m2), filter(function(t2) {
    return t2[0] && t2[2];
  }), scan(function(t2, e) {
    var n3 = e[1];
    return { refreshed: t2.value === n3, value: n3 };
  }, { refreshed: false, value: 0 }), filter(function(t2) {
    return t2.refreshed;
  }), withLatestFrom(g2, o2)), function(t2) {
    I2(false !== t2[1]);
  }), subscribe(v2, function() {
    I2(false !== getValue(g2));
  }), subscribe(combineLatest(duc(g2), l2), function(t2) {
    var e = t2[1];
    t2[0] && !e.atBottom && "VIEWPORT_HEIGHT_DECREASING" === e.notAtBottomBecause && C2("auto");
  }), { followOutput: g2, autoscrollToBottom: v2 };
}, tup(rt, ct, lt, dt, mt, S, y));
function ht(t) {
  return t.reduce(function(t2, e) {
    return t2.groupIndices.push(t2.totalCount), t2.totalCount += e + 1, t2;
  }, { totalCount: 0, groupIndices: [] });
}
var gt = system(function(t) {
  var n2 = t[0], o2 = n2.totalCount, r2 = n2.groupIndices, i2 = n2.sizes, a2 = t[1], l2 = a2.scrollTop, s2 = a2.headerHeight, u2 = stream(), c2 = stream(), m2 = streamFromEmitter(pipe(u2, map(ht)));
  return connect(pipe(m2, map(function(t2) {
    return t2.totalCount;
  })), o2), connect(pipe(m2, map(function(t2) {
    return t2.groupIndices;
  })), r2), connect(pipe(combineLatest(l2, i2, s2), filter(function(t2) {
    return nt(t2[1]);
  }), map(function(t2) {
    return k(t2[1].groupOffsetTree, Math.max(t2[0] - t2[2], 0), "v")[0];
  }), distinctUntilChanged(), map(function(t2) {
    return [t2];
  })), c2), { groupCounts: u2, topItemsIndexes: c2 };
}, tup(rt, y));
function vt(t, e) {
  return !(!t || t[0] !== e[0] || t[1] !== e[1]);
}
function St(t, e) {
  return !(!t || t.startIndex !== e.startIndex || t.endIndex !== e.endIndex);
}
function Ct(t, e, n2) {
  return "number" == typeof t ? n2 === st && "top" === e || "down" === n2 && "bottom" === e ? t : 0 : n2 === st ? "top" === e ? t.main : t.reverse : "bottom" === e ? t.main : t.reverse;
}
function It(t, e) {
  return "number" == typeof t ? t : t[e] || 0;
}
var Tt = system(function(t) {
  var n2 = t[0], o2 = n2.scrollTop, r2 = n2.viewportHeight, i2 = n2.deviation, a2 = n2.headerHeight, l2 = n2.fixedHeaderHeight, s2 = stream(), u2 = statefulStream(0), c2 = statefulStream(0), m2 = statefulStream(0), d2 = statefulStreamFromEmitter(pipe(combineLatest(duc(o2), duc(r2), duc(a2), duc(s2, vt), duc(m2), duc(u2), duc(l2), duc(i2), duc(c2)), map(function(t2) {
    var e = t2[0], n3 = t2[1], o3 = t2[2], r3 = t2[3], i3 = r3[0], a3 = r3[1], l3 = t2[4], s3 = t2[6], u3 = t2[7], c3 = t2[8], m3 = e - u3, d3 = t2[5] + s3, f2 = Math.max(o3 - m3, 0), p2 = "none", h2 = It(c3, "top"), g2 = It(c3, "bottom");
    return i3 -= u3, a3 += o3 + s3, (i3 += o3 + s3) > e + d3 - h2 && (p2 = st), (a3 -= u3) < e - f2 + n3 + g2 && (p2 = "down"), "none" !== p2 ? [Math.max(m3 - o3 - Ct(l3, "top", p2) - h2, 0), m3 - f2 - s3 + n3 + Ct(l3, "bottom", p2) + g2] : null;
  }), filter(function(t2) {
    return null != t2;
  }), distinctUntilChanged(vt)), [0, 0]);
  return { listBoundary: s2, overscan: m2, topListHeight: u2, increaseViewportBy: c2, visibleRange: d2 };
}, tup(y), { singleton: true });
var wt = { items: [], topItems: [], offsetTop: 0, offsetBottom: 0, top: 0, bottom: 0, topListHeight: 0, totalCount: 0, firstItemIndex: 0 };
function xt(t, e, n2) {
  if (0 === t.length)
    return [];
  if (!nt(e))
    return t.map(function(t2) {
      return c({}, t2, { index: t2.index + n2, originalIndex: t2.index });
    });
  for (var o2, r2 = [], i2 = A(e.groupOffsetTree, t[0].index, t[t.length - 1].index), a2 = void 0, l2 = 0, s2 = f(t); !(o2 = s2()).done; ) {
    var u2 = o2.value;
    (!a2 || a2.end < u2.index) && (a2 = i2.shift(), l2 = e.groupIndices.indexOf(a2.start)), r2.push(c({}, u2.index === a2.start ? { type: "group", index: l2 } : { index: u2.index - (l2 + 1) + n2, groupIndex: l2 }, { size: u2.size, offset: u2.offset, originalIndex: u2.index, data: u2.data }));
  }
  return r2;
}
function bt(t, e, n2, o2, r2, i2) {
  var a2 = 0, l2 = 0;
  if (t.length > 0) {
    a2 = t[0].offset;
    var s2 = t[t.length - 1];
    l2 = s2.offset + s2.size;
  }
  var u2 = n2 - r2.lastIndex, c2 = a2, m2 = r2.lastOffset + u2 * r2.lastSize + (u2 - 1) * o2 - l2;
  return { items: xt(t, r2, i2), topItems: xt(e, r2, i2), topListHeight: e.reduce(function(t2, e2) {
    return e2.size + t2;
  }, 0), offsetTop: a2, offsetBottom: m2, top: c2, bottom: l2, totalCount: n2, firstItemIndex: i2 };
}
var yt = system(function(t) {
  var n2 = t[0], o2 = n2.sizes, r2 = n2.totalCount, i2 = n2.data, a2 = n2.firstItemIndex, l2 = n2.gap, s2 = t[1], u2 = t[2], m2 = u2.visibleRange, d2 = u2.listBoundary, p2 = u2.topListHeight, h2 = t[3], g2 = h2.scrolledToInitialItem, v2 = h2.initialTopMostItemIndex, S2 = t[4].topListHeight, C2 = t[5], I2 = t[6].didMount, T2 = t[7].recalcInProgress, w2 = statefulStream([]), x2 = stream();
  connect(s2.topItemsIndexes, w2);
  var b2 = statefulStreamFromEmitter(pipe(combineLatest(I2, T2, duc(m2, vt), duc(r2), duc(o2), duc(v2), g2, duc(w2), duc(a2), duc(l2), i2), filter(function(t2) {
    return t2[0] && !t2[1];
  }), map(function(t2) {
    var n3 = t2[2], o3 = n3[0], r3 = n3[1], i3 = t2[3], a3 = t2[5], l3 = t2[6], s3 = t2[7], u3 = t2[8], m3 = t2[9], d3 = t2[10], p3 = t2[4], h3 = p3.sizeTree, g3 = p3.offsetTree;
    if (0 === i3 || 0 === o3 && 0 === r3)
      return c({}, wt, { totalCount: i3 });
    if (R(h3))
      return bt(function(t3, e, n4) {
        if (nt(e)) {
          var o4 = et(t3, e);
          return [{ index: k(e.groupOffsetTree, o4)[0], size: 0, offset: 0 }, { index: o4, size: 0, offset: 0, data: n4 && n4[0] }];
        }
        return [{ index: t3, size: 0, offset: 0, data: n4 && n4[0] }];
      }(function(t3, e) {
        return "number" == typeof t3 ? t3 : "LAST" === t3.index ? e - 1 : t3.index;
      }(a3, i3), p3, d3), [], i3, m3, p3, u3);
    var v3 = [];
    if (s3.length > 0)
      for (var S3, C3 = s3[0], I3 = s3[s3.length - 1], T3 = 0, w3 = f(A(h3, C3, I3)); !(S3 = w3()).done; )
        for (var x3 = S3.value, b3 = x3.value, y2 = Math.max(x3.start, C3), H2 = Math.min(x3.end, I3), E2 = y2; E2 <= H2; E2++)
          v3.push({ index: E2, size: b3, offset: T3, data: d3 && d3[E2] }), T3 += b3;
    if (!l3)
      return bt([], v3, i3, m3, p3, u3);
    var L2 = s3.length > 0 ? s3[s3.length - 1] + 1 : 0, F2 = function(t3, e, n4, o4) {
      return void 0 === o4 && (o4 = 0), o4 > 0 && (e = Math.max(e, j(t3, o4, q).offset)), N((i4 = n4, l4 = _(r4 = t3, e, a4 = Z), s4 = _(r4, i4, a4, l4), r4.slice(l4, s4 + 1)), J);
      var r4, i4, a4, l4, s4;
    }(g3, o3, r3, L2);
    if (0 === F2.length)
      return null;
    var z2 = i3 - 1;
    return bt(tap([], function(t3) {
      for (var e, n4 = f(F2); !(e = n4()).done; ) {
        var i4 = e.value, a4 = i4.value, l4 = a4.offset, s4 = i4.start, u4 = a4.size;
        if (a4.offset < o3) {
          var c2 = (s4 += Math.floor((o3 - a4.offset + m3) / (u4 + m3))) - i4.start;
          l4 += c2 * u4 + c2 * m3;
        }
        s4 < L2 && (l4 += (L2 - s4) * u4, s4 = L2);
        for (var p4 = Math.min(i4.end, z2), h4 = s4; h4 <= p4 && !(l4 >= r3); h4++)
          t3.push({ index: h4, size: u4, offset: l4, data: d3 && d3[h4] }), l4 += u4 + m3;
      }
    }), v3, i3, m3, p3, u3);
  }), filter(function(t2) {
    return null !== t2;
  }), distinctUntilChanged()), wt);
  return connect(pipe(i2, filter(function(t2) {
    return void 0 !== t2;
  }), map(function(t2) {
    return t2.length;
  })), r2), connect(pipe(b2, map(function(t2) {
    return t2.topListHeight;
  })), S2), connect(S2, p2), connect(pipe(b2, map(function(t2) {
    return [t2.top, t2.bottom];
  })), d2), connect(pipe(b2, map(function(t2) {
    return t2.items;
  })), x2), c({ listState: b2, topItemsIndexes: w2, endReached: streamFromEmitter(pipe(b2, filter(function(t2) {
    return t2.items.length > 0;
  }), withLatestFrom(r2, i2), filter(function(t2) {
    var e = t2[0].items;
    return e[e.length - 1].originalIndex === t2[1] - 1;
  }), map(function(t2) {
    return [t2[1] - 1, t2[2]];
  }), distinctUntilChanged(vt), map(function(t2) {
    return t2[0];
  }))), startReached: streamFromEmitter(pipe(b2, throttleTime(200), filter(function(t2) {
    var e = t2.items;
    return e.length > 0 && e[0].originalIndex === t2.topItems.length;
  }), map(function(t2) {
    return t2.items[0].index;
  }), distinctUntilChanged())), rangeChanged: streamFromEmitter(pipe(b2, filter(function(t2) {
    return t2.items.length > 0;
  }), map(function(t2) {
    for (var e = t2.items, n3 = 0, o3 = e.length - 1; "group" === e[n3].type && n3 < o3; )
      n3++;
    for (; "group" === e[o3].type && o3 > n3; )
      o3--;
    return { startIndex: e[n3].index, endIndex: e[o3].index };
  }), distinctUntilChanged(St))), itemsRendered: x2 }, C2);
}, tup(rt, gt, Tt, dt, lt, ct, mt, K), { singleton: true });
var Ht = system(function(t) {
  var n2 = t[0], o2 = n2.sizes, r2 = n2.firstItemIndex, i2 = n2.data, a2 = n2.gap, l2 = t[1].listState, s2 = t[2].didMount, u2 = statefulStream(0);
  return connect(pipe(s2, withLatestFrom(u2), filter(function(t2) {
    return 0 !== t2[1];
  }), withLatestFrom(o2, r2, a2, i2), map(function(t2) {
    var e = t2[0][1], n3 = t2[1], o3 = t2[2], r3 = t2[3], i3 = t2[4], a3 = void 0 === i3 ? [] : i3, l3 = 0;
    if (n3.groupIndices.length > 0)
      for (var s3, u3 = f(n3.groupIndices); !((s3 = u3()).done || s3.value - l3 >= e); )
        l3++;
    var c2 = e + l3;
    return bt(Array.from({ length: c2 }).map(function(t3, e2) {
      return { index: e2, size: 0, offset: 0, data: a3[e2] };
    }), [], c2, r3, n3, o3);
  })), l2), { initialItemCount: u2 };
}, tup(rt, yt, mt), { singleton: true });
var Et = system(function(t) {
  var n2 = t[0].scrollVelocity, o2 = statefulStream(false), r2 = stream(), i2 = statefulStream(false);
  return connect(pipe(n2, withLatestFrom(i2, o2, r2), filter(function(t2) {
    return !!t2[1];
  }), map(function(t2) {
    var e = t2[0], n3 = t2[1], o3 = t2[2], r3 = t2[3], i3 = n3.enter;
    if (o3) {
      if ((0, n3.exit)(e, r3))
        return false;
    } else if (i3(e, r3))
      return true;
    return o3;
  }), distinctUntilChanged()), o2), subscribe(pipe(combineLatest(o2, n2, r2), withLatestFrom(i2)), function(t2) {
    var e = t2[0], n3 = t2[1];
    return e[0] && n3 && n3.change && n3.change(e[1], e[2]);
  }), { isSeeking: o2, scrollSeekConfiguration: i2, scrollVelocity: n2, scrollSeekRangeChanged: r2 };
}, tup(ct), { singleton: true });
var Rt = system(function(t) {
  var n2 = t[0].topItemsIndexes, o2 = statefulStream(0);
  return connect(pipe(o2, filter(function(t2) {
    return t2 > 0;
  }), map(function(t2) {
    return Array.from({ length: t2 }).map(function(t3, e) {
      return e;
    });
  })), n2), { topItemCount: o2 };
}, tup(yt));
var Lt = system(function(t) {
  var n2 = t[0], o2 = n2.footerHeight, r2 = n2.headerHeight, i2 = n2.fixedHeaderHeight, a2 = n2.fixedFooterHeight, l2 = t[1].listState, s2 = stream(), u2 = statefulStreamFromEmitter(pipe(combineLatest(o2, a2, r2, i2, l2), map(function(t2) {
    var e = t2[4];
    return t2[0] + t2[1] + t2[2] + t2[3] + e.offsetBottom + e.bottom;
  })), 0);
  return connect(duc(u2), s2), { totalListHeight: u2, totalListHeightChanged: s2 };
}, tup(y, yt), { singleton: true });
function Ft(t) {
  var e, n2 = false;
  return function() {
    return n2 || (n2 = true, e = t()), e;
  };
}
var kt = Ft(function() {
  return /iP(ad|od|hone)/i.test(navigator.userAgent) && /WebKit/i.test(navigator.userAgent);
});
var zt = system(function(t) {
  var n2 = t[0], o2 = n2.scrollBy, r2 = n2.scrollTop, i2 = n2.deviation, a2 = n2.scrollingInProgress, l2 = t[1], s2 = l2.isScrolling, u2 = l2.isAtBottom, c2 = l2.scrollDirection, m2 = t[3], d2 = m2.beforeUnshiftWith, f2 = m2.shiftWithOffset, p2 = m2.sizes, g2 = m2.gap, v2 = t[4].log, S2 = t[5].recalcInProgress, C2 = streamFromEmitter(pipe(t[2].listState, withLatestFrom(l2.lastJumpDueToItemResize), scan(function(t2, e) {
    var n3 = t2[1], o3 = e[0], r3 = o3.items, i3 = o3.totalCount, a3 = o3.bottom + o3.offsetBottom, l3 = 0;
    return t2[2] === i3 && n3.length > 0 && r3.length > 0 && (0 === r3[0].originalIndex && 0 === n3[0].originalIndex || 0 != (l3 = a3 - t2[3]) && (l3 += e[1])), [l3, r3, i3, a3];
  }, [0, [], 0, 0]), filter(function(t2) {
    return 0 !== t2[0];
  }), withLatestFrom(r2, c2, a2, u2, v2), filter(function(t2) {
    return !t2[3] && 0 !== t2[1] && t2[2] === st;
  }), map(function(t2) {
    var e = t2[0][0];
    return (0, t2[5])("Upward scrolling compensation", { amount: e }, h.DEBUG), e;
  })));
  function I2(t2) {
    t2 > 0 ? (publish(o2, { top: -t2, behavior: "auto" }), publish(i2, 0)) : (publish(i2, 0), publish(o2, { top: -t2, behavior: "auto" }));
  }
  return subscribe(pipe(C2, withLatestFrom(i2, s2)), function(t2) {
    var n3 = t2[0], o3 = t2[1];
    t2[2] && kt() ? publish(i2, o3 - n3) : I2(-n3);
  }), subscribe(pipe(combineLatest(statefulStreamFromEmitter(s2, false), i2, S2), filter(function(t2) {
    return !t2[0] && !t2[2] && 0 !== t2[1];
  }), map(function(t2) {
    return t2[1];
  }), throttleTime(1)), I2), connect(pipe(f2, map(function(t2) {
    return { top: -t2 };
  })), o2), subscribe(pipe(d2, withLatestFrom(p2, g2), map(function(t2) {
    var e = t2[0];
    return e * t2[1].lastSize + e * t2[2];
  })), function(t2) {
    publish(i2, t2), requestAnimationFrame(function() {
      publish(o2, { top: t2 }), requestAnimationFrame(function() {
        publish(i2, 0), publish(S2, false);
      });
    });
  }), { deviation: i2 };
}, tup(y, ct, yt, rt, S, K));
var Bt = system(function(t) {
  var n2 = t[0].totalListHeight, o2 = t[1].didMount, r2 = t[2].scrollTo, i2 = statefulStream(0);
  return subscribe(pipe(o2, withLatestFrom(i2), filter(function(t2) {
    return 0 !== t2[1];
  }), map(function(t2) {
    return { top: t2[1] };
  })), function(t2) {
    handleNext(pipe(n2, filter(function(t3) {
      return 0 !== t3;
    })), function() {
      setTimeout(function() {
        publish(r2, t2);
      });
    });
  }), { initialScrollTop: i2 };
}, tup(Lt, mt, y), { singleton: true });
var Pt = system(function(t) {
  var n2 = t[0].viewportHeight, o2 = t[1].totalListHeight, r2 = statefulStream(false);
  return { alignToBottom: r2, paddingTopAddition: statefulStreamFromEmitter(pipe(combineLatest(r2, n2, o2), filter(function(t2) {
    return t2[0];
  }), map(function(t2) {
    return Math.max(0, t2[1] - t2[2]);
  }), distinctUntilChanged()), 0) };
}, tup(y, Lt), { singleton: true });
var Ot = system(function(t) {
  var n2 = t[0], o2 = n2.scrollTo, r2 = n2.scrollContainerState, i2 = stream(), a2 = stream(), l2 = stream(), s2 = statefulStream(false), u2 = statefulStream(void 0);
  return connect(pipe(combineLatest(i2, a2), map(function(t2) {
    var e = t2[0], n3 = e.viewportHeight, o3 = e.scrollHeight;
    return { scrollTop: Math.max(0, e.scrollTop - t2[1].offsetTop), scrollHeight: o3, viewportHeight: n3 };
  })), r2), connect(pipe(o2, withLatestFrom(a2), map(function(t2) {
    var e = t2[0];
    return c({}, e, { top: e.top + t2[1].offsetTop });
  })), l2), { useWindowScroll: s2, customScrollParent: u2, windowScrollContainerState: i2, windowViewportRect: a2, windowScrollTo: l2 };
}, tup(y));
var Mt = ["done", "behavior", "align"];
var Wt = system(function(t) {
  var n2 = t[0], o2 = n2.sizes, r2 = n2.totalCount, i2 = n2.gap, a2 = t[1], l2 = a2.scrollTop, s2 = a2.viewportHeight, u2 = a2.headerHeight, d2 = a2.fixedHeaderHeight, f2 = a2.fixedFooterHeight, p2 = a2.scrollingInProgress, h2 = t[2].scrollToIndex, g2 = stream();
  return connect(pipe(g2, withLatestFrom(o2, s2, r2, u2, d2, f2, l2), withLatestFrom(i2), map(function(t2) {
    var n3 = t2[0], o3 = n3[0], r3 = n3[1], i3 = n3[2], a3 = n3[3], l3 = n3[4], s3 = n3[5], u3 = n3[6], d3 = n3[7], f3 = t2[1], h3 = o3.done, g3 = o3.behavior, v2 = o3.align, S2 = m(o3, Mt), C2 = null, I2 = tt(o3, r3, a3 - 1), T2 = X(I2, r3.offsetTree, f3) + l3 + s3;
    return T2 < d3 + s3 ? C2 = c({}, S2, { behavior: g3, align: null != v2 ? v2 : "start" }) : T2 + k(r3.sizeTree, I2)[1] > d3 + i3 - u3 && (C2 = c({}, S2, { behavior: g3, align: null != v2 ? v2 : "end" })), C2 ? h3 && handleNext(pipe(p2, skip(1), filter(function(t3) {
      return false === t3;
    })), h3) : h3 && h3(), C2;
  }), filter(function(t2) {
    return null !== t2;
  })), h2), { scrollIntoView: g2 };
}, tup(rt, y, lt, yt, S), { singleton: true });
var Vt = ["listState", "topItemsIndexes"];
var Ut = system(function(t) {
  return c({}, t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8]);
}, tup(Tt, Ht, mt, Et, Lt, Bt, Pt, Ot, Wt));
var At = system(function(t) {
  var n2 = t[0], o2 = n2.totalCount, r2 = n2.sizeRanges, i2 = n2.fixedItemSize, a2 = n2.defaultItemSize, l2 = n2.trackItemSizes, s2 = n2.itemSize, u2 = n2.data, d2 = n2.firstItemIndex, f2 = n2.groupIndices, p2 = n2.statefulTotalCount, h2 = n2.gap, g2 = t[1], v2 = g2.initialTopMostItemIndex, S2 = g2.scrolledToInitialItem, C2 = t[2], I2 = t[3], T2 = t[4], w2 = T2.listState, x2 = T2.topItemsIndexes, b2 = m(T2, Vt), y2 = t[5].scrollToIndex, H2 = t[7].topItemCount, E2 = t[8].groupCounts, R2 = t[9], L2 = t[10];
  return connect(b2.rangeChanged, R2.scrollSeekRangeChanged), connect(pipe(R2.windowViewportRect, map(function(t2) {
    return t2.visibleHeight;
  })), C2.viewportHeight), c({ totalCount: o2, data: u2, firstItemIndex: d2, sizeRanges: r2, initialTopMostItemIndex: v2, scrolledToInitialItem: S2, topItemsIndexes: x2, topItemCount: H2, groupCounts: E2, fixedItemHeight: i2, defaultItemHeight: a2, gap: h2 }, I2, { statefulTotalCount: p2, listState: w2, scrollToIndex: y2, trackItemSizes: l2, itemSize: s2, groupIndices: f2 }, b2, R2, C2, L2);
}, tup(rt, dt, y, pt, yt, lt, zt, Rt, gt, Ut, S));
var Nt = Ft(function() {
  if ("undefined" == typeof document)
    return "sticky";
  var t = document.createElement("div");
  return t.style.position = "-webkit-sticky", "-webkit-sticky" === t.style.position ? "-webkit-sticky" : "sticky";
});
function Dt(t, e) {
  var n2 = (0, import_react2.useRef)(null), o2 = (0, import_react2.useCallback)(function(o3) {
    if (null !== o3 && o3.offsetParent) {
      var r2, i2, a2 = o3.getBoundingClientRect(), l3 = a2.width;
      if (e) {
        var s3 = e.getBoundingClientRect(), u3 = a2.top - s3.top;
        r2 = s3.height - Math.max(0, u3), i2 = u3 + e.scrollTop;
      } else
        r2 = window.innerHeight - Math.max(0, a2.top), i2 = a2.top + window.pageYOffset;
      n2.current = { offsetTop: i2, visibleHeight: r2, visibleWidth: l3 }, t(n2.current);
    }
  }, [t, e]), l2 = C(o2), s2 = l2.callbackRef, u2 = l2.ref, c2 = (0, import_react2.useCallback)(function() {
    o2(u2.current);
  }, [o2, u2]);
  return (0, import_react2.useEffect)(function() {
    if (e) {
      e.addEventListener("scroll", c2);
      var t2 = new ResizeObserver(c2);
      return t2.observe(e), function() {
        e.removeEventListener("scroll", c2), t2.unobserve(e);
      };
    }
    return window.addEventListener("scroll", c2), window.addEventListener("resize", c2), function() {
      window.removeEventListener("scroll", c2), window.removeEventListener("resize", c2);
    };
  }, [c2, e]), s2;
}
var Gt = n.createContext(void 0);
var _t = n.createContext(void 0);
var jt = ["placeholder"];
var Kt = ["style", "children"];
var Yt = ["style", "children"];
function qt(t) {
  return t;
}
var Zt = system(function() {
  var t = statefulStream(function(t2) {
    return "Item " + t2;
  }), n2 = statefulStream(null), o2 = statefulStream(function(t2) {
    return "Group " + t2;
  }), r2 = statefulStream({}), i2 = statefulStream(qt), a2 = statefulStream("div"), l2 = statefulStream(noop), s2 = function(t2, n3) {
    return void 0 === n3 && (n3 = null), statefulStreamFromEmitter(pipe(r2, map(function(e) {
      return e[t2];
    }), distinctUntilChanged()), n3);
  };
  return { context: n2, itemContent: t, groupContent: o2, components: r2, computeItemKey: i2, headerFooterTag: a2, scrollerRef: l2, FooterComponent: s2("Footer"), HeaderComponent: s2("Header"), TopItemListComponent: s2("TopItemList"), ListComponent: s2("List", "div"), ItemComponent: s2("Item", "div"), GroupComponent: s2("Group", "div"), ScrollerComponent: s2("Scroller", "div"), EmptyPlaceholder: s2("EmptyPlaceholder"), ScrollSeekPlaceholder: s2("ScrollSeekPlaceholder") };
});
function Jt(t, n2) {
  var o2 = stream();
  return subscribe(o2, function() {
    return console.warn("react-virtuoso: You are using a deprecated property. " + n2, "color: red;", "color: inherit;", "color: blue;");
  }), connect(o2, t), o2;
}
var $t = system(function(t) {
  var n2 = t[0], o2 = t[1], r2 = { item: Jt(o2.itemContent, "Rename the %citem%c prop to %citemContent."), group: Jt(o2.groupContent, "Rename the %cgroup%c prop to %cgroupContent."), topItems: Jt(n2.topItemCount, "Rename the %ctopItems%c prop to %ctopItemCount."), itemHeight: Jt(n2.fixedItemHeight, "Rename the %citemHeight%c prop to %cfixedItemHeight."), scrollingStateChange: Jt(n2.isScrolling, "Rename the %cscrollingStateChange%c prop to %cisScrolling."), adjustForPrependedItems: stream(), maxHeightCacheSize: stream(), footer: stream(), header: stream(), HeaderContainer: stream(), FooterContainer: stream(), ItemContainer: stream(), ScrollContainer: stream(), GroupContainer: stream(), ListContainer: stream(), emptyComponent: stream(), scrollSeek: stream() };
  function i2(t2, n3, r3) {
    connect(pipe(t2, withLatestFrom(o2.components), map(function(t3) {
      var e, o3 = t3[0], i3 = t3[1];
      return console.warn("react-virtuoso: " + r3 + " property is deprecated. Pass components." + n3 + " instead."), c({}, i3, ((e = {})[n3] = o3, e));
    })), o2.components);
  }
  return subscribe(r2.adjustForPrependedItems, function() {
    console.warn("react-virtuoso: adjustForPrependedItems is no longer supported. Use the firstItemIndex property instead - https://virtuoso.dev/prepend-items.", "color: red;", "color: inherit;", "color: blue;");
  }), subscribe(r2.maxHeightCacheSize, function() {
    console.warn("react-virtuoso: maxHeightCacheSize is no longer necessary. Setting it has no effect - remove it from your code.");
  }), subscribe(r2.HeaderContainer, function() {
    console.warn("react-virtuoso: HeaderContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the header component and pass components.Header to change its contents.");
  }), subscribe(r2.FooterContainer, function() {
    console.warn("react-virtuoso: FooterContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the footer component and pass components.Footer to change its contents.");
  }), subscribe(r2.scrollSeek, function(t2) {
    var r3 = t2.placeholder, i3 = m(t2, jt);
    console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."), publish(o2.components, c({}, getValue(o2.components), { ScrollSeekPlaceholder: r3 })), publish(n2.scrollSeekConfiguration, i3);
  }), i2(r2.footer, "Footer", "footer"), i2(r2.header, "Header", "header"), i2(r2.ItemContainer, "Item", "ItemContainer"), i2(r2.ListContainer, "List", "ListContainer"), i2(r2.ScrollContainer, "Scroller", "ScrollContainer"), i2(r2.emptyComponent, "EmptyPlaceholder", "emptyComponent"), i2(r2.GroupContainer, "Group", "GroupContainer"), c({}, n2, o2, r2);
}, tup(At, Zt));
var Qt = function(t) {
  return n.createElement("div", { style: { height: t.height } });
};
var Xt = { position: Nt(), zIndex: 1, overflowAnchor: "none" };
var te = { overflowAnchor: "none" };
var ee = n.memo(function(t) {
  var o2 = t.showTopList, r2 = void 0 !== o2 && o2, i2 = ge("listState"), a2 = he("sizeRanges"), s2 = ge("useWindowScroll"), u2 = ge("customScrollParent"), m2 = he("windowScrollContainerState"), d2 = he("scrollContainerState"), f2 = u2 || s2 ? m2 : d2, p2 = ge("itemContent"), h2 = ge("context"), g2 = ge("groupContent"), v2 = ge("trackItemSizes"), S2 = ge("itemSize"), C2 = ge("log"), I2 = he("gap"), w2 = T(a2, S2, v2, r2 ? noop : f2, C2, I2, u2).callbackRef, x2 = n.useState(0), b2 = x2[0], y2 = x2[1];
  ve("deviation", function(t2) {
    b2 !== t2 && y2(t2);
  });
  var H2 = ge("EmptyPlaceholder"), E2 = ge("ScrollSeekPlaceholder") || Qt, R2 = ge("ListComponent"), L2 = ge("ItemComponent"), F2 = ge("GroupComponent"), k2 = ge("computeItemKey"), z2 = ge("isSeeking"), B2 = ge("groupIndices").length > 0, P2 = ge("paddingTopAddition"), O2 = r2 ? {} : { boxSizing: "border-box", paddingTop: i2.offsetTop + P2, paddingBottom: i2.offsetBottom, marginTop: b2 };
  return !r2 && 0 === i2.totalCount && H2 ? (0, import_react2.createElement)(H2, ie(H2, h2)) : (0, import_react2.createElement)(R2, c({}, ie(R2, h2), { ref: w2, style: O2, "data-test-id": r2 ? "virtuoso-top-item-list" : "virtuoso-item-list" }), (r2 ? i2.topItems : i2.items).map(function(t2) {
    var e = t2.originalIndex, n2 = k2(e + i2.firstItemIndex, t2.data, h2);
    return z2 ? (0, import_react2.createElement)(E2, c({}, ie(E2, h2), { key: n2, index: t2.index, height: t2.size, type: t2.type || "item" }, "group" === t2.type ? {} : { groupIndex: t2.groupIndex })) : "group" === t2.type ? (0, import_react2.createElement)(F2, c({}, ie(F2, h2), { key: n2, "data-index": e, "data-known-size": t2.size, "data-item-index": t2.index, style: Xt }), g2(t2.index)) : (0, import_react2.createElement)(L2, c({}, ie(L2, h2), { key: n2, "data-index": e, "data-known-size": t2.size, "data-item-index": t2.index, "data-item-group-index": t2.groupIndex, style: te }), B2 ? p2(t2.index, t2.groupIndex, t2.data, h2) : p2(t2.index, t2.data, h2));
  }));
});
var ne = { height: "100%", outline: "none", overflowY: "auto", position: "relative", WebkitOverflowScrolling: "touch" };
var oe = { width: "100%", height: "100%", position: "absolute", top: 0 };
var re = { width: "100%", position: Nt(), top: 0 };
function ie(t, e) {
  if ("string" != typeof t)
    return { context: e };
}
var ae = n.memo(function() {
  var t = ge("HeaderComponent"), e = he("headerHeight"), n2 = ge("headerFooterTag"), o2 = I(function(t2) {
    return e(w(t2, "height"));
  }), r2 = ge("context");
  return t ? (0, import_react2.createElement)(n2, { ref: o2 }, (0, import_react2.createElement)(t, ie(t, r2))) : null;
});
var le = n.memo(function() {
  var t = ge("FooterComponent"), e = he("footerHeight"), n2 = ge("headerFooterTag"), o2 = I(function(t2) {
    return e(w(t2, "height"));
  }), r2 = ge("context");
  return t ? (0, import_react2.createElement)(n2, { ref: o2 }, (0, import_react2.createElement)(t, ie(t, r2))) : null;
});
function se(t) {
  var e = t.usePublisher, o2 = t.useEmitter, r2 = t.useEmitterValue;
  return n.memo(function(t2) {
    var n2 = t2.style, i2 = t2.children, a2 = m(t2, Kt), s2 = e("scrollContainerState"), u2 = r2("ScrollerComponent"), d2 = e("smoothScrollTargetReached"), f2 = r2("scrollerRef"), p2 = r2("context"), h2 = b(s2, d2, u2, f2), g2 = h2.scrollerRef, v2 = h2.scrollByCallback;
    return o2("scrollTo", h2.scrollToCallback), o2("scrollBy", v2), (0, import_react2.createElement)(u2, c({ ref: g2, style: c({}, ne, n2), "data-test-id": "virtuoso-scroller", "data-virtuoso-scroller": true, tabIndex: 0 }, a2, ie(u2, p2)), i2);
  });
}
function ue(t) {
  var o2 = t.usePublisher, r2 = t.useEmitter, i2 = t.useEmitterValue;
  return n.memo(function(t2) {
    var n2 = t2.style, a2 = t2.children, s2 = m(t2, Yt), u2 = o2("windowScrollContainerState"), d2 = i2("ScrollerComponent"), f2 = o2("smoothScrollTargetReached"), p2 = i2("totalListHeight"), h2 = i2("deviation"), v2 = i2("customScrollParent"), S2 = i2("context"), C2 = b(u2, f2, d2, noop, v2), I2 = C2.scrollerRef, T2 = C2.scrollByCallback, w2 = C2.scrollToCallback;
    return g(function() {
      return I2.current = v2 || window, function() {
        I2.current = null;
      };
    }, [I2, v2]), r2("windowScrollTo", w2), r2("scrollBy", T2), (0, import_react2.createElement)(d2, c({ style: c({ position: "relative" }, n2, 0 !== p2 ? { height: p2 + h2 } : {}), "data-virtuoso-scroller": true }, s2, ie(d2, S2)), a2);
  });
}
var ce = function(t) {
  var o2 = t.children, r2 = (0, import_react2.useContext)(Gt), i2 = he("viewportHeight"), a2 = he("fixedItemHeight"), l2 = I(compose(i2, function(t2) {
    return w(t2, "height");
  }));
  return n.useEffect(function() {
    r2 && (i2(r2.viewportHeight), a2(r2.itemHeight));
  }, [r2, i2, a2]), n.createElement("div", { style: oe, ref: l2, "data-viewport-type": "element" }, o2);
};
var me = function(t) {
  var e = t.children, o2 = (0, import_react2.useContext)(Gt), r2 = he("windowViewportRect"), i2 = he("fixedItemHeight"), a2 = ge("customScrollParent"), l2 = Dt(r2, a2);
  return n.useEffect(function() {
    o2 && (i2(o2.itemHeight), r2({ offsetTop: 0, visibleHeight: o2.viewportHeight, visibleWidth: 100 }));
  }, [o2, r2, i2]), n.createElement("div", { ref: l2, style: oe, "data-viewport-type": "window" }, e);
};
var de = function(t) {
  var e = t.children, n2 = ge("TopItemListComponent"), o2 = ge("headerHeight"), r2 = c({}, re, { marginTop: o2 + "px" }), i2 = ge("context");
  return (0, import_react2.createElement)(n2 || "div", { style: r2, context: i2 }, e);
};
var fe = systemToComponent($t, { required: {}, optional: { context: "context", followOutput: "followOutput", firstItemIndex: "firstItemIndex", itemContent: "itemContent", groupContent: "groupContent", overscan: "overscan", increaseViewportBy: "increaseViewportBy", totalCount: "totalCount", topItemCount: "topItemCount", initialTopMostItemIndex: "initialTopMostItemIndex", components: "components", groupCounts: "groupCounts", atBottomThreshold: "atBottomThreshold", atTopThreshold: "atTopThreshold", computeItemKey: "computeItemKey", defaultItemHeight: "defaultItemHeight", fixedItemHeight: "fixedItemHeight", itemSize: "itemSize", scrollSeekConfiguration: "scrollSeekConfiguration", headerFooterTag: "headerFooterTag", data: "data", initialItemCount: "initialItemCount", initialScrollTop: "initialScrollTop", alignToBottom: "alignToBottom", useWindowScroll: "useWindowScroll", customScrollParent: "customScrollParent", scrollerRef: "scrollerRef", logLevel: "logLevel", react18ConcurrentRendering: "react18ConcurrentRendering", item: "item", group: "group", topItems: "topItems", itemHeight: "itemHeight", scrollingStateChange: "scrollingStateChange", maxHeightCacheSize: "maxHeightCacheSize", footer: "footer", header: "header", ItemContainer: "ItemContainer", ScrollContainer: "ScrollContainer", ListContainer: "ListContainer", GroupContainer: "GroupContainer", emptyComponent: "emptyComponent", HeaderContainer: "HeaderContainer", FooterContainer: "FooterContainer", scrollSeek: "scrollSeek" }, methods: { scrollToIndex: "scrollToIndex", scrollIntoView: "scrollIntoView", scrollTo: "scrollTo", scrollBy: "scrollBy", adjustForPrependedItems: "adjustForPrependedItems", autoscrollToBottom: "autoscrollToBottom" }, events: { isScrolling: "isScrolling", endReached: "endReached", startReached: "startReached", rangeChanged: "rangeChanged", atBottomStateChange: "atBottomStateChange", atTopStateChange: "atTopStateChange", totalListHeightChanged: "totalListHeightChanged", itemsRendered: "itemsRendered", groupIndices: "groupIndices" } }, n.memo(function(t) {
  var e = ge("useWindowScroll"), o2 = ge("topItemsIndexes").length > 0, r2 = ge("customScrollParent"), i2 = r2 || e ? me : ce;
  return n.createElement(r2 || e ? Ce : Se, c({}, t), n.createElement(i2, null, n.createElement(ae, null), n.createElement(ee, null), n.createElement(le, null)), o2 && n.createElement(de, null, n.createElement(ee, { showTopList: true })));
}));
var pe = fe.Component;
var he = fe.usePublisher;
var ge = fe.useEmitterValue;
var ve = fe.useEmitter;
var Se = se({ usePublisher: he, useEmitterValue: ge, useEmitter: ve });
var Ce = ue({ usePublisher: he, useEmitterValue: ge, useEmitter: ve });
var Ie = { items: [], offsetBottom: 0, offsetTop: 0, top: 0, bottom: 0, itemHeight: 0, itemWidth: 0 };
var Te = { items: [{ index: 0 }], offsetBottom: 0, offsetTop: 0, top: 0, bottom: 0, itemHeight: 0, itemWidth: 0 };
var we = Math.round;
var xe = Math.ceil;
var be = Math.floor;
var ye = Math.min;
var He = Math.max;
function Ee(t, e, n2) {
  return Array.from({ length: e - t + 1 }).map(function(e2, o2) {
    return { index: o2 + t, data: null == n2 ? void 0 : n2[o2 + t] };
  });
}
function Re(t, e) {
  return t && t.column === e.column && t.row === e.row;
}
var Le = system(function(t) {
  var n2 = t[0], o2 = n2.overscan, r2 = n2.visibleRange, i2 = n2.listBoundary, a2 = t[1], l2 = a2.scrollTop, s2 = a2.viewportHeight, u2 = a2.scrollBy, m2 = a2.scrollTo, d2 = a2.smoothScrollTargetReached, f2 = a2.scrollContainerState, p2 = a2.footerHeight, h2 = a2.headerHeight, g2 = t[2], v2 = t[3], S2 = t[4], C2 = S2.propsReady, I2 = S2.didMount, T2 = t[5], w2 = T2.windowViewportRect, x2 = T2.windowScrollTo, b2 = T2.useWindowScroll, y2 = T2.customScrollParent, H2 = T2.windowScrollContainerState, E2 = t[6], R2 = statefulStream(0), L2 = statefulStream(0), F2 = statefulStream(Ie), k2 = statefulStream({ height: 0, width: 0 }), z2 = statefulStream({ height: 0, width: 0 }), B2 = stream(), P2 = stream(), O2 = statefulStream(0), M2 = statefulStream(void 0), W2 = statefulStream({ row: 0, column: 0 });
  connect(pipe(combineLatest(I2, L2, M2), filter(function(t2) {
    return 0 !== t2[1];
  }), map(function(t2) {
    return { items: Ee(0, t2[1] - 1, t2[2]), top: 0, bottom: 0, offsetBottom: 0, offsetTop: 0, itemHeight: 0, itemWidth: 0 };
  })), F2), connect(pipe(combineLatest(duc(R2), r2, duc(W2, Re), duc(z2, function(t2, e) {
    return t2 && t2.width === e.width && t2.height === e.height;
  }), M2), withLatestFrom(k2), map(function(t2) {
    var e = t2[0], n3 = e[0], o3 = e[1], r3 = o3[0], i3 = o3[1], a3 = e[2], l3 = e[3], s3 = e[4], u3 = t2[1], m3 = a3.row, d3 = a3.column, f3 = l3.height, p3 = l3.width, h3 = u3.width;
    if (0 === n3 || 0 === h3)
      return Ie;
    if (0 === p3)
      return function(t3) {
        return c({}, Te, { items: t3 });
      }(Ee(0, 0, s3));
    var g3 = ze(h3, p3, d3), v3 = g3 * be((r3 + m3) / (f3 + m3)), S3 = g3 * xe((i3 + m3) / (f3 + m3)) - 1;
    S3 = ye(n3 - 1, He(S3, g3 - 1));
    var C3 = Ee(v3 = ye(S3, He(0, v3)), S3, s3), I3 = Fe(u3, a3, l3, C3), T3 = I3.top, w3 = I3.bottom, x3 = xe(n3 / g3);
    return { items: C3, offsetTop: T3, offsetBottom: x3 * f3 + (x3 - 1) * m3 - w3, top: T3, bottom: w3, itemHeight: f3, itemWidth: p3 };
  })), F2), connect(pipe(M2, filter(function(t2) {
    return void 0 !== t2;
  }), map(function(t2) {
    return t2.length;
  })), R2), connect(pipe(k2, map(function(t2) {
    return t2.height;
  })), s2), connect(pipe(combineLatest(k2, z2, F2, W2), map(function(t2) {
    var e = Fe(t2[0], t2[3], t2[1], t2[2].items);
    return [e.top, e.bottom];
  }), distinctUntilChanged(vt)), i2);
  var V2 = streamFromEmitter(pipe(duc(F2), filter(function(t2) {
    return t2.items.length > 0;
  }), withLatestFrom(R2), filter(function(t2) {
    var e = t2[0].items;
    return e[e.length - 1].index === t2[1] - 1;
  }), map(function(t2) {
    return t2[1] - 1;
  }), distinctUntilChanged())), U2 = streamFromEmitter(pipe(duc(F2), filter(function(t2) {
    var e = t2.items;
    return e.length > 0 && 0 === e[0].index;
  }), mapTo(0), distinctUntilChanged())), A2 = streamFromEmitter(pipe(duc(F2), filter(function(t2) {
    return t2.items.length > 0;
  }), map(function(t2) {
    var e = t2.items;
    return { startIndex: e[0].index, endIndex: e[e.length - 1].index };
  }), distinctUntilChanged(St)));
  connect(A2, v2.scrollSeekRangeChanged), connect(pipe(B2, withLatestFrom(k2, z2, R2, W2), map(function(t2) {
    var e = t2[1], n3 = t2[2], o3 = t2[3], r3 = t2[4], i3 = at(t2[0]), a3 = i3.align, l3 = i3.behavior, s3 = i3.offset, u3 = i3.index;
    "LAST" === u3 && (u3 = o3 - 1);
    var c2 = ke(e, r3, n3, u3 = He(0, u3, ye(o3 - 1, u3)));
    return "end" === a3 ? c2 = we(c2 - e.height + n3.height) : "center" === a3 && (c2 = we(c2 - e.height / 2 + n3.height / 2)), s3 && (c2 += s3), { top: c2, behavior: l3 };
  })), m2);
  var N2 = statefulStreamFromEmitter(pipe(F2, map(function(t2) {
    return t2.offsetBottom + t2.bottom;
  })), 0);
  return connect(pipe(w2, map(function(t2) {
    return { width: t2.visibleWidth, height: t2.visibleHeight };
  })), k2), c({ data: M2, totalCount: R2, viewportDimensions: k2, itemDimensions: z2, scrollTop: l2, scrollHeight: P2, overscan: o2, scrollBy: u2, scrollTo: m2, scrollToIndex: B2, smoothScrollTargetReached: d2, windowViewportRect: w2, windowScrollTo: x2, useWindowScroll: b2, customScrollParent: y2, windowScrollContainerState: H2, deviation: O2, scrollContainerState: f2, footerHeight: p2, headerHeight: h2, initialItemCount: L2, gap: W2 }, v2, { gridState: F2, totalListHeight: N2 }, g2, { startReached: U2, endReached: V2, rangeChanged: A2, propsReady: C2 }, E2);
}, tup(Tt, y, ct, Et, mt, Ot, S));
function Fe(t, e, n2, o2) {
  var r2 = n2.height;
  return void 0 === r2 || 0 === o2.length ? { top: 0, bottom: 0 } : { top: ke(t, e, n2, o2[0].index), bottom: ke(t, e, n2, o2[o2.length - 1].index) + r2 };
}
function ke(t, e, n2, o2) {
  var r2 = ze(t.width, n2.width, e.column), i2 = be(o2 / r2), a2 = i2 * n2.height + He(0, i2 - 1) * e.row;
  return a2 > 0 ? a2 + e.row : a2;
}
function ze(t, e, n2) {
  return He(1, be((t + n2) / (e + n2)));
}
var Be = ["placeholder"];
var Pe = system(function() {
  var t = statefulStream(function(t2) {
    return "Item " + t2;
  }), n2 = statefulStream({}), o2 = statefulStream(null), r2 = statefulStream("virtuoso-grid-item"), i2 = statefulStream("virtuoso-grid-list"), a2 = statefulStream(qt), l2 = statefulStream("div"), s2 = statefulStream(noop), u2 = function(t2, o3) {
    return void 0 === o3 && (o3 = null), statefulStreamFromEmitter(pipe(n2, map(function(e) {
      return e[t2];
    }), distinctUntilChanged()), o3);
  };
  return { context: o2, itemContent: t, components: n2, computeItemKey: a2, itemClassName: r2, listClassName: i2, headerFooterTag: l2, scrollerRef: s2, FooterComponent: u2("Footer"), HeaderComponent: u2("Header"), ListComponent: u2("List", "div"), ItemComponent: u2("Item", "div"), ScrollerComponent: u2("Scroller", "div"), ScrollSeekPlaceholder: u2("ScrollSeekPlaceholder", "div") };
});
var Oe = system(function(t) {
  var n2 = t[0], o2 = t[1], r2 = { item: Jt(o2.itemContent, "Rename the %citem%c prop to %citemContent."), ItemContainer: stream(), ScrollContainer: stream(), ListContainer: stream(), emptyComponent: stream(), scrollSeek: stream() };
  function i2(t2, n3, r3) {
    connect(pipe(t2, withLatestFrom(o2.components), map(function(t3) {
      var e, o3 = t3[0], i3 = t3[1];
      return console.warn("react-virtuoso: " + r3 + " property is deprecated. Pass components." + n3 + " instead."), c({}, i3, ((e = {})[n3] = o3, e));
    })), o2.components);
  }
  return subscribe(r2.scrollSeek, function(t2) {
    var r3 = t2.placeholder, i3 = m(t2, Be);
    console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."), publish(o2.components, c({}, getValue(o2.components), { ScrollSeekPlaceholder: r3 })), publish(n2.scrollSeekConfiguration, i3);
  }), i2(r2.ItemContainer, "Item", "ItemContainer"), i2(r2.ListContainer, "List", "ListContainer"), i2(r2.ScrollContainer, "Scroller", "ScrollContainer"), c({}, n2, o2, r2);
}, tup(Le, Pe));
var Me = n.memo(function() {
  var t = _e("gridState"), e = _e("listClassName"), n2 = _e("itemClassName"), o2 = _e("itemContent"), r2 = _e("computeItemKey"), i2 = _e("isSeeking"), a2 = Ge("scrollHeight"), s2 = _e("ItemComponent"), u2 = _e("ListComponent"), m2 = _e("ScrollSeekPlaceholder"), d2 = _e("context"), f2 = Ge("itemDimensions"), p2 = Ge("gap"), h2 = _e("log"), g2 = I(function(t2) {
    a2(t2.parentElement.parentElement.scrollHeight);
    var e2 = t2.firstChild;
    e2 && f2(e2.getBoundingClientRect()), p2({ row: qe("row-gap", getComputedStyle(t2).rowGap, h2), column: qe("column-gap", getComputedStyle(t2).columnGap, h2) });
  });
  return (0, import_react2.createElement)(u2, c({ ref: g2, className: e }, ie(u2, d2), { style: { paddingTop: t.offsetTop, paddingBottom: t.offsetBottom } }), t.items.map(function(e2) {
    var a3 = r2(e2.index, e2.data, d2);
    return i2 ? (0, import_react2.createElement)(m2, c({ key: a3 }, ie(m2, d2), { index: e2.index, height: t.itemHeight, width: t.itemWidth })) : (0, import_react2.createElement)(s2, c({}, ie(s2, d2), { className: n2, "data-index": e2.index, key: a3 }), o2(e2.index, e2.data, d2));
  }));
});
var We = n.memo(function() {
  var t = _e("HeaderComponent"), e = Ge("headerHeight"), n2 = _e("headerFooterTag"), o2 = I(function(t2) {
    return e(w(t2, "height"));
  }), r2 = _e("context");
  return t ? (0, import_react2.createElement)(n2, { ref: o2 }, (0, import_react2.createElement)(t, ie(t, r2))) : null;
});
var Ve = n.memo(function() {
  var t = _e("FooterComponent"), e = Ge("footerHeight"), n2 = _e("headerFooterTag"), o2 = I(function(t2) {
    return e(w(t2, "height"));
  }), r2 = _e("context");
  return t ? (0, import_react2.createElement)(n2, { ref: o2 }, (0, import_react2.createElement)(t, ie(t, r2))) : null;
});
var Ue = function(t) {
  var e = t.children, o2 = (0, import_react2.useContext)(_t), r2 = Ge("itemDimensions"), i2 = Ge("viewportDimensions"), a2 = I(function(t2) {
    i2(t2.getBoundingClientRect());
  });
  return n.useEffect(function() {
    o2 && (i2({ height: o2.viewportHeight, width: o2.viewportWidth }), r2({ height: o2.itemHeight, width: o2.itemWidth }));
  }, [o2, i2, r2]), n.createElement("div", { style: oe, ref: a2 }, e);
};
var Ae = function(t) {
  var e = t.children, o2 = (0, import_react2.useContext)(_t), r2 = Ge("windowViewportRect"), i2 = Ge("itemDimensions"), a2 = _e("customScrollParent"), l2 = Dt(r2, a2);
  return n.useEffect(function() {
    o2 && (i2({ height: o2.itemHeight, width: o2.itemWidth }), r2({ offsetTop: 0, visibleHeight: o2.viewportHeight, visibleWidth: o2.viewportWidth }));
  }, [o2, r2, i2]), n.createElement("div", { ref: l2, style: oe }, e);
};
var Ne = systemToComponent(Oe, { optional: { context: "context", totalCount: "totalCount", overscan: "overscan", itemContent: "itemContent", components: "components", computeItemKey: "computeItemKey", data: "data", initialItemCount: "initialItemCount", scrollSeekConfiguration: "scrollSeekConfiguration", headerFooterTag: "headerFooterTag", listClassName: "listClassName", itemClassName: "itemClassName", useWindowScroll: "useWindowScroll", customScrollParent: "customScrollParent", scrollerRef: "scrollerRef", item: "item", ItemContainer: "ItemContainer", ScrollContainer: "ScrollContainer", ListContainer: "ListContainer", scrollSeek: "scrollSeek" }, methods: { scrollTo: "scrollTo", scrollBy: "scrollBy", scrollToIndex: "scrollToIndex" }, events: { isScrolling: "isScrolling", endReached: "endReached", startReached: "startReached", rangeChanged: "rangeChanged", atBottomStateChange: "atBottomStateChange", atTopStateChange: "atTopStateChange" } }, n.memo(function(t) {
  var e = c({}, t), o2 = _e("useWindowScroll"), r2 = _e("customScrollParent"), i2 = r2 || o2 ? Ae : Ue;
  return n.createElement(r2 || o2 ? Ye : Ke, c({}, e), n.createElement(i2, null, n.createElement(We, null), n.createElement(Me, null), n.createElement(Ve, null)));
}));
var De = Ne.Component;
var Ge = Ne.usePublisher;
var _e = Ne.useEmitterValue;
var je = Ne.useEmitter;
var Ke = se({ usePublisher: Ge, useEmitterValue: _e, useEmitter: je });
var Ye = ue({ usePublisher: Ge, useEmitterValue: _e, useEmitter: je });
function qe(t, e, n2) {
  return "normal" === e || null != e && e.endsWith("px") || n2(t + " was not resolved to pixel value correctly", e, h.WARN), "normal" === e ? 0 : parseInt(null != e ? e : "0", 10);
}
var Ze = system(function() {
  var t = statefulStream(function(t2) {
    return n.createElement("td", null, "Item $", t2);
  }), o2 = statefulStream(null), r2 = statefulStream(null), i2 = statefulStream(null), a2 = statefulStream({}), l2 = statefulStream(qt), s2 = statefulStream(noop), u2 = function(t2, n2) {
    return void 0 === n2 && (n2 = null), statefulStreamFromEmitter(pipe(a2, map(function(e) {
      return e[t2];
    }), distinctUntilChanged()), n2);
  };
  return { context: o2, itemContent: t, fixedHeaderContent: r2, fixedFooterContent: i2, components: a2, computeItemKey: l2, scrollerRef: s2, TableComponent: u2("Table", "table"), TableHeadComponent: u2("TableHead", "thead"), TableFooterComponent: u2("TableFoot", "tfoot"), TableBodyComponent: u2("TableBody", "tbody"), TableRowComponent: u2("TableRow", "tr"), ScrollerComponent: u2("Scroller", "div"), EmptyPlaceholder: u2("EmptyPlaceholder"), ScrollSeekPlaceholder: u2("ScrollSeekPlaceholder"), FillerRow: u2("FillerRow") };
});
var Je = system(function(t) {
  return c({}, t[0], t[1]);
}, tup(At, Ze));
var $e = function(t) {
  return n.createElement("tr", null, n.createElement("td", { style: { height: t.height } }));
};
var Qe = function(t) {
  return n.createElement("tr", null, n.createElement("td", { style: { height: t.height, padding: 0, border: 0 } }));
};
var Xe = n.memo(function() {
  var t = an("listState"), e = rn("sizeRanges"), o2 = an("useWindowScroll"), r2 = an("customScrollParent"), i2 = rn("windowScrollContainerState"), a2 = rn("scrollContainerState"), s2 = r2 || o2 ? i2 : a2, u2 = an("itemContent"), m2 = an("trackItemSizes"), d2 = T(e, an("itemSize"), m2, s2, an("log"), void 0, r2), f2 = d2.callbackRef, p2 = d2.ref, h2 = n.useState(0), g2 = h2[0], v2 = h2[1];
  ln("deviation", function(t2) {
    g2 !== t2 && (p2.current.style.marginTop = t2 + "px", v2(t2));
  });
  var S2 = an("EmptyPlaceholder"), C2 = an("ScrollSeekPlaceholder") || $e, I2 = an("FillerRow") || Qe, w2 = an("TableBodyComponent"), x2 = an("TableRowComponent"), b2 = an("computeItemKey"), y2 = an("isSeeking"), H2 = an("paddingTopAddition"), E2 = an("firstItemIndex"), R2 = an("statefulTotalCount"), L2 = an("context");
  if (0 === R2 && S2)
    return (0, import_react2.createElement)(S2, ie(S2, L2));
  var F2 = t.offsetTop + H2 + g2, k2 = t.offsetBottom, z2 = F2 > 0 ? n.createElement(I2, { height: F2, key: "padding-top" }) : null, B2 = k2 > 0 ? n.createElement(I2, { height: k2, key: "padding-bottom" }) : null, P2 = t.items.map(function(t2) {
    var e2 = t2.originalIndex, n2 = b2(e2 + E2, t2.data, L2);
    return y2 ? (0, import_react2.createElement)(C2, c({}, ie(C2, L2), { key: n2, index: t2.index, height: t2.size, type: t2.type || "item" })) : (0, import_react2.createElement)(x2, c({}, ie(x2, L2), { key: n2, "data-index": e2, "data-known-size": t2.size, "data-item-index": t2.index, style: { overflowAnchor: "none" } }), u2(t2.index, t2.data, L2));
  });
  return (0, import_react2.createElement)(w2, c({ ref: f2, "data-test-id": "virtuoso-item-list" }, ie(w2, L2)), [z2].concat(P2, [B2]));
});
var tn = function(t) {
  var o2 = t.children, r2 = (0, import_react2.useContext)(Gt), i2 = rn("viewportHeight"), a2 = rn("fixedItemHeight"), l2 = I(compose(i2, function(t2) {
    return w(t2, "height");
  }));
  return n.useEffect(function() {
    r2 && (i2(r2.viewportHeight), a2(r2.itemHeight));
  }, [r2, i2, a2]), n.createElement("div", { style: oe, ref: l2, "data-viewport-type": "element" }, o2);
};
var en = function(t) {
  var e = t.children, o2 = (0, import_react2.useContext)(Gt), r2 = rn("windowViewportRect"), i2 = rn("fixedItemHeight"), a2 = an("customScrollParent"), l2 = Dt(r2, a2);
  return n.useEffect(function() {
    o2 && (i2(o2.itemHeight), r2({ offsetTop: 0, visibleHeight: o2.viewportHeight, visibleWidth: 100 }));
  }, [o2, r2, i2]), n.createElement("div", { ref: l2, style: oe, "data-viewport-type": "window" }, e);
};
var nn = systemToComponent(Je, { required: {}, optional: { context: "context", followOutput: "followOutput", firstItemIndex: "firstItemIndex", itemContent: "itemContent", fixedHeaderContent: "fixedHeaderContent", fixedFooterContent: "fixedFooterContent", overscan: "overscan", increaseViewportBy: "increaseViewportBy", totalCount: "totalCount", topItemCount: "topItemCount", initialTopMostItemIndex: "initialTopMostItemIndex", components: "components", groupCounts: "groupCounts", atBottomThreshold: "atBottomThreshold", atTopThreshold: "atTopThreshold", computeItemKey: "computeItemKey", defaultItemHeight: "defaultItemHeight", fixedItemHeight: "fixedItemHeight", itemSize: "itemSize", scrollSeekConfiguration: "scrollSeekConfiguration", data: "data", initialItemCount: "initialItemCount", initialScrollTop: "initialScrollTop", alignToBottom: "alignToBottom", useWindowScroll: "useWindowScroll", customScrollParent: "customScrollParent", scrollerRef: "scrollerRef", logLevel: "logLevel", react18ConcurrentRendering: "react18ConcurrentRendering" }, methods: { scrollToIndex: "scrollToIndex", scrollIntoView: "scrollIntoView", scrollTo: "scrollTo", scrollBy: "scrollBy" }, events: { isScrolling: "isScrolling", endReached: "endReached", startReached: "startReached", rangeChanged: "rangeChanged", atBottomStateChange: "atBottomStateChange", atTopStateChange: "atTopStateChange", totalListHeightChanged: "totalListHeightChanged", itemsRendered: "itemsRendered", groupIndices: "groupIndices" } }, n.memo(function(t) {
  var o2 = an("useWindowScroll"), r2 = an("customScrollParent"), i2 = rn("fixedHeaderHeight"), a2 = rn("fixedFooterHeight"), l2 = an("fixedHeaderContent"), s2 = an("fixedFooterContent"), u2 = an("context"), m2 = I(compose(i2, function(t2) {
    return w(t2, "height");
  })), d2 = I(compose(a2, function(t2) {
    return w(t2, "height");
  })), f2 = r2 || o2 ? un : sn, p2 = r2 || o2 ? en : tn, h2 = an("TableComponent"), g2 = an("TableHeadComponent"), v2 = an("TableFooterComponent"), S2 = l2 ? n.createElement(g2, c({ key: "TableHead", style: { zIndex: 1, position: "sticky", top: 0 }, ref: m2 }, ie(g2, u2)), l2()) : null, C2 = s2 ? n.createElement(v2, c({ key: "TableFoot", style: { zIndex: 1, position: "sticky", bottom: 0 }, ref: d2 }, ie(v2, u2)), s2()) : null;
  return n.createElement(f2, c({}, t), n.createElement(p2, null, n.createElement(h2, c({ style: { borderSpacing: 0 } }, ie(h2, u2)), [S2, n.createElement(Xe, { key: "TableBody" }), C2])));
}));
var on = nn.Component;
var rn = nn.usePublisher;
var an = nn.useEmitterValue;
var ln = nn.useEmitter;
var sn = se({ usePublisher: rn, useEmitterValue: an, useEmitter: ln });
var un = ue({ usePublisher: rn, useEmitterValue: an, useEmitter: ln });
var cn = pe;

// node_modules/@notifi-network/notifi-react-card/dist/index.mjs
var import_react86 = __toESM(require_react(), 1);
init_clsx_m();
var import_react87 = __toESM(require_react(), 1);
init_clsx_m();
var import_react88 = __toESM(require_react(), 1);
init_clsx_m();
var import_react89 = __toESM(require_react(), 1);
init_clsx_m();
var import_react90 = __toESM(require_react(), 1);
init_clsx_m();
var import_react91 = __toESM(require_react(), 1);
init_clsx_m();
var import_react92 = __toESM(require_react(), 1);
init_clsx_m();
var import_react93 = __toESM(require_react(), 1);
var import_react94 = __toESM(require_react(), 1);
init_clsx_m();
var import_react95 = __toESM(require_react(), 1);
var import_notifi_react_hooks2 = __toESM(require_dist3(), 1);
var import_react96 = __toESM(require_react(), 1);
var import_react97 = __toESM(require_react(), 1);
init_clsx_m();
var import_react98 = __toESM(require_react(), 1);
init_clsx_m();
var import_react99 = __toESM(require_react(), 1);
init_clsx_m();
var import_react100 = __toESM(require_react(), 1);
var import_react101 = __toESM(require_react(), 1);
var import_react102 = __toESM(require_react(), 1);
init_clsx_m();
var import_react103 = __toESM(require_react(), 1);
init_clsx_m();
var import_react104 = __toESM(require_react(), 1);
init_clsx_m();
var import_react105 = __toESM(require_react(), 1);
init_clsx_m();
var import_react106 = __toESM(require_react(), 1);
init_clsx_m();
var import_react107 = __toESM(require_react(), 1);
var import_react108 = __toESM(require_react(), 1);
init_clsx_m();
var import_react109 = __toESM(require_react(), 1);
var import_react110 = __toESM(require_react(), 1);
init_clsx_m();
var import_react111 = __toESM(require_react(), 1);
init_clsx_m();
var import_react112 = __toESM(require_react(), 1);
init_clsx_m();
var import_react113 = __toESM(require_react(), 1);
var import_react114 = __toESM(require_react(), 1);
init_clsx_m();
var import_react115 = __toESM(require_react(), 1);
var import_react116 = __toESM(require_react(), 1);
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var EmailIcon = ({ className }) => {
  return import_react4.default.createElement(
    "svg",
    {
      width: "13",
      height: "11",
      viewBox: "0 0 13 11",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className
    },
    import_react4.default.createElement(
      "path",
      {
        d: "M11.5 0.499996H1.5C0.8125 0.499996 0.25625 1.0625 0.25625 1.75L0.25 9.25C0.25 9.9375 0.8125 10.5 1.5 10.5H11.5C12.1875 10.5 12.75 9.9375 12.75 9.25V1.75C12.75 1.0625 12.1875 0.499996 11.5 0.499996ZM11.5 3L6.5 6.125L1.5 3V1.75L6.5 4.875L11.5 1.75V3Z",
        fill: "#B6B8D5"
      }
    )
  );
};
var NotifiClientContext = (0, import_react6.createContext)(
  {}
  // Intentially empty in default, use NotifiSubscriptionContextProvider
);
var getFrontendConfigInput = (params) => {
  if ("accountAddress" in params) {
    return {
      account: {
        address: params.accountAddress,
        publicKey: params.walletPublicKey
      },
      tenantId: params.dappAddress,
      walletBlockchain: params.walletBlockchain,
      env: params.env
    };
  } else {
    return {
      account: {
        publicKey: params.walletPublicKey
      },
      tenantId: params.dappAddress,
      walletBlockchain: params.walletBlockchain,
      env: params.env
    };
  }
};
var NotifiClientContextProvider = (_a) => {
  var _b = _a, {
    children
  } = _b, params = __objRest(_b, [
    "children"
  ]);
  var _a2;
  const [frontendClientStatus, setFrontendClientStatus] = (0, import_react6.useState)({
    isExpired: false,
    isInitialized: false,
    isAuthenticated: false
  });
  const client = (0, import_notifi_react_hooks.useNotifiClient)(params);
  const frontendClient = (0, import_react6.useMemo)(() => {
    const configInput = getFrontendConfigInput(params);
    const updatedFrontendClient = newFrontendClient(configInput);
    return updatedFrontendClient;
  }, [
    params.dappAddress,
    params.env,
    params.walletBlockchain,
    params.walletPublicKey
  ]);
  const updateFrontendClientStatus = (0, import_react6.useCallback)(() => {
    var _a3, _b2;
    setFrontendClientStatus({
      isExpired: ((_a3 = frontendClient.userState) == null ? void 0 : _a3.status) === "expired",
      isInitialized: !!frontendClient,
      isAuthenticated: ((_b2 = frontendClient.userState) == null ? void 0 : _b2.status) === "authenticated"
    });
  }, [frontendClient]);
  const isClientInitialized = (0, import_react6.useMemo)(() => {
    return params.isUsingFrontendClient ? !!frontendClient.userState : client.isInitialized;
  }, [params.isUsingFrontendClient, client, frontendClient]);
  (0, import_react6.useEffect)(() => {
    frontendClient.initialize().then(() => updateFrontendClientStatus());
  }, [frontendClient]);
  if (!isClientInitialized)
    return null;
  return import_react6.default.createElement(
    NotifiClientContext.Provider,
    {
      value: {
        client,
        params,
        isUsingFrontendClient: (_a2 = params.isUsingFrontendClient) != null ? _a2 : true,
        frontendClient,
        frontendClientStatus,
        updateFrontendClientStatus
      }
    },
    children
  );
};
var useNotifiClientContext = () => (0, import_react6.useContext)(NotifiClientContext);
var NotifiFormContext = (0, import_react7.createContext)({});
var NotifiFormProvider = ({
  children
}) => {
  const [hasChanges, setHasChanges] = (0, import_react7.useState)(false);
  const [formState, setFormInput] = (0, import_react7.useState)({
    email: "",
    phoneNumber: "",
    telegram: "",
    discord: ""
  });
  const [formErrorMessages, setInputErrorMessage] = (0, import_react7.useState)(
    {
      email: "",
      telegram: "",
      phoneNumber: "",
      discord: ""
    }
  );
  const handleFormInput = ({ field, value: value2 }) => {
    setFormInput((formErrorMessages2) => __spreadProps(__spreadValues({}, formErrorMessages2), {
      [field]: value2
    }));
  };
  const handleErrorMessage = ({ field, value: value2 }) => {
    setInputErrorMessage((formErrorMessages2) => __spreadProps(__spreadValues({}, formErrorMessages2), {
      [field]: value2
    }));
  };
  const setEmail = (value2) => {
    handleFormInput({ field: "email", value: value2 });
  };
  const setEmailErrorMessage = (value2) => {
    handleErrorMessage({ field: "email", value: value2 });
  };
  const setTelegram = (value2) => {
    handleFormInput({ field: "telegram", value: value2 });
  };
  const setTelegramErrorMessage = (value2) => {
    handleErrorMessage({ field: "telegram", value: value2 });
  };
  const setPhoneNumber = (value2) => {
    handleFormInput({ field: "phoneNumber", value: value2 });
  };
  const setPhoneNumberErrorMessage = (value2) => {
    handleErrorMessage({ field: "phoneNumber", value: value2 });
  };
  const value = {
    formState,
    formErrorMessages,
    hasChanges,
    setHasChanges,
    setEmail,
    setEmailErrorMessage,
    setTelegram,
    setTelegramErrorMessage,
    setPhoneNumber,
    setPhoneNumberErrorMessage
  };
  return import_react7.default.createElement(NotifiFormContext.Provider, { value }, children);
};
var useNotifiForm = () => {
  const data = (0, import_react7.useContext)(NotifiFormContext);
  return data;
};
var metadata_min_json_default = { "version": 4, "country_calling_codes": { "1": ["US", "AG", "AI", "AS", "BB", "BM", "BS", "CA", "DM", "DO", "GD", "GU", "JM", "KN", "KY", "LC", "MP", "MS", "PR", "SX", "TC", "TT", "VC", "VG", "VI"], "7": ["RU", "KZ"], "20": ["EG"], "27": ["ZA"], "30": ["GR"], "31": ["NL"], "32": ["BE"], "33": ["FR"], "34": ["ES"], "36": ["HU"], "39": ["IT", "VA"], "40": ["RO"], "41": ["CH"], "43": ["AT"], "44": ["GB", "GG", "IM", "JE"], "45": ["DK"], "46": ["SE"], "47": ["NO", "SJ"], "48": ["PL"], "49": ["DE"], "51": ["PE"], "52": ["MX"], "53": ["CU"], "54": ["AR"], "55": ["BR"], "56": ["CL"], "57": ["CO"], "58": ["VE"], "60": ["MY"], "61": ["AU", "CC", "CX"], "62": ["ID"], "63": ["PH"], "64": ["NZ"], "65": ["SG"], "66": ["TH"], "81": ["JP"], "82": ["KR"], "84": ["VN"], "86": ["CN"], "90": ["TR"], "91": ["IN"], "92": ["PK"], "93": ["AF"], "94": ["LK"], "95": ["MM"], "98": ["IR"], "211": ["SS"], "212": ["MA", "EH"], "213": ["DZ"], "216": ["TN"], "218": ["LY"], "220": ["GM"], "221": ["SN"], "222": ["MR"], "223": ["ML"], "224": ["GN"], "225": ["CI"], "226": ["BF"], "227": ["NE"], "228": ["TG"], "229": ["BJ"], "230": ["MU"], "231": ["LR"], "232": ["SL"], "233": ["GH"], "234": ["NG"], "235": ["TD"], "236": ["CF"], "237": ["CM"], "238": ["CV"], "239": ["ST"], "240": ["GQ"], "241": ["GA"], "242": ["CG"], "243": ["CD"], "244": ["AO"], "245": ["GW"], "246": ["IO"], "247": ["AC"], "248": ["SC"], "249": ["SD"], "250": ["RW"], "251": ["ET"], "252": ["SO"], "253": ["DJ"], "254": ["KE"], "255": ["TZ"], "256": ["UG"], "257": ["BI"], "258": ["MZ"], "260": ["ZM"], "261": ["MG"], "262": ["RE", "YT"], "263": ["ZW"], "264": ["NA"], "265": ["MW"], "266": ["LS"], "267": ["BW"], "268": ["SZ"], "269": ["KM"], "290": ["SH", "TA"], "291": ["ER"], "297": ["AW"], "298": ["FO"], "299": ["GL"], "350": ["GI"], "351": ["PT"], "352": ["LU"], "353": ["IE"], "354": ["IS"], "355": ["AL"], "356": ["MT"], "357": ["CY"], "358": ["FI", "AX"], "359": ["BG"], "370": ["LT"], "371": ["LV"], "372": ["EE"], "373": ["MD"], "374": ["AM"], "375": ["BY"], "376": ["AD"], "377": ["MC"], "378": ["SM"], "380": ["UA"], "381": ["RS"], "382": ["ME"], "383": ["XK"], "385": ["HR"], "386": ["SI"], "387": ["BA"], "389": ["MK"], "420": ["CZ"], "421": ["SK"], "423": ["LI"], "500": ["FK"], "501": ["BZ"], "502": ["GT"], "503": ["SV"], "504": ["HN"], "505": ["NI"], "506": ["CR"], "507": ["PA"], "508": ["PM"], "509": ["HT"], "590": ["GP", "BL", "MF"], "591": ["BO"], "592": ["GY"], "593": ["EC"], "594": ["GF"], "595": ["PY"], "596": ["MQ"], "597": ["SR"], "598": ["UY"], "599": ["CW", "BQ"], "670": ["TL"], "672": ["NF"], "673": ["BN"], "674": ["NR"], "675": ["PG"], "676": ["TO"], "677": ["SB"], "678": ["VU"], "679": ["FJ"], "680": ["PW"], "681": ["WF"], "682": ["CK"], "683": ["NU"], "685": ["WS"], "686": ["KI"], "687": ["NC"], "688": ["TV"], "689": ["PF"], "690": ["TK"], "691": ["FM"], "692": ["MH"], "850": ["KP"], "852": ["HK"], "853": ["MO"], "855": ["KH"], "856": ["LA"], "880": ["BD"], "886": ["TW"], "960": ["MV"], "961": ["LB"], "962": ["JO"], "963": ["SY"], "964": ["IQ"], "965": ["KW"], "966": ["SA"], "967": ["YE"], "968": ["OM"], "970": ["PS"], "971": ["AE"], "972": ["IL"], "973": ["BH"], "974": ["QA"], "975": ["BT"], "976": ["MN"], "977": ["NP"], "992": ["TJ"], "993": ["TM"], "994": ["AZ"], "995": ["GE"], "996": ["KG"], "998": ["UZ"] }, "countries": { "AC": ["247", "00", "(?:[01589]\\d|[46])\\d{4}", [5, 6]], "AD": ["376", "00", "(?:1|6\\d)\\d{7}|[135-9]\\d{5}", [6, 8, 9], [["(\\d{3})(\\d{3})", "$1 $2", ["[135-9]"]], ["(\\d{4})(\\d{4})", "$1 $2", ["1"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]]]], "AE": ["971", "00", "(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}", [5, 6, 7, 8, 9, 10, 11, 12], [["(\\d{3})(\\d{2,9})", "$1 $2", ["60|8"]], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[236]|[479][2-8]"], "0$1"], ["(\\d{3})(\\d)(\\d{5})", "$1 $2 $3", ["[479]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"]], "0"], "AF": ["93", "00", "[2-7]\\d{8}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"]], "0"], "AG": ["1", "011", "(?:268|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([457]\\d{6})$|1", "268$1", 0, "268"], "AI": ["1", "011", "(?:264|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2457]\\d{6})$|1", "264$1", 0, "264"], "AL": ["355", "00", "(?:700\\d\\d|900)\\d{3}|8\\d{5,7}|(?:[2-5]|6\\d)\\d{7}", [6, 7, 8, 9], [["(\\d{3})(\\d{3,4})", "$1 $2", ["80|9"], "0$1"], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["4[2-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2358][2-5]|4"], "0$1"], ["(\\d{3})(\\d{5})", "$1 $2", ["[23578]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["6"], "0$1"]], "0"], "AM": ["374", "00", "(?:[1-489]\\d|55|60|77)\\d{6}", [8], [["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[89]0"], "0 $1"], ["(\\d{3})(\\d{5})", "$1 $2", ["2|3[12]"], "(0$1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["1|47"], "(0$1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["[3-9]"], "0$1"]], "0"], "AO": ["244", "00", "[29]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[29]"]]]], "AR": ["54", "00", "(?:11|[89]\\d\\d)\\d{8}|[2368]\\d{9}", [10, 11], [["(\\d{4})(\\d{2})(\\d{4})", "$1 $2-$3", ["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])", "2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"], "0$1", 1], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["1"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[68]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2-$3", ["[23]"], "0$1", 1], ["(\\d)(\\d{4})(\\d{2})(\\d{4})", "$2 15-$3-$4", ["9(?:2[2-469]|3[3-578])", "9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))", "9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"], "0$1", 0, "$1 $2 $3-$4"], ["(\\d)(\\d{2})(\\d{4})(\\d{4})", "$2 15-$3-$4", ["91"], "0$1", 0, "$1 $2 $3-$4"], ["(\\d{3})(\\d{3})(\\d{5})", "$1-$2-$3", ["8"], "0$1"], ["(\\d)(\\d{3})(\\d{3})(\\d{4})", "$2 15-$3-$4", ["9"], "0$1", 0, "$1 $2 $3-$4"]], "0", 0, "0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?", "9$1"], "AS": ["1", "011", "(?:[58]\\d\\d|684|900)\\d{7}", [10], 0, "1", 0, "([267]\\d{6})$|1", "684$1", 0, "684"], "AT": ["43", "00", "1\\d{3,12}|2\\d{6,12}|43(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7})|5\\d{4,12}|8\\d{7,12}|9\\d{8,12}|(?:[367]\\d|4[0-24-9])\\d{4,11}", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [["(\\d)(\\d{3,12})", "$1 $2", ["1(?:11|[2-9])"], "0$1"], ["(\\d{3})(\\d{2})", "$1 $2", ["517"], "0$1"], ["(\\d{2})(\\d{3,5})", "$1 $2", ["5[079]"], "0$1"], ["(\\d{3})(\\d{3,10})", "$1 $2", ["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"], "0$1"], ["(\\d{4})(\\d{3,9})", "$1 $2", ["[2-467]|5[2-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["5"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4,7})", "$1 $2 $3", ["5"], "0$1"]], "0"], "AU": ["61", "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "1(?:[0-79]\\d{7}(?:\\d(?:\\d{2})?)?|8[0-24-9]\\d{7})|[2-478]\\d{8}|1\\d{4,7}", [5, 6, 7, 8, 9, 10, 12], [["(\\d{2})(\\d{3,4})", "$1 $2", ["16"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,4})", "$1 $2 $3", ["16"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["14|4"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[2378]"], "(0$1)"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:30|[89])"]]], "0", 0, "(183[12])|0", 0, 0, 0, [["(?:(?:2(?:[0-26-9]\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\d|2[0-8]))\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\d)\\d{3}|9(?:[02-9]\\d{3}|1(?:(?:[0-58]\\d|6[0135-9])\\d|7(?:0[0-24-9]|[1-9]\\d)|9(?:[0-46-9]\\d|5[0-79])))))\\d{3}", [9]], ["4(?:79[01]|83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\d{6}", [9]], ["180(?:0\\d{3}|2)\\d{3}", [7, 10]], ["190[0-26]\\d{6}", [10]], 0, 0, 0, ["163\\d{2,6}", [5, 6, 7, 8, 9]], ["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}", [9]], ["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}", [6, 8, 10, 12]]], "0011"], "AW": ["297", "00", "(?:[25-79]\\d\\d|800)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[25-9]"]]]], "AX": ["358", "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "2\\d{4,9}|35\\d{4,5}|(?:60\\d\\d|800)\\d{4,6}|7\\d{5,11}|(?:[14]\\d|3[0-46-9]|50)\\d{4,8}", [5, 6, 7, 8, 9, 10, 11, 12], 0, "0", 0, 0, 0, 0, "18", 0, "00"], "AZ": ["994", "00", "365\\d{6}|(?:[124579]\\d|60|88)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["90"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[28]|2|365|46", "1[28]|2|365[45]|46", "1[28]|2|365(?:4|5[02])|46"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[13-9]"], "0$1"]], "0"], "BA": ["387", "00", "6\\d{8}|(?:[35689]\\d|49|70)\\d{6}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[1-3]|[7-9]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2-$3", ["[3-5]|6[56]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["6"], "0$1"]], "0"], "BB": ["1", "011", "(?:246|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "246$1", 0, "246"], "BD": ["880", "00", "[1-469]\\d{9}|8[0-79]\\d{7,8}|[2-79]\\d{8}|[2-9]\\d{7}|[3-9]\\d{6}|[57-9]\\d{5}", [6, 7, 8, 9, 10], [["(\\d{2})(\\d{4,6})", "$1-$2", ["31[5-8]|[459]1"], "0$1"], ["(\\d{3})(\\d{3,7})", "$1-$2", ["3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]"], "0$1"], ["(\\d{4})(\\d{3,6})", "$1-$2", ["[13-9]|22"], "0$1"], ["(\\d)(\\d{7,8})", "$1-$2", ["2"], "0$1"]], "0"], "BE": ["32", "00", "4\\d{8}|[1-9]\\d{7}", [8, 9], [["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:80|9)0"], "0$1"], ["(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[239]|4[23]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[15-8]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["4"], "0$1"]], "0"], "BF": ["226", "00", "[025-7]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[025-7]"]]]], "BG": ["359", "00", "00800\\d{7}|[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}", [6, 7, 8, 9, 12], [["(\\d)(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["2"], "0$1"], ["(\\d{3})(\\d{4})", "$1 $2", ["43[1-6]|70[1-9]"], "0$1"], ["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:70|8)0"], "0$1"], ["(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["43[1-7]|7"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[48]|9[08]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"]], "0"], "BH": ["973", "00", "[136-9]\\d{7}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[13679]|8[047]"]]]], "BI": ["257", "00", "(?:[267]\\d|31)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2367]"]]]], "BJ": ["229", "00", "[24-689]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-689]"]]]], "BL": ["590", "00", "590\\d{6}|(?:69|80|9\\d)\\d{7}", [9], 0, "0", 0, 0, 0, 0, 0, [["590(?:2[7-9]|5[12]|87)\\d{4}"], ["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"], ["80[0-5]\\d{6}"], 0, 0, 0, 0, 0, ["9(?:395|76[018])\\d{5}"]]], "BM": ["1", "011", "(?:441|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "441$1", 0, "441"], "BN": ["673", "00", "[2-578]\\d{6}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-578]"]]]], "BO": ["591", "00(?:1\\d)?", "(?:[2-467]\\d\\d|8001)\\d{5}", [8, 9], [["(\\d)(\\d{7})", "$1 $2", ["[23]|4[46]"]], ["(\\d{8})", "$1", ["[67]"]], ["(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["8"]]], "0", 0, "0(1\\d)?"], "BQ": ["599", "00", "(?:[34]1|7\\d)\\d{5}", [7], 0, 0, 0, 0, 0, 0, "[347]"], "BR": ["55", "00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)", "(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-46-9]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}", [8, 9, 10, 11], [["(\\d{4})(\\d{4})", "$1-$2", ["300|4(?:0[02]|37)", "4(?:02|37)0|[34]00"]], ["(\\d{3})(\\d{2,3})(\\d{4})", "$1 $2 $3", ["(?:[358]|90)0"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]"], "($1)"], ["(\\d{2})(\\d{5})(\\d{4})", "$1 $2-$3", ["[16][1-9]|[2-57-9]"], "($1)"]], "0", 0, "(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\d{10,11}))?", "$2"], "BS": ["1", "011", "(?:242|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([3-8]\\d{6})$|1", "242$1", 0, "242"], "BT": ["975", "00", "[17]\\d{7}|[2-8]\\d{6}", [7, 8], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-68]|7[246]"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[67]|7"]]]], "BW": ["267", "00", "(?:0800|(?:[37]|800)\\d)\\d{6}|(?:[2-6]\\d|90)\\d{5}", [7, 8, 10], [["(\\d{2})(\\d{5})", "$1 $2", ["90"]], ["(\\d{3})(\\d{4})", "$1 $2", ["[24-6]|3[15-79]"]], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[37]"]], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["0"]], ["(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["8"]]]], "BY": ["375", "810", "(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}", [6, 7, 8, 9, 10, 11], [["(\\d{3})(\\d{3})", "$1 $2", ["800"], "8 $1"], ["(\\d{3})(\\d{2})(\\d{2,4})", "$1 $2 $3", ["800"], "8 $1"], ["(\\d{4})(\\d{2})(\\d{3})", "$1 $2-$3", ["1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])", "1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])"], "8 0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["1(?:[56]|7[467])|2[1-3]"], "8 0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-4]"], "8 0$1"], ["(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[89]"], "8 $1"]], "8", 0, "0|80?", 0, 0, 0, 0, "8~10"], "BZ": ["501", "00", "(?:0800\\d|[2-8])\\d{6}", [7, 11], [["(\\d{3})(\\d{4})", "$1-$2", ["[2-8]"]], ["(\\d)(\\d{3})(\\d{4})(\\d{3})", "$1-$2-$3-$4", ["0"]]]], "CA": ["1", "011", "(?:[2-8]\\d|90)\\d{8}|3\\d{6}", [7, 10], 0, "1", 0, 0, 0, 0, 0, [["(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\d{6}", [10]], ["", [10]], ["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}", [10]], ["900[2-9]\\d{6}", [10]], ["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|(?:5(?:00|2[125-9]|33|44|66|77|88)|622)[2-9]\\d{6}", [10]], 0, ["310\\d{4}", [7]], 0, ["600[2-9]\\d{6}", [10]]]], "CC": ["61", "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}", [6, 7, 8, 9, 10, 12], 0, "0", 0, "([59]\\d{7})$|0", "8$1", 0, 0, [["8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\d|70[23]|959))\\d{3}", [9]], ["4(?:79[01]|83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\d{6}", [9]], ["180(?:0\\d{3}|2)\\d{3}", [7, 10]], ["190[0-26]\\d{6}", [10]], 0, 0, 0, 0, ["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}", [9]], ["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}", [6, 8, 10, 12]]], "0011"], "CD": ["243", "00", "[189]\\d{8}|[1-68]\\d{6}", [7, 9], [["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], ["(\\d{2})(\\d{5})", "$1 $2", ["[1-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]"], "0$1"]], "0"], "CF": ["236", "00", "(?:[27]\\d{3}|8776)\\d{4}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[278]"]]]], "CG": ["242", "00", "222\\d{6}|(?:0\\d|80)\\d{7}", [9], [["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["8"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[02]"]]]], "CH": ["41", "00", "8\\d{11}|[2-9]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8[047]|90"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-79]|81"], "0$1"], ["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["8"], "0$1"]], "0"], "CI": ["225", "00", "[02]\\d{9}", [10], [["(\\d{2})(\\d{2})(\\d)(\\d{5})", "$1 $2 $3 $4", ["2"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3 $4", ["0"]]]], "CK": ["682", "00", "[2-578]\\d{4}", [5], [["(\\d{2})(\\d{3})", "$1 $2", ["[2-578]"]]]], "CL": ["56", "(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0", "12300\\d{6}|6\\d{9,10}|[2-9]\\d{8}", [9, 10, 11], [["(\\d{5})(\\d{4})", "$1 $2", ["219", "2196"], "($1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["44"]], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2[1-36]"], "($1)"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["9[2-9]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"], "($1)"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["60|8"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], ["(\\d{3})(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["60"]]]], "CM": ["237", "00", "[26]\\d{8}|88\\d{6,7}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["88"]], ["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[26]|88"]]]], "CN": ["86", "00|1(?:[12]\\d|79)\\d\\d00", "1[127]\\d{8,9}|2\\d{9}(?:\\d{2})?|[12]\\d{6,7}|86\\d{6}|(?:1[03-689]\\d|6)\\d{7,9}|(?:[3-579]\\d|8[0-57-9])\\d{6,9}", [7, 8, 9, 10, 11, 12], [["(\\d{2})(\\d{5,6})", "$1 $2", ["(?:10|2[0-57-9])[19]", "(?:10|2[0-57-9])(?:10|9[56])", "10(?:10|9[56])|2[0-57-9](?:100|9[56])"], "0$1"], ["(\\d{3})(\\d{5,6})", "$1 $2", ["3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]", "(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))[19]", "85[23](?:10|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:10|9[56])", "85[23](?:100|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100|9[56])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["(?:4|80)0"]], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10|2(?:[02-57-9]|1[1-9])", "10|2(?:[02-57-9]|1[1-9])", "10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]"], "0$1", 1], ["(\\d{3})(\\d{7,8})", "$1 $2", ["9"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["80"], "0$1", 1], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[3-578]"], "0$1", 1], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["1[3-9]"]], ["(\\d{2})(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["[12]"], "0$1", 1]], "0", 0, "(1(?:[12]\\d|79)\\d\\d)|0", 0, 0, 0, 0, "00"], "CO": ["57", "00(?:4(?:[14]4|56)|[579])", "(?:60\\d\\d|9101)\\d{6}|(?:1\\d|3)\\d{9}", [10, 11], [["(\\d{3})(\\d{7})", "$1 $2", ["6"], "($1)"], ["(\\d{3})(\\d{7})", "$1 $2", ["3[0-357]|91"]], ["(\\d)(\\d{3})(\\d{7})", "$1-$2-$3", ["1"], "0$1", 0, "$1 $2 $3"]], "0", 0, "0(4(?:[14]4|56)|[579])?"], "CR": ["506", "00", "(?:8\\d|90)\\d{8}|(?:[24-8]\\d{3}|3005)\\d{4}", [8, 10], [["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]|8[3-9]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[89]"]]], 0, 0, "(19(?:0[0-2468]|1[09]|20|66|77|99))"], "CU": ["53", "119", "[27]\\d{6,7}|[34]\\d{5,7}|(?:5|8\\d\\d)\\d{7}", [6, 7, 8, 10], [["(\\d{2})(\\d{4,6})", "$1 $2", ["2[1-4]|[34]"], "(0$1)"], ["(\\d)(\\d{6,7})", "$1 $2", ["7"], "(0$1)"], ["(\\d)(\\d{7})", "$1 $2", ["5"], "0$1"], ["(\\d{3})(\\d{7})", "$1 $2", ["8"], "0$1"]], "0"], "CV": ["238", "0", "(?:[2-59]\\d\\d|800)\\d{4}", [7], [["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[2-589]"]]]], "CW": ["599", "00", "(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}", [7, 8], [["(\\d{3})(\\d{4})", "$1 $2", ["[3467]"]], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["9[4-8]"]]], 0, 0, 0, 0, 0, "[69]"], "CX": ["61", "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}", [6, 7, 8, 9, 10, 12], 0, "0", 0, "([59]\\d{7})$|0", "8$1", 0, 0, [["8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\d|7(?:0[01]|1[0-2])|958))\\d{3}", [9]], ["4(?:79[01]|83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\d{6}", [9]], ["180(?:0\\d{3}|2)\\d{3}", [7, 10]], ["190[0-26]\\d{6}", [10]], 0, 0, 0, 0, ["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}", [9]], ["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}", [6, 8, 10, 12]]], "0011"], "CY": ["357", "00", "(?:[279]\\d|[58]0)\\d{6}", [8], [["(\\d{2})(\\d{6})", "$1 $2", ["[257-9]"]]]], "CZ": ["420", "00", "(?:[2-578]\\d|60)\\d{7}|9\\d{8,11}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]|9[015-7]"]], ["(\\d{2})(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["96"]], ["(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]], ["(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]]], "DE": ["49", "00", "[2579]\\d{5,14}|49(?:[34]0|69|8\\d)\\d\\d?|49(?:37|49|60|7[089]|9\\d)\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\d{1,8}|(?:1|[368]\\d|4[0-8])\\d{3,13}|49(?:[015]\\d|2[13]|31|[46][1-8])\\d{1,9}", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [["(\\d{2})(\\d{3,13})", "$1 $2", ["3[02]|40|[68]9"], "0$1"], ["(\\d{3})(\\d{3,12})", "$1 $2", ["2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1", "2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1"], "0$1"], ["(\\d{4})(\\d{2,11})", "$1 $2", ["[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]", "[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]"], "0$1"], ["(\\d{3})(\\d{4})", "$1 $2", ["138"], "0$1"], ["(\\d{5})(\\d{2,10})", "$1 $2", ["3"], "0$1"], ["(\\d{3})(\\d{5,11})", "$1 $2", ["181"], "0$1"], ["(\\d{3})(\\d)(\\d{4,10})", "$1 $2 $3", ["1(?:3|80)|9"], "0$1"], ["(\\d{3})(\\d{7,8})", "$1 $2", ["1[67]"], "0$1"], ["(\\d{3})(\\d{7,12})", "$1 $2", ["8"], "0$1"], ["(\\d{5})(\\d{6})", "$1 $2", ["185", "1850", "18500"], "0$1"], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], ["(\\d{4})(\\d{7})", "$1 $2", ["18[68]"], "0$1"], ["(\\d{5})(\\d{6})", "$1 $2", ["15[0568]"], "0$1"], ["(\\d{4})(\\d{7})", "$1 $2", ["15[1279]"], "0$1"], ["(\\d{3})(\\d{8})", "$1 $2", ["18"], "0$1"], ["(\\d{3})(\\d{2})(\\d{7,8})", "$1 $2 $3", ["1(?:6[023]|7)"], "0$1"], ["(\\d{4})(\\d{2})(\\d{7})", "$1 $2 $3", ["15[279]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{8})", "$1 $2 $3", ["15"], "0$1"]], "0"], "DJ": ["253", "00", "(?:2\\d|77)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[27]"]]]], "DK": ["45", "00", "[2-9]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-9]"]]]], "DM": ["1", "011", "(?:[58]\\d\\d|767|900)\\d{7}", [10], 0, "1", 0, "([2-7]\\d{6})$|1", "767$1", 0, "767"], "DO": ["1", "011", "(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, 0, 0, 0, "8001|8[024]9"], "DZ": ["213", "00", "(?:[1-4]|[5-79]\\d|80)\\d{7}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-4]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["9"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-8]"], "0$1"]], "0"], "EC": ["593", "00", "1\\d{9,10}|(?:[2-7]|9\\d)\\d{7}", [8, 9, 10, 11], [["(\\d)(\\d{3})(\\d{4})", "$1 $2-$3", ["[2-7]"], "(0$1)", 0, "$1-$2-$3"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1"]]], "0"], "EE": ["372", "00", "8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d|90)\\d{5}", [7, 8, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88", "[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88"]], ["(\\d{4})(\\d{3,4})", "$1 $2", ["[45]|8(?:00|[1-49])", "[45]|8(?:00[1-9]|[1-49])"]], ["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["7"]], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]]]], "EG": ["20", "00", "[189]\\d{8,9}|[24-6]\\d{8}|[135]\\d{7}", [8, 9, 10], [["(\\d)(\\d{7,8})", "$1 $2", ["[23]"], "0$1"], ["(\\d{2})(\\d{6,7})", "$1 $2", ["1[35]|[4-6]|8[2468]|9[235-7]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[189]"], "0$1"]], "0"], "EH": ["212", "00", "[5-8]\\d{8}", [9], 0, "0", 0, 0, 0, 0, "528[89]"], "ER": ["291", "00", "[178]\\d{6}", [7], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[178]"], "0$1"]], "0"], "ES": ["34", "00", "[5-9]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]00"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-9]"]]]], "ET": ["251", "00", "(?:11|[2-579]\\d)\\d{7}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-579]"], "0$1"]], "0"], "FI": ["358", "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "[1-35689]\\d{4}|7\\d{10,11}|(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}", [5, 6, 7, 8, 9, 10, 11, 12], [["(\\d)(\\d{4,9})", "$1 $2", ["[2568][1-8]|3(?:0[1-9]|[1-9])|9"], "0$1"], ["(\\d{3})(\\d{3,7})", "$1 $2", ["[12]00|[368]|70[07-9]"], "0$1"], ["(\\d{2})(\\d{4,8})", "$1 $2", ["[1245]|7[135]"], "0$1"], ["(\\d{2})(\\d{6,10})", "$1 $2", ["7"], "0$1"]], "0", 0, 0, 0, 0, "1[03-79]|[2-9]", 0, "00"], "FJ": ["679", "0(?:0|52)", "45\\d{5}|(?:0800\\d|[235-9])\\d{6}", [7, 11], [["(\\d{3})(\\d{4})", "$1 $2", ["[235-9]|45"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "FK": ["500", "00", "[2-7]\\d{4}", [5]], "FM": ["691", "00", "(?:[39]\\d\\d|820)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[389]"]]]], "FO": ["298", "00", "[2-9]\\d{5}", [6], [["(\\d{6})", "$1", ["[2-9]"]]], 0, 0, "(10(?:01|[12]0|88))"], "FR": ["33", "00", "[1-9]\\d{8}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0 $1"], ["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[1-79]"], "0$1"]], "0"], "GA": ["241", "00", "(?:[067]\\d|11)\\d{6}|[2-7]\\d{6}", [7, 8], [["(\\d)(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-7]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["11|[67]"], "0$1"]], 0, 0, "0(11\\d{6}|60\\d{6}|61\\d{6}|6[256]\\d{6}|7[467]\\d{6})", "$1"], "GB": ["44", "00", "[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}", [7, 9, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["800", "8001", "80011", "800111", "8001111"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["845", "8454", "84546", "845464"], "0$1"], ["(\\d{3})(\\d{6})", "$1 $2", ["800"], "0$1"], ["(\\d{5})(\\d{4,5})", "$1 $2", ["1(?:38|5[23]|69|76|94)", "1(?:(?:38|69)7|5(?:24|39)|768|946)", "1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)"], "0$1"], ["(\\d{4})(\\d{5,6})", "$1 $2", ["1(?:[2-69][02-9]|[78])"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[25]|7(?:0|6[02-9])", "[25]|7(?:0|6(?:[03-9]|2[356]))"], "0$1"], ["(\\d{4})(\\d{6})", "$1 $2", ["7"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1389]"], "0$1"]], "0", 0, 0, 0, 0, 0, [["(?:1(?:1(?:3(?:[0-58]\\d\\d|73[0235])|4(?:[0-5]\\d\\d|69[7-9]|70[0-579])|(?:(?:5[0-26-9]|[78][0-49])\\d|6(?:[0-4]\\d|50))\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\d)\\d\\d|1(?:[0-7]\\d\\d|8(?:[02]\\d|1[0-246-9])))|(?:3(?:0\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\d\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\d{3})\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\d)|76\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\d|7[4-79])|295[5-7]|35[34]\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\d{3}", [9, 10]], ["7(?:457[0-57-9]|700[01]|911[028])\\d{5}|7(?:[1-3]\\d\\d|4(?:[0-46-9]\\d|5[0-689])|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[024-9]\\d|1[02-9]|3[0-689]))\\d{6}", [10]], ["80[08]\\d{7}|800\\d{6}|8001111"], ["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[2-49]))\\d{7}|845464\\d", [7, 10]], ["70\\d{8}", [10]], 0, ["(?:3[0347]|55)\\d{8}", [10]], ["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}", [10]], ["56\\d{8}", [10]]], 0, " x"], "GD": ["1", "011", "(?:473|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "473$1", 0, "473"], "GE": ["995", "00", "(?:[3-57]\\d\\d|800)\\d{6}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["32"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[57]"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[348]"], "0$1"]], "0"], "GF": ["594", "00", "[56]94\\d{6}|(?:80|9\\d)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[56]|97"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[89]"], "0$1"]], "0"], "GG": ["44", "00", "(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?", [7, 9, 10], 0, "0", 0, "([25-9]\\d{5})$|0", "1481$1", 0, 0, [["1481[25-9]\\d{5}", [10]], ["7(?:(?:781|839)\\d|911[17])\\d{5}", [10]], ["80[08]\\d{7}|800\\d{6}|8001111"], ["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[0-3]))\\d{7}|845464\\d", [7, 10]], ["70\\d{8}", [10]], 0, ["(?:3[0347]|55)\\d{8}", [10]], ["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}", [10]], ["56\\d{8}", [10]]]], "GH": ["233", "00", "(?:[235]\\d{3}|800)\\d{5}", [8, 9], [["(\\d{3})(\\d{5})", "$1 $2", ["8"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[235]"], "0$1"]], "0"], "GI": ["350", "00", "(?:[25]\\d\\d|606)\\d{5}", [8], [["(\\d{3})(\\d{5})", "$1 $2", ["2"]]]], "GL": ["299", "00", "(?:19|[2-689]\\d|70)\\d{4}", [6], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["19|[2-9]"]]]], "GM": ["220", "00", "[2-9]\\d{6}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]]], "GN": ["224", "00", "722\\d{6}|(?:3|6\\d)\\d{7}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["3"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[67]"]]]], "GP": ["590", "00", "590\\d{6}|(?:69|80|9\\d)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[569]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0", 0, 0, 0, 0, 0, [["590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0-489]|7[08]|8[0-689]|9\\d)\\d{4}"], ["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"], ["80[0-5]\\d{6}"], 0, 0, 0, 0, 0, ["9(?:395|76[018])\\d{5}"]]], "GQ": ["240", "00", "222\\d{6}|(?:3\\d|55|[89]0)\\d{7}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235]"]], ["(\\d{3})(\\d{6})", "$1 $2", ["[89]"]]]], "GR": ["30", "00", "5005000\\d{3}|8\\d{9,11}|(?:[269]\\d|70)\\d{8}", [10, 11, 12], [["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["21|7"]], ["(\\d{4})(\\d{6})", "$1 $2", ["2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2689]"]], ["(\\d{3})(\\d{3,4})(\\d{5})", "$1 $2 $3", ["8"]]]], "GT": ["502", "00", "(?:1\\d{3}|[2-7])\\d{7}", [8, 11], [["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]]], "GU": ["1", "011", "(?:[58]\\d\\d|671|900)\\d{7}", [10], 0, "1", 0, "([3-9]\\d{6})$|1", "671$1", 0, "671"], "GW": ["245", "00", "[49]\\d{8}|4\\d{6}", [7, 9], [["(\\d{3})(\\d{4})", "$1 $2", ["40"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[49]"]]]], "GY": ["592", "001", "9008\\d{3}|(?:[2-467]\\d\\d|862)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-46-9]"]]]], "HK": ["852", "00(?:30|5[09]|[126-9]?)", "8[0-46-9]\\d{6,7}|9\\d{4,7}|(?:[2-7]|9\\d{3})\\d{7}", [5, 6, 7, 8, 9, 11], [["(\\d{3})(\\d{2,5})", "$1 $2", ["900", "9003"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[2-7]|8[1-4]|9(?:0[1-9]|[1-8])"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]], ["(\\d{3})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "HN": ["504", "00", "8\\d{10}|[237-9]\\d{7}", [8, 11], [["(\\d{4})(\\d{4})", "$1-$2", ["[237-9]"]]]], "HR": ["385", "00", "(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}", [6, 7, 8, 9], [["(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["6[01]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["8"], "0$1"], ["(\\d)(\\d{4})(\\d{3})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[67]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-5]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"]], "0"], "HT": ["509", "00", "(?:[2-489]\\d|55)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[2-589]"]]]], "HU": ["36", "00", "[235-7]\\d{8}|[1-9]\\d{7}", [8, 9], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "(06 $1)"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]"], "(06 $1)"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "06 $1"]], "06"], "ID": ["62", "00[89]", "(?:(?:00[1-9]|8\\d)\\d{4}|[1-36])\\d{6}|00\\d{10}|[1-9]\\d{8,10}|[2-9]\\d{7}", [7, 8, 9, 10, 11, 12, 13], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["15"]], ["(\\d{2})(\\d{5,9})", "$1 $2", ["2[124]|[36]1"], "(0$1)"], ["(\\d{3})(\\d{5,7})", "$1 $2", ["800"], "0$1"], ["(\\d{3})(\\d{5,8})", "$1 $2", ["[2-79]"], "(0$1)"], ["(\\d{3})(\\d{3,4})(\\d{3})", "$1-$2-$3", ["8[1-35-9]"], "0$1"], ["(\\d{3})(\\d{6,8})", "$1 $2", ["1"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["804"], "0$1"], ["(\\d{3})(\\d)(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["80"], "0$1"], ["(\\d{3})(\\d{4})(\\d{4,5})", "$1-$2-$3", ["8"], "0$1"]], "0"], "IE": ["353", "00", "(?:1\\d|[2569])\\d{6,8}|4\\d{6,9}|7\\d{8}|8\\d{8,9}", [7, 8, 9, 10], [["(\\d{2})(\\d{5})", "$1 $2", ["2[24-9]|47|58|6[237-9]|9[35-9]"], "(0$1)"], ["(\\d{3})(\\d{5})", "$1 $2", ["[45]0"], "(0$1)"], ["(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2569]|4[1-69]|7[14]"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["81"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[78]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["4"], "(0$1)"], ["(\\d{2})(\\d)(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], "IL": ["972", "0(?:0|1[2-9])", "1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}", [7, 8, 9, 10, 11, 12], [["(\\d{4})(\\d{3})", "$1-$2", ["125"]], ["(\\d{4})(\\d{2})(\\d{2})", "$1-$2-$3", ["121"]], ["(\\d)(\\d{3})(\\d{4})", "$1-$2-$3", ["[2-489]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1-$2-$3", ["12"]], ["(\\d{4})(\\d{6})", "$1-$2", ["159"]], ["(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3-$4", ["1[7-9]"]], ["(\\d{3})(\\d{1,2})(\\d{3})(\\d{4})", "$1-$2 $3-$4", ["15"]]], "0"], "IM": ["44", "00", "1624\\d{6}|(?:[3578]\\d|90)\\d{8}", [10], 0, "0", 0, "([25-8]\\d{5})$|0", "1624$1", 0, "74576|(?:16|7[56])24"], "IN": ["91", "00", "(?:000800|[2-9]\\d\\d)\\d{7}|1\\d{7,12}", [8, 9, 10, 11, 12, 13], [["(\\d{8})", "$1", ["5(?:0|2[23]|3[03]|[67]1|88)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"], 0, 1], ["(\\d{4})(\\d{4,5})", "$1 $2", ["180", "1800"], 0, 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["140"], 0, 1], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["11|2[02]|33|4[04]|79[1-7]|80[2-46]", "11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])", "11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]"], "0$1", 1], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807", "1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]", "1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\d|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]))[2-7]"], "0$1", 1], ["(\\d{5})(\\d{5})", "$1 $2", ["[6-9]"], "0$1", 1], ["(\\d{4})(\\d{2,4})(\\d{4})", "$1 $2 $3", ["1(?:6|8[06])", "1(?:6|8[06]0)"], 0, 1], ["(\\d{4})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["18"], 0, 1]], "0"], "IO": ["246", "00", "3\\d{6}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["3"]]]], "IQ": ["964", "00", "(?:1|7\\d\\d)\\d{7}|[2-6]\\d{7,8}", [8, 9, 10], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-6]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]], "0"], "IR": ["98", "00", "[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}", [4, 5, 6, 7, 10], [["(\\d{4,5})", "$1", ["96"], "0$1"], ["(\\d{2})(\\d{4,5})", "$1 $2", ["(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[1-8]"], "0$1"]], "0"], "IS": ["354", "00|1(?:0(?:01|[12]0)|100)", "(?:38\\d|[4-9])\\d{6}", [7, 9], [["(\\d{3})(\\d{4})", "$1 $2", ["[4-9]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["3"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "IT": ["39", "00", "0\\d{5,10}|1\\d{8,10}|3(?:[0-8]\\d{7,10}|9\\d{7,8})|(?:55|70)\\d{8}|8\\d{5}(?:\\d{2,4})?", [6, 7, 8, 9, 10, 11], [["(\\d{2})(\\d{4,6})", "$1 $2", ["0[26]"]], ["(\\d{3})(\\d{3,6})", "$1 $2", ["0[13-57-9][0159]|8(?:03|4[17]|9[2-5])", "0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))"]], ["(\\d{4})(\\d{2,6})", "$1 $2", ["0(?:[13-579][2-46-8]|8[236-8])"]], ["(\\d{4})(\\d{4})", "$1 $2", ["894"]], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[26]|5"]], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1(?:44|[679])|[378]"]], ["(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[13-57-9][0159]|14"]], ["(\\d{2})(\\d{4})(\\d{5})", "$1 $2 $3", ["0[26]"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]], ["(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["3"]]], 0, 0, 0, 0, 0, 0, [["0669[0-79]\\d{1,6}|0(?:1(?:[0159]\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\d\\d|3(?:[0159]\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\d|6[0-8])|7(?:[0159]\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\d{2,7}"], ["3[1-9]\\d{8}|3[2-9]\\d{7}", [9, 10]], ["80(?:0\\d{3}|3)\\d{3}", [6, 9]], ["(?:0878\\d{3}|89(?:2\\d|3[04]|4(?:[0-4]|[5-9]\\d\\d)|5[0-4]))\\d\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\d{6}", [6, 8, 9, 10]], ["1(?:78\\d|99)\\d{6}", [9, 10]], 0, 0, 0, ["55\\d{8}", [10]], ["84(?:[08]\\d{3}|[17])\\d{3}", [6, 9]]]], "JE": ["44", "00", "1534\\d{6}|(?:[3578]\\d|90)\\d{8}", [10], 0, "0", 0, "([0-24-8]\\d{5})$|0", "1534$1", 0, 0, [["1534[0-24-8]\\d{5}"], ["7(?:(?:(?:50|82)9|937)\\d|7(?:00[378]|97[7-9]))\\d{5}"], ["80(?:07(?:35|81)|8901)\\d{4}"], ["(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\d{4}"], ["701511\\d{4}"], 0, ["(?:3(?:0(?:07(?:35|81)|8901)|3\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\d{4})\\d{4}"], ["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}"], ["56\\d{8}"]]], "JM": ["1", "011", "(?:[58]\\d\\d|658|900)\\d{7}", [10], 0, "1", 0, 0, 0, 0, "658|876"], "JO": ["962", "00", "(?:(?:[2689]|7\\d)\\d|32|53)\\d{6}", [8, 9], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2356]|87"], "(0$1)"], ["(\\d{3})(\\d{5,6})", "$1 $2", ["[89]"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["70"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]], "0"], "JP": ["81", "010", "00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}", [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [["(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3", ["(?:12|57|99)0"], "0$1"], ["(\\d{4})(\\d)(\\d{4})", "$1-$2-$3", ["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1-$2-$3", ["[36]|4(?:2[09]|7[01])", "[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3", ["[14]|[289][2-9]|5[3-9]|7[2-4679]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["800"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[257-9]"], "0$1"]], "0"], "KE": ["254", "000", "(?:[17]\\d\\d|900)\\d{6}|(?:2|80)0\\d{6,7}|[4-6]\\d{6,8}", [7, 8, 9, 10], [["(\\d{2})(\\d{5,7})", "$1 $2", ["[24-6]"], "0$1"], ["(\\d{3})(\\d{6})", "$1 $2", ["[17]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[89]"], "0$1"]], "0"], "KG": ["996", "00", "8\\d{9}|(?:[235-8]\\d|99)\\d{7}", [9, 10], [["(\\d{4})(\\d{5})", "$1 $2", ["3(?:1[346]|[24-79])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235-79]|88"], "0$1"], ["(\\d{3})(\\d{3})(\\d)(\\d{2,3})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], "KH": ["855", "00[14-9]", "1\\d{9}|[1-9]\\d{7,8}", [8, 9, 10], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-9]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]], "0"], "KI": ["686", "00", "(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}", [5, 8], 0, "0"], "KM": ["269", "00", "[3478]\\d{6}", [7], [["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[3478]"]]]], "KN": ["1", "011", "(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-7]\\d{6})$|1", "869$1", 0, "869"], "KP": ["850", "00|99", "85\\d{6}|(?:19\\d|[2-7])\\d{7}", [8, 10], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"]], "0"], "KR": ["82", "00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))", "00[1-9]\\d{8,11}|(?:[12]|5\\d{3})\\d{7}|[13-6]\\d{9}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}|(?:00|7)0\\d{8}", [5, 6, 8, 9, 10, 11, 12, 13, 14], [["(\\d{2})(\\d{3,4})", "$1-$2", ["(?:3[1-3]|[46][1-4]|5[1-5])1"], "0$1"], ["(\\d{4})(\\d{4})", "$1-$2", ["1"]], ["(\\d)(\\d{3,4})(\\d{4})", "$1-$2-$3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60|8"], "0$1"], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1-$2-$3", ["[1346]|5[1-5]"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1"], ["(\\d{2})(\\d{5})(\\d{4})", "$1-$2-$3", ["5"], "0$1"]], "0", 0, "0(8(?:[1-46-8]|5\\d\\d))?"], "KW": ["965", "00", "18\\d{5}|(?:[2569]\\d|41)\\d{6}", [7, 8], [["(\\d{4})(\\d{3,4})", "$1 $2", ["[169]|2(?:[235]|4[1-35-9])|52"]], ["(\\d{3})(\\d{5})", "$1 $2", ["[245]"]]]], "KY": ["1", "011", "(?:345|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "345$1", 0, "345"], "KZ": ["7", "810", "(?:33622|8\\d{8})\\d{5}|[78]\\d{9}", [10, 14], 0, "8", 0, 0, 0, 0, "33|7", 0, "8~10"], "LA": ["856", "00", "[23]\\d{9}|3\\d{8}|(?:[235-8]\\d|41)\\d{6}", [8, 9, 10], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2[13]|3[14]|[4-8]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["30[013-9]"], "0$1"], ["(\\d{2})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[23]"], "0$1"]], "0"], "LB": ["961", "00", "[27-9]\\d{7}|[13-9]\\d{6}", [7, 8], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[27-9]"]]], "0"], "LC": ["1", "011", "(?:[58]\\d\\d|758|900)\\d{7}", [10], 0, "1", 0, "([2-8]\\d{6})$|1", "758$1", 0, "758"], "LI": ["423", "00", "[68]\\d{8}|(?:[2378]\\d|90)\\d{5}", [7, 9], [["(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[2379]|8(?:0[09]|7)", "[2379]|8(?:0(?:02|9)|7)"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["69"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]]], "0", 0, "(1001)|0"], "LK": ["94", "00", "[1-9]\\d{8}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[1-689]"], "0$1"]], "0"], "LR": ["231", "00", "(?:[25]\\d|33|77|88)\\d{7}|(?:2\\d|[4-6])\\d{6}", [7, 8, 9], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[4-6]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[23578]"], "0$1"]], "0"], "LS": ["266", "00", "(?:[256]\\d\\d|800)\\d{5}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[2568]"]]]], "LT": ["370", "00", "(?:[3469]\\d|52|[78]0)\\d{6}", [8], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["52[0-7]"], "(8-$1)", 1], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[7-9]"], "8 $1", 1], ["(\\d{2})(\\d{6})", "$1 $2", ["37|4(?:[15]|6[1-8])"], "(8-$1)", 1], ["(\\d{3})(\\d{5})", "$1 $2", ["[3-6]"], "(8-$1)", 1]], "8", 0, "[08]"], "LU": ["352", "00", "35[013-9]\\d{4,8}|6\\d{8}|35\\d{2,4}|(?:[2457-9]\\d|3[0-46-9])\\d{2,9}", [4, 5, 6, 7, 8, 9, 10, 11], [["(\\d{2})(\\d{3})", "$1 $2", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]], ["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]], ["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["20[2-689]"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4", ["2(?:[0367]|4[3-8])"]], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["80[01]|90[015]"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["20"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4 $5", ["2(?:[0367]|4[3-8])"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{1,5})", "$1 $2 $3 $4", ["[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]"]]], 0, 0, "(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\d)"], "LV": ["371", "00", "(?:[268]\\d|90)\\d{6}", [8], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[269]|8[01]"]]]], "LY": ["218", "00", "[2-9]\\d{8}", [9], [["(\\d{2})(\\d{7})", "$1-$2", ["[2-9]"], "0$1"]], "0"], "MA": ["212", "00", "[5-8]\\d{8}", [9], [["(\\d{5})(\\d{4})", "$1-$2", ["5(?:29|38)", "5(?:29[1289]|389)", "529(?:1[1-46-9]|2[013-8]|90)|5(?:298|389)[0-46-9]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5[45]"], "0$1"], ["(\\d{4})(\\d{5})", "$1-$2", ["5(?:2[2-489]|3[5-9]|9)|892", "5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892"], "0$1"], ["(\\d{2})(\\d{7})", "$1-$2", ["8"], "0$1"], ["(\\d{3})(\\d{6})", "$1-$2", ["[5-7]"], "0$1"]], "0", 0, 0, 0, 0, 0, [["5293[01]\\d{4}|5(?:2(?:[0-25-7]\\d|3[1-578]|4[02-46-8]|8[0235-7]|9[0-289])|3(?:[0-47]\\d|5[02-9]|6[02-8]|8[0189]|9[3-9])|(?:4[067]|5[03])\\d)\\d{5}"], ["(?:6(?:[0-79]\\d|8[0-247-9])|7(?:[017]\\d|2[0-2]|6[0-8]|8[0-3]))\\d{6}"], ["80\\d{7}"], ["89\\d{7}"], 0, 0, 0, 0, ["592(?:4[0-2]|93)\\d{4}"]]], "MC": ["377", "00", "(?:[3489]|6\\d)\\d{7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["4"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[389]"]], ["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["6"], "0$1"]], "0"], "MD": ["373", "00", "(?:[235-7]\\d|[89]0)\\d{6}", [8], [["(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["22|3"], "0$1"], ["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[25-7]"], "0$1"]], "0"], "ME": ["382", "00", "(?:20|[3-79]\\d)\\d{6}|80\\d{6,7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "0$1"]], "0"], "MF": ["590", "00", "590\\d{6}|(?:69|80|9\\d)\\d{7}", [9], 0, "0", 0, 0, 0, 0, 0, [["590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\d{4}"], ["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"], ["80[0-5]\\d{6}"], 0, 0, 0, 0, 0, ["9(?:395|76[018])\\d{5}"]]], "MG": ["261", "00", "[23]\\d{8}", [9], [["(\\d{2})(\\d{2})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["[23]"], "0$1"]], "0", 0, "([24-9]\\d{6})$|0", "20$1"], "MH": ["692", "011", "329\\d{4}|(?:[256]\\d|45)\\d{5}", [7], [["(\\d{3})(\\d{4})", "$1-$2", ["[2-6]"]]], "1"], "MK": ["389", "00", "[2-578]\\d{7}", [8], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2|34[47]|4(?:[37]7|5[47]|64)"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[347]"], "0$1"], ["(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[58]"], "0$1"]], "0"], "ML": ["223", "00", "[24-9]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-9]"]]]], "MM": ["95", "00", "1\\d{5,7}|95\\d{6}|(?:[4-7]|9[0-46-9])\\d{6,8}|(?:2|8\\d)\\d{5,8}", [6, 7, 8, 9, 10], [["(\\d)(\\d{2})(\\d{3})", "$1 $2 $3", ["16|2"], "0$1"], ["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]"], "0$1"], ["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[12]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[4-7]|8[1-35]"], "0$1"], ["(\\d)(\\d{3})(\\d{4,6})", "$1 $2 $3", ["9(?:2[0-4]|[35-9]|4[137-9])"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"], ["(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["92"], "0$1"], ["(\\d)(\\d{5})(\\d{4})", "$1 $2 $3", ["9"], "0$1"]], "0"], "MN": ["976", "001", "[12]\\d{7,9}|[5-9]\\d{7}", [8, 9, 10], [["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[12]1"], "0$1"], ["(\\d{4})(\\d{4})", "$1 $2", ["[5-9]"]], ["(\\d{3})(\\d{5,6})", "$1 $2", ["[12]2[1-3]"], "0$1"], ["(\\d{4})(\\d{5,6})", "$1 $2", ["[12](?:27|3[2-8]|4[2-68]|5[1-4689])", "[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]"], "0$1"], ["(\\d{5})(\\d{4,5})", "$1 $2", ["[12]"], "0$1"]], "0"], "MO": ["853", "00", "0800\\d{3}|(?:28|[68]\\d)\\d{6}", [7, 8], [["(\\d{4})(\\d{3})", "$1 $2", ["0"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[268]"]]]], "MP": ["1", "011", "[58]\\d{9}|(?:67|90)0\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "670$1", 0, "670"], "MQ": ["596", "00", "596\\d{6}|(?:69|80|9\\d)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[569]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], "MR": ["222", "00", "(?:[2-4]\\d\\d|800)\\d{5}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-48]"]]]], "MS": ["1", "011", "(?:[58]\\d\\d|664|900)\\d{7}", [10], 0, "1", 0, "([34]\\d{6})$|1", "664$1", 0, "664"], "MT": ["356", "00", "3550\\d{4}|(?:[2579]\\d\\d|800)\\d{5}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[2357-9]"]]]], "MU": ["230", "0(?:0|[24-7]0|3[03])", "(?:[57]|8\\d\\d)\\d{7}|[2-468]\\d{6}", [7, 8, 10], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-46]|8[013]"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[57]"]], ["(\\d{5})(\\d{5})", "$1 $2", ["8"]]], 0, 0, 0, 0, 0, 0, 0, "020"], "MV": ["960", "0(?:0|19)", "(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}", [7, 10], [["(\\d{3})(\\d{4})", "$1-$2", ["[34679]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "MW": ["265", "00", "(?:[1289]\\d|31|77)\\d{7}|1\\d{6}", [7, 9], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["1[2-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[137-9]"], "0$1"]], "0"], "MX": ["52", "0[09]", "1(?:(?:[27]2|44|99)[1-9]|65[0-689])\\d{7}|(?:1(?:[01]\\d|2[13-9]|[35][1-9]|4[0-35-9]|6[0-46-9]|7[013-9]|8[1-79]|9[1-8])|[2-9]\\d)\\d{8}", [10, 11], [["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["33|5[56]|81"], 0, 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-9]"], 0, 1], ["(\\d)(\\d{2})(\\d{4})(\\d{4})", "$2 $3 $4", ["1(?:33|5[56]|81)"], 0, 1], ["(\\d)(\\d{3})(\\d{3})(\\d{4})", "$2 $3 $4", ["1"], 0, 1]], "01", 0, "0(?:[12]|4[45])|1", 0, 0, 0, 0, "00"], "MY": ["60", "00", "1\\d{8,9}|(?:3\\d|[4-9])\\d{7}", [8, 9, 10], [["(\\d)(\\d{3})(\\d{4})", "$1-$2 $3", ["[4-79]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1-$2 $3", ["1(?:[02469]|[378][1-9]|53)|8", "1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8"], "0$1"], ["(\\d)(\\d{4})(\\d{4})", "$1-$2 $3", ["3"], "0$1"], ["(\\d)(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3-$4", ["1(?:[367]|80)"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1-$2 $3", ["15"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4})", "$1-$2 $3", ["1"], "0$1"]], "0"], "MZ": ["258", "00", "(?:2|8\\d)\\d{7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2|8[2-79]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]]]], "NA": ["264", "00", "[68]\\d{7,8}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["6"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["87"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"]], "0"], "NC": ["687", "00", "(?:050|[2-57-9]\\d\\d)\\d{3}", [6], [["(\\d{2})(\\d{2})(\\d{2})", "$1.$2.$3", ["[02-57-9]"]]]], "NE": ["227", "00", "[027-9]\\d{7}", [8], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["08"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[089]|2[013]|7[04]"]]]], "NF": ["672", "00", "[13]\\d{5}", [6], [["(\\d{2})(\\d{4})", "$1 $2", ["1[0-3]"]], ["(\\d)(\\d{5})", "$1 $2", ["[13]"]]], 0, 0, "([0-258]\\d{4})$", "3$1"], "NG": ["234", "009", "(?:[124-7]|9\\d{3})\\d{6}|[1-9]\\d{7}|[78]\\d{9,13}", [7, 8, 10, 11, 12, 13, 14], [["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["78"], "0$1"], ["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[12]|9(?:0[3-9]|[1-9])"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[3-7]|8[2-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[7-9]"], "0$1"], ["(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["[78]"], "0$1"], ["(\\d{3})(\\d{5})(\\d{5,6})", "$1 $2 $3", ["[78]"], "0$1"]], "0"], "NI": ["505", "00", "(?:1800|[25-8]\\d{3})\\d{4}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[125-8]"]]]], "NL": ["31", "00", "(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8]))\\d{6}|8\\d{6,9}|9\\d{6,10}|1\\d{4,5}", [5, 6, 7, 8, 9, 10, 11], [["(\\d{3})(\\d{4,7})", "$1 $2", ["[89]0"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["66"], "0$1"], ["(\\d)(\\d{8})", "$1 $2", ["6"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-578]|91"], "0$1"], ["(\\d{3})(\\d{3})(\\d{5})", "$1 $2 $3", ["9"], "0$1"]], "0"], "NO": ["47", "00", "(?:0|[2-9]\\d{3})\\d{4}", [5, 8], [["(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[489]|59"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[235-7]"]]], 0, 0, 0, 0, 0, "[02-689]|7[0-8]"], "NP": ["977", "00", "(?:1\\d|9)\\d{9}|[1-9]\\d{7}", [8, 10, 11], [["(\\d)(\\d{7})", "$1-$2", ["1[2-6]"], "0$1"], ["(\\d{2})(\\d{6})", "$1-$2", ["1[01]|[2-8]|9(?:[1-59]|[67][2-6])"], "0$1"], ["(\\d{3})(\\d{7})", "$1-$2", ["9"]]], "0"], "NR": ["674", "00", "(?:444|(?:55|8\\d)\\d|666)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[4-68]"]]]], "NU": ["683", "00", "(?:[47]|888\\d)\\d{3}", [4, 7], [["(\\d{3})(\\d{4})", "$1 $2", ["8"]]]], "NZ": ["64", "0(?:0|161)", "[29]\\d{7,9}|50\\d{5}(?:\\d{2,3})?|6[0-35-9]\\d{6}|7\\d{7,8}|8\\d{4,9}|(?:11\\d|[34])\\d{7}", [5, 6, 7, 8, 9, 10], [["(\\d{2})(\\d{3,8})", "$1 $2", ["8[1-579]"], "0$1"], ["(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["50[036-8]|[89]0", "50(?:[0367]|88)|[89]0"], "0$1"], ["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["24|[346]|7[2-57-9]|9[2-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:10|74)|[59]|80"], "0$1"], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1|2[028]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,5})", "$1 $2 $3", ["2(?:[169]|7[0-35-9])|7|86"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, "00"], "OM": ["968", "00", "(?:1505|[279]\\d{3}|500)\\d{4}|800\\d{5,6}", [7, 8, 9], [["(\\d{3})(\\d{4,6})", "$1 $2", ["[58]"]], ["(\\d{2})(\\d{6})", "$1 $2", ["2"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[179]"]]]], "PA": ["507", "00", "(?:00800|8\\d{3})\\d{6}|[68]\\d{7}|[1-57-9]\\d{6}", [7, 8, 10, 11], [["(\\d{3})(\\d{4})", "$1-$2", ["[1-57-9]"]], ["(\\d{4})(\\d{4})", "$1-$2", ["[68]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]]]], "PE": ["51", "00|19(?:1[124]|77|90)00", "(?:[14-8]|9\\d)\\d{7}", [8, 9], [["(\\d{3})(\\d{5})", "$1 $2", ["80"], "(0$1)"], ["(\\d)(\\d{7})", "$1 $2", ["1"], "(0$1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["[4-8]"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"]]], "0", 0, 0, 0, 0, 0, 0, "00", " Anexo "], "PF": ["689", "00", "4\\d{5}(?:\\d{2})?|8\\d{7,8}", [6, 8, 9], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["44"]], ["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["4|8[7-9]"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]]]], "PG": ["675", "00|140[1-3]", "(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}", [7, 8], [["(\\d{3})(\\d{4})", "$1 $2", ["18|[2-69]|85"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[78]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "PH": ["63", "00", "(?:[2-7]|9\\d)\\d{8}|2\\d{5}|(?:1800|8)\\d{7,9}", [6, 8, 9, 10, 11, 12, 13], [["(\\d)(\\d{5})", "$1 $2", ["2"], "(0$1)"], ["(\\d{4})(\\d{4,6})", "$1 $2", ["3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2", "3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))"], "(0$1)"], ["(\\d{5})(\\d{4})", "$1 $2", ["346|4(?:27|9[35])|883", "3469|4(?:279|9(?:30|56))|8834"], "(0$1)"], ["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3-7]|8[2-8]"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], ["(\\d{4})(\\d{1,2})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["1"]]], "0"], "PK": ["92", "00", "122\\d{6}|[24-8]\\d{10,11}|9(?:[013-9]\\d{8,10}|2(?:[01]\\d\\d|2(?:[06-8]\\d|1[01]))\\d{7})|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}", [8, 9, 10, 11, 12], [["(\\d{3})(\\d{3})(\\d{2,7})", "$1 $2 $3", ["[89]0"], "0$1"], ["(\\d{4})(\\d{5})", "$1 $2", ["1"]], ["(\\d{3})(\\d{6,7})", "$1 $2", ["2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])", "9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]"], "(0$1)"], ["(\\d{2})(\\d{7,8})", "$1 $2", ["(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]"], "(0$1)"], ["(\\d{5})(\\d{5})", "$1 $2", ["58"], "(0$1)"], ["(\\d{3})(\\d{7})", "$1 $2", ["3"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91"], "(0$1)"], ["(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[24-9]"], "(0$1)"]], "0"], "PL": ["48", "00", "(?:6|8\\d\\d)\\d{7}|[1-9]\\d{6}(?:\\d{2})?|[26]\\d{5}", [6, 7, 8, 9, 10], [["(\\d{5})", "$1", ["19"]], ["(\\d{3})(\\d{3})", "$1 $2", ["11|20|64"]], ["(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1", "(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19"]], ["(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["64"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)"]], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[2-8]|[2-7]|8[1-79]|9[145]"]], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["8"]]]], "PM": ["508", "00", "[45]\\d{5}|(?:708|80\\d)\\d{6}", [6, 9], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[45]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["7"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]], "0"], "PR": ["1", "011", "(?:[589]\\d\\d|787)\\d{7}", [10], 0, "1", 0, 0, 0, 0, "787|939"], "PS": ["970", "00", "[2489]2\\d{6}|(?:1\\d|5)\\d{8}", [8, 9, 10], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2489]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["5"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]], "0"], "PT": ["351", "00", "1693\\d{5}|(?:[26-9]\\d|30)\\d{7}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["2[12]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["16|[236-9]"]]]], "PW": ["680", "01[12]", "(?:[24-8]\\d\\d|345|900)\\d{4}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]]], "PY": ["595", "00", "59\\d{4,6}|9\\d{5,10}|(?:[2-46-8]\\d|5[0-8])\\d{4,7}", [6, 7, 8, 9, 10, 11], [["(\\d{3})(\\d{3,6})", "$1 $2", ["[2-9]0"], "0$1"], ["(\\d{2})(\\d{5})", "$1 $2", ["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"], "(0$1)"], ["(\\d{3})(\\d{4,5})", "$1 $2", ["2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["87"]], ["(\\d{3})(\\d{6})", "$1 $2", ["9(?:[5-79]|8[1-6])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"]]], "0"], "QA": ["974", "00", "800\\d{4}|(?:2|800)\\d{6}|(?:0080|[3-7])\\d{7}", [7, 8, 9, 11], [["(\\d{3})(\\d{4})", "$1 $2", ["2[16]|8"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[3-7]"]]]], "RE": ["262", "00", "(?:26|[689]\\d)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2689]"], "0$1"]], "0", 0, 0, 0, 0, 0, [["26(?:2\\d\\d|3(?:0\\d|1[0-3]))\\d{4}"], ["(?:69(?:2\\d\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\d|5[0-5]|6[0-6]|7[0-27]|8[0-8]|9[0-479]))|9(?:399[0-2]|4790|76(?:2[27]|3[0-37]|9\\d)))\\d{4}"], ["80\\d{7}"], ["89[1-37-9]\\d{6}"], 0, 0, 0, 0, 0, ["8(?:1[019]|2[0156]|84|90)\\d{6}"]]], "RO": ["40", "00", "(?:[2378]\\d|90)\\d{7}|[23]\\d{5}", [6, 9], [["(\\d{3})(\\d{3})", "$1 $2", ["2[3-6]", "2[3-6]\\d9"], "0$1"], ["(\\d{2})(\\d{4})", "$1 $2", ["219|31"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[23]1"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[237-9]"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, 0, " int "], "RS": ["381", "00", "38[02-9]\\d{6,9}|6\\d{7,9}|90\\d{4,8}|38\\d{5,6}|(?:7\\d\\d|800)\\d{3,9}|(?:[12]\\d|3[0-79])\\d{5,10}", [6, 7, 8, 9, 10, 11, 12], [["(\\d{3})(\\d{3,9})", "$1 $2", ["(?:2[389]|39)0|[7-9]"], "0$1"], ["(\\d{2})(\\d{5,10})", "$1 $2", ["[1-36]"], "0$1"]], "0"], "RU": ["7", "810", "8\\d{13}|[347-9]\\d{9}", [10, 14], [["(\\d{4})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-8]|2[1-9])", "7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))", "7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2"], "8 ($1)", 1], ["(\\d{5})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-68]|2[1-9])", "7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))", "7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]"], "8 ($1)", 1], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "8 ($1)", 1], ["(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[349]|8(?:[02-7]|1[1-8])"], "8 ($1)", 1], ["(\\d{4})(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["8"], "8 ($1)"]], "8", 0, 0, 0, 0, "3[04-689]|[489]", 0, "8~10"], "RW": ["250", "00", "(?:06|[27]\\d\\d|[89]00)\\d{6}", [8, 9], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[7-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"]]], "0"], "SA": ["966", "00", "92\\d{7}|(?:[15]|8\\d)\\d{8}", [9, 10], [["(\\d{4})(\\d{5})", "$1 $2", ["9"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["81"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]]], "0"], "SB": ["677", "0[01]", "(?:[1-6]|[7-9]\\d\\d)\\d{4}", [5, 7], [["(\\d{2})(\\d{5})", "$1 $2", ["7|8[4-9]|9(?:[1-8]|9[0-8])"]]]], "SC": ["248", "010|0[0-2]", "800\\d{4}|(?:[249]\\d|64)\\d{5}", [7], [["(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[246]|9[57]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "SD": ["249", "00", "[19]\\d{8}", [9], [["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[19]"], "0$1"]], "0"], "SE": ["46", "00", "(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}", [6, 7, 8, 9, 10], [["(\\d{2})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["20"], "0$1", 0, "$1 $2 $3"], ["(\\d{3})(\\d{4})", "$1-$2", ["9(?:00|39|44|9)"], "0$1", 0, "$1 $2"], ["(\\d{2})(\\d{3})(\\d{2})", "$1-$2 $3", ["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"], "0$1", 0, "$1 $2 $3"], ["(\\d)(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1", 0, "$1 $2 $3"], ["(\\d{3})(\\d{2,3})(\\d{3})", "$1-$2 $3", ["9(?:00|39|44)"], "0$1", 0, "$1 $2 $3"], ["(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["10|7"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2})(\\d{2})(\\d{3})", "$1-$2 $3 $4", ["9"], "0$1", 0, "$1 $2 $3 $4"], ["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4 $5", ["[26]"], "0$1", 0, "$1 $2 $3 $4 $5"]], "0"], "SG": ["65", "0[0-3]\\d", "(?:(?:1\\d|8)\\d\\d|7000)\\d{7}|[3689]\\d{7}", [8, 10, 11], [["(\\d{4})(\\d{4})", "$1 $2", ["[369]|8(?:0[1-6]|[1-9])"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]], ["(\\d{4})(\\d{4})(\\d{3})", "$1 $2 $3", ["7"]], ["(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]]], "SH": ["290", "00", "(?:[256]\\d|8)\\d{3}", [4, 5], 0, 0, 0, 0, 0, 0, "[256]"], "SI": ["386", "00|10(?:22|66|88|99)", "[1-7]\\d{7}|8\\d{4,7}|90\\d{4,6}", [5, 6, 7, 8], [["(\\d{2})(\\d{3,6})", "$1 $2", ["8[09]|9"], "0$1"], ["(\\d{3})(\\d{5})", "$1 $2", ["59|8"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[37][01]|4[0139]|51|6"], "0$1"], ["(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-57]"], "(0$1)"]], "0", 0, 0, 0, 0, 0, 0, "00"], "SJ": ["47", "00", "0\\d{4}|(?:[489]\\d|[57]9)\\d{6}", [5, 8], 0, 0, 0, 0, 0, 0, "79"], "SK": ["421", "00", "[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}", [6, 7, 9], [["(\\d)(\\d{2})(\\d{3,4})", "$1 $2 $3", ["21"], "0$1"], ["(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["[3-5][1-8]1", "[3-5][1-8]1[67]"], "0$1"], ["(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1/$2 $3 $4", ["2"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[689]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1/$2 $3 $4", ["[3-5]"], "0$1"]], "0"], "SL": ["232", "00", "(?:[237-9]\\d|66)\\d{6}", [8], [["(\\d{2})(\\d{6})", "$1 $2", ["[236-9]"], "(0$1)"]], "0"], "SM": ["378", "00", "(?:0549|[5-7]\\d)\\d{6}", [8, 10], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-7]"]], ["(\\d{4})(\\d{6})", "$1 $2", ["0"]]], 0, 0, "([89]\\d{5})$", "0549$1"], "SN": ["221", "00", "(?:[378]\\d|93)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[379]"]]]], "SO": ["252", "00", "[346-9]\\d{8}|[12679]\\d{7}|[1-5]\\d{6}|[1348]\\d{5}", [6, 7, 8, 9], [["(\\d{2})(\\d{4})", "$1 $2", ["8[125]"]], ["(\\d{6})", "$1", ["[134]"]], ["(\\d)(\\d{6})", "$1 $2", ["[15]|2[0-79]|3[0-46-8]|4[0-7]"]], ["(\\d)(\\d{7})", "$1 $2", ["(?:2|90)4|[67]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[3478]|64|90"]], ["(\\d{2})(\\d{5,7})", "$1 $2", ["1|28|6(?:0[5-7]|[1-35-9])|9[2-9]"]]], "0"], "SR": ["597", "00", "(?:[2-5]|68|[78]\\d)\\d{5}", [6, 7], [["(\\d{2})(\\d{2})(\\d{2})", "$1-$2-$3", ["56"]], ["(\\d{3})(\\d{3})", "$1-$2", ["[2-5]"]], ["(\\d{3})(\\d{4})", "$1-$2", ["[6-8]"]]]], "SS": ["211", "00", "[19]\\d{8}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[19]"], "0$1"]], "0"], "ST": ["239", "00", "(?:22|9\\d)\\d{5}", [7], [["(\\d{3})(\\d{4})", "$1 $2", ["[29]"]]]], "SV": ["503", "00", "[267]\\d{7}|[89]00\\d{4}(?:\\d{4})?", [7, 8, 11], [["(\\d{3})(\\d{4})", "$1 $2", ["[89]"]], ["(\\d{4})(\\d{4})", "$1 $2", ["[267]"]], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[89]"]]]], "SX": ["1", "011", "7215\\d{6}|(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "(5\\d{6})$|1", "721$1", 0, "721"], "SY": ["963", "00", "[1-39]\\d{8}|[1-5]\\d{7}", [8, 9], [["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-5]"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1", 1]], "0"], "SZ": ["268", "00", "0800\\d{4}|(?:[237]\\d|900)\\d{6}", [8, 9], [["(\\d{4})(\\d{4})", "$1 $2", ["[0237]"]], ["(\\d{5})(\\d{4})", "$1 $2", ["9"]]]], "TA": ["290", "00", "8\\d{3}", [4], 0, 0, 0, 0, 0, 0, "8"], "TC": ["1", "011", "(?:[58]\\d\\d|649|900)\\d{7}", [10], 0, "1", 0, "([2-479]\\d{6})$|1", "649$1", 0, "649"], "TD": ["235", "00|16", "(?:22|[69]\\d|77)\\d{6}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2679]"]]], 0, 0, 0, 0, 0, 0, 0, "00"], "TG": ["228", "00", "[279]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[279]"]]]], "TH": ["66", "00[1-9]", "(?:001800|[2-57]|[689]\\d)\\d{7}|1\\d{7,9}", [8, 9, 10, 13], [["(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[13-9]"], "0$1"], ["(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]], "0"], "TJ": ["992", "810", "(?:00|[1-57-9]\\d)\\d{7}", [9], [["(\\d{6})(\\d)(\\d{2})", "$1 $2 $3", ["331", "3317"]], ["(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["[34]7|91[78]"]], ["(\\d{4})(\\d)(\\d{4})", "$1 $2 $3", ["3[1-5]"]], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[0-57-9]"]]], 0, 0, 0, 0, 0, 0, 0, "8~10"], "TK": ["690", "00", "[2-47]\\d{3,6}", [4, 5, 6, 7]], "TL": ["670", "00", "7\\d{7}|(?:[2-47]\\d|[89]0)\\d{5}", [7, 8], [["(\\d{3})(\\d{4})", "$1 $2", ["[2-489]|70"]], ["(\\d{4})(\\d{4})", "$1 $2", ["7"]]]], "TM": ["993", "810", "[1-6]\\d{7}", [8], [["(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["12"], "(8 $1)"], ["(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-5]"], "(8 $1)"], ["(\\d{2})(\\d{6})", "$1 $2", ["6"], "8 $1"]], "8", 0, 0, 0, 0, 0, 0, "8~10"], "TN": ["216", "00", "[2-57-9]\\d{7}", [8], [["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-57-9]"]]]], "TO": ["676", "00", "(?:0800|(?:[5-8]\\d\\d|999)\\d)\\d{3}|[2-8]\\d{4}", [5, 7], [["(\\d{2})(\\d{3})", "$1-$2", ["[2-4]|50|6[09]|7[0-24-69]|8[05]"]], ["(\\d{4})(\\d{3})", "$1 $2", ["0"]], ["(\\d{3})(\\d{4})", "$1 $2", ["[5-9]"]]]], "TR": ["90", "00", "4\\d{6}|8\\d{11,12}|(?:[2-58]\\d\\d|900)\\d{7}", [7, 10, 12, 13], [["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["512|8[01589]|90"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5(?:[0-59]|61)", "5(?:[0-59]|616)", "5(?:[0-59]|6161)"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24][1-8]|3[1-9]"], "(0$1)", 1], ["(\\d{3})(\\d{3})(\\d{6,7})", "$1 $2 $3", ["80"], "0$1", 1]], "0"], "TT": ["1", "011", "(?:[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-46-8]\\d{6})$|1", "868$1", 0, "868"], "TV": ["688", "00", "(?:2|7\\d\\d|90)\\d{4}", [5, 6, 7], [["(\\d{2})(\\d{3})", "$1 $2", ["2"]], ["(\\d{2})(\\d{4})", "$1 $2", ["90"]], ["(\\d{2})(\\d{5})", "$1 $2", ["7"]]]], "TW": ["886", "0(?:0[25-79]|19)", "[2-689]\\d{8}|7\\d{9,10}|[2-8]\\d{7}|2\\d{6}", [7, 8, 9, 10, 11], [["(\\d{2})(\\d)(\\d{4})", "$1 $2 $3", ["202"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[258]0"], "0$1"], ["(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]", "[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[49]"], "0$1"], ["(\\d{2})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["7"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, 0, "#"], "TZ": ["255", "00[056]", "(?:[25-8]\\d|41|90)\\d{7}", [9], [["(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[24]"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["5"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[67]"], "0$1"]], "0"], "UA": ["380", "00", "[89]\\d{9}|[3-9]\\d{8}", [9, 10], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]", "6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]"], "0$1"], ["(\\d{4})(\\d{5})", "$1 $2", ["3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])", "3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3-7]|89|9[1-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[89]"], "0$1"]], "0", 0, 0, 0, 0, 0, 0, "0~0"], "UG": ["256", "00[057]", "800\\d{6}|(?:[29]0|[347]\\d)\\d{7}", [9], [["(\\d{4})(\\d{5})", "$1 $2", ["202", "2024"], "0$1"], ["(\\d{3})(\\d{6})", "$1 $2", ["[27-9]|4(?:6[45]|[7-9])"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["[34]"], "0$1"]], "0"], "US": ["1", "011", "[2-9]\\d{9}|3\\d{6}", [10], [["(\\d{3})(\\d{4})", "$1-$2", ["310"], 0, 1], ["(\\d{3})(\\d{3})(\\d{4})", "($1) $2-$3", ["[2-9]"], 0, 1, "$1-$2-$3"]], "1", 0, 0, 0, 0, 0, [["(?:47220[01]|5(?:05(?:[2-57-9]\\d\\d|6(?:[0-35-9]\\d|4[46]))|57200))\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[0-2]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}"], [""], ["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}"], ["900[2-9]\\d{6}"], ["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}"]]], "UY": ["598", "0(?:0|1[3-9]\\d)", "(?:0004|4)\\d{9}|[1249]\\d{7}|(?:[49]\\d|80)\\d{5}", [7, 8, 10, 13], [["(\\d{3})(\\d{4})", "$1 $2", ["405|8|90"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"], ["(\\d{4})(\\d{4})", "$1 $2", ["[124]"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["4"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["0"]]], "0", 0, 0, 0, 0, 0, 0, "00", " int. "], "UZ": ["998", "810", "(?:33|[5-79]\\d|88)\\d{7}", [9], [["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[35-9]"], "8 $1"]], "8", 0, 0, 0, 0, 0, 0, "8~10"], "VA": ["39", "00", "0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}", [6, 7, 8, 9, 10, 11], 0, 0, 0, 0, 0, 0, "06698"], "VC": ["1", "011", "(?:[58]\\d\\d|784|900)\\d{7}", [10], 0, "1", 0, "([2-7]\\d{6})$|1", "784$1", 0, "784"], "VE": ["58", "00", "[68]00\\d{7}|(?:[24]\\d|[59]0)\\d{8}", [10], [["(\\d{3})(\\d{7})", "$1-$2", ["[24-689]"], "0$1"]], "0"], "VG": ["1", "011", "(?:284|[58]\\d\\d|900)\\d{7}", [10], 0, "1", 0, "([2-578]\\d{6})$|1", "284$1", 0, "284"], "VI": ["1", "011", "[58]\\d{9}|(?:34|90)0\\d{7}", [10], 0, "1", 0, "([2-9]\\d{6})$|1", "340$1", 0, "340"], "VN": ["84", "00", "[12]\\d{9}|[135-9]\\d{8}|[16]\\d{7}|[16-8]\\d{6}", [7, 8, 9, 10], [["(\\d{2})(\\d{5})", "$1 $2", ["80"], "0$1", 1], ["(\\d{4})(\\d{4,6})", "$1 $2", ["1"], 0, 1], ["(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[69]"], "0$1", 1], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[3578]"], "0$1", 1], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["2[48]"], "0$1", 1], ["(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["2"], "0$1", 1]], "0"], "VU": ["678", "00", "[57-9]\\d{6}|(?:[238]\\d|48)\\d{3}", [5, 7], [["(\\d{3})(\\d{4})", "$1 $2", ["[57-9]"]]]], "WF": ["681", "00", "(?:40|72)\\d{4}|8\\d{5}(?:\\d{3})?", [6, 9], [["(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[478]"]], ["(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]]]], "WS": ["685", "0", "(?:[2-6]|8\\d{5})\\d{4}|[78]\\d{6}|[68]\\d{5}", [5, 6, 7, 10], [["(\\d{5})", "$1", ["[2-5]|6[1-9]"]], ["(\\d{3})(\\d{3,7})", "$1 $2", ["[68]"]], ["(\\d{2})(\\d{5})", "$1 $2", ["7"]]]], "XK": ["383", "00", "[23]\\d{7,8}|(?:4\\d\\d|[89]00)\\d{5}", [8, 9], [["(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-4]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[23]"], "0$1"]], "0"], "YE": ["967", "00", "(?:1|7\\d)\\d{7}|[1-7]\\d{6}", [7, 8, 9], [["(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-6]|7(?:[24-6]|8[0-7])"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["7"], "0$1"]], "0"], "YT": ["262", "00", "(?:(?:(?:26|63)9|80\\d)\\d\\d|93980)\\d{4}", [9], 0, "0", 0, 0, 0, 0, "269|63|9398"], "ZA": ["27", "00", "[1-79]\\d{8}|8\\d{4,9}", [5, 6, 7, 8, 9, 10], [["(\\d{2})(\\d{3,4})", "$1 $2", ["8[1-4]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["8[1-4]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["860"], "0$1"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-9]"], "0$1"], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"]], "0"], "ZM": ["260", "00", "800\\d{6}|(?:21|63|[79]\\d)\\d{7}", [9], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[28]"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["[79]"], "0$1"]], "0"], "ZW": ["263", "00", "2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}", [5, 6, 7, 8, 9, 10], [["(\\d{3})(\\d{3,5})", "$1 $2", ["2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]"], "0$1"], ["(\\d)(\\d{3})(\\d{2,4})", "$1 $2 $3", ["[49]"], "0$1"], ["(\\d{3})(\\d{4})", "$1 $2", ["80"], "0$1"], ["(\\d{2})(\\d{7})", "$1 $2", ["24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2", "2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]"], "(0$1)"], ["(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], ["(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)", "2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)"], "0$1"], ["(\\d{4})(\\d{6})", "$1 $2", ["8"], "0$1"], ["(\\d{2})(\\d{3,5})", "$1 $2", ["1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]"], "0$1"], ["(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["29[013-9]|39|54"], "0$1"], ["(\\d{4})(\\d{3,5})", "$1 $2", ["(?:25|54)8", "258|5483"], "0$1"]], "0"] }, "nonGeographic": { "800": ["800", 0, "(?:00|[1-9]\\d)\\d{6}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["\\d"]]], 0, 0, 0, 0, 0, 0, [0, 0, ["(?:00|[1-9]\\d)\\d{6}"]]], "808": ["808", 0, "[1-9]\\d{7}", [8], [["(\\d{4})(\\d{4})", "$1 $2", ["[1-9]"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, 0, ["[1-9]\\d{7}"]]], "870": ["870", 0, "7\\d{11}|[35-7]\\d{8}", [9, 12], [["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[35-7]"]]], 0, 0, 0, 0, 0, 0, [0, ["(?:[356]|774[45])\\d{8}|7[6-8]\\d{7}"]]], "878": ["878", 0, "10\\d{10}", [12], [["(\\d{2})(\\d{5})(\\d{5})", "$1 $2 $3", ["1"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, ["10\\d{10}"]]], "881": ["881", 0, "[0-36-9]\\d{8}", [9], [["(\\d)(\\d{3})(\\d{5})", "$1 $2 $3", ["[0-36-9]"]]], 0, 0, 0, 0, 0, 0, [0, ["[0-36-9]\\d{8}"]]], "882": ["882", 0, "[13]\\d{6}(?:\\d{2,5})?|[19]\\d{7}|(?:[25]\\d\\d|4)\\d{7}(?:\\d{2})?", [7, 8, 9, 10, 11, 12], [["(\\d{2})(\\d{5})", "$1 $2", ["16|342"]], ["(\\d{2})(\\d{6})", "$1 $2", ["49"]], ["(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["1[36]|9"]], ["(\\d{2})(\\d{4})(\\d{3})", "$1 $2 $3", ["3[23]"]], ["(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["16"]], ["(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10|23|3(?:[15]|4[57])|4|51"]], ["(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["34"]], ["(\\d{2})(\\d{4,5})(\\d{5})", "$1 $2 $3", ["[1-35]"]]], 0, 0, 0, 0, 0, 0, [0, ["342\\d{4}|(?:337|49)\\d{6}|(?:3(?:2|47|7\\d{3})|50\\d{3})\\d{7}", [7, 8, 9, 10, 12]], 0, 0, 0, 0, 0, 0, ["1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\d{4}|6\\d{5,10})|(?:345\\d|9[89])\\d{6}|(?:10|2(?:3|85\\d)|3(?:[15]|[69]\\d\\d)|4[15-8]|51)\\d{8}"]]], "883": ["883", 0, "(?:[1-4]\\d|51)\\d{6,10}", [8, 9, 10, 11, 12], [["(\\d{3})(\\d{3})(\\d{2,8})", "$1 $2 $3", ["[14]|2[24-689]|3[02-689]|51[24-9]"]], ["(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["510"]], ["(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["21"]], ["(\\d{4})(\\d{4})(\\d{4})", "$1 $2 $3", ["51[13]"]], ["(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[235]"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, ["(?:2(?:00\\d\\d|10)|(?:370[1-9]|51\\d0)\\d)\\d{7}|51(?:00\\d{5}|[24-9]0\\d{4,7})|(?:1[013-79]|2[24-689]|3[02-689]|4[0-4])0\\d{5,9}"]]], "888": ["888", 0, "\\d{11}", [11], [["(\\d{3})(\\d{3})(\\d{5})", "$1 $2 $3"]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, ["\\d{11}"]]], "979": ["979", 0, "[1359]\\d{8}", [9], [["(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[1359]"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, ["[1359]\\d{8}"]]] } };
function withMetadataArgument(func, _arguments) {
  var args = Array.prototype.slice.call(_arguments);
  args.push(metadata_min_json_default);
  return func.apply(this, args);
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result2;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result2 = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result2 = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result2);
  };
}
function _possibleConstructorReturn(self, call2) {
  if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
    return call2;
  } else if (call2 !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a2 = [null];
      a2.push.apply(a2, args2);
      var Constructor = Function.bind.apply(Parent2, a2);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o22, p22) {
    o22.__proto__ = p22;
    return o22;
  };
  return _setPrototypeOf(o2, p2);
}
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o22) {
    return o22.__proto__ || Object.getPrototypeOf(o22);
  };
  return _getPrototypeOf(o2);
}
var ParseError = function(_Error) {
  _inherits(ParseError2, _Error);
  var _super = _createSuper(ParseError2);
  function ParseError2(code) {
    var _this;
    _classCallCheck(this, ParseError2);
    _this = _super.call(this, code);
    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError2.prototype);
    _this.name = _this.constructor.name;
    return _this;
  }
  return _createClass(ParseError2);
}(_wrapNativeSuper(Error));
var MIN_LENGTH_FOR_NSN = 2;
var MAX_LENGTH_FOR_NSN = 17;
var MAX_LENGTH_COUNTRY_CODE = 3;
var VALID_DIGITS = "0-9０-９٠-٩۰-۹";
var DASHES = "-‐-―−ー－";
var SLASHES = "／/";
var DOTS = "．.";
var WHITESPACE = "  ­​⁠　";
var BRACKETS = "()（）［］\\[\\]";
var TILDES = "~⁓∼～";
var VALID_PUNCTUATION = "".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);
var PLUS_CHARS = "+＋";
function semver_compare_default(a2, b2) {
  a2 = a2.split("-");
  b2 = b2.split("-");
  var pa = a2[0].split(".");
  var pb = b2[0].split(".");
  for (var i2 = 0; i2 < 3; i2++) {
    var na = Number(pa[i2]);
    var nb = Number(pb[i2]);
    if (na > nb)
      return 1;
    if (nb > na)
      return -1;
    if (!isNaN(na) && isNaN(nb))
      return 1;
    if (isNaN(na) && !isNaN(nb))
      return -1;
  }
  if (a2[1] && b2[1]) {
    return a2[1] > b2[1] ? 1 : a2[1] < b2[1] ? -1 : 0;
  }
  return !a2[1] && b2[1] ? 1 : a2[1] && !b2[1] ? -1 : 0;
}
function _typeof2(obj) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof2(obj);
}
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var V3 = "1.2.0";
var V4 = "1.7.35";
var DEFAULT_EXT_PREFIX = " ext. ";
var CALLING_CODE_REG_EXP = /^\d+$/;
var Metadata = function() {
  function Metadata2(metadata) {
    _classCallCheck2(this, Metadata2);
    validateMetadata(metadata);
    this.metadata = metadata;
    setVersion.call(this, metadata);
  }
  _createClass2(Metadata2, [{
    key: "getCountries",
    value: function getCountries() {
      return Object.keys(this.metadata.countries).filter(function(_2) {
        return _2 !== "001";
      });
    }
  }, {
    key: "getCountryMetadata",
    value: function getCountryMetadata(countryCode) {
      return this.metadata.countries[countryCode];
    }
  }, {
    key: "nonGeographic",
    value: function nonGeographic() {
      if (this.v1 || this.v2 || this.v3)
        return;
      return this.metadata.nonGeographic || this.metadata.nonGeographical;
    }
  }, {
    key: "hasCountry",
    value: function hasCountry(country) {
      return this.getCountryMetadata(country) !== void 0;
    }
  }, {
    key: "hasCallingCode",
    value: function hasCallingCode(callingCode) {
      if (this.getCountryCodesForCallingCode(callingCode)) {
        return true;
      }
      if (this.nonGeographic()) {
        if (this.nonGeographic()[callingCode]) {
          return true;
        }
      } else {
        var countryCodes = this.countryCallingCodes()[callingCode];
        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === "001") {
          return true;
        }
      }
    }
  }, {
    key: "isNonGeographicCallingCode",
    value: function isNonGeographicCallingCode(callingCode) {
      if (this.nonGeographic()) {
        return this.nonGeographic()[callingCode] ? true : false;
      } else {
        return this.getCountryCodesForCallingCode(callingCode) ? false : true;
      }
    }
    // Deprecated.
  }, {
    key: "country",
    value: function country(countryCode) {
      return this.selectNumberingPlan(countryCode);
    }
  }, {
    key: "selectNumberingPlan",
    value: function selectNumberingPlan(countryCode, callingCode) {
      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {
        callingCode = countryCode;
        countryCode = null;
      }
      if (countryCode && countryCode !== "001") {
        if (!this.hasCountry(countryCode)) {
          throw new Error("Unknown country: ".concat(countryCode));
        }
        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);
      } else if (callingCode) {
        if (!this.hasCallingCode(callingCode)) {
          throw new Error("Unknown calling code: ".concat(callingCode));
        }
        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);
      } else {
        this.numberingPlan = void 0;
      }
      return this;
    }
  }, {
    key: "getCountryCodesForCallingCode",
    value: function getCountryCodesForCallingCode(callingCode) {
      var countryCodes = this.countryCallingCodes()[callingCode];
      if (countryCodes) {
        if (countryCodes.length === 1 && countryCodes[0].length === 3) {
          return;
        }
        return countryCodes;
      }
    }
  }, {
    key: "getCountryCodeForCallingCode",
    value: function getCountryCodeForCallingCode(callingCode) {
      var countryCodes = this.getCountryCodesForCallingCode(callingCode);
      if (countryCodes) {
        return countryCodes[0];
      }
    }
  }, {
    key: "getNumberingPlanMetadata",
    value: function getNumberingPlanMetadata(callingCode) {
      var countryCode = this.getCountryCodeForCallingCode(callingCode);
      if (countryCode) {
        return this.getCountryMetadata(countryCode);
      }
      if (this.nonGeographic()) {
        var metadata = this.nonGeographic()[callingCode];
        if (metadata) {
          return metadata;
        }
      } else {
        var countryCodes = this.countryCallingCodes()[callingCode];
        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === "001") {
          return this.metadata.countries["001"];
        }
      }
    }
    // Deprecated.
  }, {
    key: "countryCallingCode",
    value: function countryCallingCode() {
      return this.numberingPlan.callingCode();
    }
    // Deprecated.
  }, {
    key: "IDDPrefix",
    value: function IDDPrefix() {
      return this.numberingPlan.IDDPrefix();
    }
    // Deprecated.
  }, {
    key: "defaultIDDPrefix",
    value: function defaultIDDPrefix() {
      return this.numberingPlan.defaultIDDPrefix();
    }
    // Deprecated.
  }, {
    key: "nationalNumberPattern",
    value: function nationalNumberPattern() {
      return this.numberingPlan.nationalNumberPattern();
    }
    // Deprecated.
  }, {
    key: "possibleLengths",
    value: function possibleLengths() {
      return this.numberingPlan.possibleLengths();
    }
    // Deprecated.
  }, {
    key: "formats",
    value: function formats() {
      return this.numberingPlan.formats();
    }
    // Deprecated.
  }, {
    key: "nationalPrefixForParsing",
    value: function nationalPrefixForParsing() {
      return this.numberingPlan.nationalPrefixForParsing();
    }
    // Deprecated.
  }, {
    key: "nationalPrefixTransformRule",
    value: function nationalPrefixTransformRule() {
      return this.numberingPlan.nationalPrefixTransformRule();
    }
    // Deprecated.
  }, {
    key: "leadingDigits",
    value: function leadingDigits() {
      return this.numberingPlan.leadingDigits();
    }
    // Deprecated.
  }, {
    key: "hasTypes",
    value: function hasTypes() {
      return this.numberingPlan.hasTypes();
    }
    // Deprecated.
  }, {
    key: "type",
    value: function type(_type) {
      return this.numberingPlan.type(_type);
    }
    // Deprecated.
  }, {
    key: "ext",
    value: function ext() {
      return this.numberingPlan.ext();
    }
  }, {
    key: "countryCallingCodes",
    value: function countryCallingCodes() {
      if (this.v1)
        return this.metadata.country_phone_code_to_countries;
      return this.metadata.country_calling_codes;
    }
    // Deprecated.
  }, {
    key: "chooseCountryByCountryCallingCode",
    value: function chooseCountryByCountryCallingCode(callingCode) {
      return this.selectNumberingPlan(callingCode);
    }
  }, {
    key: "hasSelectedNumberingPlan",
    value: function hasSelectedNumberingPlan() {
      return this.numberingPlan !== void 0;
    }
  }]);
  return Metadata2;
}();
var NumberingPlan = function() {
  function NumberingPlan2(metadata, globalMetadataObject) {
    _classCallCheck2(this, NumberingPlan2);
    this.globalMetadataObject = globalMetadataObject;
    this.metadata = metadata;
    setVersion.call(this, globalMetadataObject.metadata);
  }
  _createClass2(NumberingPlan2, [{
    key: "callingCode",
    value: function callingCode() {
      return this.metadata[0];
    }
    // Formatting information for regions which share
    // a country calling code is contained by only one region
    // for performance reasons. For example, for NANPA region
    // ("North American Numbering Plan Administration",
    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)
    // it will be contained in the metadata for `US`.
  }, {
    key: "getDefaultCountryMetadataForRegion",
    value: function getDefaultCountryMetadataForRegion() {
      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());
    }
    // Is always present.
  }, {
    key: "IDDPrefix",
    value: function IDDPrefix() {
      if (this.v1 || this.v2)
        return;
      return this.metadata[1];
    }
    // Is only present when a country supports multiple IDD prefixes.
  }, {
    key: "defaultIDDPrefix",
    value: function defaultIDDPrefix() {
      if (this.v1 || this.v2)
        return;
      return this.metadata[12];
    }
  }, {
    key: "nationalNumberPattern",
    value: function nationalNumberPattern() {
      if (this.v1 || this.v2)
        return this.metadata[1];
      return this.metadata[2];
    }
    // "possible length" data is always present in Google's metadata.
  }, {
    key: "possibleLengths",
    value: function possibleLengths() {
      if (this.v1)
        return;
      return this.metadata[this.v2 ? 2 : 3];
    }
  }, {
    key: "_getFormats",
    value: function _getFormats(metadata) {
      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];
    }
    // For countries of the same region (e.g. NANPA)
    // formats are all stored in the "main" country for that region.
    // E.g. "RU" and "KZ", "US" and "CA".
  }, {
    key: "formats",
    value: function formats() {
      var _this = this;
      var formats2 = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];
      return formats2.map(function(_2) {
        return new Format(_2, _this);
      });
    }
  }, {
    key: "nationalPrefix",
    value: function nationalPrefix() {
      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];
    }
  }, {
    key: "_getNationalPrefixFormattingRule",
    value: function _getNationalPrefixFormattingRule(metadata) {
      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];
    }
    // For countries of the same region (e.g. NANPA)
    // national prefix formatting rule is stored in the "main" country for that region.
    // E.g. "RU" and "KZ", "US" and "CA".
  }, {
    key: "nationalPrefixFormattingRule",
    value: function nationalPrefixFormattingRule() {
      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());
    }
  }, {
    key: "_nationalPrefixForParsing",
    value: function _nationalPrefixForParsing() {
      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];
    }
  }, {
    key: "nationalPrefixForParsing",
    value: function nationalPrefixForParsing() {
      return this._nationalPrefixForParsing() || this.nationalPrefix();
    }
  }, {
    key: "nationalPrefixTransformRule",
    value: function nationalPrefixTransformRule() {
      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];
    }
  }, {
    key: "_getNationalPrefixIsOptionalWhenFormatting",
    value: function _getNationalPrefixIsOptionalWhenFormatting() {
      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];
    }
    // For countries of the same region (e.g. NANPA)
    // "national prefix is optional when formatting" flag is
    // stored in the "main" country for that region.
    // E.g. "RU" and "KZ", "US" and "CA".
  }, {
    key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());
    }
  }, {
    key: "leadingDigits",
    value: function leadingDigits() {
      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];
    }
  }, {
    key: "types",
    value: function types() {
      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];
    }
  }, {
    key: "hasTypes",
    value: function hasTypes() {
      if (this.types() && this.types().length === 0) {
        return false;
      }
      return !!this.types();
    }
  }, {
    key: "type",
    value: function type(_type2) {
      if (this.hasTypes() && getType(this.types(), _type2)) {
        return new Type(getType(this.types(), _type2), this);
      }
    }
  }, {
    key: "ext",
    value: function ext() {
      if (this.v1 || this.v2)
        return DEFAULT_EXT_PREFIX;
      return this.metadata[13] || DEFAULT_EXT_PREFIX;
    }
  }]);
  return NumberingPlan2;
}();
var Format = function() {
  function Format2(format3, metadata) {
    _classCallCheck2(this, Format2);
    this._format = format3;
    this.metadata = metadata;
  }
  _createClass2(Format2, [{
    key: "pattern",
    value: function pattern() {
      return this._format[0];
    }
  }, {
    key: "format",
    value: function format3() {
      return this._format[1];
    }
  }, {
    key: "leadingDigitsPatterns",
    value: function leadingDigitsPatterns() {
      return this._format[2] || [];
    }
  }, {
    key: "nationalPrefixFormattingRule",
    value: function nationalPrefixFormattingRule() {
      return this._format[3] || this.metadata.nationalPrefixFormattingRule();
    }
  }, {
    key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
    }
  }, {
    key: "nationalPrefixIsMandatoryWhenFormattingInNationalFormat",
    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {
      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
    }
    // Checks whether national prefix formatting rule contains national prefix.
  }, {
    key: "usesNationalPrefix",
    value: function usesNationalPrefix() {
      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a "dummy" one.
      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) ? true : false;
    }
  }, {
    key: "internationalFormat",
    value: function internationalFormat() {
      return this._format[5] || this.format();
    }
  }]);
  return Format2;
}();
var FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\(?\$1\)?$/;
var Type = function() {
  function Type2(type, metadata) {
    _classCallCheck2(this, Type2);
    this.type = type;
    this.metadata = metadata;
  }
  _createClass2(Type2, [{
    key: "pattern",
    value: function pattern() {
      if (this.metadata.v1)
        return this.type;
      return this.type[0];
    }
  }, {
    key: "possibleLengths",
    value: function possibleLengths() {
      if (this.metadata.v1)
        return;
      return this.type[1] || this.metadata.possibleLengths();
    }
  }]);
  return Type2;
}();
function getType(types, type) {
  switch (type) {
    case "FIXED_LINE":
      return types[0];
    case "MOBILE":
      return types[1];
    case "TOLL_FREE":
      return types[2];
    case "PREMIUM_RATE":
      return types[3];
    case "PERSONAL_NUMBER":
      return types[4];
    case "VOICEMAIL":
      return types[5];
    case "UAN":
      return types[6];
    case "PAGER":
      return types[7];
    case "VOIP":
      return types[8];
    case "SHARED_COST":
      return types[9];
  }
}
function validateMetadata(metadata) {
  if (!metadata) {
    throw new Error("[libphonenumber-js] `metadata` argument not passed. Check your arguments.");
  }
  if (!is_object(metadata) || !is_object(metadata.countries)) {
    throw new Error("[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got ".concat(is_object(metadata) ? "an object of shape: { " + Object.keys(metadata).join(", ") + " }" : "a " + type_of(metadata) + ": " + metadata, "."));
  }
}
var is_object = function is_object2(_2) {
  return _typeof2(_2) === "object";
};
var type_of = function type_of2(_2) {
  return _typeof2(_2);
};
function getCountryCallingCode(country, metadata) {
  metadata = new Metadata(metadata);
  if (metadata.hasCountry(country)) {
    return metadata.country(country).countryCallingCode();
  }
  throw new Error("Unknown country: ".concat(country));
}
function isSupportedCountry(country, metadata) {
  return metadata.countries[country] !== void 0;
}
function setVersion(metadata) {
  var version = metadata.version;
  if (typeof version === "number") {
    this.v1 = version === 1;
    this.v2 = version === 2;
    this.v3 = version === 3;
    this.v4 = version === 4;
  } else {
    if (!version) {
      this.v1 = true;
    } else if (semver_compare_default(version, V3) === -1) {
      this.v2 = true;
    } else if (semver_compare_default(version, V4) === -1) {
      this.v3 = true;
    } else {
      this.v4 = true;
    }
  }
}
var RFC3966_EXTN_PREFIX = ";ext=";
var getExtensionDigitsPattern = function getExtensionDigitsPattern2(maxLength) {
  return "([".concat(VALID_DIGITS, "]{1,").concat(maxLength, "})");
};
function createExtensionPattern(purpose) {
  var extLimitAfterExplicitLabel = "20";
  var extLimitAfterLikelyLabel = "15";
  var extLimitAfterAmbiguousChar = "9";
  var extLimitWhenNotSure = "6";
  var possibleSeparatorsBetweenNumberAndExtLabel = "[  \\t,]*";
  var possibleCharsAfterExtLabel = "[:\\.．]?[  \\t,-]*";
  var optionalExtnSuffix = "#?";
  var explicitExtLabels = "(?:e?xt(?:ensi(?:ó?|ó))?n?|ｅ?ｘｔｎ?|доб|anexo)";
  var ambiguousExtLabels = "(?:[xｘ#＃~～]|int|ｉｎｔ)";
  var ambiguousSeparator = "[- ]+";
  var possibleSeparatorsNumberExtLabelNoComma = "[  \\t]*";
  var autoDiallingAndExtLabelsFound = "(?:,{2}|;)";
  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);
  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;
  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;
  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + "#";
  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;
  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + "(?:,)+" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;
  return rfcExtn + "|" + explicitExtn + "|" + ambiguousExtn + "|" + americanStyleExtnWithSuffix + "|" + autoDiallingExtn + "|" + onlyCommasExtn;
}
var MIN_LENGTH_PHONE_NUMBER_PATTERN = "[" + VALID_DIGITS + "]{" + MIN_LENGTH_FOR_NSN + "}";
var VALID_PHONE_NUMBER = "[" + PLUS_CHARS + "]{0,1}(?:[" + VALID_PUNCTUATION + "]*[" + VALID_DIGITS + "]){3,}[" + VALID_PUNCTUATION + VALID_DIGITS + "]*";
var VALID_PHONE_NUMBER_START_REG_EXP = new RegExp("^[" + PLUS_CHARS + "]{0,1}(?:[" + VALID_PUNCTUATION + "]*[" + VALID_DIGITS + "]){1,2}$", "i");
var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions
"(?:" + createExtensionPattern() + ")?";
var VALID_PHONE_NUMBER_PATTERN = new RegExp(
  // Either a short two-digit-only phone number
  "^" + MIN_LENGTH_PHONE_NUMBER_PATTERN + "$|^" + VALID_PHONE_NUMBER_WITH_EXTENSION + "$",
  "i"
);
function isViablePhoneNumber(number) {
  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);
}
function isViablePhoneNumberStart(number) {
  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);
}
var EXTN_PATTERN = new RegExp("(?:" + createExtensionPattern() + ")$", "i");
function extractExtension(number) {
  var start = number.search(EXTN_PATTERN);
  if (start < 0) {
    return {};
  }
  var numberWithoutExtension = number.slice(0, start);
  var matches = number.match(EXTN_PATTERN);
  var i2 = 1;
  while (i2 < matches.length) {
    if (matches[i2]) {
      return {
        number: numberWithoutExtension,
        ext: matches[i2]
      };
    }
    i2++;
  }
}
var DIGITS = {
  "0": "0",
  "1": "1",
  "2": "2",
  "3": "3",
  "4": "4",
  "5": "5",
  "6": "6",
  "7": "7",
  "8": "8",
  "9": "9",
  "０": "0",
  // Fullwidth digit 0
  "１": "1",
  // Fullwidth digit 1
  "２": "2",
  // Fullwidth digit 2
  "３": "3",
  // Fullwidth digit 3
  "４": "4",
  // Fullwidth digit 4
  "５": "5",
  // Fullwidth digit 5
  "６": "6",
  // Fullwidth digit 6
  "７": "7",
  // Fullwidth digit 7
  "８": "8",
  // Fullwidth digit 8
  "９": "9",
  // Fullwidth digit 9
  "٠": "0",
  // Arabic-indic digit 0
  "١": "1",
  // Arabic-indic digit 1
  "٢": "2",
  // Arabic-indic digit 2
  "٣": "3",
  // Arabic-indic digit 3
  "٤": "4",
  // Arabic-indic digit 4
  "٥": "5",
  // Arabic-indic digit 5
  "٦": "6",
  // Arabic-indic digit 6
  "٧": "7",
  // Arabic-indic digit 7
  "٨": "8",
  // Arabic-indic digit 8
  "٩": "9",
  // Arabic-indic digit 9
  "۰": "0",
  // Eastern-Arabic digit 0
  "۱": "1",
  // Eastern-Arabic digit 1
  "۲": "2",
  // Eastern-Arabic digit 2
  "۳": "3",
  // Eastern-Arabic digit 3
  "۴": "4",
  // Eastern-Arabic digit 4
  "۵": "5",
  // Eastern-Arabic digit 5
  "۶": "6",
  // Eastern-Arabic digit 6
  "۷": "7",
  // Eastern-Arabic digit 7
  "۸": "8",
  // Eastern-Arabic digit 8
  "۹": "9"
  // Eastern-Arabic digit 9
};
function parseDigit(character) {
  return DIGITS[character];
}
function _createForOfIteratorHelperLoose2(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (it2)
    return (it2 = it2.call(o2)).next.bind(it2);
  if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray2(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
    if (it2)
      o2 = it2;
    var i2 = 0;
    return function() {
      if (i2 >= o2.length)
        return { done: true };
      return { done: false, value: o2[i2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray2(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray2(o2, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function parseIncompletePhoneNumber(string) {
  var result2 = "";
  for (var _iterator = _createForOfIteratorHelperLoose2(string.split("")), _step; !(_step = _iterator()).done; ) {
    var character = _step.value;
    result2 += parsePhoneNumberCharacter(character, result2) || "";
  }
  return result2;
}
function parsePhoneNumberCharacter(character, prevParsedCharacters) {
  if (character === "+") {
    if (prevParsedCharacters) {
      return;
    }
    return "+";
  }
  return parseDigit(character);
}
function _createForOfIteratorHelperLoose22(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (it2)
    return (it2 = it2.call(o2)).next.bind(it2);
  if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray22(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
    if (it2)
      o2 = it2;
    var i2 = 0;
    return function() {
      if (i2 >= o2.length)
        return { done: true };
      return { done: false, value: o2[i2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray22(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray22(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray22(o2, minLen);
}
function _arrayLikeToArray22(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function mergeArrays(a2, b2) {
  var merged = a2.slice();
  for (var _iterator = _createForOfIteratorHelperLoose22(b2), _step; !(_step = _iterator()).done; ) {
    var element = _step.value;
    if (a2.indexOf(element) < 0) {
      merged.push(element);
    }
  }
  return merged.sort(function(a22, b22) {
    return a22 - b22;
  });
}
function checkNumberLength(nationalNumber, metadata) {
  return checkNumberLengthForType(nationalNumber, void 0, metadata);
}
function checkNumberLengthForType(nationalNumber, type, metadata) {
  var type_info = metadata.type(type);
  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();
  if (!possible_lengths) {
    return "IS_POSSIBLE";
  }
  if (type === "FIXED_LINE_OR_MOBILE") {
    if (!metadata.type("FIXED_LINE")) {
      return checkNumberLengthForType(nationalNumber, "MOBILE", metadata);
    }
    var mobile_type = metadata.type("MOBILE");
    if (mobile_type) {
      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());
    }
  } else if (type && !type_info) {
    return "INVALID_LENGTH";
  }
  var actual_length = nationalNumber.length;
  var minimum_length = possible_lengths[0];
  if (minimum_length === actual_length) {
    return "IS_POSSIBLE";
  }
  if (minimum_length > actual_length) {
    return "TOO_SHORT";
  }
  if (possible_lengths[possible_lengths.length - 1] < actual_length) {
    return "TOO_LONG";
  }
  return possible_lengths.indexOf(actual_length, 1) >= 0 ? "IS_POSSIBLE" : "INVALID_LENGTH";
}
function isPossiblePhoneNumber(input, options, metadata) {
  if (options === void 0) {
    options = {};
  }
  metadata = new Metadata(metadata);
  if (options.v2) {
    if (!input.countryCallingCode) {
      throw new Error("Invalid phone number object passed");
    }
    metadata.selectNumberingPlan(input.countryCallingCode);
  } else {
    if (!input.phone) {
      return false;
    }
    if (input.country) {
      if (!metadata.hasCountry(input.country)) {
        throw new Error("Unknown country: ".concat(input.country));
      }
      metadata.country(input.country);
    } else {
      if (!input.countryCallingCode) {
        throw new Error("Invalid phone number object passed");
      }
      metadata.selectNumberingPlan(input.countryCallingCode);
    }
  }
  if (metadata.possibleLengths()) {
    return isPossibleNumber(input.phone || input.nationalNumber, metadata);
  } else {
    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {
      return true;
    } else {
      throw new Error('Missing "possibleLengths" in metadata. Perhaps the metadata has been generated before v1.0.18.');
    }
  }
}
function isPossibleNumber(nationalNumber, metadata) {
  switch (checkNumberLength(nationalNumber, metadata)) {
    case "IS_POSSIBLE":
      return true;
    default:
      return false;
  }
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray3(arr, i2) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit(arr, i2) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e2;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e2 = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _createForOfIteratorHelperLoose3(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (it2)
    return (it2 = it2.call(o2)).next.bind(it2);
  if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray3(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
    if (it2)
      o2 = it2;
    var i2 = 0;
    return function() {
      if (i2 >= o2.length)
        return { done: true };
      return { done: false, value: o2[i2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray3(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray3(o2, minLen);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function parseRFC3966(text) {
  var number;
  var ext;
  text = text.replace(/^tel:/, "tel=");
  for (var _iterator = _createForOfIteratorHelperLoose3(text.split(";")), _step; !(_step = _iterator()).done; ) {
    var part = _step.value;
    var _part$split = part.split("="), _part$split2 = _slicedToArray(_part$split, 2), name = _part$split2[0], value = _part$split2[1];
    switch (name) {
      case "tel":
        number = value;
        break;
      case "ext":
        ext = value;
        break;
      case "phone-context":
        if (value[0] === "+") {
          number = value + number;
        }
        break;
    }
  }
  if (!isViablePhoneNumber(number)) {
    return {};
  }
  var result2 = {
    number
  };
  if (ext) {
    result2.ext = ext;
  }
  return result2;
}
function formatRFC3966(_ref) {
  var number = _ref.number, ext = _ref.ext;
  if (!number) {
    return "";
  }
  if (number[0] !== "+") {
    throw new Error('"formatRFC3966()" expects "number" to be in E.164 format.');
  }
  return "tel:".concat(number).concat(ext ? ";ext=" + ext : "");
}
function matchesEntirely(text, regular_expression) {
  text = text || "";
  return new RegExp("^(?:" + regular_expression + ")$").test(text);
}
function _createForOfIteratorHelperLoose4(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (it2)
    return (it2 = it2.call(o2)).next.bind(it2);
  if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray4(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
    if (it2)
      o2 = it2;
    var i2 = 0;
    return function() {
      if (i2 >= o2.length)
        return { done: true };
      return { done: false, value: o2[i2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray4(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray4(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray4(o2, minLen);
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
var NON_FIXED_LINE_PHONE_TYPES = ["MOBILE", "PREMIUM_RATE", "TOLL_FREE", "SHARED_COST", "VOIP", "PERSONAL_NUMBER", "PAGER", "UAN", "VOICEMAIL"];
function getNumberType(input, options, metadata) {
  options = options || {};
  if (!input.country) {
    return;
  }
  metadata = new Metadata(metadata);
  metadata.selectNumberingPlan(input.country, input.countryCallingCode);
  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;
  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {
    return;
  }
  if (isNumberTypeEqualTo(nationalNumber, "FIXED_LINE", metadata)) {
    if (metadata.type("MOBILE") && metadata.type("MOBILE").pattern() === "") {
      return "FIXED_LINE_OR_MOBILE";
    }
    if (!metadata.type("MOBILE")) {
      return "FIXED_LINE_OR_MOBILE";
    }
    if (isNumberTypeEqualTo(nationalNumber, "MOBILE", metadata)) {
      return "FIXED_LINE_OR_MOBILE";
    }
    return "FIXED_LINE";
  }
  for (var _iterator = _createForOfIteratorHelperLoose4(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done; ) {
    var type = _step.value;
    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {
      return type;
    }
  }
}
function isNumberTypeEqualTo(nationalNumber, type, metadata) {
  type = metadata.type(type);
  if (!type || !type.pattern()) {
    return false;
  }
  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {
    return false;
  }
  return matchesEntirely(nationalNumber, type.pattern());
}
function isValidNumber(input, options, metadata) {
  options = options || {};
  metadata = new Metadata(metadata);
  metadata.selectNumberingPlan(input.country, input.countryCallingCode);
  if (metadata.hasTypes()) {
    return getNumberType(input, options, metadata.metadata) !== void 0;
  }
  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;
  return matchesEntirely(nationalNumber, metadata.nationalNumberPattern());
}
function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {
  var _metadata = new Metadata(metadata);
  var possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode);
  if (!possibleCountries) {
    return [];
  }
  return possibleCountries.filter(function(country) {
    return couldNationalNumberBelongToCountry(nationalNumber, country, metadata);
  });
}
function couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {
  var _metadata = new Metadata(metadata);
  _metadata.selectNumberingPlan(country);
  if (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {
    return true;
  }
  return false;
}
function applyInternationalSeparatorStyle(formattedNumber) {
  return formattedNumber.replace(new RegExp("[".concat(VALID_PUNCTUATION, "]+"), "g"), " ").trim();
}
var FIRST_GROUP_PATTERN = /(\$\d)/;
function formatNationalNumberUsingFormat(number, format3, _ref) {
  var useInternationalFormat = _ref.useInternationalFormat, withNationalPrefix = _ref.withNationalPrefix, carrierCode = _ref.carrierCode, metadata = _ref.metadata;
  var formattedNumber = number.replace(new RegExp(format3.pattern()), useInternationalFormat ? format3.internationalFormat() : (
    // This library doesn't use `domestic_carrier_code_formatting_rule`,
    // because that one is only used when formatting phone numbers
    // for dialing from a mobile phone, and this is not a dialing library.
    // carrierCode && format.domesticCarrierCodeFormattingRule()
    // 	// First, replace the $CC in the formatting rule with the desired carrier code.
    // 	// Then, replace the $FG in the formatting rule with the first group
    // 	// and the carrier code combined in the appropriate way.
    // 	? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))
    // 	: (
    // 		withNationalPrefix && format.nationalPrefixFormattingRule()
    // 			? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())
    // 			: format.format()
    // 	)
    withNationalPrefix && format3.nationalPrefixFormattingRule() ? format3.format().replace(FIRST_GROUP_PATTERN, format3.nationalPrefixFormattingRule()) : format3.format()
  ));
  if (useInternationalFormat) {
    return applyInternationalSeparatorStyle(formattedNumber);
  }
  return formattedNumber;
}
var SINGLE_IDD_PREFIX_REG_EXP = /^[\d]+(?:[~\u2053\u223C\uFF5E][\d]+)?$/;
function getIddPrefix(country, callingCode, metadata) {
  var countryMetadata = new Metadata(metadata);
  countryMetadata.selectNumberingPlan(country, callingCode);
  if (countryMetadata.defaultIDDPrefix()) {
    return countryMetadata.defaultIDDPrefix();
  }
  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {
    return countryMetadata.IDDPrefix();
  }
}
function _createForOfIteratorHelperLoose5(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (it2)
    return (it2 = it2.call(o2)).next.bind(it2);
  if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray5(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
    if (it2)
      o2 = it2;
    var i2 = 0;
    return function() {
      if (i2 >= o2.length)
        return { done: true };
      return { done: false, value: o2[i2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray5(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray5(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray5(o2, minLen);
}
function _arrayLikeToArray5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DEFAULT_OPTIONS = {
  formatExtension: function formatExtension(formattedNumber, extension, metadata) {
    return "".concat(formattedNumber).concat(metadata.ext()).concat(extension);
  }
};
function formatNumber(input, format3, options, metadata) {
  if (options) {
    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);
  } else {
    options = DEFAULT_OPTIONS;
  }
  metadata = new Metadata(metadata);
  if (input.country && input.country !== "001") {
    if (!metadata.hasCountry(input.country)) {
      throw new Error("Unknown country: ".concat(input.country));
    }
    metadata.country(input.country);
  } else if (input.countryCallingCode) {
    metadata.selectNumberingPlan(input.countryCallingCode);
  } else
    return input.phone || "";
  var countryCallingCode = metadata.countryCallingCode();
  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;
  var number;
  switch (format3) {
    case "NATIONAL":
      if (!nationalNumber) {
        return "";
      }
      number = formatNationalNumber(nationalNumber, input.carrierCode, "NATIONAL", metadata, options);
      return addExtension(number, input.ext, metadata, options.formatExtension);
    case "INTERNATIONAL":
      if (!nationalNumber) {
        return "+".concat(countryCallingCode);
      }
      number = formatNationalNumber(nationalNumber, null, "INTERNATIONAL", metadata, options);
      number = "+".concat(countryCallingCode, " ").concat(number);
      return addExtension(number, input.ext, metadata, options.formatExtension);
    case "E.164":
      return "+".concat(countryCallingCode).concat(nationalNumber);
    case "RFC3966":
      return formatRFC3966({
        number: "+".concat(countryCallingCode).concat(nationalNumber),
        ext: input.ext
      });
    case "IDD":
      if (!options.fromCountry) {
        return;
      }
      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);
      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);
    default:
      throw new Error('Unknown "format" argument passed to "formatNumber()": "'.concat(format3, '"'));
  }
}
function formatNationalNumber(number, carrierCode, formatAs, metadata, options) {
  var format3 = chooseFormatForNumber(metadata.formats(), number);
  if (!format3) {
    return number;
  }
  return formatNationalNumberUsingFormat(number, format3, {
    useInternationalFormat: formatAs === "INTERNATIONAL",
    withNationalPrefix: format3.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,
    carrierCode,
    metadata
  });
}
function chooseFormatForNumber(availableFormats, nationalNnumber) {
  for (var _iterator = _createForOfIteratorHelperLoose5(availableFormats), _step; !(_step = _iterator()).done; ) {
    var format3 = _step.value;
    if (format3.leadingDigitsPatterns().length > 0) {
      var lastLeadingDigitsPattern = format3.leadingDigitsPatterns()[format3.leadingDigitsPatterns().length - 1];
      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {
        continue;
      }
    }
    if (matchesEntirely(nationalNnumber, format3.pattern())) {
      return format3;
    }
  }
}
function addExtension(formattedNumber, ext, metadata, formatExtension2) {
  return ext ? formatExtension2(formattedNumber, ext, metadata) : formattedNumber;
}
function formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {
  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata);
  if (fromCountryCallingCode === countryCallingCode) {
    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, "NATIONAL", metadata);
    if (countryCallingCode === "1") {
      return countryCallingCode + " " + formattedNumber;
    }
    return formattedNumber;
  }
  var iddPrefix = getIddPrefix(fromCountry, void 0, metadata.metadata);
  if (iddPrefix) {
    return "".concat(iddPrefix, " ").concat(countryCallingCode, " ").concat(formatNationalNumber(nationalNumber, null, "INTERNATIONAL", metadata));
  }
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;
var PhoneNumber = function() {
  function PhoneNumber2(countryOrCountryCallingCode, nationalNumber, metadata) {
    _classCallCheck3(this, PhoneNumber2);
    if (!countryOrCountryCallingCode) {
      throw new TypeError("`country` or `countryCallingCode` not passed");
    }
    if (!nationalNumber) {
      throw new TypeError("`nationalNumber` not passed");
    }
    if (!metadata) {
      throw new TypeError("`metadata` not passed");
    }
    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata), country = _getCountryAndCountry.country, countryCallingCode = _getCountryAndCountry.countryCallingCode;
    this.country = country;
    this.countryCallingCode = countryCallingCode;
    this.nationalNumber = nationalNumber;
    this.number = "+" + this.countryCallingCode + this.nationalNumber;
    this.metadata = metadata;
  }
  _createClass3(PhoneNumber2, [{
    key: "setExt",
    value: function setExt(ext) {
      this.ext = ext;
    }
  }, {
    key: "getPossibleCountries",
    value: function getPossibleCountries() {
      if (this.country) {
        return [this.country];
      }
      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.metadata);
    }
  }, {
    key: "isPossible",
    value: function isPossible() {
      return isPossiblePhoneNumber(this, {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "isValid",
    value: function isValid() {
      return isValidNumber(this, {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "isNonGeographic",
    value: function isNonGeographic() {
      var metadata = new Metadata(this.metadata);
      return metadata.isNonGeographicCallingCode(this.countryCallingCode);
    }
  }, {
    key: "isEqual",
    value: function isEqual(phoneNumber) {
      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;
    }
    // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,
    // but later it was found out that it doesn't include the possible `TOO_SHORT` result
    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,
    // so eventually I simply commented out this method from the `PhoneNumber` class
    // and just left the `validatePhoneNumberLength()` function, even though that one would require
    // and additional step to also validate the actual country / calling code of the phone number.
    // validateLength() {
    // 	const metadata = new Metadata(this.metadata)
    // 	metadata.selectNumberingPlan(this.countryCallingCode)
    // 	const result = checkNumberLength(this.nationalNumber, metadata)
    // 	if (result !== 'IS_POSSIBLE') {
    // 		return result
    // 	}
    // }
  }, {
    key: "getType",
    value: function getType2() {
      return getNumberType(this, {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "format",
    value: function format3(_format, options) {
      return formatNumber(this, _format, options ? _objectSpread2(_objectSpread2({}, options), {}, {
        v2: true
      }) : {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "formatNational",
    value: function formatNational(options) {
      return this.format("NATIONAL", options);
    }
  }, {
    key: "formatInternational",
    value: function formatInternational(options) {
      return this.format("INTERNATIONAL", options);
    }
  }, {
    key: "getURI",
    value: function getURI(options) {
      return this.format("RFC3966", options);
    }
  }]);
  return PhoneNumber2;
}();
var isCountryCode = function isCountryCode2(value) {
  return /^[A-Z]{2}$/.test(value);
};
function getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {
  var country;
  var countryCallingCode;
  var metadata = new Metadata(metadataJson);
  if (isCountryCode(countryOrCountryCallingCode)) {
    country = countryOrCountryCallingCode;
    metadata.selectNumberingPlan(country);
    countryCallingCode = metadata.countryCallingCode();
  } else {
    countryCallingCode = countryOrCountryCallingCode;
    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {
        country = "001";
      }
    }
  }
  return {
    country,
    countryCallingCode
  };
}
var CAPTURING_DIGIT_PATTERN = new RegExp("([" + VALID_DIGITS + "])");
function stripIddPrefix(number, country, callingCode, metadata) {
  if (!country) {
    return;
  }
  var countryMetadata = new Metadata(metadata);
  countryMetadata.selectNumberingPlan(country, callingCode);
  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());
  if (number.search(IDDPrefixPattern) !== 0) {
    return;
  }
  number = number.slice(number.match(IDDPrefixPattern)[0].length);
  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);
  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {
    if (matchedGroups[1] === "0") {
      return;
    }
  }
  return number;
}
function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {
  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {
    var prefixPattern = new RegExp("^(?:" + metadata.numberingPlan.nationalPrefixForParsing() + ")");
    var prefixMatch = prefixPattern.exec(number);
    if (prefixMatch) {
      var nationalNumber;
      var carrierCode;
      var capturedGroupsCount = prefixMatch.length - 1;
      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];
      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {
        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule());
        if (capturedGroupsCount > 1) {
          carrierCode = prefixMatch[1];
        }
      } else {
        var prefixBeforeNationalNumber = prefixMatch[0];
        nationalNumber = number.slice(prefixBeforeNationalNumber.length);
        if (hasCapturedGroups) {
          carrierCode = prefixMatch[1];
        }
      }
      var nationalPrefix;
      if (hasCapturedGroups) {
        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);
        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup);
        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {
          nationalPrefix = metadata.numberingPlan.nationalPrefix();
        }
      } else {
        nationalPrefix = prefixMatch[0];
      }
      return {
        nationalNumber,
        nationalPrefix,
        carrierCode
      };
    }
  }
  return {
    nationalNumber: number
  };
}
function extractNationalNumber(number, metadata) {
  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata), carrierCode = _extractNationalNumbe.carrierCode, nationalNumber = _extractNationalNumbe.nationalNumber;
  if (nationalNumber !== number) {
    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {
      return {
        nationalNumber: number
      };
    }
    if (metadata.possibleLengths()) {
      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {
        return {
          nationalNumber: number
        };
      }
    }
  }
  return {
    nationalNumber,
    carrierCode
  };
}
function shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {
  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {
    return false;
  }
  return true;
}
function isPossibleIncompleteNationalNumber(nationalNumber, metadata) {
  switch (checkNumberLength(nationalNumber, metadata)) {
    case "TOO_SHORT":
    case "INVALID_LENGTH":
      return false;
    default:
      return true;
  }
}
function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {
  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;
  if (number.indexOf(countryCallingCode) === 0) {
    metadata = new Metadata(metadata);
    metadata.selectNumberingPlan(country, callingCode);
    var possibleShorterNumber = number.slice(countryCallingCode.length);
    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata), possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;
    var _extractNationalNumbe2 = extractNationalNumber(number, metadata), nationalNumber = _extractNationalNumbe2.nationalNumber;
    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === "TOO_LONG") {
      return {
        countryCallingCode,
        number: possibleShorterNumber
      };
    }
  }
  return {
    number
  };
}
function extractCountryCallingCode(number, country, callingCode, metadata) {
  if (!number) {
    return {};
  }
  if (number[0] !== "+") {
    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata);
    if (numberWithoutIDD && numberWithoutIDD !== number) {
      number = "+" + numberWithoutIDD;
    } else {
      if (country || callingCode) {
        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata), countryCallingCode = _extractCountryCallin.countryCallingCode, shorterNumber = _extractCountryCallin.number;
        if (countryCallingCode) {
          return {
            countryCallingCode,
            number: shorterNumber
          };
        }
      }
      return {
        number
      };
    }
  }
  if (number[1] === "0") {
    return {};
  }
  metadata = new Metadata(metadata);
  var i2 = 2;
  while (i2 - 1 <= MAX_LENGTH_COUNTRY_CODE && i2 <= number.length) {
    var _countryCallingCode = number.slice(1, i2);
    if (metadata.hasCallingCode(_countryCallingCode)) {
      metadata.selectNumberingPlan(_countryCallingCode);
      return {
        countryCallingCode: _countryCallingCode,
        number: number.slice(i2)
      };
    }
    i2++;
  }
  return {};
}
function _createForOfIteratorHelperLoose6(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (it2)
    return (it2 = it2.call(o2)).next.bind(it2);
  if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray6(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
    if (it2)
      o2 = it2;
    var i2 = 0;
    return function() {
      if (i2 >= o2.length)
        return { done: true };
      return { done: false, value: o2[i2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray6(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray6(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray6(o2, minLen);
}
function _arrayLikeToArray6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata) {
  metadata = new Metadata(metadata);
  for (var _iterator = _createForOfIteratorHelperLoose6(possibleCountries), _step; !(_step = _iterator()).done; ) {
    var country = _step.value;
    metadata.country(country);
    if (metadata.leadingDigits()) {
      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {
        return country;
      }
    } else if (getNumberType({
      phone: nationalPhoneNumber,
      country
    }, void 0, metadata.metadata)) {
      return country;
    }
  }
}
var USE_NON_GEOGRAPHIC_COUNTRY_CODE2 = false;
function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {
  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE2) {
    if (metadata.isNonGeographicCallingCode(callingCode)) {
      return "001";
    }
  }
  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);
  if (!possibleCountries) {
    return;
  }
  if (possibleCountries.length === 1) {
    return possibleCountries[0];
  }
  return getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata.metadata);
}
var MAX_INPUT_STRING_LENGTH = 250;
var PHONE_NUMBER_START_PATTERN = new RegExp("[" + PLUS_CHARS + VALID_DIGITS + "]");
var AFTER_PHONE_NUMBER_END_PATTERN = new RegExp("[^" + VALID_DIGITS + "#]+$");
var USE_NON_GEOGRAPHIC_COUNTRY_CODE3 = false;
function parse(text, options, metadata) {
  options = options || {};
  metadata = new Metadata(metadata);
  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {
    if (options.v2) {
      throw new ParseError("INVALID_COUNTRY");
    }
    throw new Error("Unknown country: ".concat(options.defaultCountry));
  }
  var _parseInput = parseInput(text, options.v2, options.extract), formattedPhoneNumber = _parseInput.number, ext = _parseInput.ext, error = _parseInput.error;
  if (!formattedPhoneNumber) {
    if (options.v2) {
      if (error === "TOO_SHORT") {
        throw new ParseError("TOO_SHORT");
      }
      throw new ParseError("NOT_A_NUMBER");
    }
    return {};
  }
  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata), country = _parsePhoneNumber.country, nationalNumber = _parsePhoneNumber.nationalNumber, countryCallingCode = _parsePhoneNumber.countryCallingCode, carrierCode = _parsePhoneNumber.carrierCode;
  if (!metadata.hasSelectedNumberingPlan()) {
    if (options.v2) {
      throw new ParseError("INVALID_COUNTRY");
    }
    return {};
  }
  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {
    if (options.v2) {
      throw new ParseError("TOO_SHORT");
    }
    return {};
  }
  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {
    if (options.v2) {
      throw new ParseError("TOO_LONG");
    }
    return {};
  }
  if (options.v2) {
    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);
    if (country) {
      phoneNumber.country = country;
    }
    if (carrierCode) {
      phoneNumber.carrierCode = carrierCode;
    }
    if (ext) {
      phoneNumber.ext = ext;
    }
    return phoneNumber;
  }
  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;
  if (!options.extended) {
    return valid ? result(country, nationalNumber, ext) : {};
  }
  return {
    country,
    countryCallingCode,
    carrierCode,
    valid,
    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,
    phone: nationalNumber,
    ext
  };
}
function extractFormattedPhoneNumber(text, extract, throwOnError) {
  if (!text) {
    return;
  }
  if (text.length > MAX_INPUT_STRING_LENGTH) {
    if (throwOnError) {
      throw new ParseError("TOO_LONG");
    }
    return;
  }
  if (extract === false) {
    return text;
  }
  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);
  if (startsAt < 0) {
    return;
  }
  return text.slice(startsAt).replace(AFTER_PHONE_NUMBER_END_PATTERN, "");
}
function parseInput(text, v2, extract) {
  if (text && text.indexOf("tel:") === 0) {
    return parseRFC3966(text);
  }
  var number = extractFormattedPhoneNumber(text, extract, v2);
  if (!number) {
    return {};
  }
  if (!isViablePhoneNumber(number)) {
    if (isViablePhoneNumberStart(number)) {
      return {
        error: "TOO_SHORT"
      };
    }
    return {};
  }
  var withExtensionStripped = extractExtension(number);
  if (withExtensionStripped.ext) {
    return withExtensionStripped;
  }
  return {
    number
  };
}
function result(country, nationalNumber, ext) {
  var result2 = {
    country,
    phone: nationalNumber
  };
  if (ext) {
    result2.ext = ext;
  }
  return result2;
}
function parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {
  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata), countryCallingCode = _extractCountryCallin.countryCallingCode, number = _extractCountryCallin.number;
  var country;
  if (countryCallingCode) {
    metadata.selectNumberingPlan(countryCallingCode);
  } else if (number && (defaultCountry || defaultCallingCode)) {
    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);
    if (defaultCountry) {
      country = defaultCountry;
    } else {
      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE3) {
        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {
          country = "001";
        }
      }
    }
    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);
  } else
    return {};
  if (!number) {
    return {
      countryCallingCode
    };
  }
  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata), nationalNumber = _extractNationalNumbe.nationalNumber, carrierCode = _extractNationalNumbe.carrierCode;
  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);
  if (exactCountry) {
    country = exactCountry;
    if (exactCountry === "001") {
    } else {
      metadata.country(country);
    }
  }
  return {
    country,
    countryCallingCode,
    nationalNumber,
    carrierCode
  };
}
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function parsePhoneNumberWithError(text, options, metadata) {
  return parse(text, _objectSpread3(_objectSpread3({}, options), {}, {
    v2: true
  }), metadata);
}
function _typeof3(obj) {
  "@babel/helpers - typeof";
  return _typeof3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof3(obj);
}
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread4(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys4(Object(source), true).forEach(function(key) {
      _defineProperty4(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys4(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray2(arr, i2) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray7(arr, i2) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray7(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray7(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray7(o2, minLen);
}
function _arrayLikeToArray7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i2) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e2;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e2 = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function normalizeArguments(args) {
  var _Array$prototype$slic = Array.prototype.slice.call(args), _Array$prototype$slic2 = _slicedToArray2(_Array$prototype$slic, 4), arg_1 = _Array$prototype$slic2[0], arg_2 = _Array$prototype$slic2[1], arg_3 = _Array$prototype$slic2[2], arg_4 = _Array$prototype$slic2[3];
  var text;
  var options;
  var metadata;
  if (typeof arg_1 === "string") {
    text = arg_1;
  } else
    throw new TypeError("A text for parsing must be a string.");
  if (!arg_2 || typeof arg_2 === "string") {
    if (arg_4) {
      options = arg_3;
      metadata = arg_4;
    } else {
      options = void 0;
      metadata = arg_3;
    }
    if (arg_2) {
      options = _objectSpread4({
        defaultCountry: arg_2
      }, options);
    }
  } else if (isObject(arg_2)) {
    if (arg_3) {
      options = arg_2;
      metadata = arg_3;
    } else {
      metadata = arg_2;
    }
  } else
    throw new Error("Invalid second argument: ".concat(arg_2));
  return {
    text,
    options,
    metadata
  };
}
var isObject = function isObject2(_2) {
  return _typeof3(_2) === "object";
};
function parsePhoneNumberWithError2() {
  var _normalizeArguments = normalizeArguments(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
  return parsePhoneNumberWithError(text, options, metadata);
}
function ownKeys5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread5(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys5(Object(source), true).forEach(function(key) {
      _defineProperty5(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys5(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function parsePhoneNumber2(text, options, metadata) {
  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {
    options = _objectSpread5(_objectSpread5({}, options), {}, {
      defaultCountry: void 0
    });
  }
  try {
    return parsePhoneNumberWithError(text, options, metadata);
  } catch (error) {
    if (error instanceof ParseError) {
    } else {
      throw error;
    }
  }
}
function ownKeys6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread6(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys6(Object(source), true).forEach(function(key) {
      _defineProperty6(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys6(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function isValidPhoneNumber() {
  var _normalizeArguments = normalizeArguments(arguments), text = _normalizeArguments.text, options = _normalizeArguments.options, metadata = _normalizeArguments.metadata;
  options = _objectSpread6(_objectSpread6({}, options), {}, {
    extract: false
  });
  var phoneNumber = parsePhoneNumber2(text, options, metadata);
  return phoneNumber && phoneNumber.isValid() || false;
}
function parsePhoneNumberWithError3() {
  return withMetadataArgument(parsePhoneNumberWithError2, arguments);
}
function isValidPhoneNumber2() {
  return withMetadataArgument(isValidPhoneNumber, arguments);
}
function addressEllipsis(str, index) {
  index = index || 6;
  if (!str || str.length < 11) {
    return str;
  }
  return str.slice(0, index) + "..." + str.slice(str.length - index);
}
function formatTelegramForSubscription(telegramId) {
  if (telegramId.startsWith("@")) {
    return telegramId.slice(1);
  }
  return telegramId;
}
function prefixCharacter(value, character) {
  return character + value;
}
function prefixTelegramWithSymbol(telegramId) {
  if (telegramId.startsWith("@")) {
    return telegramId;
  }
  return prefixCharacter(telegramId, "@");
}
var walletToSourceType = (wallet) => {
  switch (wallet == null ? void 0 : wallet.walletBlockchain) {
    case "ACALA":
      return "ACALA_WALLET";
    case "APTOS":
      return "APTOS_WALLET";
    case "ARBITRUM":
      return "ARBITRUM_WALLET";
    case "AVALANCHE":
      return "AVALANCHE_WALLET";
    case "BINANCE":
      return "BINANCE_WALLET";
    case "ETHEREUM":
      return "ETHEREUM_WALLET";
    case "BASE":
      return "ETHEREUM_WALLET";
    case "POLYGON":
      return "POLYGON_WALLET";
    case "SOLANA":
      return "SOLANA_WALLET";
    case "OPTIMISM":
      return "OPTIMISM_WALLET";
    case "SUI":
      return "SUI_WALLET";
    case "ZKSYNC":
      return "ZKSYNC_WALLET";
    default:
      throw new Error("Unsupported walletType");
  }
};
var walletToSourceAddress = (wallet) => {
  if ((wallet == null ? void 0 : wallet.address) === null) {
    throw new Error("Invalid connected wallet");
  }
  return wallet == null ? void 0 : wallet.address;
};
var walletToSource = (wallet) => {
  const sourceAddress = walletToSourceAddress(wallet);
  const sourceType = walletToSourceType(wallet);
  return {
    name: `${sourceType} ${sourceAddress}`,
    blockchainAddress: sourceAddress,
    type: sourceType
  };
};
var hasKey = (obj, key) => {
  return typeof obj === "object" && obj !== null && key in obj;
};
var useNotifiSubscribe = ({ targetGroupName = "Default" }) => {
  const { demoPreview } = useNotifiDemoPreviewContext();
  const { isUsingFrontendClient } = useNotifiClientContext();
  const { client } = useNotifiClientContext();
  const {
    formState,
    setEmail: setFormEmail,
    setTelegram: setFormTelegram,
    setPhoneNumber: setFormPhoneNumber
  } = useNotifiForm();
  const {
    email: formEmail,
    telegram: formTelegram,
    phoneNumber: formPhoneNumber
  } = formState;
  const {
    params,
    setAlerts,
    setConnectedWallets,
    setEmail,
    setLoading,
    setPhoneNumber,
    setTelegramId,
    setPhoneNumberErrorMessage,
    useHardwareWallet,
    resetErrorMessageState,
    setTelegramErrorMessage,
    setEmailErrorMessage,
    setDiscordErrorMessage,
    setUseDiscord,
    useDiscord,
    setDiscordTargetData,
    discordTargetData: discordTargetDatafromSubscriptionContext
  } = useNotifiSubscriptionContext();
  const { keepSubscriptionData = true, walletPublicKey } = params;
  const [isEmailConfirmationSent, setIsEmailConfirmationSent] = (0, import_react10.useState)(false);
  const resendEmailVerificationLink = (0, import_react10.useCallback)(
    async (emailId) => {
      const resend = await client.sendEmailTargetVerification({
        targetId: emailId
      });
      return resend;
    },
    [client.sendEmailTargetVerification]
  );
  const handleMissingDiscordTarget = (discordTargets) => {
    const target = (discordTargets == null ? void 0 : discordTargets.find((target2) => target2.name === "Default")) || (discordTargets == null ? void 0 : discordTargets[0]);
    setDiscordTargetData(target);
  };
  const render = (0, import_react10.useCallback)(
    (newData) => {
      var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
      const targetGroup = newData == null ? void 0 : newData.targetGroups.find(
        (tg) => tg.name === targetGroupName
      );
      const alerts = {};
      newData == null ? void 0 : newData.alerts.forEach((alert) => {
        if (alert == null ? void 0 : alert.name) {
          alerts[alert.name] = alert;
        }
      });
      setAlerts(alerts);
      setConnectedWallets((_a = newData == null ? void 0 : newData.connectedWallets) != null ? _a : []);
      const emailTarget = (_c = (_b = targetGroup == null ? void 0 : targetGroup.emailTargets) == null ? void 0 : _b[0]) != null ? _c : null;
      const emailToSet = (_d = emailTarget == null ? void 0 : emailTarget.emailAddress) != null ? _d : "";
      if (emailTarget !== null && (emailTarget == null ? void 0 : emailTarget.isConfirmed) === false) {
        setEmailErrorMessage({
          type: "recoverableError",
          onClick: () => {
            var _a2;
            resendEmailVerificationLink((_a2 = emailTarget.id) != null ? _a2 : "");
          },
          message: "Resend Link"
        });
      } else {
        setEmailErrorMessage(void 0);
      }
      setFormEmail(emailToSet);
      setEmail(emailToSet);
      const phoneNumber = (_g = (_f = (_e2 = targetGroup == null ? void 0 : targetGroup.smsTargets) == null ? void 0 : _e2[0]) == null ? void 0 : _f.phoneNumber) != null ? _g : null;
      const isPhoneNumberConfirmed = (_j = (_i = (_h = targetGroup == null ? void 0 : targetGroup.smsTargets) == null ? void 0 : _h[0]) == null ? void 0 : _i.isConfirmed) != null ? _j : null;
      const phoneNumberToSet = phoneNumber != null ? phoneNumber : "";
      if (!isPhoneNumberConfirmed) {
        setPhoneNumberErrorMessage({
          type: "unrecoverableError",
          message: "Messages stopped",
          tooltip: `Please text 'start' to the following number:
${params.env === "Production" ? "+1 206 222 3465" : "+1 253 880 1477 "}`
        });
      }
      setFormPhoneNumber(phoneNumberToSet);
      setPhoneNumber(phoneNumberToSet);
      const telegramTarget = (_k = targetGroup == null ? void 0 : targetGroup.telegramTargets) == null ? void 0 : _k[0];
      const telegramId = telegramTarget == null ? void 0 : telegramTarget.telegramId;
      const telegramIdWithSymbolAdded = telegramId !== "" && (telegramId == null ? void 0 : telegramId.length) ? prefixTelegramWithSymbol(telegramId) : null;
      setFormTelegram(telegramId != null ? telegramId : "");
      setTelegramId(telegramIdWithSymbolAdded != null ? telegramIdWithSymbolAdded : "");
      if ((telegramTarget == null ? void 0 : telegramTarget.isConfirmed) === false) {
        setTelegramErrorMessage({
          type: "recoverableError",
          onClick: () => {
            if (!(telegramTarget == null ? void 0 : telegramTarget.confirmationUrl)) {
              return;
            }
            window.open(telegramTarget == null ? void 0 : telegramTarget.confirmationUrl);
          },
          message: "Verify ID"
        });
      } else {
        setTelegramErrorMessage(void 0);
      }
      const discordTarget = (_l = targetGroup == null ? void 0 : targetGroup.discordTargets) == null ? void 0 : _l.find(
        (it2) => (it2 == null ? void 0 : it2.name) === "Default"
      );
      const discordId = discordTarget == null ? void 0 : discordTarget.id;
      if (discordId) {
        const {
          isConfirmed,
          userStatus,
          verificationLink,
          discordServerInviteLink
        } = discordTarget;
        if (!isConfirmed) {
          setDiscordErrorMessage({
            type: "recoverableError",
            onClick: () => window.open(verificationLink, "_blank"),
            message: "Enable Bot"
          });
        } else if (userStatus === "DISCORD_SERVER_NOT_JOINED") {
          setDiscordErrorMessage({
            type: "recoverableError",
            onClick: () => window.open(discordServerInviteLink, "_blank"),
            message: "Join Server"
          });
        } else {
          setDiscordErrorMessage(void 0);
        }
        setUseDiscord(true);
        setDiscordTargetData(discordTarget);
      } else {
        handleMissingDiscordTarget((_m = newData == null ? void 0 : newData.discordTargets) != null ? _m : []);
        setUseDiscord(false);
      }
      return {
        alerts,
        email: (_n = emailTarget == null ? void 0 : emailTarget.emailAddress) != null ? _n : null,
        isPhoneNumberConfirmed,
        phoneNumber,
        telegramConfirmationUrl: (_o = telegramTarget == null ? void 0 : telegramTarget.confirmationUrl) != null ? _o : null,
        telegramId: (_p = telegramTarget == null ? void 0 : telegramTarget.telegramId) != null ? _p : null,
        discordId: (_q = discordTarget == null ? void 0 : discordTarget.id) != null ? _q : null
      };
    },
    [
      setAlerts,
      setEmail,
      setPhoneNumber,
      setTelegramId,
      setIsEmailConfirmationSent
    ]
  );
  const copyAuths = (0, import_react10.useCallback)(
    async (data) => {
      if (params.multiWallet !== void 0) {
        params.multiWallet.ownedWallets.forEach((wallet) => {
          const key = "accountAddress";
          const address = hasKey(wallet, key) ? wallet[key] : wallet.walletPublicKey;
          if (data.connectedWallets.find(
            (cw) => (cw == null ? void 0 : cw.address) === address && (cw == null ? void 0 : cw.walletBlockchain) === wallet.walletBlockchain
          ) !== void 0) {
            client.copyAuthorization(wallet.walletPublicKey).catch(console.log);
          }
        });
      }
    },
    [client, params]
  );
  const didFetch = (0, import_react10.useRef)(false);
  (0, import_react10.useEffect)(() => {
    var _a;
    if (demoPreview) {
      setEmail(defaultDemoConfigV1.name);
      setPhoneNumber("+101234567890");
      setTelegramId((_a = defaultDemoConfigV1.id) != null ? _a : "testTelegramId");
      setUseDiscord(true);
    }
    if (client.isAuthenticated && !didFetch.current && !isUsingFrontendClient) {
      didFetch.current = true;
      client.fetchData().then((data) => {
        copyAuths(data);
        render(data);
      }).catch((_e2) => {
      });
    }
  }, [client.isAuthenticated]);
  const logInViaHardwareWallet = (0, import_react10.useCallback)(async () => {
    if (demoPreview) {
      throw new Error("Preview card does not support method call");
    }
    if (params.walletBlockchain !== "SOLANA") {
      throw new Error("Unsupported wallet blockchain");
    }
    const plugin = params.hardwareLoginPlugin;
    const { logValue } = await client.beginLoginViaTransaction();
    const signature = await plugin.sendMessage(logValue);
    await client.completeLoginViaTransaction({
      transactionSignature: signature
    });
    const newData = await client.fetchData();
    return render(newData);
  }, [walletPublicKey, client, params, render]);
  const reload = (0, import_react10.useCallback)(async () => {
    const newData = await client.fetchData(true);
    copyAuths(newData);
    const results = render(newData);
    return results;
  }, [client.fetchData, copyAuths, render]);
  const logIn = (0, import_react10.useCallback)(async () => {
    if (demoPreview)
      throw new Error("Preview card does not support method call");
    if (!client.isAuthenticated) {
      if (useHardwareWallet) {
        await logInViaHardwareWallet();
      } else {
        await client.logIn(params);
      }
    }
    const newData = await client.fetchData();
    copyAuths(newData);
    const results = render(newData);
    return results;
  }, [
    client.isAuthenticated,
    client.logIn,
    client.fetchData,
    params,
    useHardwareWallet,
    logInViaHardwareWallet,
    render,
    setLoading,
    copyAuths
  ]);
  const updateAlertInternal = (0, import_react10.useCallback)(
    async (alertParams, data, contacts) => {
      var _a, _b, _c;
      if (demoPreview)
        throw Error("Preview card does not support method call");
      const { alertName, alertConfiguration } = alertParams;
      const { finalEmail, finalPhoneNumber, finalTelegramId } = contacts;
      const existingAlert = data.alerts.find(
        (alert) => (alert == null ? void 0 : alert.name) === alertName
      );
      const deleteThisAlert = async () => {
        if (existingAlert !== void 0 && existingAlert.id !== null) {
          await client.deleteAlert({
            alertId: existingAlert.id,
            keepSourceGroup: keepSubscriptionData,
            keepTargetGroup: keepSubscriptionData
          });
        }
      };
      const ensureSource = async (params2) => {
        const existing = data.sources.find(
          (s2) => s2.type === params2.type && s2.blockchainAddress === params2.blockchainAddress && s2.fusionEventTypeId === params2.fusionEventTypeId
        );
        if (existing !== void 0) {
          return existing;
        }
        const created = await client.createSource(params2);
        return created;
      };
      if (alertConfiguration === null) {
        await deleteThisAlert();
        return null;
      } else if (alertConfiguration.type === "multiple") {
        const {
          filterOptions,
          filterType,
          sources: sourcesInput,
          sourceGroupName,
          maintainSourceGroup
        } = alertConfiguration;
        const sources = await Promise.all(sourcesInput.map(ensureSource));
        const filter2 = sources.flatMap((s2) => s2.applicableFilters).find((f2) => (f2 == null ? void 0 : f2.filterType) === filterType);
        if (filter2 === void 0 || filter2.id === null) {
          await deleteThisAlert();
          throw new Error(
            `No applicableFilters filter for sources: ${JSON.stringify(
              sources
            )}`
          );
        } else {
          const sourceIds = [];
          const existingSourceGroup = data.sourceGroups.find(
            (sourceGroup) => (sourceGroup == null ? void 0 : sourceGroup.name) === (sourceGroupName != null ? sourceGroupName : alertName)
          );
          if (maintainSourceGroup && existingSourceGroup) {
            (_a = existingSourceGroup.sources) == null ? void 0 : _a.forEach((s2) => {
              const id3 = s2 == null ? void 0 : s2.id;
              if (id3 !== null && id3 !== void 0) {
                sourceIds.push(id3);
              }
            });
          } else {
            sources.forEach((s2) => {
              if (s2.id !== null) {
                sourceIds.push(s2.id);
              }
            });
          }
          await deleteThisAlert();
          const alert = await client.createAlert({
            emailAddress: finalEmail,
            filterId: filter2.id,
            filterOptions: filterOptions != null ? filterOptions : void 0,
            groupName: "managed",
            name: alertName,
            phoneNumber: finalPhoneNumber,
            sourceId: "",
            targetGroupName,
            telegramId: finalTelegramId,
            sourceIds,
            includeDiscord: useDiscord,
            sourceGroupName
          });
          return alert;
        }
      } else {
        const {
          createSource: createSourceParam,
          filterOptions,
          filterType,
          sourceType,
          sourceGroupName,
          maintainSourceGroup
        } = alertConfiguration;
        let source;
        if (createSourceParam !== void 0) {
          const eventTypeId = createSourceParam.fusionEventTypeId;
          const address = createSourceParam.address;
          const name = eventTypeId !== void 0 ? `${eventTypeId}:;:${address}` : address;
          source = await ensureSource({
            name,
            blockchainAddress: address,
            type: sourceType,
            fusionEventTypeId: eventTypeId
          });
        } else {
          source = data.sources.find((s2) => s2.type === sourceType);
        }
        const filter2 = (_b = source == null ? void 0 : source.applicableFilters) == null ? void 0 : _b.find(
          (f2) => (f2 == null ? void 0 : f2.filterType) === filterType
        );
        if (source === void 0 || source.id === null || filter2 === void 0 || filter2.id === null) {
          await deleteThisAlert();
          throw new Error(
            `No applicableFilters filter for source: ${JSON.stringify(source)}`
          );
        } else if (existingAlert !== void 0 && existingAlert.id !== null && existingAlert.filterOptions === JSON.stringify(filterOptions)) {
          const alert = await client.updateAlert({
            alertId: existingAlert.id,
            emailAddress: finalEmail,
            phoneNumber: finalPhoneNumber,
            telegramId: finalTelegramId,
            includeDiscord: useDiscord
          });
          return alert;
        } else {
          const sourceIds = [];
          const existingSourceGroup = data.sourceGroups.find(
            (sourceGroup) => (sourceGroup == null ? void 0 : sourceGroup.name) === (sourceGroupName != null ? sourceGroupName : alertName)
          );
          if (maintainSourceGroup && existingSourceGroup) {
            (_c = existingSourceGroup.sources) == null ? void 0 : _c.forEach((s2) => {
              const id3 = s2 == null ? void 0 : s2.id;
              if (id3 !== null && id3 !== void 0) {
                sourceIds.push(id3);
              }
            });
          } else {
            sourceIds.push(source.id);
          }
          await deleteThisAlert();
          const alert = await client.createAlert({
            emailAddress: finalEmail,
            filterId: filter2.id,
            filterOptions: filterOptions != null ? filterOptions : void 0,
            groupName: "managed",
            name: alertName,
            phoneNumber: finalPhoneNumber,
            sourceId: "",
            sourceIds,
            targetGroupName,
            telegramId: finalTelegramId,
            sourceGroupName,
            includeDiscord: useDiscord
          });
          return alert;
        }
      }
    },
    []
  );
  const subscribe2 = (0, import_react10.useCallback)(
    async (alertConfigs) => {
      if (demoPreview) {
        throw new Error("Preview card does not support method call");
      }
      const configurations = __spreadValues({}, alertConfigs);
      const names = Object.keys(configurations);
      const finalEmail = formEmail === "" ? void 0 : formEmail;
      const finalTelegramId = formTelegram === "" ? void 0 : formatTelegramForSubscription(formTelegram);
      let finalPhoneNumber = void 0;
      if (isValidPhoneNumber2(formPhoneNumber)) {
        finalPhoneNumber = formPhoneNumber;
      }
      setLoading(true);
      if (!client.isAuthenticated) {
        await logIn();
      }
      const data = await client.fetchData();
      const existingDiscordTarget = data.discordTargets.find(
        (target) => target.name === "Default"
      );
      let finalDiscordId = void 0;
      if (useDiscord === true) {
        if (existingDiscordTarget !== void 0) {
          finalDiscordId = existingDiscordTarget.id;
        } else {
          finalDiscordId = await client.createDiscordTarget("Default");
        }
      }
      const newResults = {};
      for (let i2 = 0; i2 < names.length; ++i2) {
        const name = names[i2];
        const config = configurations[name];
        let alert = null;
        try {
          alert = await updateAlertInternal(
            {
              alertName: name,
              alertConfiguration: config
            },
            data,
            {
              finalEmail,
              finalPhoneNumber,
              finalTelegramId,
              finalDiscordId
            }
          );
        } catch (e) {
          console.log(`Error updating alert ${name}: ${e}`);
        }
        if (alert !== null) {
          newResults[name] = alert;
        }
      }
      if (Object.getOwnPropertyNames(newResults).length === 0 && keepSubscriptionData) {
        await client.ensureTargetGroup({
          emailAddress: finalEmail,
          name: targetGroupName,
          phoneNumber: finalPhoneNumber,
          telegramId: finalTelegramId,
          includeDiscord: useDiscord
        });
      }
      const newData = await client.fetchData();
      const results = render(newData);
      setLoading(false);
      return results;
    },
    [client, formEmail, formPhoneNumber, formTelegram, logIn, setLoading]
  );
  const updateTargetGroups = (0, import_react10.useCallback)(async () => {
    resetErrorMessageState();
    if (demoPreview) {
      throw new Error("Preview card does not support method call");
    }
    const finalEmail = formEmail === "" ? void 0 : formEmail;
    const finalTelegramId = formTelegram === "" ? void 0 : formatTelegramForSubscription(formTelegram);
    let finalPhoneNumber = void 0;
    if (isValidPhoneNumber2(formPhoneNumber)) {
      finalPhoneNumber = formPhoneNumber;
    }
    setLoading(true);
    if (!client.isAuthenticated) {
      await logIn();
    }
    await client.ensureTargetGroup({
      emailAddress: finalEmail,
      name: targetGroupName,
      phoneNumber: finalPhoneNumber,
      telegramId: finalTelegramId,
      includeDiscord: useDiscord
    });
    const newData = await client.fetchData();
    const results = render(newData);
    setLoading(false);
    return results;
  }, [
    client,
    formEmail,
    formPhoneNumber,
    formTelegram,
    render,
    setLoading,
    useDiscord
  ]);
  const instantSubscribe = (0, import_react10.useCallback)(
    async (alertData) => {
      if (demoPreview)
        throw new Error("Preview card does not support method call");
      const finalEmail = formEmail === "" ? void 0 : formEmail;
      const finalTelegramId = formTelegram === "" ? void 0 : formatTelegramForSubscription(formTelegram);
      let finalPhoneNumber = void 0;
      if (isValidPhoneNumber2(formPhoneNumber)) {
        finalPhoneNumber = formPhoneNumber;
      }
      const finalDiscordId = useDiscord === false || !(discordTargetDatafromSubscriptionContext == null ? void 0 : discordTargetDatafromSubscriptionContext.id) ? void 0 : discordTargetDatafromSubscriptionContext == null ? void 0 : discordTargetDatafromSubscriptionContext.id;
      try {
        setLoading(true);
        await logIn();
        const data = await client.fetchData();
        const alert = await updateAlertInternal(alertData, data, {
          finalEmail,
          finalPhoneNumber,
          finalTelegramId,
          finalDiscordId
        });
        if (alert === null && keepSubscriptionData) {
          await client.ensureTargetGroup({
            emailAddress: finalEmail,
            name: targetGroupName,
            phoneNumber: finalPhoneNumber,
            telegramId: finalTelegramId,
            includeDiscord: useDiscord
          });
        }
      } catch (e) {
        throw new Error(`Something went wrong: ${e}`);
      } finally {
        setLoading(false);
      }
      const newData = await client.fetchData();
      const results = render(newData);
      return results;
    },
    [
      client,
      formEmail,
      formPhoneNumber,
      formTelegram,
      logIn,
      setLoading,
      subscribe2,
      render
    ]
  );
  const subscribeWallet = (0, import_react10.useCallback)(
    async (params2) => {
      if (demoPreview)
        throw new Error("Preview card does not support method call");
      setLoading(true);
      try {
        if (!client.isAuthenticated) {
          await logIn();
        }
        await client.connectWallet(params2);
        const newData = await client.fetchData();
        await client.ensureSourceGroup({
          name: "User Wallets",
          sources: newData.connectedWallets.map(walletToSource)
        });
        const finalData = await client.fetchData();
        copyAuths(finalData);
        render(finalData);
      } finally {
        setLoading(false);
      }
    },
    [client, logIn, setLoading, setConnectedWallets]
  );
  const updateWallets = (0, import_react10.useCallback)(async () => {
    setLoading(true);
    if (demoPreview)
      throw new Error("Preview card does not support method call");
    try {
      if (!client.isAuthenticated) {
        await logIn();
      }
      const newData = await client.fetchData();
      await client.ensureSourceGroup({
        name: "User Wallets",
        sources: newData.connectedWallets.map(walletToSource)
      });
      const finalData = await client.fetchData();
      render(finalData);
    } finally {
      setLoading(false);
    }
  }, [client, logIn, setLoading, render]);
  return {
    isEmailConfirmationSent,
    resendEmailVerificationLink,
    instantSubscribe,
    isAuthenticated: client.isAuthenticated,
    isInitialized: client.isInitialized,
    isTokenExpired: client.isTokenExpired,
    logIn,
    subscribe: subscribe2,
    updateTargetGroups,
    subscribeWallet,
    updateWallets,
    reload
  };
};
var useSubscriptionCard = (input) => {
  const [state, setState] = (0, import_react11.useState)({
    state: "loading"
  });
  const { demoPreview } = useNotifiDemoPreviewContext();
  const { client, isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  (0, import_react11.useEffect)(() => {
    if (demoPreview) {
      return setState(() => ({
        state: "fetched",
        data: demoPreview.data
      }));
    }
    let card;
    setState({ state: "loading" });
    (isUsingFrontendClient ? frontendClient : client).fetchSubscriptionCard(input).then((result2) => {
      if ("dataJson" in result2) {
        if (!result2.dataJson) {
          return Promise.reject(new Error("Failed to fetch data"));
        }
        card = JSON.parse(result2.dataJson);
      } else if ("version" in result2 && result2.version !== "IntercomV1") {
        card = result2;
      }
      if ((card == null ? void 0 : card.version) !== "v1") {
        return Promise.reject(new Error("Unsupported config format"));
      }
      setState({
        state: "fetched",
        data: card
      });
    }).catch((error) => {
      setState({
        state: "error",
        reason: error
      });
    });
  }, [input.id, input.type, demoPreview, isUsingFrontendClient]);
  return state;
};
var useFetchedCardState = () => {
  const [cardView, setCardView] = (0, import_react12.useState)({
    state: "history"
  });
  return {
    cardView,
    setCardView
  };
};
var useUnreadState = () => {
  var _a;
  const { frontendClient, isUsingFrontendClient } = useNotifiClientContext();
  if (!isUsingFrontendClient)
    throw new Error(
      "Number badge is only available when frontendClient is enabled"
    );
  const {
    params: { walletPublicKey }
  } = useNotifiSubscriptionContext();
  const [unreadNotificationCount, setUnreadNotificationCount] = (0, import_react13.useState)(0);
  const hasUnreadNotification = (0, import_react13.useMemo)(
    () => unreadNotificationCount > 0 ? true : false,
    [unreadNotificationCount]
  );
  const { isClientAuthenticated } = (0, import_react13.useMemo)(() => {
    var _a2;
    return {
      isClientAuthenticated: ((_a2 = frontendClient.userState) == null ? void 0 : _a2.status) === "authenticated"
    };
  }, [(_a = frontendClient.userState) == null ? void 0 : _a.status]);
  (0, import_react13.useEffect)(() => {
    if (!walletPublicKey || !isClientAuthenticated)
      return;
    frontendClient.getUnreadNotificationHistoryCount().then((res) => {
      const unreadNotificationCount2 = res.count;
      setUnreadNotificationCount(unreadNotificationCount2);
    }).catch((_e2) => {
    });
    const interval = setInterval(() => {
      if (!walletPublicKey || !isClientAuthenticated)
        return;
      frontendClient.getUnreadNotificationHistoryCount().then((res) => {
        const unreadNotificationCount2 = res.count;
        setUnreadNotificationCount(unreadNotificationCount2);
      });
    }, Math.floor(Math.random() * 5e3) + 5e3);
    return () => clearInterval(interval);
  }, [isClientAuthenticated, walletPublicKey, isUsingFrontendClient]);
  return { hasUnreadNotification, unreadNotificationCount };
};
var useFrontendClientLogin = () => {
  const { params, frontendClient, updateFrontendClientStatus } = useNotifiClientContext();
  const { useHardwareWallet } = useNotifiSubscriptionContext();
  const logIn = (0, import_react14.useCallback)(async () => {
    if (useHardwareWallet && params.walletBlockchain === "SOLANA") {
      const plugin = params.hardwareLoginPlugin;
      const { nonce } = await frontendClient.beginLoginViaTransaction({
        walletAddress: params.walletPublicKey,
        walletBlockchain: params.walletBlockchain
      });
      const transactionSignature = await plugin.sendMessage(nonce);
      const logInResult = await frontendClient.completeLoginViaTransaction({
        walletAddress: params.walletPublicKey,
        walletBlockchain: params.walletBlockchain,
        transactionSignature
      });
      if ((logInResult == null ? void 0 : logInResult.completeLogInByTransaction) === void 0) {
        throw new Error("Log in failed");
      }
      updateFrontendClientStatus();
      return logInResult.completeLogInByTransaction;
    } else {
      const result2 = await frontendClient.logIn(params);
      updateFrontendClientStatus();
      return result2;
    }
  }, [useHardwareWallet, frontendClient, params]);
  return logIn;
};
var useIntercomCardState = () => {
  const [intercomCardView, setIntercomCardView] = (0, import_react15.useState)({
    state: "loadingView"
  });
  return {
    intercomCardView,
    setIntercomCardView
  };
};
var FtuStage = ((FtuStage2) => {
  FtuStage2[FtuStage2["Destination"] = 3] = "Destination";
  FtuStage2[FtuStage2["Alerts"] = 2] = "Alerts";
  FtuStage2[FtuStage2["Done"] = 1] = "Done";
  return FtuStage2;
})(FtuStage || {});
var NotifiSubscriptionContext = (0, import_react9.createContext)(
  {}
  // Intentially empty in default, use NotifiSubscriptionContextProvider
);
var hasKey2 = (obj, key) => {
  return typeof obj === "object" && obj !== null && key in obj;
};
var NotifiSubscriptionContextProvider = (_a) => {
  var _b = _a, { children } = _b, params = __objRest(_b, ["children"]);
  var _a2, _b2;
  const { frontendClient, isUsingFrontendClient } = useNotifiClientContext();
  const contextId = (0, import_react8.useMemo)(() => {
    return (/* @__PURE__ */ new Date()).toISOString();
  }, []);
  const [conversationId, setConversationId] = (0, import_react9.useState)("");
  const [userId, setUserId] = (0, import_react9.useState)("");
  const [hasChatAlert, setHasChatAlert] = (0, import_react9.useState)(false);
  const { cardView, setCardView } = useFetchedCardState();
  const { intercomCardView, setIntercomCardView } = useIntercomCardState();
  const [telegramConfirmationUrl, setTelegramConfirmationUrl] = (0, import_react9.useState)(void 0);
  const [alerts, setAlerts] = (0, import_react9.useState)({});
  const [connectedWallets, setConnectedWallets] = (0, import_react9.useState)([]);
  const [useHardwareWallet, setUseHardwareWallet] = (0, import_react9.useState)(false);
  const [useDiscord, setUseDiscord] = (0, import_react9.useState)(false);
  const [loading, setLoading] = (0, import_react9.useState)(false);
  const [email, setEmail] = (0, import_react9.useState)("");
  const [phoneNumber, setPhoneNumber] = (0, import_react9.useState)("");
  const [telegramId, setTelegramId] = (0, import_react9.useState)("");
  const [ftuStage, setFtuStage] = (0, import_react9.useState)(
    1
    /* Done */
  );
  const [discordTargetData, setDiscordTargetData] = (0, import_react9.useState)(void 0);
  const [destinationErrorMessages, setDestinationErrorMessages] = (0, import_react9.useState)({
    email: void 0,
    telegram: void 0,
    phoneNumber: void 0,
    discord: void 0
  });
  const handleErrorMessage = ({
    field,
    value: value2
  }) => {
    setDestinationErrorMessages((destinationErrorMessages2) => __spreadProps(__spreadValues({}, destinationErrorMessages2), {
      [field]: value2
    }));
  };
  const setEmailErrorMessage = (value2) => {
    handleErrorMessage({ field: "email", value: value2 });
  };
  const setTelegramErrorMessage = (value2) => {
    handleErrorMessage({ field: "telegram", value: value2 });
  };
  const setPhoneNumberErrorMessage = (value2) => {
    handleErrorMessage({ field: "phoneNumber", value: value2 });
  };
  const setDiscordErrorMessage = (value2) => {
    handleErrorMessage({ field: "discord", value: value2 });
  };
  const resetErrorMessageState = () => {
    setDestinationErrorMessages({
      email: void 0,
      telegram: void 0,
      phoneNumber: void 0,
      discord: void 0
    });
  };
  const syncFtuStage = (0, import_react9.useCallback)(
    async (isContactInfoRequired) => {
      const userSettings = await frontendClient.getUserSettings();
      if (!(userSettings == null ? void 0 : userSettings.ftuStage)) {
        if (isContactInfoRequired) {
          return await updateFtuStage(
            3
            /* Destination */
          );
        }
        return await updateFtuStage(
          2
          /* Alerts */
        );
      }
      setFtuStage(userSettings.ftuStage);
    },
    [(_a2 = frontendClient == null ? void 0 : frontendClient.userState) == null ? void 0 : _a2.status]
  );
  const updateFtuStage = (0, import_react9.useCallback)(
    async (ftuConfigStep) => {
      await frontendClient.updateUserSettings({
        input: { ftuStage: ftuConfigStep }
      });
      setFtuStage(ftuConfigStep);
    },
    [(_b2 = frontendClient == null ? void 0 : frontendClient.userState) == null ? void 0 : _b2.status]
  );
  const {
    setEmail: setFormEmail,
    setTelegram: setFormTelegram,
    setPhoneNumber: setFormPhoneNumber
  } = useNotifiForm();
  const didFetch = import_react9.default.useRef(false);
  (0, import_react9.useEffect)(() => {
    var _a3;
    if (!didFetch.current && ((_a3 = frontendClient.userState) == null ? void 0 : _a3.status) === "authenticated" && isUsingFrontendClient) {
      frontendClient.fetchData().then((data) => {
        render(data);
        copyAuths(data);
      }).catch((_e2) => {
      }).finally(() => {
        didFetch.current = true;
      });
    }
  }, [frontendClient.userState]);
  const copyAuths = (0, import_react9.useCallback)(
    async (data) => {
      if (params.multiWallet !== void 0) {
        params.multiWallet.ownedWallets.forEach((wallet) => {
          var _a3;
          const key = "accountAddress";
          const address = hasKey2(wallet, key) ? wallet[key] : wallet.walletPublicKey;
          if (((_a3 = data.connectedWallet) == null ? void 0 : _a3.find(
            (cw) => (cw == null ? void 0 : cw.address) === address && (cw == null ? void 0 : cw.walletBlockchain) === wallet.walletBlockchain
          )) !== void 0) {
            frontendClient.copyAuthorization({
              walletBlockchain: "SOLANA",
              walletPublicKey: wallet.walletPublicKey,
              env: params.env,
              tenantId: params.dappAddress,
              storageOption: { driverType: "LocalForage" }
            }).catch(console.log);
          }
        });
      }
    },
    [frontendClient, params]
  );
  const render = (0, import_react9.useCallback)(
    (newData) => {
      var _a3, _b3, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t2;
      const targetGroup = (_a3 = newData.targetGroup) == null ? void 0 : _a3.find(
        (tg) => (tg == null ? void 0 : tg.name) === "Default"
      );
      const alerts2 = {};
      (_b3 = newData.alert) == null ? void 0 : _b3.forEach((alert) => {
        if (alert == null ? void 0 : alert.name) {
          alerts2[alert.name] = alert;
        }
      });
      setAlerts(alerts2);
      setConnectedWallets(
        (_d = (_c = newData.connectedWallet) == null ? void 0 : _c.filter(
          (wallet) => !!wallet
        )) != null ? _d : []
      );
      const emailTarget = (_f = (_e2 = targetGroup == null ? void 0 : targetGroup.emailTargets) == null ? void 0 : _e2[0]) != null ? _f : null;
      const emailToSet = (_g = emailTarget == null ? void 0 : emailTarget.emailAddress) != null ? _g : "";
      if (!!emailTarget && !emailTarget.isConfirmed) {
        setEmailErrorMessage({
          type: "recoverableError",
          onClick: () => frontendClient.sendEmailTargetVerification({
            targetId: emailTarget.id
          }),
          message: "Resend Link"
        });
      } else {
        setEmailErrorMessage(void 0);
      }
      setEmail(emailToSet);
      setFormEmail(emailToSet);
      const phoneNumber2 = (_j = (_i = (_h = targetGroup == null ? void 0 : targetGroup.smsTargets) == null ? void 0 : _h[0]) == null ? void 0 : _i.phoneNumber) != null ? _j : null;
      const isPhoneNumberConfirmed = (_m = (_l = (_k = targetGroup == null ? void 0 : targetGroup.smsTargets) == null ? void 0 : _k[0]) == null ? void 0 : _l.isConfirmed) != null ? _m : false;
      const phoneNumberToSet = phoneNumber2 != null ? phoneNumber2 : "";
      if (!!phoneNumber2 && !isPhoneNumberConfirmed) {
        setPhoneNumberErrorMessage({
          type: "unrecoverableError",
          message: "Messages stopped",
          tooltip: `Please text 'start' to the following number:
${params.env === "Production" ? "+1 206 222 3465" : "+1 253 880 1477 "}`
        });
      }
      setFormPhoneNumber(phoneNumberToSet || "");
      setPhoneNumber(phoneNumberToSet || "");
      const telegramTarget = (_o = (_n = targetGroup == null ? void 0 : targetGroup.telegramTargets) == null ? void 0 : _n[0]) != null ? _o : null;
      const telegramId2 = telegramTarget == null ? void 0 : telegramTarget.telegramId;
      const telegramIdWithSymbolAdded = telegramId2 !== "" && (telegramId2 == null ? void 0 : telegramId2.length) ? prefixTelegramWithSymbol(telegramId2) : null;
      setFormTelegram(telegramId2 != null ? telegramId2 : "");
      setTelegramId(telegramIdWithSymbolAdded != null ? telegramIdWithSymbolAdded : "");
      if (!!telegramTarget && !(telegramTarget == null ? void 0 : telegramTarget.isConfirmed)) {
        setTelegramErrorMessage({
          type: "recoverableError",
          onClick: () => {
            if (!(telegramTarget == null ? void 0 : telegramTarget.confirmationUrl)) {
              return;
            }
            window.open(telegramTarget == null ? void 0 : telegramTarget.confirmationUrl);
          },
          message: "Verify ID"
        });
      } else {
        setTelegramErrorMessage(void 0);
      }
      const discordTarget = (_p = targetGroup == null ? void 0 : targetGroup.discordTargets) == null ? void 0 : _p.find(
        (it2) => (it2 == null ? void 0 : it2.name) === "Default"
      );
      if (!!discordTarget && !discordTarget.isConfirmed) {
        setDiscordErrorMessage({
          type: "recoverableError",
          onClick: () => window.open(discordTarget.verificationLink, "_blank"),
          message: "Enable Bot"
        });
        setUseDiscord(true);
        setDiscordTargetData(discordTarget);
      } else if (!!discordTarget && discordTarget.isConfirmed) {
        switch (discordTarget.userStatus) {
          case "DISCORD_SERVER_NOT_JOINED":
            setDiscordErrorMessage({
              type: "recoverableError",
              onClick: () => window.open(discordTarget.discordServerInviteLink, "_blank"),
              message: "Join Server"
            });
            break;
          case "COMPLETE":
            setDiscordErrorMessage(void 0);
            break;
          default:
            throw new Error("Discord target in unexpected state");
        }
        setUseDiscord(true);
        setDiscordTargetData(discordTarget);
      } else {
        setDiscordTargetData(void 0);
        setUseDiscord(false);
      }
      return {
        alerts: alerts2,
        email: (_q = emailTarget == null ? void 0 : emailTarget.emailAddress) != null ? _q : null,
        isPhoneNumberConfirmed,
        phoneNumber: phoneNumber2,
        telegramConfirmationUrl: (_r = telegramTarget == null ? void 0 : telegramTarget.confirmationUrl) != null ? _r : null,
        telegramId: (_s = telegramTarget == null ? void 0 : telegramTarget.telegramId) != null ? _s : null,
        discordId: (_t2 = discordTarget == null ? void 0 : discordTarget.id) != null ? _t2 : null
      };
    },
    [setAlerts, setEmail, setPhoneNumber, setTelegramId]
  );
  const value = {
    alerts,
    connectedWallets,
    email,
    loading,
    params,
    phoneNumber,
    contextId,
    telegramId,
    cardView,
    telegramConfirmationUrl,
    useHardwareWallet,
    destinationErrorMessages,
    setAlerts,
    setConnectedWallets,
    setCardView,
    setEmail,
    setLoading,
    setPhoneNumber,
    setTelegramId,
    setTelegramConfirmationUrl,
    setUseHardwareWallet,
    intercomCardView,
    setIntercomCardView,
    hasChatAlert,
    setHasChatAlert,
    conversationId,
    setConversationId,
    userId,
    setUserId,
    setEmailErrorMessage,
    setTelegramErrorMessage,
    setPhoneNumberErrorMessage,
    resetErrorMessageState,
    setDiscordErrorMessage,
    useDiscord,
    setUseDiscord,
    discordTargetData,
    setDiscordTargetData,
    render,
    ftuStage,
    syncFtuStage,
    updateFtuStage
  };
  return import_react9.default.createElement(NotifiSubscriptionContext.Provider, { value }, children);
};
var useNotifiSubscriptionContext = () => {
  const data = (0, import_react9.useContext)(NotifiSubscriptionContext);
  return data;
};
var NotifiContext = (_a) => {
  var _b = _a, {
    children
  } = _b, params = __objRest(_b, [
    "children"
  ]);
  return import_react5.default.createElement(NotifiClientContextProvider, __spreadValues({}, params), import_react5.default.createElement(NotifiFormProvider, null, import_react5.default.createElement(NotifiSubscriptionContextProvider, __spreadValues({}, params), children)));
};
var defaultDemoConfigV1 = {
  version: "v1",
  id: "@notifi.network",
  // Shown as dummy telegram id
  name: "notifi@notifi.network",
  // Shown as dummy email field
  eventTypes: [],
  inputs: [],
  contactInfo: {
    sms: {
      active: true,
      supportedCountryCodes: ["+1", "+886"]
    },
    email: {
      active: true
    },
    telegram: {
      active: true
    },
    discord: {
      active: false
    },
    webhook: {}
  }
};
var NotifiDemoPreviewContext = (0, import_react16.createContext)(
  {}
  // Intentionally empty in default
);
var NotifiDemoPreviewContextProvider = ({ children, view, data }) => {
  const demoPreview = (0, import_react16.useMemo)(() => ({ view, data }), [view, data]);
  return import_react16.default.createElement(NotifiDemoPreviewContext.Provider, { value: { demoPreview } }, children);
};
var useNotifiDemoPreviewContext = () => (0, import_react16.useContext)(NotifiDemoPreviewContext);
var NotifiEmailInput = ({
  classNames,
  copy,
  disabled,
  intercomEmailInputStyle,
  intercomEmailInputContainerStyle,
  intercomView
}) => {
  var _a;
  const { intercomCardView, destinationErrorMessages } = useNotifiSubscriptionContext();
  const {
    formState,
    formErrorMessages,
    setEmail,
    setEmailErrorMessage,
    setHasChanges
  } = useNotifiForm();
  const { email } = formState;
  const { email: emailErrorMessage } = formErrorMessages;
  const { email: emailErrorMessageFromSubscriptionContext } = destinationErrorMessages;
  const validateEmail = () => {
    if (email === "") {
      return;
    }
    const emailRegex = new RegExp(
      "^[a-zA-Z0-9._:$!%-+]+@[a-zA-Z0-9.-]+.[a-zA-Z]$"
    );
    if (emailRegex.test(email)) {
      setEmailErrorMessage("");
    } else {
      setEmailErrorMessage("The email is invalid. Please try again.");
    }
  };
  const handleClick = () => {
    if ((emailErrorMessageFromSubscriptionContext == null ? void 0 : emailErrorMessageFromSubscriptionContext.type) !== "recoverableError")
      return;
    emailErrorMessageFromSubscriptionContext.onClick();
  };
  return import_react3.default.createElement(import_react3.default.Fragment, null, intercomView ? intercomCardView.state === "settingView" && (emailErrorMessageFromSubscriptionContext == null ? void 0 : emailErrorMessageFromSubscriptionContext.type) === "recoverableError" ? import_react3.default.createElement(
    "div",
    {
      onClick: handleClick,
      className: clsx_m_default(
        "NotifiEmailVerification__button",
        classNames == null ? void 0 : classNames.button
      )
    },
    "Resend Verification"
  ) : null : import_react3.default.createElement("label", { className: clsx_m_default("NotifiEmailInput__label", classNames == null ? void 0 : classNames.label) }, copy == null ? void 0 : copy.label), import_react3.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiEmailInput__container",
        intercomEmailInputContainerStyle,
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react3.default.createElement(EmailIcon, { className: "NotifiInput__icon" }),
    import_react3.default.createElement(
      "input",
      {
        "data-cy": "notifiEmailInput",
        onBlur: validateEmail,
        className: clsx_m_default(
          "NotifiEmailInput__input",
          intercomEmailInputStyle,
          classNames == null ? void 0 : classNames.input
        ),
        disabled,
        name: "notifi-email",
        type: "email",
        value: email,
        onFocus: () => setEmailErrorMessage(""),
        onChange: (e) => {
          var _a2;
          setHasChanges(true);
          setEmail((_a2 = e.target.value) != null ? _a2 : "");
        },
        placeholder: (_a = copy == null ? void 0 : copy.placeholder) != null ? _a : "Email Address"
      }
    )
  ), import_react3.default.createElement(
    "label",
    {
      className: clsx_m_default(
        "NotifiEmailInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    emailErrorMessage
  ));
};
var NotifiDisclosureStatement = ({ classNames, disclosureCopy }) => {
  return import_react18.default.createElement("div", { className: clsx_m_default("NotifiDisclosure__container", classNames == null ? void 0 : classNames.container) }, import_react18.default.createElement("label", { className: clsx_m_default("NotifiDisclosure__label", classNames == null ? void 0 : classNames.label) }, disclosureCopy, " "), import_react18.default.createElement(
    "a",
    {
      className: clsx_m_default("NotifiDisclosure__hyperlink", classNames == null ? void 0 : classNames.hyperlink),
      href: "https://notifi.network",
      target: "_blank"
    },
    "Learn more"
  ));
};
var NotifiLogo = (props) => {
  return import_react19.default.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "39",
      height: "9",
      viewBox: "0 0 39 9",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    import_react19.default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M7.92661 5.02549C7.68505 5.09427 7.43002 5.1311 7.16639 5.1311C5.63641 5.1311 4.39611 3.8908 4.39611 2.36082C4.39611 2.0878 4.43561 1.824 4.50919 1.57483H1.63872C1.19751 1.57483 0.839844 1.9325 0.839844 2.3737V7.86272C0.839844 8.30393 1.19751 8.66159 1.63872 8.66159H7.12774C7.56894 8.66159 7.92661 8.30393 7.92661 7.86272V5.02549Z",
        fill: "white",
        className: "notifiLogo-letters"
      }
    ),
    import_react19.default.createElement(
      "path",
      {
        d: "M9.5013 1.96855C9.5013 3.05574 8.61995 3.93709 7.53275 3.93709C6.44556 3.93709 5.56421 3.05574 5.56421 1.96855C5.56421 0.881348 6.44556 0 7.53275 0C8.61995 0 9.5013 0.881348 9.5013 1.96855Z",
        fill: "url(#paint0_linear_872_5572)"
      }
    ),
    import_react19.default.createElement(
      "path",
      {
        d: "M17.9031 5.61338V8.60198H19.1442V5.61338C19.1442 3.77653 18.1911 2.57513 16.6819 2.57513C15.9471 2.57513 15.2918 3.012 15.0734 3.61766V2.64463H13.8323V8.60198H15.0734V5.6233C15.0734 4.57084 15.6592 3.81624 16.4634 3.81624C17.3372 3.81624 17.9031 4.52119 17.9031 5.61338Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    import_react19.default.createElement(
      "path",
      {
        d: "M19.9738 5.61338C19.9738 7.34101 21.2546 8.66155 22.9028 8.66155C24.551 8.66155 25.8219 7.34101 25.8219 5.61338C25.8219 3.89567 24.551 2.57513 22.9028 2.57513C21.2546 2.57513 19.9738 3.89567 19.9738 5.61338ZM22.9028 3.81624C23.856 3.81624 24.5808 4.5907 24.5808 5.61338C24.5808 6.64598 23.856 7.42044 22.9028 7.42044C21.9496 7.42044 21.2149 6.64598 21.2149 5.61338C21.2149 4.5907 21.9496 3.81624 22.9028 3.81624Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    import_react19.default.createElement(
      "path",
      {
        d: "M27.5834 1.38365L27.2855 2.64463H26.4019V3.81624H27.2855V6.55662C27.2855 8.01617 27.8813 8.60198 29.3011 8.60198H29.8174V7.37079H29.4203C28.8047 7.37079 28.5267 7.10271 28.5267 6.48712V3.81624H29.8174V2.64463H28.5267V1.38365H27.5834Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    import_react19.default.createElement(
      "path",
      {
        d: "M31.9217 8.60198V2.64463H30.6806V8.60198H31.9217Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    import_react19.default.createElement(
      "path",
      {
        d: "M38.2799 8.60198V2.64463H34.8644V2.20776C34.8644 1.59217 35.1424 1.31415 35.758 1.31415H36.1551V0.0928955H35.6388C34.219 0.0928955 33.6233 0.668778 33.6233 2.13826V2.64463H32.7495V3.81624H33.6233V8.60198H34.8644V3.81624H37.0388V8.60198H38.2799Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    import_react19.default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M31.1573 0C30.8066 0 30.6804 0.192486 30.6804 0.466236V1.46139H31.6535C31.9914 1.46139 32.1418 1.34309 32.1418 1.00946V0.466236C32.1418 0.15399 31.9358 0 31.6193 0H31.1573Z",
        fill: "black",
        className: "notifiLogo-letters"
      }
    ),
    import_react19.default.createElement("defs", null, import_react19.default.createElement(
      "linearGradient",
      {
        id: "paint0_linear_872_5572",
        x1: "8.72155",
        y1: "0.306786",
        x2: "6.8297",
        y2: "3.93709",
        gradientUnits: "userSpaceOnUse"
      },
      import_react19.default.createElement("stop", { stopColor: "#FE7970" }),
      import_react19.default.createElement("stop", { offset: "1", stopColor: "#FEB776" })
    ))
  );
};
var NotifiFooter = ({
  classNames,
  copy
}) => {
  var _a;
  return import_react17.default.createElement("div", { className: clsx_m_default("NotifiFooter__container", classNames == null ? void 0 : classNames.container) }, (copy == null ? void 0 : copy.disclosure) ? import_react17.default.createElement(
    NotifiDisclosureStatement,
    {
      disclosureCopy: copy == null ? void 0 : copy.disclosure,
      classNames: classNames == null ? void 0 : classNames.disclosure
    }
  ) : null, import_react17.default.createElement(
    "a",
    {
      href: "https://notifi.network",
      target: "_blank",
      rel: "noopener noreferrer",
      className: clsx_m_default(
        "NotifiFooter__poweredByContainer",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react17.default.createElement(
      "span",
      {
        className: clsx_m_default("NotifiFooter__poweredBy", classNames == null ? void 0 : classNames.poweredBy)
      },
      (_a = copy == null ? void 0 : copy.poweredBy) != null ? _a : "Powered by"
    ),
    import_react17.default.createElement(
      NotifiLogo,
      {
        className: clsx_m_default("NotifiFooter__logoSvg", classNames == null ? void 0 : classNames.logoSvg)
      }
    )
  ));
};
var SmsIcon = ({ className }) => {
  return import_react21.default.createElement(
    "svg",
    {
      width: "11",
      height: "17",
      viewBox: "0 0 11 17",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className
    },
    import_react21.default.createElement(
      "path",
      {
        d: "M8.33335 0.708328H2.66669C1.49085 0.708328 0.541687 1.65749 0.541687 2.83333V14.1667C0.541687 15.3425 1.49085 16.2917 2.66669 16.2917H8.33335C9.50919 16.2917 10.4584 15.3425 10.4584 14.1667V2.83333C10.4584 1.65749 9.50919 0.708328 8.33335 0.708328ZM6.91669 14.875H4.08335V14.1667H6.91669V14.875ZM9.21877 12.75H1.78127V2.83333H9.21877V12.75Z",
        fill: "#B6B8D5"
      }
    )
  );
};
var countryMap = {
  "+1": {
    dialCode: "+1",
    flag: "🇺🇸",
    name: "United States/Canada"
  },
  "+61": {
    dialCode: "+61",
    flag: "🇦🇺",
    name: "Australia"
  },
  "+43": {
    dialCode: "+43",
    flag: "🇦🇹",
    name: "Austria"
  },
  "+32": {
    dialCode: "+32",
    flag: "🇧🇪",
    name: "Belgium"
  },
  "+55": {
    dialCode: "+55",
    flag: "🇧🇷",
    name: "Brazil"
  },
  "+45": {
    dialCode: "+45",
    flag: "🇩🇰",
    name: "Denmark"
  },
  "+358": {
    dialCode: "+358",
    flag: "🇫🇮",
    name: "Finland"
  },
  "+33": {
    dialCode: "+33",
    flag: "🇫🇷",
    name: "France"
  },
  "+49": {
    dialCode: "+49",
    flag: "🇩🇪",
    name: "Germany"
  },
  "+852": {
    dialCode: "+852",
    flag: "🇭🇰",
    name: "Hong Kong"
  },
  "+36": {
    dialCode: "+36",
    flag: "🇭🇺",
    name: "Hungary"
  },
  "+354": {
    dialCode: "+354",
    flag: "🇮🇸",
    name: "Iceland"
  },
  "+60": {
    dialCode: "+60",
    flag: "🇲🇾",
    name: "Malaysia"
  },
  "+47": {
    dialCode: "+47",
    flag: "🇳🇴",
    name: "Norway"
  },
  "+63": {
    dialCode: "+63",
    flag: "🇵🇭",
    name: "Philippines"
  },
  "+48": {
    dialCode: "+48",
    flag: "🇵🇱",
    name: "Poland"
  },
  "+351": {
    dialCode: "+351",
    flag: "🇵🇹",
    name: "Portugal"
  },
  "+65": {
    dialCode: "+65",
    flag: "🇸🇬",
    name: "Singapore"
  },
  "+82": {
    dialCode: "+82",
    flag: "🇰🇷",
    name: "Korea, Republic of South Korea"
  },
  "+34": {
    dialCode: "+34",
    flag: "🇪🇸",
    name: "Spain"
  },
  "+46": {
    dialCode: "+46",
    flag: "🇸🇪",
    name: "Sweden"
  },
  "+41": {
    dialCode: "+41",
    flag: "🇨🇭",
    name: "Switzerland"
  },
  "+886": {
    dialCode: "+886",
    flag: "🇹🇼",
    name: "Taiwan"
  },
  "+44": {
    dialCode: "+44",
    flag: "🇬🇧",
    name: "United Kingdom"
  }
};
var splitPhoneNumber = (phoneNumber) => {
  const { countryCallingCode, nationalNumber: baseNumber } = parsePhoneNumberWithError3(phoneNumber);
  if (!countryCallingCode || !baseNumber) {
    throw new Error("No country or phone found");
  }
  return { baseNumber, countryCallingCode };
};
var NotifiSmsDropdownOption = ({
  countryData,
  classNames,
  phoneValues,
  onSelected
}) => {
  const { name, dialCode, flag } = countryData;
  return import_react22.default.createElement(
    "li",
    {
      className: clsx_m_default(
        "NotifiSmsInput__dropdownOption",
        classNames == null ? void 0 : classNames.dropdownOption,
        {
          "NotifiSmsInput__dropdownOption-selected": phoneValues.dialCode === dialCode
        }
      ),
      onClick: () => onSelected(dialCode)
    },
    import_react22.default.createElement("div", { className: "NotifiSmsInput__dropdownCountry" }, import_react22.default.createElement("p", { className: "NotifiSmsInput__dropdownFlag" }, flag, " "), import_react22.default.createElement("p", { className: "NotifiSmsInput__dropdownName" }, name)),
    import_react22.default.createElement("span", { className: "NotifiSmsInput__dropdownCode" }, dialCode)
  );
};
var NotifiSmsDropdownOption_default = NotifiSmsDropdownOption;
var NotifiSmsInput = ({
  allowedCountryCodes,
  classNames,
  copy,
  disabled,
  intercomSmsDropdownContainerStyle,
  intercomSmsDropdownSelectStyle,
  intercomSmsInputContainerStyle,
  intercomSmsInputStyle,
  intercomView
}) => {
  var _a;
  const {
    formErrorMessages,
    formState,
    setPhoneNumber,
    setPhoneNumberErrorMessage,
    setHasChanges
  } = useNotifiForm();
  const { phoneNumber: phoneNumberErrorMessage } = formErrorMessages;
  const { phoneNumber } = formState;
  const [phoneValues, setPhoneValues] = (0, import_react20.useState)({
    baseNumber: "",
    dialCode: "+1"
  });
  const [isShowOption, setShowOption] = (0, import_react20.useState)(false);
  const handleShowOption = () => {
    setShowOption(!isShowOption);
  };
  const handleSelected = (0, import_react20.useCallback)(
    (dialCode) => {
      setPhoneValues(__spreadProps(__spreadValues({}, phoneValues), { dialCode }));
      setPhoneNumber(dialCode + phoneValues.baseNumber);
      setShowOption(false);
    },
    [phoneValues, setPhoneNumber, setPhoneValues]
  );
  const handleBaseNumberChange = (0, import_react20.useCallback)(
    (event) => {
      const onlyNumberInput = event.target.value.replace(/[^\d]/g, "");
      setPhoneValues(__spreadProps(__spreadValues({}, phoneValues), { baseNumber: onlyNumberInput }));
      setPhoneNumber(phoneValues.dialCode + event.target.value);
    },
    [phoneValues, setPhoneNumber, setPhoneValues]
  );
  const splitPhoneValues = (0, import_react20.useCallback)(() => {
    if (!phoneNumber) {
      return;
    }
    if (isValidPhoneNumber2(phoneNumber)) {
      const { baseNumber: number, countryCallingCode } = splitPhoneNumber(phoneNumber);
      if (!countryCallingCode || !number) {
        throw new Error("Improper phone");
      }
      setPhoneValues({
        baseNumber: number,
        dialCode: `+${countryCallingCode}`
      });
      return;
    }
  }, [phoneNumber, handleSelected]);
  (0, import_react20.useEffect)(() => {
    if (phoneNumber) {
      splitPhoneValues();
    }
  }, [phoneNumber]);
  (0, import_react20.useEffect)(() => {
    if (phoneValues.baseNumber === "" && phoneNumber !== "") {
      setPhoneNumber("");
    }
  }, [phoneValues.baseNumber, setPhoneNumber, phoneNumber]);
  const validateSmsInput = (0, import_react20.useCallback)(() => {
    if (phoneNumber === "") {
      return;
    }
    if (!isValidPhoneNumber2(phoneNumber)) {
      setPhoneNumberErrorMessage(
        "The phone number is invalid. Please try again"
      );
    }
  }, [phoneNumber, setPhoneNumberErrorMessage]);
  return import_react20.default.createElement(import_react20.default.Fragment, null, intercomView ? null : import_react20.default.createElement("label", { className: clsx_m_default("NotifiSmsInput__label", classNames == null ? void 0 : classNames.label) }, copy == null ? void 0 : copy.label), import_react20.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiSmsInput__container",
        intercomSmsInputContainerStyle,
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react20.default.createElement(SmsIcon, { className: "NotifiInput__icon" }),
    import_react20.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiSmsInput__dropdownContainer",
          intercomSmsDropdownContainerStyle,
          classNames == null ? void 0 : classNames.dropdownContainer
        )
      },
      import_react20.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "NotifiSmsInput__dropdownSelect",
            intercomSmsDropdownSelectStyle,
            classNames == null ? void 0 : classNames.dropdownSelectField
          ),
          tabIndex: 0,
          onBlur: () => {
            setShowOption(false);
          }
        },
        import_react20.default.createElement(
          "div",
          {
            className: "NotifiSmsInput__dropdownSelected",
            onClick: handleShowOption
          },
          import_react20.default.createElement("div", { className: "NotifiSmsInput__dropdownSelectValue" }, phoneValues.dialCode),
          import_react20.default.createElement(
            "input",
            {
              className: "NotifiSmsInput__dropdownInput",
              type: "hidden",
              value: phoneValues.dialCode,
              onChange: (e) => {
                setHasChanges(true);
                handleBaseNumberChange(e);
              }
            }
          ),
          import_react20.default.createElement(
            "svg",
            {
              className: "NotifiSmsInput__dropdownSelectIcon",
              viewBox: "0 0 9 5",
              xmlns: "http://www.w3.org/2000/svg"
            },
            import_react20.default.createElement(
              "path",
              {
                d: "M0.539062 0.916016L4.4974 4.87435L8.45573 0.916016H0.539062Z",
                fill: "inherit"
              }
            )
          )
        ),
        isShowOption && import_react20.default.createElement("ul", { className: "NotifiSmsInput__dropdownOptionList" }, allowedCountryCodes.map((code) => {
          const countryData = countryMap[code];
          return import_react20.default.createElement(
            NotifiSmsDropdownOption_default,
            {
              key: code,
              countryData,
              phoneValues,
              onSelected: (dialCode) => handleSelected(dialCode)
            }
          );
        }))
      )
    ),
    import_react20.default.createElement(
      "input",
      {
        className: clsx_m_default(
          "NotifiSmsInput__input",
          intercomSmsInputStyle,
          classNames == null ? void 0 : classNames.input
        ),
        disabled,
        name: "notifi-sms",
        onBlur: validateSmsInput,
        onChange: (e) => {
          setHasChanges(true);
          handleBaseNumberChange(e);
        },
        onFocus: () => setPhoneNumberErrorMessage(""),
        placeholder: (_a = copy == null ? void 0 : copy.placeholder) != null ? _a : "Phone Number",
        type: "tel",
        value: phoneValues.baseNumber
      }
    )
  ), import_react20.default.createElement(
    "label",
    {
      className: clsx_m_default(
        "NotifiSmsInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    phoneNumberErrorMessage
  ));
};
var TelegramIcon = ({ className }) => {
  return import_react24.default.createElement(
    "svg",
    {
      width: "17",
      height: "16",
      viewBox: "0 0 17 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className
    },
    import_react24.default.createElement(
      "path",
      {
        d: "M8.63846 15.4458L16.4253 0.189566L0.00576619 5.06668L3.35716 9.10781L12.9656 3.06713L5.27554 11.4143L8.63846 15.4458Z",
        fill: "#B6B8D5"
      }
    )
  );
};
var NotifiTelegramInput = ({
  classNames,
  copy,
  disabled,
  intercomTelegramInputStyle,
  intercomTelegramInputContainerStyle,
  intercomView
}) => {
  var _a;
  const { telegramConfirmationUrl, intercomCardView } = useNotifiSubscriptionContext();
  const {
    formState,
    formErrorMessages,
    setTelegram,
    setTelegramErrorMessage,
    setHasChanges
  } = useNotifiForm();
  const { telegram } = formState;
  const { telegram: telegramErrorMessage } = formErrorMessages;
  const validateTelegram = () => {
    if (telegram === "") {
      return;
    }
    const TelegramRegex = /^@?(?=\w{5,32}\b)[a-zA-Z0-9]+(?:[a-zA-Z0-9_ ]+[a-zA-Z0-9])*$/;
    if (TelegramRegex.test(telegram)) {
      setTelegramErrorMessage("");
    } else {
      setTelegramErrorMessage("The telegram is invalid. Please try again.");
    }
  };
  const handleClick = () => {
    window.open(telegramConfirmationUrl, "_blank");
  };
  return import_react23.default.createElement(import_react23.default.Fragment, null, intercomView ? intercomCardView.state === "settingView" && telegramConfirmationUrl != null ? import_react23.default.createElement(
    "div",
    {
      onClick: handleClick,
      className: clsx_m_default(
        "NotifiTelegramVerification__button",
        classNames == null ? void 0 : classNames.button
      )
    },
    "Verify ID"
  ) : null : import_react23.default.createElement("label", { className: clsx_m_default("NotifiTelegramInput__label", classNames == null ? void 0 : classNames.label) }, copy == null ? void 0 : copy.label), import_react23.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiTelegramInput__container",
        intercomTelegramInputContainerStyle,
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react23.default.createElement(TelegramIcon, { className: "NotifiInput__icon" }),
    import_react23.default.createElement(
      "input",
      {
        "data-cy": "notifiTelegramInput",
        onBlur: validateTelegram,
        className: clsx_m_default(
          "NotifiTelegramInput__input",
          intercomTelegramInputStyle,
          classNames == null ? void 0 : classNames.input
        ),
        disabled,
        name: "notifi-telegram",
        type: "text",
        value: telegram,
        onFocus: () => setTelegramErrorMessage(""),
        onChange: (e) => {
          var _a2;
          setHasChanges(true);
          setTelegram((_a2 = e.target.value) != null ? _a2 : "");
        },
        placeholder: (_a = copy == null ? void 0 : copy.placeholder) != null ? _a : "Telegram ID"
      }
    )
  ), import_react23.default.createElement(
    "label",
    {
      className: clsx_m_default(
        "NotifiTelegramInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    telegramErrorMessage
  ));
};
var createRefResolver = (validator) => {
  return (name, valueOrRef, inputs) => {
    if (valueOrRef.type === "value") {
      return valueOrRef.value;
    } else {
      if (valueOrRef.ref === null) {
        throw new Error(`Invalid configuration: Ref ${name} is null`);
      }
      const runtimeInput = inputs[valueOrRef.ref];
      if (validator(runtimeInput)) {
        return runtimeInput;
      } else {
        throw new Error(`Invalid value provided for ${name}: ${runtimeInput}`);
      }
    }
  };
};
var resolveStringRef = createRefResolver(
  (item) => {
    return typeof item === "string";
  }
);
var resolveStringArrayRef = createRefResolver(
  (item) => {
    return Array.isArray(item) && item.every((element) => typeof element === "string");
  }
);
var chatConfiguration = () => {
  return {
    type: "single",
    filterType: "NOTIFI_CHAT_MESSAGES",
    filterOptions: {
      alertFrequency: "THREE_MINUTES"
    },
    sourceType: "NOTIFI_CHAT",
    createSource: {
      address: "*"
    }
  };
};
var customThresholdConfiguration = ({
  alertFrequency,
  threshold,
  filterType,
  thresholdDirection,
  sourceType,
  sourceAddress
}) => {
  return {
    type: "single",
    sourceType,
    filterType,
    filterOptions: {
      alertFrequency,
      threshold,
      thresholdDirection
    },
    createSource: {
      address: sourceAddress
    }
  };
};
var customToggleConfiguration = ({
  filterType,
  filterOptions,
  sourceType,
  sourceAddress
}) => {
  return {
    type: "single",
    sourceType,
    filterType,
    filterOptions,
    createSource: {
      address: sourceAddress
    }
  };
};
var topicToSource = (topic) => {
  return {
    name: topic,
    blockchainAddress: topic,
    type: "XMTP"
  };
};
var XMTPToggleConfiguration = ({
  XMTPTopics
}) => {
  return {
    type: "multiple",
    filterType: "WEB3_CHAT_MESSAGES",
    filterOptions: {},
    sources: XMTPTopics.map(topicToSource)
  };
};
var broadcastMessageConfiguration = ({
  topicName
}) => {
  return {
    type: "single",
    filterType: "BROADCAST_MESSAGES",
    filterOptions: {},
    sourceType: "BROADCAST",
    createSource: {
      address: topicName
    }
  };
};
var fusionToggleConfiguration = ({
  fusionId,
  fusionSourceAddress,
  maintainSourceGroup,
  alertFrequency
}) => {
  return {
    type: "single",
    maintainSourceGroup,
    filterType: "FUSION_SOURCE",
    filterOptions: alertFrequency === void 0 ? {} : { alertFrequency },
    sourceType: "FUSION_SOURCE",
    createSource: {
      address: fusionSourceAddress,
      fusionEventTypeId: fusionId
    }
  };
};
var fusionHealthCheckConfiguration = (props) => {
  return {
    type: "single",
    maintainSourceGroup: props.maintainSourceGroup,
    filterType: "FUSION_SOURCE",
    filterOptions: {
      alertFrequency: props.alertFrequency,
      threshold: props.threshold,
      thresholdDirection: props.thresholdDirection
    },
    sourceType: "FUSION_SOURCE",
    createSource: {
      address: props.fusionSourceAddress,
      fusionEventTypeId: props.fusionId
    }
  };
};
var directMessageConfiguration = (params) => {
  const type = params == null ? void 0 : params.type;
  return {
    type: "single",
    sourceType: "DIRECT_PUSH",
    filterType: "DIRECT_TENANT_MESSAGES",
    filterOptions: type === void 0 ? null : { directMessageType: type }
  };
};
var healthThresholdConfiguration = ({
  alertFrequency,
  percentage,
  thresholdDirection
}) => {
  return {
    type: "single",
    sourceType: "DIRECT_PUSH",
    filterType: "VALUE_THRESHOLD",
    filterOptions: {
      alertFrequency,
      threshold: percentage,
      thresholdDirection
    }
  };
};
var hedgeProtocolConfiguration = ({
  walletAddress
}) => {
  return {
    type: "single",
    filterType: "LIQUIDATIONS",
    filterOptions: {},
    sourceType: "HEDGE_PROTOCOL",
    createSource: {
      address: walletAddress
    }
  };
};
var tradingPairConfiguration = ({
  tradingPair,
  above,
  price
}) => {
  return {
    type: "single",
    sourceType: "DIRECT_PUSH",
    filterType: "DIRECT_TENANT_MESSAGES",
    filterOptions: {
      tradingPair,
      values: {
        and: [
          {
            key: "spotPrice",
            op: above ? "gt" : "lt",
            value: price.toFixed(8)
          }
        ]
      }
    }
  };
};
var walletBalanceConfiguration = ({
  connectedWallets
}) => {
  return {
    type: "multiple",
    filterType: "BALANCE",
    filterOptions: null,
    sources: connectedWallets.filter(
      (wallet) => !!wallet
    ).map(walletToSource),
    sourceGroupName: "User Wallets"
  };
};
var priceChangeConfiguration = ({
  tokenIds
}) => {
  return {
    type: "multiple",
    filterType: "COIN_PRICE_CHANGE_EVENTS",
    filterOptions: null,
    sources: tokenIds.map((tokenId) => {
      return {
        name: tokenId,
        type: "COIN_PRICE_CHANGES",
        blockchainAddress: tokenId
      };
    })
  };
};
var createConfigurations = (eventTypes, inputs, connectedWallets) => {
  const configs = {};
  eventTypes.forEach((eventType) => {
    var _a, _b;
    switch (eventType.type) {
      case "broadcast": {
        const broadcastId = resolveStringRef(
          eventType.name,
          eventType.broadcastId,
          {}
        );
        configs[eventType.name] = broadcastMessageConfiguration({
          topicName: broadcastId
        });
        break;
      }
      case "custom": {
        switch (eventType.selectedUIType) {
          case "HEALTH_CHECK": {
            const thresholdDirection = (_a = eventType.checkRatios[0].type) != null ? _a : "below";
            const ratioNumber = eventType.checkRatios[1].ratio;
            configs[eventType.name] = customThresholdConfiguration({
              sourceType: eventType.sourceType,
              filterType: eventType.filterType,
              alertFrequency: eventType.alertFrequency,
              sourceAddress: resolveStringRef(
                eventType.name,
                eventType.sourceAddress,
                inputs
              ),
              thresholdDirection,
              threshold: eventType.numberType === "percentage" ? ratioNumber / 100 : ratioNumber
            });
            break;
          }
          case "TOGGLE": {
            configs[eventType.name] = customToggleConfiguration({
              sourceType: eventType.sourceType,
              filterType: eventType.filterType,
              filterOptions: eventType.filterOptions,
              sourceAddress: resolveStringRef(
                eventType.name,
                eventType.sourceAddress,
                inputs
              )
            });
            break;
          }
        }
        break;
      }
      case "directPush": {
        const pushId = resolveStringRef(
          eventType.name,
          eventType.directPushId,
          {}
        );
        configs[eventType.name] = directMessageConfiguration({
          type: pushId
        });
        break;
      }
      case "walletBalance": {
        configs[eventType.name] = walletBalanceConfiguration({
          connectedWallets: connectedWallets.filter(
            (wallet) => !!wallet
          )
        });
        break;
      }
      case "priceChange": {
        configs[eventType.name] = priceChangeConfiguration({
          tokenIds: eventType.tokenIds
        });
        break;
      }
      case "fusionToggle":
        configs[eventType.name] = fusionToggleConfiguration({
          maintainSourceGroup: eventType.maintainSourceGroup,
          fusionId: resolveStringRef(
            eventType.name,
            eventType.fusionEventId,
            inputs
          ),
          fusionSourceAddress: resolveStringRef(
            eventType.name,
            eventType.sourceAddress,
            inputs
          ),
          alertFrequency: eventType.alertFrequency
        });
        break;
      case "fusion": {
        switch (eventType.selectedUIType) {
          case "TOGGLE":
            configs[eventType.name] = fusionToggleConfiguration({
              maintainSourceGroup: eventType.maintainSourceGroup,
              fusionId: resolveStringRef(
                eventType.name,
                eventType.fusionEventId,
                inputs
              ),
              fusionSourceAddress: resolveStringRef(
                eventType.name,
                eventType.sourceAddress,
                inputs
              ),
              alertFrequency: eventType.alertFrequency
            });
            break;
          case "HEALTH_CHECK":
            configs[eventType.name] = fusionHealthCheckConfiguration({
              maintainSourceGroup: eventType.maintainSourceGroup,
              fusionId: resolveStringRef(
                eventType.name,
                eventType.fusionEventId,
                inputs
              ),
              fusionSourceAddress: resolveStringRef(
                eventType.name,
                eventType.sourceAddress,
                inputs
              ),
              alertFrequency: eventType.alertFrequency,
              thresholdDirection: (_b = eventType.checkRatios[0].type) != null ? _b : "below",
              threshold: eventType.numberType === "percentage" ? eventType.checkRatios[1].ratio / 100 : eventType.checkRatios[1].ratio
            });
        }
      }
    }
  });
  return configs;
};
var AnnouncementIcon = (props) => {
  return import_react27.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react27.default.createElement(
      "path",
      {
        d: "M16.7498 10.7917V12.2084H19.5832V10.7917H16.7498ZM15.3332 15.4738C16.0132 15.9767 16.8986 16.6425 17.5998 17.1667C17.8832 16.7913 18.1665 16.4088 18.4498 16.0334C17.7486 15.5092 16.8632 14.8434 16.1832 14.3334C15.8998 14.7159 15.6165 15.0984 15.3332 15.4738ZM18.4498 6.96671C18.1665 6.59129 17.8832 6.20879 17.5998 5.83337C16.8986 6.35754 16.0132 7.02337 15.3332 7.53337C15.6165 7.90879 15.8998 8.29129 16.1832 8.66671C16.8632 8.15671 17.7486 7.49796 18.4498 6.96671ZM6.83317 9.37504C6.054 9.37504 5.4165 10.0125 5.4165 10.7917V12.2084C5.4165 12.9875 6.054 13.625 6.83317 13.625H7.5415V16.4584H8.95817V13.625H9.6665L13.2082 15.75V7.25004L9.6665 9.37504H6.83317ZM14.979 11.5C14.979 10.558 14.5682 9.70796 13.9165 9.12712V13.8659C14.5682 13.2921 14.979 12.4421 14.979 11.5Z",
        fill: "currentColor"
      }
    )
  );
};
var ChatAlertIcon = (props) => {
  return import_react28.default.createElement(
    "svg",
    __spreadValues({
      width: "22",
      height: "22",
      viewBox: "0 0 22 22",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react28.default.createElement("g", { clipPath: "url(#chat_alert_icon_clip0_13256_1794)" }, import_react28.default.createElement(
      "path",
      {
        d: "M18.332 1.83203H3.66536C2.65703 1.83203 1.83203 2.65703 1.83203 3.66536V20.1654L5.4987 16.4987H18.332C19.3404 16.4987 20.1654 15.6737 20.1654 14.6654V3.66536C20.1654 2.65703 19.3404 1.83203 18.332 1.83203ZM18.332 14.6654H5.4987L3.66536 16.4987V3.66536H18.332V14.6654Z",
        fill: "currentColor"
      }
    )),
    import_react28.default.createElement("defs", null, import_react28.default.createElement("clipPath", { id: "chat_alert_icon_clip0_13256_1794" }, import_react28.default.createElement("rect", { width: "22", height: "22", fill: "currentColor" })))
  );
};
var RatioCheckIcon = (props) => {
  return import_react29.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react29.default.createElement("circle", { cx: "8", cy: "9", r: "1.75", stroke: "currentColor", strokeWidth: "1.5" }),
    import_react29.default.createElement(
      "circle",
      {
        cx: "16",
        cy: "14",
        r: "1.75",
        stroke: "currentColor",
        strokeWidth: "1.5"
      }
    ),
    import_react29.default.createElement(
      "line",
      {
        x1: "9.22548",
        y1: "16.4982",
        x2: "14.8394",
        y2: "6.77452",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round"
      }
    )
  );
};
var SwapIcon = (props) => {
  return import_react30.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react30.default.createElement(
      "path",
      {
        d: "M7.32357 17.9999L4.50007 14.7999M4.50007 14.7999L7.32357 11.5999M4.50007 14.7999H12.5",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    ),
    import_react30.default.createElement(
      "path",
      {
        d: "M16.6764 12.4L19.4999 9.20003M19.4999 9.20003L16.6764 6.00004M19.4999 9.20003H11.5",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  );
};
var BellIcon = (props) => {
  return import_react31.default.createElement(
    "svg",
    __spreadValues({
      width: "25",
      height: "25",
      viewBox: "-6 -6 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react31.default.createElement(
      "path",
      {
        d: "M5.49013 11.1875C6.12122 11.1875 6.63757 10.6712 6.63757 10.0401H4.3427C4.3427 10.6712 4.85331 11.1875 5.49013 11.1875ZM8.93244 7.74519V4.8766C8.93244 3.11529 7.99154 1.64083 6.35071 1.25071V0.860577C6.35071 0.384391 5.96632 0 5.49013 0C5.01395 0 4.62956 0.384391 4.62956 0.860577V1.25071C2.98299 1.64083 2.04783 3.10955 2.04783 4.8766V7.74519L0.900391 8.89263V9.46635H10.0799V8.89263L8.93244 7.74519Z",
        fill: "currentColor"
      }
    )
  );
};
var ChartIcon = (props) => {
  return import_react33.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react33.default.createElement(
      "path",
      {
        d: "M17.0556 5.5H6.94444C6.15 5.5 5.5 6.15 5.5 6.94444V17.0556C5.5 17.85 6.15 18.5 6.94444 18.5H17.0556C17.85 18.5 18.5 17.85 18.5 17.0556V6.94444C18.5 6.15 17.85 5.5 17.0556 5.5ZM9.83333 15.6111H8.38889V10.5556H9.83333V15.6111ZM12.7222 15.6111H11.2778V8.38889H12.7222V15.6111ZM15.6111 15.6111H14.1667V12.7222H15.6111V15.6111Z",
        fill: "currentColor"
      }
    )
  );
};
var CheckIcon = (_a) => {
  var _b = _a, { className } = _b, svgProps = __objRest(_b, ["className"]);
  return import_react34.default.createElement(
    "svg",
    __spreadProps(__spreadValues({
      className
    }, svgProps), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    import_react34.default.createElement(
      "path",
      {
        d: "M6 12.5L9.84 16L18 8",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round"
      }
    )
  );
};
var ClockIcon = (props) => {
  return import_react35.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react35.default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18ZM12.75 8C12.75 7.58579 12.4142 7.25 12 7.25C11.5858 7.25 11.25 7.58579 11.25 8V12.5V12.8107L11.4697 13.0303L13.9697 15.5303C14.2626 15.8232 14.7374 15.8232 15.0303 15.5303C15.3232 15.2374 15.3232 14.7626 15.0303 14.4697L12.75 12.1893V8Z",
        fill: "currentColor"
      }
    )
  );
};
var DaoIcon = (props) => {
  return import_react36.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react36.default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M17.0623 7.92265L12.0002 5L6.93799 7.92265L12.0002 10.8453L17.0623 7.92265ZM12.0002 12L5.93799 8.5V15.5L12.0002 19L18.0623 15.5V8.5L12.0002 12Z",
        fill: "currentColor"
      }
    )
  );
};
var DownArrowIcon = (props) => {
  return import_react37.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react37.default.createElement(
      "path",
      {
        d: "M8 13.4705L12 16.9999M12 16.9999L16 13.4705M12 16.9999V7",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  );
};
var FlagIcon = (props) => {
  return import_react38.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react38.default.createElement(
      "path",
      {
        d: "M14.1882 7.52941L13.8824 6H7V19H8.52941V13.6471H12.8118L13.1176 15.1765H18.4706V7.52941H14.1882Z",
        fill: "currentColor"
      }
    )
  );
};
var GraphIcon = (props) => {
  return import_react39.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react39.default.createElement(
      "path",
      {
        d: "M7 16.5L10.5 11L13 14L17 8",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round"
      }
    )
  );
};
var InfoIcon = (props) => {
  return import_react40.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react40.default.createElement(
      "path",
      {
        d: "M11.3335 8.66671H12.6668V10H11.3335V8.66671ZM11.3335 11.3334H12.6668V15.3334H11.3335V11.3334ZM12.0002 5.33337C8.32016 5.33337 5.3335 8.32004 5.3335 12C5.3335 15.68 8.32016 18.6667 12.0002 18.6667C15.6802 18.6667 18.6668 15.68 18.6668 12C18.6668 8.32004 15.6802 5.33337 12.0002 5.33337ZM12.0002 17.3334C9.06016 17.3334 6.66683 14.94 6.66683 12C6.66683 9.06004 9.06016 6.66671 12.0002 6.66671C14.9402 6.66671 17.3335 9.06004 17.3335 12C17.3335 14.94 14.9402 17.3334 12.0002 17.3334Z",
        fill: "currentColor"
      }
    )
  );
};
var StarIcon = (props) => {
  return import_react41.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react41.default.createElement(
      "path",
      {
        d: "M12 5L13.5716 9.83688H18.6574L14.5429 12.8262L16.1145 17.6631L12 14.6738L7.8855 17.6631L9.4571 12.8262L5.3426 9.83688H10.4284L12 5Z",
        fill: "currentColor"
      }
    )
  );
};
var UpArrowIcon = (props) => {
  return import_react42.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react42.default.createElement(
      "path",
      {
        d: "M8 10.5293L12 6.99995M12 6.99995L16 10.5293M12 6.99995V16.9999",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  );
};
var UrgentIcon = (props) => {
  return import_react43.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react43.default.createElement(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18ZM11.25 9.25C11.25 8.83579 11.5858 8.5 12 8.5C12.4142 8.5 12.75 8.83579 12.75 9.25V13.25C12.75 13.6642 12.4142 14 12 14C11.5858 14 11.25 13.6642 11.25 13.25V9.25ZM11.25 15.25C11.25 14.8358 11.5858 14.5 12 14.5C12.4142 14.5 12.75 14.8358 12.75 15.25C12.75 15.6642 12.4142 16 12 16C11.5858 16 11.25 15.6642 11.25 15.25Z",
        fill: "currentColor"
      }
    )
  );
};
var WatchIcon = (props) => {
  return import_react44.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react44.default.createElement(
      "path",
      {
        d: "M11.9998 7C8.6665 7 5.81984 9.07333 4.6665 12C5.81984 14.9267 8.6665 17 11.9998 17C15.3332 17 18.1798 14.9267 19.3332 12C18.1798 9.07333 15.3332 7 11.9998 7ZM11.9998 15.3333C10.1598 15.3333 8.6665 13.84 8.6665 12C8.6665 10.16 10.1598 8.66667 11.9998 8.66667C13.8398 8.66667 15.3332 10.16 15.3332 12C15.3332 13.84 13.8398 15.3333 11.9998 15.3333ZM11.9998 10C10.8932 10 9.99984 10.8933 9.99984 12C9.99984 13.1067 10.8932 14 11.9998 14C13.1065 14 13.9998 13.1067 13.9998 12C13.9998 10.8933 13.1065 10 11.9998 10Z",
        fill: "currentColor"
      }
    )
  );
};
var icons = {
  UP_ARROW: UpArrowIcon,
  DOWN_ARROW: DownArrowIcon,
  PERCENT: RatioCheckIcon,
  CLOCK: ClockIcon,
  CHECKMARK: CheckIcon,
  STAR: StarIcon,
  MEGAPHONE: AnnouncementIcon,
  CHART: ChartIcon,
  DAO: DaoIcon,
  FLAG: FlagIcon,
  GRAPH: GraphIcon,
  INFO: InfoIcon,
  SWAP: SwapIcon,
  URGENT: UrgentIcon,
  WATCH: WatchIcon,
  BELL: BellIcon
};
var AlertIcon = (_a) => {
  var _b = _a, { icon } = _b, props = __objRest(_b, ["icon"]);
  var _a2;
  const Renderer = (_a2 = icons[icon]) != null ? _a2 : AnnouncementIcon;
  return import_react32.default.createElement(Renderer, __spreadValues({}, props));
};
var isDateInThisWeek = (date) => {
  const passedInDate = new Date(date);
  const todayObj = /* @__PURE__ */ new Date();
  const todayDate = todayObj.getDate();
  const firstDayOfWeek = new Date(todayObj.setDate(todayDate - 6));
  return passedInDate >= firstDayOfWeek;
};
var getDayName = (date) => {
  const weekday = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][new Date(date).getDay()];
  return weekday;
};
var formatAmount = (amount) => parseFloat(amount.toFixed(9)).toString();
var isToday = (date) => {
  const today = /* @__PURE__ */ new Date();
  return date.getDate() == today.getDate() && date.getMonth() == today.getMonth() && date.getFullYear() == today.getFullYear();
};
var formatAlertDetailsTimestamp = (date) => {
  try {
    const parsedDate = parseISO(date);
    const month = parsedDate.toLocaleString("default", { month: "short" });
    const clockTime = format(parsedDate, "HH:mm");
    const dateTime = format(parsedDate, "dd");
    const finalDate = `${month} ${dateTime} at ${clockTime} `;
    return finalDate;
  } catch (e) {
    return "-";
  }
};
var formatTimestamp = (date) => {
  try {
    const parsedDate = parseISO(date);
    const month = parsedDate.toLocaleString("default", { month: "short" });
    const clockTime = format(parsedDate, "HH:mm");
    const dateTime = format(parsedDate, "dd");
    const finalDate = `${month} ${dateTime}`;
    if (isToday(parsedDate)) {
      return clockTime;
    }
    if (isDateInThisWeek(date)) {
      return getDayName(date);
    }
    return finalDate;
  } catch (e) {
    return "-";
  }
};
var supportedEventDetails = /* @__PURE__ */ new Map();
supportedEventDetails.set("DirectTenantMessageEventDetails", {
  getViewProps: (notification) => {
    var _a, _b, _c;
    const detail = notification.detail;
    const templateVariablesJson = JSON.parse(
      detail.templateVariablesJson || "{}"
    );
    return {
      notificationTitle: (_a = templateVariablesJson.title) != null ? _a : "Announcement",
      notificationImage: import_react26.default.createElement(AnnouncementIcon, null),
      notificationSubject: (_b = templateVariablesJson.subject) != null ? _b : "",
      notificationDate: notification.createdDate,
      notificationMessage: (_c = templateVariablesJson.message) != null ? _c : ""
    };
  },
  getAlertDetailsContents: (notification) => {
    var _a, _b;
    const detail = notification.detail;
    const templateVariablesJson = JSON.parse(
      detail.templateVariablesJson || "{}"
    );
    return {
      topContent: (_a = templateVariablesJson.subject) != null ? _a : "",
      bottomContent: (_b = templateVariablesJson.message) != null ? _b : ""
    };
  }
});
supportedEventDetails.set("BroadcastMessageEventDetails", {
  getViewProps: (notification) => {
    var _a, _b;
    const detail = notification.detail;
    return {
      notificationTitle: "Announcement",
      notificationImage: import_react26.default.createElement(AnnouncementIcon, null),
      notificationSubject: (_a = detail.subject) != null ? _a : "",
      notificationDate: notification.createdDate,
      notificationMessage: (_b = detail.message) != null ? _b : ""
    };
  },
  getAlertDetailsContents: (notification) => {
    var _a, _b, _c;
    const detail = notification.detail;
    return {
      topContent: (_a = detail.subject) != null ? _a : "",
      bottomContent: (_b = detail.message) != null ? _b : "",
      bottomContentHtml: (_c = detail.messageHtml) != null ? _c : ""
    };
  }
});
supportedEventDetails.set("HealthValueOverThresholdEventDetails", {
  getViewProps: (notification) => {
    var _a, _b, _c;
    const detail = notification.detail;
    const threshold = (_a = detail.threshold) != null ? _a : "";
    const name = (_b = detail.name) != null ? _b : "";
    const value = (_c = detail.value) != null ? _c : "";
    let thresholdDirection = "";
    if (parseFloat(value) > parseFloat(threshold)) {
      thresholdDirection = "under";
    } else {
      thresholdDirection = "over";
    }
    return {
      notificationTitle: "Health Check",
      notificationImage: import_react26.default.createElement(RatioCheckIcon, null),
      notificationSubject: `${name} ${thresholdDirection} ${threshold}`,
      notificationDate: notification.createdDate,
      notificationMessage: void 0
    };
  },
  getAlertDetailsContents: (notification) => {
    const detail = notification.detail;
    return {
      topContent: detail.name,
      bottomContent: `value: ${detail.value}`,
      otherContent: `threshold: ${detail.threshold}`
    };
  }
});
supportedEventDetails.set("GenericEventDetails", {
  getViewProps: (notification) => {
    const detail = notification.detail;
    return {
      notificationTitle: detail.sourceName,
      notificationImage: import_react26.default.createElement(AlertIcon, { icon: detail.icon }),
      notificationSubject: detail.notificationTypeName,
      notificationDate: notification.createdDate,
      notificationMessage: detail.genericMessage
    };
  },
  getAlertDetailsContents: (notification) => {
    var _a;
    const detail = notification.detail;
    return {
      topContent: detail.notificationTypeName,
      bottomContent: detail.genericMessage,
      bottomContentHtml: (_a = detail.genericMessageHtml) != null ? _a : ""
    };
  }
});
supportedEventDetails.set("ChatMessageReceivedEventDetails", {
  getViewProps: (notification) => {
    const detail = notification.detail;
    return {
      notificationTitle: `New Message from ${detail.senderName}`,
      notificationSubject: `New Message from ${detail.senderName}`,
      notificationDate: notification.createdDate,
      notificationMessage: detail.messageBody,
      notificationImage: import_react26.default.createElement(ChatAlertIcon, { width: 17, height: 17 })
    };
  },
  getAlertDetailsContents: (notification) => {
    const detail = notification.detail;
    return {
      topContent: `New Message from ${detail.senderName}`,
      bottomContent: detail.messageBody
    };
  }
});
supportedEventDetails.set("AccountBalanceChangedEventDetails", {
  getViewProps: (notification) => {
    const detail = notification.detail;
    const changeAmount = formatAmount(
      Math.abs(detail.previousValue - detail.newValue)
    );
    const getTitle = () => {
      return detail.direction === "INCOMING" ? `Incoming Transaction: ${changeAmount} ${detail.tokenSymbol}` : `Outgoing Transaction: -${changeAmount} ${detail.tokenSymbol}`;
    };
    const walletBlockchain = detail.walletBlockchain;
    const direction = detail.direction === "INCOMING" ? "" : "-";
    const message = `${walletBlockchain} Wallet account balance changed by ${direction}${changeAmount} ${detail.tokenSymbol}`;
    return {
      notificationImage: import_react26.default.createElement(SwapIcon, null),
      notificationTitle: "Wallet Balance Change",
      notificationSubject: getTitle(),
      notificationDate: notification.createdDate,
      notificationMessage: message
    };
  },
  getAlertDetailsContents: (notification) => {
    const detail = notification.detail;
    const changeAmount = `${formatAmount(
      Math.abs(detail.previousValue - detail.newValue)
    )}`;
    const topContent = detail.direction === "INCOMING" ? `Incoming Transaction: ${changeAmount}  ${detail.tokenSymbol}` : `Outgoing Transaction: -${changeAmount}  ${detail.tokenSymbol}`;
    const direction = detail.direction === "INCOMING" ? "" : "-";
    const bottomContent = ` ${detail.walletBlockchain} wallet account balance changed by ${direction}${changeAmount} ${detail.tokenSymbol}`;
    return {
      topContent,
      bottomContent
    };
  }
});
var validateIsSupported = (entry) => {
  var _a, _b;
  if (supportedEventDetails.get((_b = (_a = entry == null ? void 0 : entry.detail) == null ? void 0 : _a.__typename) != null ? _b : ""))
    return true;
  return false;
};
var getAlertNotificationViewBaseProps = (notification) => {
  var _a, _b, _c;
  const genProps = (_c = supportedEventDetails.get(
    (_b = (_a = notification.detail) == null ? void 0 : _a.__typename) != null ? _b : ""
  )) == null ? void 0 : _c.getViewProps;
  return !!notification.detail && !!genProps ? genProps(notification) : (
    // It should never come here: exception should be filtered out before. https://virtuoso.dev/troubleshooting
    {
      notificationTitle: "Unsupported notification",
      notificationImage: import_react26.default.createElement(AlertIcon, { icon: "INFO" }),
      notificationSubject: "Alert not supported yet",
      notificationDate: notification.createdDate,
      notificationMessage: "Unsupported notification"
    }
  );
};
var getAlertDetailsContents = (notification) => {
  var _a, _b, _c;
  const getContents = (_c = supportedEventDetails.get(
    (_b = (_a = notification.detail) == null ? void 0 : _a.__typename) != null ? _b : ""
  )) == null ? void 0 : _c.getAlertDetailsContents;
  return !!notification && !!getContents ? getContents(notification) : (
    // It should never come here: exception should be filtered out before. https://virtuoso.dev/troubleshooting
    {
      topContent: "Unsupported notification",
      bottomContent: "Alert not supported yet"
    }
  );
};
var subscribeAlertByFrontendClient = async (frontendClient, alertDetail) => {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t2, _u;
  await frontendClient.ensureAlert(alertDetail);
  const updatedData = await frontendClient.fetchData();
  const updatedTgs = updatedData.targetGroup;
  if (!(updatedTgs && updatedTgs.length > 0)) {
    throw new Error("No target groups found");
  }
  const updatedTg = __spreadProps(__spreadValues({}, updatedTgs[0]), {
    name: (_b = (_a = updatedTgs[0]) == null ? void 0 : _a.name) != null ? _b : ""
  });
  const alerts = {};
  (_c = updatedData.alert) == null ? void 0 : _c.forEach((alert) => {
    if (alert && alert.name) {
      alerts[alert.name] = alert;
    }
  });
  return {
    alerts,
    email: (_f = (_e2 = (_d = updatedTg.emailTargets) == null ? void 0 : _d[0]) == null ? void 0 : _e2.emailAddress) != null ? _f : "",
    phoneNumber: (_i = (_h = (_g = updatedTg.smsTargets) == null ? void 0 : _g[0]) == null ? void 0 : _h.phoneNumber) != null ? _i : "",
    isPhoneNumberConfirmed: (_l = (_k = (_j = updatedTg.smsTargets) == null ? void 0 : _j[0]) == null ? void 0 : _k.isConfirmed) != null ? _l : false,
    telegramId: (_o = (_n = (_m = updatedTg.telegramTargets) == null ? void 0 : _m[0]) == null ? void 0 : _n.telegramId) != null ? _o : "",
    telegramConfirmationUrl: (_r = (_q = (_p = updatedTg.telegramTargets) == null ? void 0 : _p[0]) == null ? void 0 : _q.confirmationUrl) != null ? _r : "",
    discordId: (_u = (_t2 = (_s = updatedTg.discordTargets) == null ? void 0 : _s[0]) == null ? void 0 : _t2.id) != null ? _u : ""
  };
};
var unsubscribeAlertByFrontendClient = async (frontendClient, alertDetail) => {
  const alerts = await frontendClient.getAlerts();
  const existing = alerts.find(
    (alert) => alert.name === alertDetail.eventType.name
  );
  if (!existing || !(existing == null ? void 0 : existing.id))
    throw new Error("Alert not found");
  await frontendClient.deleteAlert({ id: existing.id });
};
var subscribeAlertsByFrontendClient = async (frontendClient, eventTypes, inputs) => {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t2, _u;
  for (const eventType of eventTypes) {
    try {
      await frontendClient.ensureAlert({ eventType, inputs });
    } catch (e) {
      console.log(
        `EventType ${eventType.type} does not support default subscribe: ${e}`
      );
    }
  }
  const updatedData = await frontendClient.fetchData();
  const updatedTgs = updatedData.targetGroup;
  if (!(updatedTgs && updatedTgs.length > 0)) {
    throw new Error("No target groups found");
  }
  const updatedTg = __spreadProps(__spreadValues({}, updatedTgs[0]), {
    name: (_b = (_a = updatedTgs[0]) == null ? void 0 : _a.name) != null ? _b : ""
  });
  const alerts = {};
  (_c = updatedData.alert) == null ? void 0 : _c.forEach((alert) => {
    if (alert && alert.name) {
      alerts[alert.name] = alert;
    }
  });
  return {
    alerts,
    email: (_f = (_e2 = (_d = updatedTg.emailTargets) == null ? void 0 : _d[0]) == null ? void 0 : _e2.emailAddress) != null ? _f : "",
    phoneNumber: (_i = (_h = (_g = updatedTg.smsTargets) == null ? void 0 : _g[0]) == null ? void 0 : _h.phoneNumber) != null ? _i : "",
    isPhoneNumberConfirmed: (_l = (_k = (_j = updatedTg.smsTargets) == null ? void 0 : _j[0]) == null ? void 0 : _k.isConfirmed) != null ? _l : false,
    telegramId: (_o = (_n = (_m = updatedTg.telegramTargets) == null ? void 0 : _m[0]) == null ? void 0 : _n.telegramId) != null ? _o : "",
    telegramConfirmationUrl: (_r = (_q = (_p = updatedTg.telegramTargets) == null ? void 0 : _p[0]) == null ? void 0 : _q.confirmationUrl) != null ? _r : "",
    discordId: (_u = (_t2 = (_s = updatedTg.discordTargets) == null ? void 0 : _s[0]) == null ? void 0 : _t2.id) != null ? _u : ""
  };
};
var objectKeys = (object) => {
  return Object == null ? void 0 : Object.keys(object);
};
var NotifiToggle = ({
  classNames,
  disabled,
  checked,
  setChecked,
  intercomToggleStyle
}) => {
  return import_react45.default.createElement("label", { className: clsx_m_default("NotifiToggle__container", classNames == null ? void 0 : classNames.container) }, import_react45.default.createElement(
    "input",
    {
      className: clsx_m_default(
        "NotifiToggle__input",
        intercomToggleStyle,
        classNames == null ? void 0 : classNames.input
      ),
      disabled,
      type: "checkbox",
      checked,
      onChange: (e) => {
        setChecked(e.target.checked);
      }
    }
  ), import_react45.default.createElement(
    "span",
    {
      className: clsx_m_default("NotifiToggle__slider", classNames == null ? void 0 : classNames.slider, {
        "NotifiToggleSlider--disabled": disabled
      })
    }
  ));
};
var NotifiTooltip = ({
  classNames,
  content
}) => {
  return import_react46.default.createElement("div", { className: clsx_m_default("NotifiTooltip__container", classNames == null ? void 0 : classNames.container) }, import_react46.default.createElement(
    "svg",
    {
      className: clsx_m_default("NotifiTooltip__infoIcon", classNames == null ? void 0 : classNames.icon),
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    },
    import_react46.default.createElement(
      "path",
      {
        d: "M9 7H11V5H9V7ZM10 18C5.59 18 2 14.41 2 10C2 5.59 5.59 2 10 2C14.41 2 18 5.59 18 10C18 14.41 14.41 18 10 18ZM10 0C8.68678 0 7.38642 0.258658 6.17317 0.761205C4.95991 1.26375 3.85752 2.00035 2.92893 2.92893C1.05357 4.8043 0 7.34784 0 10C0 12.6522 1.05357 15.1957 2.92893 17.0711C3.85752 17.9997 4.95991 18.7362 6.17317 19.2388C7.38642 19.7413 8.68678 20 10 20C12.6522 20 15.1957 18.9464 17.0711 17.0711C18.9464 15.1957 20 12.6522 20 10C20 8.68678 19.7413 7.38642 19.2388 6.17317C18.7362 4.95991 17.9997 3.85752 17.0711 2.92893C16.1425 2.00035 15.0401 1.26375 13.8268 0.761205C12.6136 0.258658 11.3132 0 10 0ZM9 15H11V9H9V15Z",
        fill: "inherit"
      }
    )
  ), import_react46.default.createElement("div", { className: clsx_m_default("NotifiTooltip__body", classNames == null ? void 0 : classNames.tooltip) }, import_react46.default.createElement("div", { className: clsx_m_default("NotifiTooltip__label", classNames == null ? void 0 : classNames.tooltipLabel) }, content)));
};
var EventTypeBroadcastRow = ({
  classNames,
  config,
  disabled,
  inputs
}) => {
  var _a;
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = (0, import_react25.useState)(false);
  const [isNotificationLoading, setIsNotificationLoading] = (0, import_react25.useState)(false);
  const broadcastId = (0, import_react25.useMemo)(
    () => resolveStringRef(config.name, config.broadcastId, inputs),
    [config, inputs]
  );
  const alertName = (0, import_react25.useMemo)(() => {
    if (config.broadcastId.type === "value") {
      return config.name;
    }
    return `${config.name}:${broadcastId}`;
  }, [config, broadcastId]);
  const alertConfiguration = (0, import_react25.useMemo)(() => {
    return broadcastMessageConfiguration({
      topicName: broadcastId
    });
  }, [alertName, config, inputs]);
  const subscribeAlert = (0, import_react25.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const unSubscribeAlert = (0, import_react25.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const tooltipContent = config.tooltipContent;
  const didFetch = (0, import_react25.useRef)(false);
  (0, import_react25.useEffect)(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const handleNewSubscription = (0, import_react25.useCallback)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    loading,
    enabled,
    instantSubscribe,
    alertConfiguration,
    alertName,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return import_react25.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeBroadcastRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react25.default.createElement("div", { className: clsx_m_default("EventTypeBroadcastRow__label", classNames == null ? void 0 : classNames.label) }, (_a = config.displayNameOverride) != null ? _a : config.name, tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react25.default.createElement(
      NotifiTooltip,
      {
        classNames: classNames == null ? void 0 : classNames.tooltip,
        content: tooltipContent
      }
    ) : null),
    import_react25.default.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleNewSubscription
      }
    )
  );
};
var getParsedPercentage = (input) => {
  var _a;
  if (input.indexOf("%") === input.length - 1) {
    return (_a = parseFloat(input.slice(0, -1))) != null ? _a : null;
  }
  return null;
};
var getParsedPrice = (input) => {
  var _a;
  if (input.indexOf("$") === 0) {
    return (_a = parseFloat(input.slice(1))) != null ? _a : null;
  }
  return null;
};
var EventTypeCustomHealthCheckRow = ({
  classNames,
  config,
  disabled,
  inputs
}) => {
  var _a, _b;
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const handleSuffixPercentage = (value) => {
    value = value.replace("%", "");
    setCustomValue(value + "%");
  };
  const handlePrefixDollar = (value) => {
    value = value.replace("$", "");
    setCustomValue("$" + value);
  };
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = (0, import_react47.useState)(false);
  const [selectedIndex, setSelectedIndex] = (0, import_react47.useState)(null);
  const [isNotificationLoading, setIsNotificationLoading] = (0, import_react47.useState)(false);
  const [customValue, setCustomValue] = (0, import_react47.useState)("");
  const customInputRef = (0, import_react47.useRef)(null);
  const thresholdDirection = "below";
  const [errorMessage, setErrorMessage] = (0, import_react47.useState)("");
  const alertName = (0, import_react47.useMemo)(() => config.name, [config]);
  const tooltipContent = config.tooltipContent;
  const UNABLE_TO_SUBSCRIBE2 = "Unable to subscribe, please try again";
  const UNABLE_TO_UNSUBSCRIBE = "Unable to unsubscribe, please try again";
  const INVALID_NUMBER2 = "Please enter a valid number";
  if (config.selectedUIType !== "HEALTH_CHECK") {
    return null;
  }
  const subscribingRatioValue = (0, import_react47.useMemo)(() => {
    const alert = alerts[alertName];
    if (!alert || !alert.filterOptions)
      return null;
    let alertRatioValue = null;
    switch (config.numberType) {
      case "percentage":
        alertRatioValue = JSON.parse(alert.filterOptions).threshold * 100;
        break;
      default:
        alertRatioValue = JSON.parse(alert.filterOptions).threshold;
    }
    return alertRatioValue;
  }, [alerts]);
  const defaultRatios = (0, import_react47.useMemo)(() => {
    var _a2;
    const ratios = (_a2 = config.checkRatios) != null ? _a2 : [];
    return ratios.map((ratio) => ratio.ratio);
  }, [config]);
  (0, import_react47.useEffect)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    if (!subscribingRatioValue) {
      setEnabled(false);
      setSelectedIndex(defaultRatios.length - 1);
      return;
    }
    setEnabled(true);
    const selectedRatioIndex = defaultRatios.findIndex(
      (ratio) => ratio === subscribingRatioValue
    );
    if (selectedRatioIndex !== -1 && customValue === "") {
      setSelectedIndex(selectedRatioIndex);
    }
    if (!defaultRatios.includes(subscribingRatioValue) && customValue === "") {
      setSelectedIndex(3);
      setCustomValue(() => {
        switch (config.numberType) {
          case "percentage":
            return subscribingRatioValue + "%";
          case "price":
            return "$" + subscribingRatioValue;
          default:
            return subscribingRatioValue.toString();
        }
      });
    }
  }, [alertName, alerts, loading, enabled, setEnabled, isNotificationLoading]);
  const subscribeAlert = (0, import_react47.useCallback)(
    async (alertDetail, ratioNumber) => {
      var _a2, _b2;
      if (isUsingFrontendClient) {
        alertDetail.inputs[`${alertDetail.eventType.name}__healthRatio`] = ratioNumber;
        alertDetail.inputs[`${alertDetail.eventType.name}__healthThresholdDirection`] = (_a2 = config.checkRatios[0].type) != null ? _a2 : thresholdDirection;
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: customThresholdConfiguration({
            sourceType: config.sourceType,
            filterType: config.filterType,
            alertFrequency: config.alertFrequency,
            sourceAddress: resolveStringRef(
              alertName,
              config.sourceAddress,
              inputs
            ),
            thresholdDirection: (_b2 = config.checkRatios[0].type) != null ? _b2 : thresholdDirection,
            threshold: config.numberType === "percentage" ? ratioNumber / 100 : ratioNumber
          }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const unSubscribeAlert = (0, import_react47.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleCustomRatioButtonNewSubscription = () => {
    if (loading || isNotificationLoading) {
      return;
    }
    let regex = new RegExp(/^[0-9.]+$/);
    switch (config.numberType) {
      case "percentage":
        regex = new RegExp(/^[0-9.%]+$/);
        break;
      case "price":
        regex = new RegExp(/^[0-9.$]+$/);
        break;
    }
    if (!customInputRef.current || !regex.test(customInputRef.current.value)) {
      return setErrorMessage(INVALID_NUMBER2);
    }
    setErrorMessage("");
    setIsNotificationLoading(true);
    customInputRef.current.placeholder = "Custom";
    let ratioNumber = null;
    switch (config.numberType) {
      case "percentage":
        ratioNumber = getParsedPercentage(customInputRef.current.value);
        break;
      case "price":
        ratioNumber = getParsedPrice(customInputRef.current.value);
        break;
      default:
        ratioNumber = parseFloat(customInputRef.current.value);
    }
    if (ratioNumber && customValue) {
      subscribeAlert({ eventType: config, inputs }, ratioNumber).then(() => {
        setSelectedIndex(3);
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_UNSUBSCRIBE)).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setErrorMessage(INVALID_NUMBER2);
      setSelectedIndex(defaultRatios[defaultRatios.length - 1]);
      setIsNotificationLoading(false);
    }
  };
  const handleKeypressUp = (event) => {
    if (event.key === "Enter") {
      if (customInputRef.current) {
        customInputRef.current.blur();
        event.preventDefault();
      }
    }
  };
  const handleRatioButtonNewSubscription = (value, index) => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    setErrorMessage("");
    if (value) {
      subscribeAlert({ eventType: config, inputs }, value).then(() => {
        isUsingFrontendClient && frontendClient.fetchData().then(render);
        setSelectedIndex(index);
        setCustomValue("");
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE2)).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setErrorMessage(INVALID_NUMBER2);
      setIsNotificationLoading(false);
    }
  };
  const handleHealthCheckSubscription = (0, import_react47.useCallback)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    setErrorMessage("");
    if (!enabled && !subscribingRatioValue) {
      setEnabled(true);
      subscribeAlert(
        { eventType: config, inputs },
        defaultRatios[defaultRatios.length - 1]
      ).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        setErrorMessage(UNABLE_TO_SUBSCRIBE2);
        setEnabled(false);
        throw e;
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({ eventType: config, inputs }).then((res) => {
        setCustomValue("");
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        setErrorMessage(UNABLE_TO_SUBSCRIBE2);
        setEnabled(true);
        throw e;
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    subscribingRatioValue,
    enabled,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return import_react47.default.createElement("div", null, import_react47.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeCustomHealthCheckRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react47.default.createElement(
      "div",
      {
        className: clsx_m_default("EventTypeHealthCheckRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react47.default.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    import_react47.default.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleHealthCheckSubscription
      }
    )
  ), enabled && ((_a = config.checkRatios) == null ? void 0 : _a.length) ? import_react47.default.createElement(import_react47.default.Fragment, null, import_react47.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeHealthCheckRow__content",
        classNames == null ? void 0 : classNames.content
      )
    },
    config.healthCheckSubtitle ? config.healthCheckSubtitle : `Alert me when my margin ratio is ${(_b = config.checkRatios[0]) == null ? void 0 : _b.type}`
  ), import_react47.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeHealthCheckRow__buttonContainer",
        classNames == null ? void 0 : classNames.buttonContainer
      )
    },
    config.checkRatios.map((value, index) => {
      const numberType = config.numberType;
      let valueToShow = null;
      switch (numberType) {
        case "percentage":
          valueToShow = value.ratio + "%";
          break;
        case "price":
          valueToShow = "$" + value.ratio;
          break;
        default:
          valueToShow = value.ratio;
      }
      return import_react47.default.createElement(
        "div",
        {
          key: index,
          className: clsx_m_default(
            "EventTypeHealthCheckRow__button",
            `${index === selectedIndex ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
            isNotificationLoading ? "buttonDisabled" : void 0,
            classNames == null ? void 0 : classNames.button
          ),
          onClick: () => {
            if (isNotificationLoading === true || selectedIndex === index) {
              return;
            }
            handleRatioButtonNewSubscription(value.ratio, index);
          }
        },
        valueToShow
      );
    }),
    import_react47.default.createElement(
      "input",
      {
        ref: customInputRef,
        onKeyUp: (e) => handleKeypressUp(e),
        onFocus: (e) => e.target.placeholder = config.numberType === "percentage" ? "0.00" : "0",
        onClick: () => {
          setErrorMessage("");
          setSelectedIndex(null);
        },
        disabled: isNotificationLoading,
        onBlur: handleCustomRatioButtonNewSubscription,
        value: customValue,
        placeholder: "Custom",
        className: clsx_m_default(
          "EventTypeHealthCheckRow__button",
          "EventTypeHealthCheckRow__customButton",
          `${selectedIndex === 3 ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
          classNames == null ? void 0 : classNames.button
        ),
        onChange: (e) => {
          var _a2;
          if (config.numberType === "percentage") {
            handleSuffixPercentage(e.target.value);
          } else if (config.numberType === "price") {
            handlePrefixDollar(e.target.value);
          } else {
            setCustomValue((_a2 = e.target.value) != null ? _a2 : "");
          }
        }
      }
    )
  ), import_react47.default.createElement(
    "label",
    {
      className: clsx_m_default(
        "NotifiEmailInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    errorMessage
  )) : null);
};
var EventTypeCustomToggleRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = (0, import_react48.useState)(false);
  const [isNotificationLoading, setIsNotificationLoading] = (0, import_react48.useState)(false);
  const alertName = (0, import_react48.useMemo)(() => config.name, [config]);
  if (config.selectedUIType !== "TOGGLE") {
    return null;
  }
  const tooltipContent = config.tooltipContent;
  const didFetch = (0, import_react48.useRef)(false);
  (0, import_react48.useEffect)(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const subscribeAlert = (0, import_react48.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: customToggleConfiguration({
            sourceType: config.sourceType,
            filterType: config.filterType,
            filterOptions: config.filterOptions,
            sourceAddress: resolveStringRef(
              alertName,
              config.sourceAddress,
              inputs
            )
          }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient, config]
  );
  const unSubscribeAlert = (0, import_react48.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleNewSubscription = (0, import_react48.useCallback)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(true);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    enabled,
    alerts,
    instantSubscribe,
    alertName,
    isNotificationLoading,
    setEnabled,
    setIsNotificationLoading
  ]);
  return import_react48.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeCustomToggleRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react48.default.createElement(
      "div",
      {
        className: clsx_m_default("EventTypeCustomToggleRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react48.default.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    import_react48.default.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        checked: enabled,
        setChecked: handleNewSubscription
      }
    )
  );
};
var EventTypeDirectPushRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, setLoading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = (0, import_react49.useState)(false);
  const pushId = (0, import_react49.useMemo)(
    () => resolveStringRef(config.name, config.directPushId, inputs),
    [config, inputs]
  );
  const alertName = (0, import_react49.useMemo)(() => {
    if (config.directPushId.type === "value") {
      return config.name;
    }
    return `${config.name}:${pushId}`;
  }, [config, pushId]);
  const alertConfiguration = (0, import_react49.useMemo)(() => {
    return directMessageConfiguration({
      type: pushId
    });
  }, [alertName, config, inputs]);
  const tooltipContent = config.tooltipContent;
  const subscribeAlert = (0, import_react49.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const unSubscribeAlert = (0, import_react49.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  (0, import_react49.useEffect)(() => {
    if (loading) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
  }, [alertName, alerts]);
  const handleNewSubscription = (0, import_react49.useCallback)(() => {
    if (loading) {
      return;
    }
    setLoading(true);
    if (!enabled) {
      subscribeAlert({
        eventType: config,
        inputs
      }).then(() => {
        setEnabled(true);
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setEnabled(false)).finally(() => setLoading(false));
    } else {
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then(() => {
        setEnabled(false);
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setEnabled(true)).finally(() => setLoading(false));
    }
  }, [enabled, instantSubscribe, alertConfiguration, alertName]);
  return import_react49.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeDirectPushRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react49.default.createElement("div", { className: clsx_m_default("EventTypeDirectPushRow__label", classNames == null ? void 0 : classNames.label) }, config.name, tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react49.default.createElement(
      NotifiTooltip,
      {
        classNames: classNames == null ? void 0 : classNames.tooltip,
        content: tooltipContent
      }
    ) : null),
    import_react49.default.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled,
        checked: enabled,
        setChecked: handleNewSubscription
      }
    )
  );
};
var getParsedInputNumber = (input) => {
  var _a;
  if (input.indexOf("%") === input.length - 1) {
    return (_a = parseFloat(input.slice(0, -1))) != null ? _a : null;
  }
  return null;
};
var UNABLE_TO_SUBSCRIBE = "Unable to subscribe, please try again";
var INVALID_NUMBER = "Please enter a valid number";
var inputsValidator = (inputs) => {
  return "index" in inputs;
};
var EventTypeHealthCheckRow = ({ classNames, config, disabled }) => {
  var _a;
  const customInputRef = (0, import_react50.useRef)(null);
  const { alerts, loading, setLoading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const handleSuffixPercentage = (value) => {
    value = value.replace("%", "");
    setCustomValue(value + "%");
  };
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = (0, import_react50.useState)(false);
  const [selectedIndex, setSelectedIndex] = (0, import_react50.useState)(null);
  const [initialRatio, setInitialRatio] = (0, import_react50.useState)(null);
  const [customValue, setCustomValue] = (0, import_react50.useState)("");
  const [errorMessage, setErrorMessage] = (0, import_react50.useState)("");
  const alertName = (0, import_react50.useMemo)(() => config.name, [config]);
  const tooltipContent = config.tooltipContent;
  const isValueType = config && config.checkRatios.type === "value";
  let ratios = [];
  let thresholdDirection = "below";
  if (isValueType) {
    ratios = config.checkRatios.value;
    thresholdDirection = ratios[0].type;
  }
  (0, import_react50.useEffect)(() => {
    var _a2;
    if (loading) {
      return;
    }
    const alert = alerts[alertName];
    const checkRatios = ratios.map((ratio) => ratio.ratio);
    if (alert) {
      let alertRatioValue = null;
      if (alert.filterOptions) {
        alertRatioValue = JSON.parse(alert.filterOptions).threshold;
      }
      setEnabled(true);
      if (alertRatioValue) {
        ratios.forEach((ratio, index) => {
          if (ratio.ratio === alertRatioValue && customValue === "") {
            setSelectedIndex(index);
          }
        });
        setInitialRatio(alertRatioValue);
        if (!checkRatios.includes(alertRatioValue) && customValue === "") {
          setSelectedIndex(3);
          setCustomValue(alertRatioValue * 100 + "%");
        }
      }
    } else {
      setEnabled(false);
      setSelectedIndex(ratios.length - 1);
      setInitialRatio((_a2 = ratios[ratios.length - 1]) == null ? void 0 : _a2.ratio);
    }
  }, [
    alertName,
    alerts,
    loading,
    ratios,
    setEnabled,
    setCustomValue,
    setSelectedIndex
  ]);
  const subscribeAlert = (0, import_react50.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: healthThresholdConfiguration({
            alertFrequency: config.alertFrequency,
            percentage: inputsValidator(alertDetail.inputs) ? ratios[alertDetail.inputs.index].ratio : alertDetail.inputs.customPercentage,
            thresholdDirection: inputsValidator(alertDetail.inputs) ? thresholdDirection : alertDetail.inputs.thresholdDirection
          }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient, config]
  );
  const unSubscribeAlert = (0, import_react50.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleToggleNewSubscription = (0, import_react50.useCallback)(() => {
    if (loading) {
      return;
    }
    setLoading(true);
    setErrorMessage("");
    if (!enabled && initialRatio !== null) {
      subscribeAlert({
        eventType: config,
        inputs: {
          index: 0
        }
      }).then(() => {
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE)).finally(() => setLoading(false));
    } else {
      unSubscribeAlert({
        eventType: config,
        inputs: {}
      }).then(() => {
        setCustomValue("");
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE)).finally(() => setLoading(false));
    }
  }, [initialRatio, enabled, isValueType]);
  const handleRatioButtonNewSubscription = (value, index) => {
    if (loading) {
      return;
    }
    setErrorMessage("");
    if (value) {
      subscribeAlert({
        eventType: config,
        inputs: {
          index
        }
      }).then(() => {
        setSelectedIndex(index);
        setCustomValue("");
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE));
    } else {
      setErrorMessage(INVALID_NUMBER);
    }
  };
  const handleCustomRatioButtonNewSubscription = () => {
    if (loading) {
      return;
    }
    setErrorMessage("");
    if (customInputRef.current) {
      customInputRef.current.placeholder = "Custom";
      const ratioNumber = getParsedInputNumber(customInputRef.current.value);
      if (ratioNumber && ratioNumber >= 0 && ratioNumber <= 100 && customValue) {
        subscribeAlert({
          eventType: config,
          inputs: {
            customPercentage: ratioNumber / 100,
            thresholdDirection
          }
        }).then(() => {
          setSelectedIndex(3);
          isUsingFrontendClient && frontendClient.fetchData().then(render);
        }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE));
      } else {
        setErrorMessage(INVALID_NUMBER);
      }
    }
  };
  const handleKeypressUp = (event) => {
    if (event.key === "Enter") {
      if (customInputRef.current) {
        customInputRef.current.blur();
        event.preventDefault();
      }
    }
  };
  return import_react50.default.createElement("div", null, import_react50.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeHealthCheckRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react50.default.createElement(
      "div",
      {
        className: clsx_m_default("EventTypeHealthCheckRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react50.default.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    import_react50.default.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled,
        setChecked: handleToggleNewSubscription
      }
    )
  ), enabled ? import_react50.default.createElement(import_react50.default.Fragment, null, import_react50.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeHealthCheckRow__content",
        classNames == null ? void 0 : classNames.content
      )
    },
    "Alert me when my margin ratio is ",
    (_a = ratios[0]) == null ? void 0 : _a.type
  ), import_react50.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeHealthCheckRow__buttonContainer",
        classNames == null ? void 0 : classNames.buttonContainer
      )
    },
    ratios.map((value, index) => {
      const percentage = value.ratio * 100 + "%";
      return import_react50.default.createElement(
        "div",
        {
          key: index,
          className: clsx_m_default(
            "EventTypeHealthCheckRow__button",
            `${index === selectedIndex ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
            classNames == null ? void 0 : classNames.button
          ),
          onClick: () => {
            handleRatioButtonNewSubscription(value.ratio, index);
          }
        },
        percentage
      );
    }),
    import_react50.default.createElement(
      "input",
      {
        ref: customInputRef,
        onKeyUp: (e) => handleKeypressUp(e),
        onFocus: (e) => e.target.placeholder = "0.00%",
        onClick: () => {
          setErrorMessage("");
          setSelectedIndex(null);
        },
        onBlur: handleCustomRatioButtonNewSubscription,
        value: customValue,
        placeholder: "Custom",
        className: clsx_m_default(
          "EventTypeHealthCheckRow__button",
          "EventTypeHealthCheckRow__customButton",
          `${selectedIndex === 3 ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
          classNames == null ? void 0 : classNames.button
        ),
        onChange: (e) => {
          var _a2;
          handleSuffixPercentage((_a2 = e.target.value) != null ? _a2 : "");
        }
      }
    )
  ), import_react50.default.createElement(
    "label",
    {
      className: clsx_m_default(
        "NotifiEmailInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    errorMessage
  )) : null);
};
var EventTypeLabelRow = ({
  classNames,
  config
}) => {
  const { name, tooltipContent } = config;
  return import_react51.default.createElement(
    "div",
    {
      className: clsx_m_default("EventTypeLabelRow__container", classNames == null ? void 0 : classNames.container)
    },
    import_react51.default.createElement("div", { className: clsx_m_default("EventTypeLabelRow__label", classNames == null ? void 0 : classNames.label) }, name, tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react51.default.createElement(
      NotifiTooltip,
      {
        classNames: classNames == null ? void 0 : classNames.tooltip,
        content: tooltipContent
      }
    ) : null)
  );
};
var EventTypePriceChangeRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = (0, import_react52.useState)(false);
  const [isNotificationLoading, setIsNotificationLoading] = (0, import_react52.useState)(false);
  const alertName = (0, import_react52.useMemo)(() => config.name, [config]);
  const alertConfiguration = (0, import_react52.useMemo)(() => {
    return priceChangeConfiguration({
      tokenIds: config.tokenIds
    });
  }, [alertName, config]);
  const tooltipContent = config.tooltipContent;
  const didFetch = (0, import_react52.useRef)(false);
  (0, import_react52.useEffect)(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const subscribeAlert = (0, import_react52.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration,
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient, config]
  );
  const unSubscribeAlert = (0, import_react52.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleNewSubscription = (0, import_react52.useCallback)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    loading,
    enabled,
    instantSubscribe,
    alertConfiguration,
    alertName,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return import_react52.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypePriceChangeRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react52.default.createElement(
      "div",
      {
        className: clsx_m_default("EventTypePriceChangeRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react52.default.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    import_react52.default.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleNewSubscription
      }
    )
  );
};
var DeleteIcon = (props) => {
  return import_react54.default.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    import_react54.default.createElement(
      "path",
      {
        d: "M7.5 17.4444C7.5 18.3 8.175 19 9 19H15C15.825 19 16.5 18.3 16.5 17.4444V8.11111H7.5V17.4444ZM17.25 5.77778H14.625L13.875 5H10.125L9.375 5.77778H6.75V7.33333H17.25V5.77778Z",
        fill: "#inherit"
      }
    )
  );
};
var EventTypeTradingPairsRow = ({ classNames, config, inputs }) => {
  const { name, tooltipContent } = config;
  const { alerts } = useNotifiSubscriptionContext();
  const tradingPairAlertNames = (0, import_react53.useMemo)(() => {
    if (alerts === void 0) {
      return [];
    }
    return Object.keys(alerts).filter((alertName) => alertName.indexOf(config.name) >= 0).sort((a2, b2) => {
      const getTime = (alertName) => {
        const [, time] = alertName.split(":;:");
        const date = new Date(time);
        return date.getTime();
      };
      return getTime(a2) - getTime(b2);
    });
  }, [alerts, config.name]);
  const [showInput, setShowInput] = (0, import_react53.useState)(false);
  const hasSetInput = (0, import_react53.useRef)(false);
  (0, import_react53.useEffect)(() => {
    if (!hasSetInput.current && alerts !== void 0) {
      hasSetInput.current = true;
      setShowInput(tradingPairAlertNames.length === 0);
    }
  }, [alerts, tradingPairAlertNames]);
  return import_react53.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeTradingPairsRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react53.default.createElement(
      "div",
      {
        className: clsx_m_default("EventTypeTradingPairsRow__label", classNames == null ? void 0 : classNames.label)
      },
      name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react53.default.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    tradingPairAlertNames.map((alertName) => {
      return import_react53.default.createElement(
        TradingPairAlertRow,
        {
          key: alertName,
          classNames: classNames == null ? void 0 : classNames.tradingPairAlertRow,
          alertName,
          inputs
        }
      );
    }),
    showInput ? import_react53.default.createElement(
      TradingPairSettingsRow,
      {
        classNames: classNames == null ? void 0 : classNames.tradingPairSettingsRow,
        config,
        inputs,
        onSave: () => {
          setShowInput(false);
        }
      }
    ) : null,
    import_react53.default.createElement(
      "button",
      {
        className: clsx_m_default(
          "EventTypeTradingPairsRow__addPair",
          classNames == null ? void 0 : classNames.addPair
        ),
        disabled: showInput,
        onClick: () => {
          setShowInput(true);
        }
      },
      "Add pair"
    )
  );
};
var TradingPairAlertRow = ({
  classNames,
  alertName,
  inputs
}) => {
  const { render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const { name, description } = (0, import_react53.useMemo)(() => {
    const [, , name2, above, price] = alertName.split(":;:");
    const description2 = `Alert me when trade price is ${above}: ${price}`;
    return {
      name: name2,
      description: description2
    };
  }, [alertName]);
  const unSubscribeAlert = (0, import_react53.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  return import_react53.default.createElement(
    "div",
    {
      className: clsx_m_default("TradingPairAlertRow__container", classNames == null ? void 0 : classNames.container)
    },
    import_react53.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "TradingPairAlertRow__textContainer",
          classNames == null ? void 0 : classNames.textContainer
        )
      },
      import_react53.default.createElement("span", { className: clsx_m_default("TradingPairAlertRow__name", classNames == null ? void 0 : classNames.name) }, name),
      import_react53.default.createElement(
        "span",
        {
          className: clsx_m_default(
            "TradingPairAlertRow__description",
            classNames == null ? void 0 : classNames.description
          )
        },
        description
      )
    ),
    import_react53.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "TradingPairAlertRow__deleteIcon",
          classNames == null ? void 0 : classNames.deleteIcon
        ),
        onClick: () => {
          unSubscribeAlert({
            eventType: {
              name: alertName
            },
            // We only need alertName to unsubscribe
            inputs
          }).then(() => {
            isUsingFrontendClient && frontendClient.fetchData().then(render);
          });
        }
      },
      import_react53.default.createElement(DeleteIcon, null)
    )
  );
};
var TradingPairSettingsRow = ({
  classNames,
  config,
  inputs,
  onSave
}) => {
  const tradingPairs = resolveStringArrayRef(
    config.name,
    config.tradingPairs,
    inputs
  );
  const [selectedPair, setSelectedPair] = (0, import_react53.useState)(
    void 0
  );
  const [above, setAbove] = (0, import_react53.useState)(true);
  const [price, setPrice] = (0, import_react53.useState)(0);
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { render } = useNotifiSubscriptionContext();
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const alertConfiguration = (0, import_react53.useMemo)(() => {
    return selectedPair ? tradingPairConfiguration({
      tradingPair: selectedPair,
      above,
      price
    }) : void 0;
  }, [selectedPair, above, price]);
  const alertName = (0, import_react53.useMemo)(() => {
    const now = (/* @__PURE__ */ new Date()).toISOString();
    return `${config.name}:;:${now}:;:${selectedPair}:;:${above ? "above" : "below"}:;:${price}`;
  }, [config, selectedPair, above, price]);
  const subscribeAlert = async (alertDetail) => {
    if (isUsingFrontendClient) {
      return subscribeAlertByFrontendClient(frontendClient, alertDetail);
    }
    if (!alertConfiguration)
      throw new Error("alertConfiguration is undefinded");
    return instantSubscribe({
      alertName,
      alertConfiguration
    });
  };
  return import_react53.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "TradingPairSettingsRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react53.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "TradingPairSettingsRow__dropdownContainer",
          classNames == null ? void 0 : classNames.dropdownContainer
        )
      },
      import_react53.default.createElement(
        "select",
        {
          className: clsx_m_default(
            "TradingPairSettingsRow__dropdown",
            classNames == null ? void 0 : classNames.dropdown
          ),
          onChange: (e) => setSelectedPair(e.target.value),
          value: selectedPair
        },
        import_react53.default.createElement(
          "option",
          {
            className: clsx_m_default(
              "TradingPairSettingsRow__option",
              classNames == null ? void 0 : classNames.option
            ),
            key: "unselected",
            value: void 0
          },
          "Select a trading pair"
        ),
        tradingPairs.map((pair) => import_react53.default.createElement(
          "option",
          {
            className: clsx_m_default(
              "TradingPairSettingsRow__option",
              classNames == null ? void 0 : classNames.option
            ),
            key: pair,
            value: pair
          },
          pair
        ))
      )
    ),
    import_react53.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "TradingPairSettingsRow__buttonContainer",
          classNames == null ? void 0 : classNames.buttonContainer
        )
      },
      import_react53.default.createElement(
        "button",
        {
          className: clsx_m_default(
            "TradingPairSettingsRow__radioButton",
            classNames == null ? void 0 : classNames.radioButton,
            { TradingPairSettingsRow__radioSelected: above }
          ),
          onClick: () => setAbove(true)
        },
        "Above"
      ),
      import_react53.default.createElement(
        "button",
        {
          className: clsx_m_default(
            "TradingPairSettingsRow__radioButton",
            classNames == null ? void 0 : classNames.radioButton,
            { TradingPairSettingsRow__radioSelected: !above }
          ),
          onClick: () => setAbove(false)
        },
        "Below"
      )
    ),
    import_react53.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "TradingPairSettingsRow__priceInputContainer",
          classNames == null ? void 0 : classNames.priceInputContainer
        )
      },
      import_react53.default.createElement(
        "input",
        {
          className: clsx_m_default(
            "TradingPairSettingsRow__priceInput",
            classNames == null ? void 0 : classNames.priceInput
          ),
          name: "notifi-tradingpair-price",
          type: "number",
          inputMode: "decimal",
          value: price,
          onChange: (e) => {
            setPrice(e.target.valueAsNumber);
          }
        }
      )
    ),
    import_react53.default.createElement(
      "button",
      {
        className: clsx_m_default(
          "TradingPairSettingsRow__saveButton",
          classNames == null ? void 0 : classNames.saveButton
        ),
        disabled: selectedPair === void 0,
        onClick: async () => {
          if (selectedPair !== void 0) {
            await subscribeAlert({
              eventType: __spreadProps(__spreadValues({}, config), { name: alertName }),
              inputs: __spreadValues({
                price,
                direction: above ? "above" : "below",
                pair: selectedPair
              }, inputs)
            });
            frontendClient.fetchData().then(render);
            setSelectedPair(void 0);
            setAbove(true);
            setPrice(0);
            onSave();
          }
        }
      },
      "Save"
    )
  );
};
var EventTypeFusionMultiThresholdRow = ({ classNames, config, inputs }) => {
  const { displayNameOverride, name, tooltipContent } = config;
  const { alerts } = useNotifiSubscriptionContext();
  const fusionMultiThresholdAlertNames = (0, import_react55.useMemo)(() => {
    if (alerts === void 0) {
      return [];
    }
    return Object.keys(alerts).filter((alertName) => alertName.indexOf(config.name) >= 0).sort((a2, b2) => {
      const getTime = (alertName) => {
        const [, time] = alertName.split(":;:");
        const date = new Date(time);
        return date.getTime();
      };
      return getTime(a2) - getTime(b2);
    });
  }, [alerts, config.name]);
  const [showInput, setShowInput] = (0, import_react55.useState)(false);
  const hasSetInput = (0, import_react55.useRef)(false);
  (0, import_react55.useEffect)(() => {
    if (!hasSetInput.current && alerts !== void 0) {
      hasSetInput.current = true;
      setShowInput(fusionMultiThresholdAlertNames.length === 0);
    }
  }, [alerts, fusionMultiThresholdAlertNames]);
  return import_react55.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeFusionMultiThresholdRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react55.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "EventTypeFusionMultiThresholdRow__label",
          classNames == null ? void 0 : classNames.label
        )
      },
      displayNameOverride != null ? displayNameOverride : name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react55.default.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    import_react55.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "EventTypeFusionMultiThresholdRow__content",
          classNames == null ? void 0 : classNames.content
        )
      },
      config.subtitle ? config.subtitle : `Alert me when my margin ratio is:`
    ),
    fusionMultiThresholdAlertNames.map((alertName) => {
      return import_react55.default.createElement(
        FusionMultiThresholdAlertRow,
        {
          key: alertName,
          classNames: classNames == null ? void 0 : classNames.fusionMultiThresholdAlertRow,
          alertName,
          inputs
        }
      );
    }),
    showInput ? import_react55.default.createElement(
      FusionMultiThresholdSettingsRow,
      {
        classNames: classNames == null ? void 0 : classNames.fusionMultiThresholdSettingsRow,
        config,
        inputs,
        onSave: () => {
          setShowInput(false);
        }
      }
    ) : null,
    import_react55.default.createElement(
      "button",
      {
        className: clsx_m_default(
          "EventTypeFusionMultiThresholdRow__addThreshold",
          classNames == null ? void 0 : classNames.addThreshold
        ),
        disabled: showInput,
        onClick: () => {
          setShowInput(true);
        }
      },
      config.addThresholdTitle ? config.addThresholdTitle : "Add alert"
    )
  );
};
var FusionMultiThresholdAlertRow = ({ classNames, alertName, inputs }) => {
  const { render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const name = (0, import_react55.useMemo)(() => {
    const [, , above, threshold] = alertName.split(":;:");
    return above + " " + threshold;
  }, [alertName]);
  const unSubscribeAlert = (0, import_react55.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  return import_react55.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "FusionMultiThresholdAlertRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react55.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "FusionMultiThresholdAlertRow__textContainer",
          classNames == null ? void 0 : classNames.textContainer
        )
      },
      import_react55.default.createElement(
        "span",
        {
          className: clsx_m_default(
            "FusionMultiThresholdAlertRow__name",
            classNames == null ? void 0 : classNames.name
          )
        },
        name
      )
    ),
    import_react55.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "FusionMultiThresholdAlertRow__deleteIcon",
          classNames == null ? void 0 : classNames.deleteIcon
        ),
        onClick: () => {
          unSubscribeAlert({
            eventType: {
              name: alertName
            },
            // We only need alertName to unsubscribe
            inputs
          }).then(() => {
            isUsingFrontendClient && frontendClient.fetchData().then(render);
          });
        }
      },
      import_react55.default.createElement(DeleteIcon, null)
    )
  );
};
var FusionMultiThresholdSettingsRow = ({
  classNames,
  config,
  inputs,
  onSave
}) => {
  const [above, setAbove] = (0, import_react55.useState)(true);
  const [threshold, setThreshold] = (0, import_react55.useState)(0);
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { render } = useNotifiSubscriptionContext();
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const fusionEventId = (0, import_react55.useMemo)(
    () => resolveStringRef(config.name, config.fusionEventId, inputs),
    [config, inputs]
  );
  const fusionSourceAddress = (0, import_react55.useMemo)(
    () => resolveStringRef(config.name, config.sourceAddress, inputs),
    [config, inputs]
  );
  const alertConfiguration = (0, import_react55.useMemo)(() => {
    return fusionHealthCheckConfiguration({
      maintainSourceGroup: config == null ? void 0 : config.maintainSourceGroup,
      fusionId: fusionEventId,
      fusionSourceAddress,
      alertFrequency: config.alertFrequency,
      thresholdDirection: above ? "above" : "below",
      threshold: config.numberType === "percentage" ? threshold / 100 : threshold
    });
  }, [above, threshold]);
  const alertName = (0, import_react55.useMemo)(() => {
    const now = (/* @__PURE__ */ new Date()).toISOString();
    return `${config.name}:;:${now}:;:${above ? "Above" : "Below"}:;:${threshold.toFixed(2)}${config.numberType === "percentage" ? "%" : ""}`;
  }, [config, above, threshold]);
  const subscribeAlert = (0, import_react55.useCallback)(
    async (alertDetail, threshold2) => {
      if (isUsingFrontendClient) {
        const fusionEventType = {
          name: alertDetail.eventType.name,
          type: "fusion",
          fusionEventId: alertDetail.eventType.fusionEventId,
          sourceAddress: alertDetail.eventType.sourceAddress,
          maintainSourceGroup: alertDetail.eventType.maintainSourceGroup,
          alertFrequency: alertDetail.eventType.alertFrequency,
          selectedUIType: "HEALTH_CHECK",
          numberType: alertDetail.eventType.numberType,
          healthCheckSubtitle: "",
          checkRatios: [{ type: above ? "above" : "below", ratio: threshold2 }]
        };
        alertDetail.inputs[`${alertDetail.eventType.name}__healthRatio`] = threshold2;
        alertDetail.inputs[`${alertDetail.eventType.name}__healthThresholdDirection`] = above ? "above" : "below";
        return subscribeAlertByFrontendClient(frontendClient, {
          eventType: fusionEventType,
          inputs: alertDetail.inputs
        });
      }
      if (!alertConfiguration)
        throw new Error("alertConfiguration is undefinded");
      return instantSubscribe({
        alertName,
        alertConfiguration
      });
    },
    [isUsingFrontendClient, frontendClient, above, alertConfiguration]
  );
  return import_react55.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "FusionMultiThresholdSettingsRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react55.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "FusionMultiThresholdSettingsRow__buttonContainer",
          classNames == null ? void 0 : classNames.buttonContainer
        )
      },
      import_react55.default.createElement(
        "button",
        {
          className: clsx_m_default(
            "FusionMultiThresholdSettingsRow__radioButton",
            classNames == null ? void 0 : classNames.radioButton,
            { FusionMultiThresholdSettingsRow__radioSelected: above }
          ),
          onClick: () => setAbove(true)
        },
        "Above"
      ),
      import_react55.default.createElement(
        "button",
        {
          className: clsx_m_default(
            "FusionMultiThresholdSettingsRow__radioButton",
            classNames == null ? void 0 : classNames.radioButton,
            { FusionMultiThresholdSettingsRow__radioSelected: !above }
          ),
          onClick: () => setAbove(false)
        },
        "Below"
      )
    ),
    import_react55.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "FusionMultiThresholdSettingsRow__thresholdInputContainer",
          classNames == null ? void 0 : classNames.thresholdInputContainer
        )
      },
      import_react55.default.createElement(
        "input",
        {
          className: clsx_m_default(
            "FusionMultiThresholdSettingsRow__thresholdInput",
            classNames == null ? void 0 : classNames.thresholdInput
          ),
          name: "notifi-fusionmultithreshold-threshold",
          type: "number",
          inputMode: "decimal",
          value: threshold,
          onChange: (e) => {
            setThreshold(e.target.valueAsNumber);
          }
        }
      )
    ),
    import_react55.default.createElement(
      "button",
      {
        className: clsx_m_default(
          "FusionMultiThresholdSettingsRow__saveButton",
          classNames == null ? void 0 : classNames.saveButton
        ),
        disabled: threshold === void 0,
        onClick: async () => {
          await subscribeAlert(
            {
              eventType: __spreadProps(__spreadValues({}, config), { name: alertName }),
              inputs
            },
            threshold
          );
          frontendClient.fetchData().then(render);
          setAbove(true);
          setThreshold(0);
          onSave();
        }
      },
      "Save"
    )
  );
};
var EventTypeUnsupportedRow = ({ classNames }) => {
  return import_react56.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeUnsupportedRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react56.default.createElement(
      "div",
      {
        className: clsx_m_default("EventTypeUnsupportedRow__label", classNames == null ? void 0 : classNames.label)
      },
      "Unsupported Event Type"
    )
  );
};
var EventTypeWalletBalanceRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, connectedWallets, render, setLoading } = useNotifiSubscriptionContext();
  const [isNotificationLoading, setIsNotificationLoading] = (0, import_react57.useState)(false);
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = (0, import_react57.useState)(false);
  const alertName = (0, import_react57.useMemo)(() => config.name, [config]);
  const tooltipContent = config.tooltipContent;
  const didFetch = (0, import_react57.useRef)(false);
  (0, import_react57.useEffect)(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const subscribeAlert = (0, import_react57.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: walletBalanceConfiguration({ connectedWallets }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient, config]
  );
  const unSubscribeAlert = (0, import_react57.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleNewSubscription = (0, import_react57.useCallback)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setLoading(true);
    if (!enabled) {
      subscribeAlert({
        eventType: config,
        inputs
      }).then(() => {
        isUsingFrontendClient && frontendClient.fetchData().then(render);
        setEnabled(true);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => setLoading(false));
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== true) {
            setEnabled(false);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(true);
      }).finally(() => {
        setIsNotificationLoading(false);
        setLoading(false);
      });
    }
  }, [
    enabled,
    instantSubscribe,
    alertName,
    setIsNotificationLoading,
    isNotificationLoading,
    setEnabled
  ]);
  return import_react57.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeWalletBalanceRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react57.default.createElement(
      "div",
      {
        className: clsx_m_default("EventTypeWalletBalanceRow__label", classNames == null ? void 0 : classNames.label)
      },
      config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react57.default.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    import_react57.default.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        checked: enabled,
        setChecked: handleNewSubscription
      }
    )
  );
};
var SubscriptionCardUnsupported = () => {
  return import_react59.default.createElement(import_react59.default.Fragment, null, import_react59.default.createElement("div", null, "Unsupported configuration"));
};
var useDestinationState = () => {
  const {
    useDiscord,
    email,
    phoneNumber,
    telegramId,
    discordTargetData,
    destinationErrorMessages
  } = useNotifiSubscriptionContext();
  const isTargetsExist = (0, import_react60.useMemo)(() => {
    return !!email || !!phoneNumber || !!telegramId || useDiscord && !!(discordTargetData == null ? void 0 : discordTargetData.id);
  }, [email, phoneNumber, telegramId, discordTargetData, useDiscord]);
  const unverifiedDestinations = (0, import_react60.useMemo)(() => {
    const {
      email: emailError,
      phoneNumber: phoneNumberError,
      telegram: telegramError,
      discord: discordError
    } = destinationErrorMessages;
    const unConfirmedTargets = {
      email: (emailError == null ? void 0 : emailError.type) === "recoverableError",
      phoneNumber: (phoneNumberError == null ? void 0 : phoneNumberError.type) == "recoverableError",
      telegram: (telegramError == null ? void 0 : telegramError.type) === "recoverableError",
      discord: useDiscord && (discordError == null ? void 0 : discordError.type) === "recoverableError" && /**
      * @TODO Improve type safety
      * discordError.message === 'Join Server' also counted as verified (discordError.message now either 'Join Server' or 'Enable Bot' as values).
      */
      discordError.message === "Enable Bot"
    };
    return objectKeys(unConfirmedTargets).map((key) => {
      if (unConfirmedTargets[key]) {
        return key;
      }
    }).filter((item) => !!item);
  }, [destinationErrorMessages]);
  return { isTargetsExist, unverifiedDestinations };
};
var AlertDetailsCard = ({
  notificationEntry,
  classNames
}) => {
  const { bottomContent, otherContent, topContent, bottomContentHtml } = (0, import_react62.useMemo)(
    () => getAlertDetailsContents(notificationEntry),
    [notificationEntry]
  );
  const sanitizedBottomContentHtml = (0, import_react62.useMemo)(() => {
    const sanitizedBottomContentHtml2 = bottomContentHtml && purify.sanitize(bottomContentHtml);
    return sanitizedBottomContentHtml2;
  }, [bottomContentHtml]);
  return import_react62.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiAlertDetails__container",
        classNames == null ? void 0 : classNames.detailsContainer
      )
    },
    import_react62.default.createElement("div", { className: clsx_m_default("NotifiAlertDetails__topContentContainer") }, import_react62.default.createElement("div", { className: clsx_m_default("NotifiAlertDetails__topContent") }, topContent), import_react62.default.createElement("div", { className: clsx_m_default("NotifiAlertDetails__timestamp") }, formatAlertDetailsTimestamp(notificationEntry.createdDate))),
    import_react62.default.createElement("div", { className: clsx_m_default("NotifiAlertDetails__bottomContent") }, sanitizedBottomContentHtml ? (
      // If `messageHtml` exists just use it, otherwise use `message` (which is plain text)
      import_react62.default.createElement(
        "div",
        {
          dangerouslySetInnerHTML: { __html: sanitizedBottomContentHtml }
        }
      )
    ) : import_react62.default.createElement("div", null, bottomContent), import_react62.default.createElement("div", null, otherContent))
  );
};
var BackArrowIcon = (props) => {
  return import_react65.default.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    import_react65.default.createElement(
      "path",
      {
        d: "M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z",
        fill: "currentColor"
      }
    )
  );
};
var CloseIcon = (props) => {
  return import_react66.default.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    import_react66.default.createElement(
      "path",
      {
        fillRule: "evenodd",
        d: "M6.71751 5.28249L5.3033 6.6967L10.6066 12L5.3033 17.3033L6.71751 18.7175L12.0208 13.4142L17.3241 18.7175L18.7383 17.3033L13.435 12L18.7383 6.6967L17.3241 5.28249L12.0208 10.5858L6.71751 5.28249Z",
        fill: "currentColor"
      }
    )
  );
};
var SettingIcon = (props) => {
  return import_react67.default.createElement(
    "svg",
    __spreadValues({
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react67.default.createElement(
      "path",
      {
        d: "M3 17V19H9V17H3ZM3 5V7H13V5H3ZM13 21V19H21V17H13V15H11V21H13ZM7 9V11H3V13H7V15H9V9H7ZM21 13V11H11V13H21ZM15 9H17V7H21V5H17V3H15V9Z",
        fill: "currentColor"
      }
    )
  );
};
var icons2 = {
  back: BackArrowIcon,
  close: CloseIcon,
  settings: SettingIcon
};
var AlertActionIcon = ({
  name,
  className
}) => {
  const View = icons2[name];
  return import_react64.default.createElement(View, { className });
};
var AlertActionIcon_default = AlertActionIcon;
var ConfigAlertModal = ({
  classNames,
  updateFtuStage,
  data,
  inputDisabled,
  inputs
}) => {
  var _a;
  return import_react63.default.createElement(import_react63.default.Fragment, null, import_react63.default.createElement(
    "div",
    {
      className: clsx_m_default("configAlertModal__overlay", classNames == null ? void 0 : classNames.overlay)
    }
  ), import_react63.default.createElement(
    "div",
    {
      "data-cy": "configAlertModal",
      className: clsx_m_default("configAlertModal__container", classNames == null ? void 0 : classNames.container)
    },
    import_react63.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "configAlertModal__headerContainer",
          classNames == null ? void 0 : classNames.headerContainer
        )
      },
      data.isContactInfoRequired ? import_react63.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "configAlertModal__backIcon",
            classNames == null ? void 0 : classNames.backIcon
          ),
          onClick: () => {
            updateFtuStage(
              3
              /* Destination */
            );
          }
        },
        import_react63.default.createElement(
          AlertActionIcon_default,
          {
            name: "back",
            className: clsx_m_default(
              "configAlertModal__ctaIcon",
              classNames == null ? void 0 : classNames.ctaIcon
            )
          }
        )
      ) : null,
      import_react63.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "configAlertModal__headerTitle",
            classNames == null ? void 0 : classNames.headerTitle
          )
        },
        import_react63.default.createElement("div", null, "Select alerts")
      )
    ),
    import_react63.default.createElement(
      AlertsPanel,
      {
        classNames: (_a = classNames == null ? void 0 : classNames.alertsPanel) != null ? _a : {
          EventTypeContainer: "configAlertModal__EventTypeContainer",
          EventTypeBroadcastRow: {
            container: "configAlertModal__EventTypeBroadcastRow"
          },
          EventTypeCustomHealthCheckRow: {
            container: "configAlertModal__EventTypeCustomHealthCheckRow",
            content: "configAlertModal__EventTypeCustomHealthCheckRow__Subtitle",
            buttonContainer: "configAlertModal__EventTypeCustomHealthCheckRow__ButtonContainer"
          },
          EventTypeDirectPushRow: {
            container: "configAlertModal__EventTypeDirectPushRow"
          },
          EventTypeHealthCheckRow: {
            container: "configAlertModal__EventTypeHealthCheckRow",
            content: "configAlertModal__EventTypeHealthCheckRow__Subtitle",
            buttonContainer: "configAlertModal__EventTypeHealthCheckRow__ButtonContainer"
          },
          EventTypePriceChangeRow: {
            container: "configAlertModal__EventTypePriceChangeRow"
          },
          EventTypeTradingPairsRow: {
            container: "configAlertModal__EventTypeTradingPairsRow"
          },
          EventTypeFusionMultiThresholdRow: {
            container: "configAlertModal__EventTypeFusionMultiThresholdRow"
          },
          EventTypeWalletBalanceRow: {
            container: "configAlertModal__EventTypeWalletBalanceRow"
          },
          EventTypeXMTPRow: {
            container: "configAlertModal__EventTypeXMTPRow"
          },
          EventTypeFusionToggleRow: {
            container: "configAlertModal__EventTypeFusionToggleRow"
          },
          EventTypeFusionHealthCheckRow: {
            container: "configAlertModal__EventTypeFusionHealthCheckRow",
            content: "configAlertModal__EventTypeFusionHealthCheckRow__Subtitle",
            buttonContainer: "configAlertModal__EventTypeFusionHealthCheckRow__ButtonContainer"
          }
        },
        data,
        inputDisabled,
        inputs
      }
    ),
    import_react63.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "configAlertModal__footerContainer",
          classNames == null ? void 0 : classNames.footerContainer
        )
      },
      import_react63.default.createElement(
        "button",
        {
          "data-cy": "configAlertModalDoneButton",
          onClick: () => {
            updateFtuStage(
              1
              /* Done */
            );
          }
        },
        "Done"
      )
    )
  ));
};
var DiscordIcon = ({ className }) => {
  return import_react69.default.createElement(
    "svg",
    {
      width: "17",
      height: "13",
      viewBox: "0 0 17 13",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className
    },
    import_react69.default.createElement(
      "path",
      {
        d: "M14.0728 1.05036C13.0133 0.564196 11.8771 0.206009 10.6891 0.000860571C10.6675 -0.00309873 10.6459 0.00679578 10.6347 0.0265853C10.4886 0.286483 10.3267 0.62554 10.2134 0.892038C8.93563 0.700746 7.66444 0.700746 6.4129 0.892038C6.29953 0.619617 6.13179 0.286483 5.98501 0.0265853C5.97386 0.00745605 5.95225 -0.00243846 5.93062 0.000860571C4.74329 0.205353 3.60709 0.56354 2.54688 1.05036C2.5377 1.05432 2.52983 1.06092 2.52461 1.06949C0.369461 4.28924 -0.220925 7.42985 0.0686984 10.5315C0.0700089 10.5467 0.0785271 10.5612 0.0903219 10.5704C1.51223 11.6146 2.88959 12.2486 4.24137 12.6688C4.263 12.6754 4.28593 12.6675 4.29969 12.6496C4.61946 12.213 4.9045 11.7525 5.14889 11.2683C5.16332 11.24 5.14955 11.2063 5.12007 11.1951C4.66795 11.0236 4.23744 10.8145 3.82331 10.577C3.79056 10.5579 3.78793 10.5111 3.81807 10.4886C3.90522 10.4233 3.99239 10.3554 4.0756 10.2868C4.09065 10.2742 4.11163 10.2716 4.12933 10.2795C6.84994 11.5217 9.79533 11.5217 12.4838 10.2795C12.5015 10.2709 12.5225 10.2736 12.5382 10.2861C12.6215 10.3547 12.7086 10.4233 12.7964 10.4886C12.8265 10.5111 12.8246 10.5579 12.7918 10.577C12.3777 10.8191 11.9472 11.0236 11.4944 11.1945C11.4649 11.2057 11.4518 11.24 11.4662 11.2683C11.7159 11.7519 12.0009 12.2123 12.3148 12.649C12.3279 12.6675 12.3515 12.6754 12.3731 12.6688C13.7314 12.2486 15.1088 11.6146 16.5307 10.5704C16.5432 10.5612 16.551 10.5473 16.5523 10.5322C16.899 6.9463 15.9718 3.83145 14.0945 1.07015C14.0899 1.06092 14.082 1.05432 14.0728 1.05036ZM5.55517 8.64293C4.73608 8.64293 4.06118 7.89094 4.06118 6.96742C4.06118 6.04391 4.72299 5.29192 5.55517 5.29192C6.39389 5.29192 7.06226 6.05051 7.04915 6.96742C7.04915 7.89094 6.38733 8.64293 5.55517 8.64293ZM11.079 8.64293C10.2599 8.64293 9.585 7.89094 9.585 6.96742C9.585 6.04391 10.2468 5.29192 11.079 5.29192C11.9177 5.29192 12.5861 6.05051 12.573 6.96742C12.573 7.89094 11.9177 8.64293 11.079 8.64293Z",
        fill: "#B6B8D5"
      }
    )
  );
};
var DestinationErrorMessage = ({
  classNames,
  tooltipContent,
  errorMessage,
  onClick
}) => {
  return import_react70.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "DestinationErrorMessage__ErrorMessageContainer",
        classNames == null ? void 0 : classNames.errorMessageContainer
      )
    },
    onClick !== void 0 ? import_react70.default.createElement(
      "a",
      {
        target: "_blank",
        rel: "noopener noreferrer",
        onClick: () => onClick(),
        className: clsx_m_default("DestinationErrorMessage__emailConfirmationLink")
      },
      import_react70.default.createElement(
        "label",
        {
          className: clsx_m_default(
            "DestinationErrorMessage__confirmationLinkLabel",
            classNames == null ? void 0 : classNames.errorMessage
          )
        },
        errorMessage
      )
    ) : import_react70.default.createElement(
      "label",
      {
        className: clsx_m_default(
          "DestinationErrorMessage__ErrorMessageLabel",
          classNames == null ? void 0 : classNames.errorMessage,
          {
            DestinationErrorMessage__errorMessage: errorMessage !== ""
          }
        )
      },
      errorMessage
    ),
    tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react70.default.createElement(
      NotifiTooltip,
      {
        classNames: {
          icon: clsx_m_default(
            "DestinationErrorMessage__tooltipIcon",
            classNames == null ? void 0 : classNames.tooltipContent
          )
        },
        content: tooltipContent
      }
    ) : null
  );
};
var ConfigDestinationModal = ({
  classNames,
  updateFtuStage,
  contactInfo
}) => {
  var _a, _b, _c, _d, _e2;
  const {
    destinationErrorMessages,
    email,
    phoneNumber,
    telegramId,
    useDiscord
  } = useNotifiSubscriptionContext();
  const [isEmailConfirmationSent, setIsEmailConfirmationSent] = (0, import_react68.useState)(false);
  const {
    telegram: telegramErrorMessage,
    email: emailErrorMessage,
    phoneNumber: phoneNumberErrorMessage,
    discord: discordErrrorMessage
  } = destinationErrorMessages;
  const handleResendEmailVerificationClick = (0, import_react68.useCallback)(() => {
    if ((emailErrorMessage == null ? void 0 : emailErrorMessage.type) !== "recoverableError")
      return;
    setIsEmailConfirmationSent(true);
    emailErrorMessage.onClick();
    setTimeout(() => {
      setIsEmailConfirmationSent(false);
    }, 3e3);
  }, [emailErrorMessage]);
  return import_react68.default.createElement("div", { "data-cy": "configDestinationModal" }, import_react68.default.createElement(
    "div",
    {
      className: clsx_m_default("configDestinationModal__overlay", classNames == null ? void 0 : classNames.overlay)
    }
  ), import_react68.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "configDestinationModal__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react68.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "configDestinationModal__headerContainer",
          classNames == null ? void 0 : classNames.headerContainer
        )
      },
      import_react68.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "configDestinationModal__headerTitle",
            classNames == null ? void 0 : classNames.headerTitle
          )
        },
        import_react68.default.createElement("div", null, "Verify your destinations")
      )
    ),
    import_react68.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "configDestinationModal__destinationsContainer",
          classNames == null ? void 0 : classNames.container
        )
      },
      contactInfo.email.active && email ? import_react68.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "configDestinationModal__email",
            classNames == null ? void 0 : classNames.emailContainer
          )
        },
        import_react68.default.createElement(
          "div",
          {
            className: clsx_m_default(
              "configDestinationModal__emailLabel",
              classNames == null ? void 0 : classNames.emailLabel
            )
          },
          import_react68.default.createElement(
            "div",
            {
              className: clsx_m_default(
                "configDestinationModal__emailLabelIcon",
                classNames == null ? void 0 : classNames.emailLabelIcon
              )
            },
            import_react68.default.createElement(EmailIcon, null)
          ),
          import_react68.default.createElement("div", null, "Email")
        ),
        (emailErrorMessage == null ? void 0 : emailErrorMessage.type) === "recoverableError" ? import_react68.default.createElement(import_react68.default.Fragment, null, import_react68.default.createElement(
          "div",
          {
            className: clsx_m_default(
              "configDestinationModal__emailHelpPhrase",
              classNames == null ? void 0 : classNames.emailHelpPhrase
            )
          },
          "We’ve sent a verification email to:"
        ), import_react68.default.createElement(
          "div",
          {
            className: clsx_m_default(
              "configDestinationModal__emailAddress",
              classNames == null ? void 0 : classNames.emailAddress
            )
          },
          email
        ), import_react68.default.createElement(
          DestinationErrorMessage,
          {
            classNames: {
              errorMessage: clsx_m_default(
                "configDestinationModal__emailResendLink",
                classNames == null ? void 0 : classNames.emailResendLink
              )
            },
            onClick: () => {
              handleResendEmailVerificationClick();
            },
            errorMessage: isEmailConfirmationSent ? "Sent" : emailErrorMessage.message,
            tooltipContent: emailErrorMessage == null ? void 0 : emailErrorMessage.tooltip
          }
        )) : import_react68.default.createElement(VerifiedButton, { className: classNames == null ? void 0 : classNames.verifiedButton })
      ) : null,
      contactInfo.sms.active && phoneNumber ? import_react68.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "configDestinationModal__sms",
            classNames == null ? void 0 : classNames.smsContainer
          )
        },
        import_react68.default.createElement(
          "div",
          {
            className: clsx_m_default(
              "configDestination__smsLabel",
              classNames == null ? void 0 : classNames.smsLabel
            )
          },
          import_react68.default.createElement(
            "div",
            {
              className: clsx_m_default(
                "configDestination__smsLabelIcon",
                classNames == null ? void 0 : classNames.smsLabelIcon
              )
            },
            import_react68.default.createElement(SmsIcon, null)
          ),
          import_react68.default.createElement(
            "div",
            {
              className: clsx_m_default(
                "configDestinationModal__phoneNumber",
                classNames == null ? void 0 : classNames.phoneNumber
              )
            },
            "Phone Number"
          )
        ),
        import_react68.default.createElement("div", null, phoneNumber),
        (phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.type) !== void 0 ? import_react68.default.createElement(
          DestinationErrorMessage,
          {
            errorMessage: phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.message,
            tooltipContent: phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.tooltip
          }
        ) : import_react68.default.createElement(VerifiedButton, { className: classNames == null ? void 0 : classNames.verifiedButton })
      ) : null,
      contactInfo.telegram.active && telegramId ? import_react68.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "configDestinationModal__telegram",
            classNames == null ? void 0 : classNames.telegramContainer
          )
        },
        import_react68.default.createElement(
          "div",
          {
            className: clsx_m_default(
              "configDestinationModal__telegramLabel",
              classNames == null ? void 0 : classNames.telegramLabel
            )
          },
          import_react68.default.createElement(
            "div",
            {
              className: clsx_m_default(
                "configDestinationModal__telegramLabelIcon",
                classNames == null ? void 0 : classNames.telegramLabelIcon
              )
            },
            import_react68.default.createElement(TelegramIcon, null)
          ),
          import_react68.default.createElement("div", null, "Telegram")
        ),
        (telegramErrorMessage == null ? void 0 : telegramErrorMessage.type) === "recoverableError" ? import_react68.default.createElement(import_react68.default.Fragment, null, import_react68.default.createElement(
          "div",
          {
            className: clsx_m_default(
              "configDestinationModal__telegramId",
              classNames == null ? void 0 : classNames.telegramId
            )
          },
          telegramId
        ), import_react68.default.createElement(
          "div",
          {
            "data-cy": "configDestinationModalConfirmTelegramButton",
            onClick: () => {
              telegramErrorMessage == null ? void 0 : telegramErrorMessage.onClick();
            }
          },
          import_react68.default.createElement(
            DestinationErrorMessage,
            {
              classNames: {
                errorMessage: clsx_m_default(
                  "configDestinationModal__verifyButtonMessage",
                  classNames == null ? void 0 : classNames.verifyButtonMessage
                ),
                errorMessageContainer: clsx_m_default(
                  "configDestinationModal__verifyButtonContainer",
                  classNames == null ? void 0 : classNames.verifyButtonContainer
                )
              },
              errorMessage: (_a = telegramErrorMessage == null ? void 0 : telegramErrorMessage.message) != null ? _a : "",
              tooltipContent: (_b = destinationErrorMessages == null ? void 0 : destinationErrorMessages.telegram) == null ? void 0 : _b.tooltip
            }
          )
        )) : import_react68.default.createElement(VerifiedButton, { className: classNames == null ? void 0 : classNames.verifiedButton })
      ) : null,
      ((_c = contactInfo == null ? void 0 : contactInfo.discord) == null ? void 0 : _c.active) && useDiscord ? import_react68.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "configDestinationModal__discord",
            classNames == null ? void 0 : classNames.discordContainer
          )
        },
        import_react68.default.createElement(
          "label",
          {
            className: clsx_m_default(
              "configDestinationModal__discordLabel",
              classNames == null ? void 0 : classNames.discordLabel
            )
          },
          import_react68.default.createElement(
            "div",
            {
              className: clsx_m_default(
                "configDestinationModal__discordLabelIcon",
                classNames == null ? void 0 : classNames.discordLabelIcon
              )
            },
            import_react68.default.createElement(DiscordIcon, null)
          ),
          import_react68.default.createElement("div", null, "Discord")
        ),
        (discordErrrorMessage == null ? void 0 : discordErrrorMessage.type) === "recoverableError" ? import_react68.default.createElement(import_react68.default.Fragment, null, import_react68.default.createElement(
          DestinationErrorMessage,
          {
            classNames: {
              errorMessage: clsx_m_default(
                "configDestinationModal__verifyButtonMessage",
                classNames == null ? void 0 : classNames.verifyButtonMessage
              ),
              errorMessageContainer: clsx_m_default(
                "configDestinationModal__verifyButtonContainer",
                classNames == null ? void 0 : classNames.verifyButtonContainer
              )
            },
            onClick: () => {
              discordErrrorMessage == null ? void 0 : discordErrrorMessage.onClick();
            },
            errorMessage: (_d = discordErrrorMessage == null ? void 0 : discordErrrorMessage.message) != null ? _d : "",
            tooltipContent: (_e2 = destinationErrorMessages == null ? void 0 : destinationErrorMessages.discord) == null ? void 0 : _e2.tooltip
          }
        )) : import_react68.default.createElement(VerifiedButton, { className: classNames == null ? void 0 : classNames.verifiedButton })
      ) : null
    ),
    import_react68.default.createElement(
      "div",
      {
        "data-cy": "configDestinationModalNextButton",
        className: clsx_m_default(
          "configDestinationModal__footerContainer",
          classNames == null ? void 0 : classNames.footerContainer
        )
      },
      import_react68.default.createElement(
        "button",
        {
          onClick: () => {
            updateFtuStage(
              2
              /* Alerts */
            );
          }
        },
        "Next"
      )
    )
  ));
};
var VerifiedButton = ({ className }) => {
  return import_react68.default.createElement(
    "div",
    {
      "data-cy": "configDestinationModalVerifyLabel",
      className: clsx_m_default("configDestinationModal__verifiedButton", className)
    },
    import_react68.default.createElement("div", null, "Verified")
  );
};
var NotifiAlertBox = ({ classNames, children, leftIcon, rightIcon }) => {
  return import_react71.default.createElement("div", { className: clsx_m_default("NotifiAlertBox__container", classNames == null ? void 0 : classNames.container) }, leftIcon !== void 0 ? import_react71.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiAlertBox__btn--left", classNames == null ? void 0 : classNames.btnLeft),
      onClick: leftIcon.onClick
    },
    import_react71.default.createElement(
      AlertActionIcon_default,
      {
        name: leftIcon.name,
        className: clsx_m_default("NotifiAlertBox__iconSvg", classNames == null ? void 0 : classNames.iconSvg)
      }
    )
  ) : import_react71.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiAlertBox__btn--spacer", classNames == null ? void 0 : classNames.spacer)
    }
  ), import_react71.default.createElement("div", { className: clsx_m_default("NotifiAlertBox__content", classNames == null ? void 0 : classNames.content) }, children), rightIcon !== void 0 ? import_react71.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiAlertBox__btn--right", classNames == null ? void 0 : classNames.btnRight),
      onClick: rightIcon.onClick
    },
    import_react71.default.createElement(
      AlertActionIcon_default,
      {
        name: rightIcon.name,
        className: clsx_m_default("NotifiAlertBox__iconSvg", classNames == null ? void 0 : classNames.iconSvg)
      }
    )
  ) : import_react71.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiAlertBox__btn--spacer", classNames == null ? void 0 : classNames.spacer)
    }
  ));
};
var NotifiAlertBox_default = NotifiAlertBox;
var CircleBellIcon = (props) => {
  return import_react73.default.createElement(
    "svg",
    __spreadValues({
      width: "21",
      height: "21",
      viewBox: "0 0 21 21",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react73.default.createElement(
      "circle",
      {
        cx: "10.5",
        cy: "10.5",
        r: "9.5",
        fill: "white",
        stroke: "url(#paint0_linear_1316_3580)",
        strokeWidth: "2"
      }
    ),
    import_react73.default.createElement(
      "path",
      {
        d: "M10.4901 16.1875C11.1212 16.1875 11.6376 15.6712 11.6376 15.0401H9.3427C9.3427 15.6712 9.85331 16.1875 10.4901 16.1875ZM13.9324 12.7452V9.8766C13.9324 8.11529 12.9915 6.64083 11.3507 6.25071V5.86058C11.3507 5.38439 10.9663 5 10.4901 5C10.0139 5 9.62956 5.38439 9.62956 5.86058V6.25071C7.98299 6.64083 7.04783 8.10955 7.04783 9.8766V12.7452L5.90039 13.8926V14.4663H15.0799V13.8926L13.9324 12.7452Z",
        fill: "#262949"
      }
    ),
    import_react73.default.createElement("defs", null, import_react73.default.createElement(
      "linearGradient",
      {
        id: "paint0_linear_1316_3580",
        x1: "15.6331",
        y1: "3.32468",
        x2: "7.46429",
        y2: "19",
        gradientUnits: "userSpaceOnUse"
      },
      import_react73.default.createElement("stop", { stopColor: "#FE7970" }),
      import_react73.default.createElement("stop", { offset: "1", stopColor: "#FEB776" })
    ))
  );
};
var SignupBanner = ({
  classNames,
  data
}) => {
  const { cardView, setCardView } = useNotifiSubscriptionContext();
  const targets = (0, import_react72.useMemo)(() => {
    const supportedTargets = Object.keys(data.contactInfo).filter((target) => {
      return data.contactInfo[target].active;
    }).map((target) => target.charAt(0).toLocaleUpperCase() + target.slice(1));
    return supportedTargets.length > 1 ? supportedTargets.join(", ") : supportedTargets[0];
  }, []);
  const onClick = () => {
    setCardView({
      state: "edit"
    });
  };
  return import_react72.default.createElement(import_react72.default.Fragment, null, import_react72.default.createElement(
    "div",
    {
      className: clsx_m_default(
        (classNames == null ? void 0 : classNames.banner) ? classNames.banner : "SignupBanner",
        cardView.state === "preview" && "SignupBanner__Column"
      )
    },
    import_react72.default.createElement("div", { className: clsx_m_default("SignupBanner__Label", classNames == null ? void 0 : classNames.bannerLabel) }, import_react72.default.createElement(
      "div",
      {
        className: clsx_m_default(
          (classNames == null ? void 0 : classNames.bannerImage) ? classNames == null ? void 0 : classNames.bannerImage : "SignupBanner__Image"
        )
      },
      import_react72.default.createElement(CircleBellIcon, null)
    ), import_react72.default.createElement(
      "div",
      {
        className: clsx_m_default(
          (classNames == null ? void 0 : classNames.bannerContent) ? classNames.bannerContent : "SignupBanner__Content"
        )
      },
      import_react72.default.createElement(
        "div",
        {
          className: clsx_m_default(
            (classNames == null ? void 0 : classNames.bannerTitle) ? classNames.bannerTitle : "SignupBanner__Title"
          )
        },
        "Get alerts via"
      ),
      import_react72.default.createElement(
        "div",
        {
          className: clsx_m_default(
            (classNames == null ? void 0 : classNames.bannerSubject) ? classNames.bannerSubject : "SignupBanner__Subject"
          )
        },
        targets
      )
    )),
    import_react72.default.createElement(
      "button",
      {
        "data-cy": "signupBannerButton",
        className: clsx_m_default(
          (classNames == null ? void 0 : classNames.bannerButton) ? classNames.bannerButton : "SignupBanner__Button"
        ),
        onClick
      },
      "Sign Up"
    )
  ));
};
var VerifyBanner = ({
  classNames,
  unVerifiedDestinations
}) => {
  const { setCardView } = useNotifiSubscriptionContext();
  const unVerifiedDestinationsString = (0, import_react74.useMemo)(() => {
    const convertedUnVerifiedDestinations = unVerifiedDestinations.map(
      (target) => {
        switch (target) {
          case "telegram":
            return "Telegram ID";
          case "discord":
            return "Discord";
          case "phoneNumber":
            return "Phone Number";
          default:
            return target;
        }
      }
    );
    return convertedUnVerifiedDestinations.length > 1 ? convertedUnVerifiedDestinations.join(" and ") : convertedUnVerifiedDestinations[0];
  }, [unVerifiedDestinations]);
  const onClick = () => {
    setCardView({
      state: "preview"
    });
  };
  return import_react74.default.createElement(
    "div",
    {
      className: clsx_m_default("verifyBanner__container", classNames == null ? void 0 : classNames.bannerContainer)
    },
    import_react74.default.createElement("div", { className: clsx_m_default("verifyBanner__label", classNames == null ? void 0 : classNames.bannerLabel) }, import_react74.default.createElement(
      "div",
      {
        className: clsx_m_default(
          (classNames == null ? void 0 : classNames.bannerImage) ? classNames == null ? void 0 : classNames.bannerImageContainer : "verifyBanner__imageContainer"
        )
      },
      import_react74.default.createElement(CheckIcon, { className: "verifyBanner__image" })
    ), import_react74.default.createElement(
      "div",
      {
        className: clsx_m_default("verifyBanner__subject", classNames == null ? void 0 : classNames.bannerSubject)
      },
      "Verify your ",
      unVerifiedDestinationsString
    )),
    import_react74.default.createElement(
      "button",
      {
        "data-cy": "verifyBannerButton",
        className: clsx_m_default(
          (classNames == null ? void 0 : classNames.bannerButton) ? classNames.bannerButton : "verifyBanner__button"
        ),
        onClick
      },
      "Verify"
    )
  );
};
function getErrorMessageKey(err) {
  let errMsg;
  if (err instanceof Error) {
    errMsg = err.message;
  } else if (typeof err === "string") {
    errMsg = err;
  } else {
    errMsg = "unknown error";
  }
  return errMsg;
}
var ErrorStateCard = ({
  copy,
  classNames,
  onClose,
  reason
}) => {
  var _a;
  const message = getErrorMessageKey(reason);
  return import_react75.default.createElement(import_react75.default.Fragment, null, import_react75.default.createElement(
    NotifiAlertBox_default,
    {
      classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
      rightIcon: onClose === void 0 ? void 0 : {
        name: "close",
        onClick: onClose
      }
    },
    import_react75.default.createElement("h2", null, (_a = copy == null ? void 0 : copy.header) != null ? _a : "Something went wrong")
  ), import_react75.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "ErrorStateCard__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    message != null ? message : "Something went wrong"
  ));
};
var Spinner = ({ size, ringColor }) => {
  return import_react77.default.createElement(
    "div",
    {
      className: "NotifiSpinner",
      style: { height: size, width: size, borderTopColor: ringColor }
    }
  );
};
var Spinner_default = Spinner;
var LoadingStateCard = ({
  copy,
  classNames,
  spinnerSize,
  ringColor,
  onClose
}) => {
  var _a, _b;
  return import_react76.default.createElement(import_react76.default.Fragment, null, import_react76.default.createElement(
    NotifiAlertBox_default,
    {
      classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
      rightIcon: onClose === void 0 ? void 0 : {
        name: "close",
        onClick: onClose
      }
    },
    import_react76.default.createElement("h2", null, (_a = copy == null ? void 0 : copy.header) != null ? _a : "Loading")
  ), import_react76.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiLoadingStateCard__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react76.default.createElement(
      "label",
      {
        className: clsx_m_default("NotifiLoadingStateCard__label", classNames == null ? void 0 : classNames.label)
      },
      (_b = copy == null ? void 0 : copy.content) != null ? _b : "Loading…"
    ),
    import_react76.default.createElement(Spinner_default, { size: spinnerSize, ringColor })
  ));
};
var NotifiSubscribeButton = ({
  buttonText,
  classNames,
  data,
  inputs
}) => {
  var _a, _b;
  const eventTypes = data.eventTypes;
  const { isInitialized, subscribe: subscribe2, updateTargetGroups } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const frontendClientLogin = useFrontendClientLogin();
  const {
    client,
    params: { multiWallet },
    isUsingFrontendClient,
    frontendClient
  } = useNotifiClientContext();
  const {
    cardView,
    connectedWallets,
    loading,
    setCardView,
    useDiscord,
    render,
    setLoading,
    syncFtuStage
  } = useNotifiSubscriptionContext();
  const { formErrorMessages, formState } = useNotifiForm();
  const { phoneNumber, telegram: telegramId, email } = formState;
  const { email: emailErrorMessage, phoneNumber: smsErrorMessage } = formErrorMessages;
  const isMultiWallet = ((_b = (_a = multiWallet == null ? void 0 : multiWallet.ownedWallets) == null ? void 0 : _a.length) != null ? _b : 0) > 0;
  const targetGroup = (0, import_react79.useMemo)(
    () => ({
      name: "Default",
      emailAddress: email === "" ? void 0 : email,
      phoneNumber: isValidPhoneNumber2(phoneNumber) ? phoneNumber : void 0,
      telegramId: telegramId === "" ? void 0 : formatTelegramForSubscription(telegramId),
      discordId: useDiscord ? "Default" : void 0
    }),
    [email, phoneNumber, telegramId, useDiscord]
  );
  const renewTargetGroups = (0, import_react79.useCallback)(
    async (targetGroup2) => {
      if (isUsingFrontendClient) {
        return frontendClient.ensureTargetGroup(targetGroup2);
      }
      return updateTargetGroups();
    },
    [updateTargetGroups, frontendClient, isUsingFrontendClient]
  );
  const subscribeAlerts = (0, import_react79.useCallback)(
    async (eventTypes2, inputs2) => {
      if (isUsingFrontendClient) {
        await renewTargetGroups(targetGroup);
        return subscribeAlertsByFrontendClient(
          frontendClient,
          eventTypes2,
          inputs2
        );
      }
      return subscribe2(
        createConfigurations(eventTypes2, inputs2, connectedWallets)
      );
    },
    [
      targetGroup,
      isUsingFrontendClient,
      frontendClient,
      connectedWallets,
      renewTargetGroups,
      subscribeAlertsByFrontendClient,
      subscribe2,
      createConfigurations
    ]
  );
  const onClick = (0, import_react79.useCallback)(async () => {
    var _a2, _b2, _c, _d, _e2, _f;
    let isFirstTimeUser = ((_c = (_b2 = (_a2 = client.data) == null ? void 0 : _a2.targetGroups) == null ? void 0 : _b2.length) != null ? _c : 0) === 0;
    if (isUsingFrontendClient && ((_d = frontendClient.userState) == null ? void 0 : _d.status) !== "authenticated") {
      await frontendClientLogin();
      const data2 = await frontendClient.fetchData();
      isFirstTimeUser = ((_f = (_e2 = data2.targetGroup) == null ? void 0 : _e2.length) != null ? _f : 0) === 0;
    }
    setLoading(true);
    try {
      let success = false;
      if (isFirstTimeUser && !isMultiWallet) {
        const subEvents = eventTypes.filter((event) => {
          return event.optOutAtSignup ? false : true;
        });
        const result2 = await subscribeAlerts(subEvents, inputs);
        success = !!result2;
      } else {
        const result2 = await renewTargetGroups(targetGroup);
        success = !!result2;
      }
      if (isUsingFrontendClient && success) {
        const newData = await frontendClient.fetchData();
        render(newData);
      }
      if (success === true) {
        await syncFtuStage(data.isContactInfoRequired);
        const nextState = !isMultiWallet ? "history" : cardView.state === "signup" ? "verifyonboarding" : "verify";
        setCardView({
          state: nextState
        });
      }
    } catch (e) {
      setCardView({ state: "error", reason: e });
    }
    setLoading(false);
  }, [
    isMultiWallet,
    frontendClient,
    isUsingFrontendClient,
    client,
    eventTypes,
    frontendClientLogin,
    subscribe2,
    updateTargetGroups,
    setCardView
  ]);
  const hasErrors = emailErrorMessage !== "" || smsErrorMessage !== "";
  const isInputFieldsValid = (0, import_react79.useMemo)(() => {
    return data.isContactInfoRequired ? email || phoneNumber || telegramId || useDiscord : true;
  }, [email, phoneNumber, telegramId, useDiscord, data.isContactInfoRequired]);
  return import_react79.default.createElement(
    "button",
    {
      "data-cy": "notifiSubscribeButton",
      className: clsx_m_default("NotifiSubscribeButton__button", classNames == null ? void 0 : classNames.button),
      disabled: !isInitialized || loading || hasErrors || !isInputFieldsValid,
      onClick
    },
    import_react79.default.createElement("span", { className: clsx_m_default("NotifiSubscribeButton__label", classNames == null ? void 0 : classNames.label) }, loading ? "Loading" : buttonText)
  );
};
var AlertListPreview = ({
  eventTypes,
  copy,
  classNames
}) => {
  var _a;
  const alertNames = eventTypes.map((eventType) => {
    var _a2;
    if (eventType.type === "label") {
      return;
    }
    return import_react80.default.createElement("div", { className: "NotifiAlertList__listItem", key: eventType.name }, import_react80.default.createElement(
      CheckIcon,
      {
        className: clsx_m_default(
          "NotifiAlertListContainer__checkmarkIcon",
          classNames == null ? void 0 : classNames.checkmarkIcon
        )
      }
    ), import_react80.default.createElement(
      "label",
      {
        className: clsx_m_default(
          "NotifiAlertListContainer__listItemContent",
          classNames == null ? void 0 : classNames.eventListItem
        ),
        key: eventType.name
      },
      eventType.type === "fusion" ? (_a2 = eventType.displayNameOverride) != null ? _a2 : eventType.name : eventType.name
    ));
  });
  return import_react80.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiAlertListContainer__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react80.default.createElement(
      "label",
      {
        className: clsx_m_default(
          "NotifiAlertListPreview__descriptionText",
          classNames == null ? void 0 : classNames.description
        )
      },
      (_a = copy == null ? void 0 : copy.description) != null ? _a : "Subscribe to any of these alerts"
    ),
    import_react80.default.createElement("div", { className: clsx_m_default("NotifiAlertLisPreview__checkmarkContainer") }, alertNames)
  );
};
var NotifiDiscordToggle = ({
  classNames,
  disabled
}) => {
  const { useDiscord, setUseDiscord } = useNotifiSubscriptionContext();
  return import_react82.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiDiscordToggle__container", classNames == null ? void 0 : classNames.container)
    },
    import_react82.default.createElement("div", { className: clsx_m_default("NotifiDiscordToggle__label", classNames == null ? void 0 : classNames.label) }, "Discord DM Bot"),
    import_react82.default.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled,
        checked: useDiscord,
        setChecked: setUseDiscord
      }
    )
  );
};
var NotifiHwWalletToggle = ({
  classNames,
  disabled
}) => {
  const { useHardwareWallet, setUseHardwareWallet } = useNotifiSubscriptionContext();
  return import_react83.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiHwWalletToggle__container", classNames == null ? void 0 : classNames.container)
    },
    import_react83.default.createElement("div", { className: clsx_m_default("NotifiHwWalletToggle__label", classNames == null ? void 0 : classNames.label) }, "Use hardware wallet"),
    import_react83.default.createElement(
      NotifiToggle,
      {
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled,
        checked: useHardwareWallet,
        setChecked: setUseHardwareWallet
      }
    )
  );
};
var InputFields = ({
  data,
  classNames,
  inputSeparators,
  inputTextFields,
  allowedCountryCodes,
  inputDisabled,
  hideContactInputs
}) => {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t2, _u, _v, _w;
  const { params } = useNotifiClientContext();
  return import_react81.default.createElement(import_react81.default.Fragment, null, !hideContactInputs ? import_react81.default.createElement(import_react81.default.Fragment, null, data.contactInfo.email.active ? import_react81.default.createElement(
    NotifiEmailInput,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiEmailInput,
      copy: {
        label: (_a = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _a.email,
        placeholder: (_b = inputTextFields == null ? void 0 : inputTextFields.placeholderText) == null ? void 0 : _b.email
      }
    }
  ) : null, ((_c = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _c.content) ? import_react81.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiInputSeparator__container",
        (_e2 = (_d = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _d.classNames) == null ? void 0 : _e2.container
      )
    },
    import_react81.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiInputSeparator__content",
          (_f = inputSeparators.emailSeparator.classNames) == null ? void 0 : _f.content
        )
      },
      (_g = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _g.content
    )
  ) : null, data.contactInfo.sms.active ? import_react81.default.createElement(
    NotifiSmsInput,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiSmsInput,
      allowedCountryCodes,
      copy: {
        label: (_h = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _h.sms,
        placeholder: (_i = inputTextFields == null ? void 0 : inputTextFields.placeholderText) == null ? void 0 : _i.sms
      }
    }
  ) : null, ((_j = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _j.content) ? import_react81.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiInputSeparator__container",
        (_l = (_k = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _k.classNames) == null ? void 0 : _l.container
      )
    },
    import_react81.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiInputSeparator__content",
          (_m = inputSeparators.smsSeparator.classNames) == null ? void 0 : _m.content
        )
      },
      (_n = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _n.content
    )
  ) : null, data.contactInfo.telegram.active ? import_react81.default.createElement(
    NotifiTelegramInput,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiTelegramInput,
      copy: {
        label: (_o = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _o.telegram,
        placeholder: (_p = inputTextFields == null ? void 0 : inputTextFields.placeholderText) == null ? void 0 : _p.telegram
      }
    }
  ) : null, ((_q = inputSeparators == null ? void 0 : inputSeparators.telegramSeparator) == null ? void 0 : _q.content) ? import_react81.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiInputSeparator__container",
        (_s = (_r = inputSeparators == null ? void 0 : inputSeparators.telegramSeparator) == null ? void 0 : _r.classNames) == null ? void 0 : _s.container
      )
    },
    import_react81.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiInputSeparator__content",
          (_t2 = inputSeparators.telegramSeparator.classNames) == null ? void 0 : _t2.content
        )
      },
      (_u = inputSeparators == null ? void 0 : inputSeparators.telegramSeparator) == null ? void 0 : _u.content
    )
  ) : null, ((_w = (_v = data.contactInfo) == null ? void 0 : _v.discord) == null ? void 0 : _w.active) ? import_react81.default.createElement(
    NotifiDiscordToggle,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiDiscordToggle
    }
  ) : null) : null, params.walletBlockchain === "SOLANA" ? import_react81.default.createElement(
    NotifiHwWalletToggle,
    {
      disabled: inputDisabled,
      classNames: classNames == null ? void 0 : classNames.NotifiHwWalletToggle
    }
  ) : null);
};
var EditCardView = ({
  allowedCountryCodes,
  buttonText,
  copy,
  classNames,
  showPreview,
  data,
  inputDisabled,
  inputSeparators,
  inputTextFields,
  inputs
}) => {
  const { loading } = useNotifiSubscriptionContext();
  return import_react78.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiInputContainer", classNames == null ? void 0 : classNames.NotifiInputContainer)
    },
    showPreview ? import_react78.default.createElement(
      AlertListPreview,
      {
        copy: copy == null ? void 0 : copy.AlertListPreview,
        classNames: classNames == null ? void 0 : classNames.AlertListPreview,
        eventTypes: data.eventTypes
      }
    ) : null,
    loading ? import_react78.default.createElement("div", { className: "NotifiInputContainer__LoadingSpinner" }, import_react78.default.createElement(Spinner_default, { size: "70px" })) : import_react78.default.createElement(
      InputFields,
      {
        hideContactInputs: showPreview && !data.isContactInfoRequired,
        data,
        allowedCountryCodes,
        inputDisabled,
        inputSeparators,
        inputTextFields
      }
    ),
    import_react78.default.createElement(
      NotifiSubscribeButton,
      {
        buttonText,
        data,
        classNames: classNames == null ? void 0 : classNames.NotifiSubscribeButton,
        inputs
      }
    )
  );
};
var ExpiredTokenView = ({
  classNames
}) => {
  const { logIn } = useNotifiSubscribe({ targetGroupName: "Default" });
  const { isUsingFrontendClient } = useNotifiClientContext();
  const { setCardView } = useNotifiSubscriptionContext();
  const frontendClientLogin = useFrontendClientLogin();
  const handleClick = async () => {
    let success = false;
    const result2 = isUsingFrontendClient ? await frontendClientLogin() : await logIn();
    success = !!result2;
    if (success === true) {
      setCardView({ state: "preview" });
    }
  };
  return import_react84.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiExpiredTokenCard__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react84.default.createElement("div", { className: clsx_m_default("NotifiExpiredTokenCard__title", classNames == null ? void 0 : classNames.title) }, "Connect to Notifi"),
    import_react84.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiExpiredTokenCard__subtitle",
          classNames == null ? void 0 : classNames.subtitle
        )
      },
      "It's been a while! Connect to Notifi to load your ",
      import_react84.default.createElement("br", null),
      "notification details."
    ),
    import_react84.default.createElement(
      "button",
      {
        className: clsx_m_default("NotifiExpiredTokenCard__button", classNames == null ? void 0 : classNames.button),
        onClick: handleClick
      },
      import_react84.default.createElement(
        "span",
        {
          className: clsx_m_default(
            "NotifiExpiredTokenCard__buttonLabel",
            classNames == null ? void 0 : classNames.buttonLabel
          )
        },
        "Connect to Notifi"
      )
    )
  );
};
var NotificationEmptyBellIcon = (props) => {
  return import_react86.default.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "25",
      height: "30",
      viewBox: "0 0 25 30",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    import_react86.default.createElement(
      "path",
      {
        d: "M12.2179 29.7812C13.8979 29.7812 15.2724 28.4067 15.2724 26.7268H9.16346C9.16346 28.4067 10.5227 29.7812 12.2179 29.7812ZM21.3814 20.6178V12.9816C21.3814 8.29293 18.8767 4.36792 14.5088 3.32939V2.29087C14.5088 1.02325 13.4856 0 12.2179 0C10.9503 0 9.92708 1.02325 9.92708 2.29087V3.32939C5.54389 4.36792 3.05449 8.27766 3.05449 12.9816V20.6178L0 23.6723V25.1995H24.4359V23.6723L21.3814 20.6178Z",
        fill: "#F5F6FB"
      }
    )
  );
};
var MESSAGES_PER_PAGE = 50;
var AlertNotificationRow = ({
  notificationTitle,
  classNames,
  notificationImage,
  notificationSubject,
  notificationDate,
  handleAlertEntrySelection
}) => {
  return import_react87.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiAlertHistory__notificationRow",
        classNames == null ? void 0 : classNames.notificationRow
      ),
      onClick: handleAlertEntrySelection
    },
    import_react87.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiAlertHistory__notificationImage",
          classNames == null ? void 0 : classNames.notificationImage
        )
      },
      notificationImage
    ),
    import_react87.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiAlertHistory__content",
          classNames == null ? void 0 : classNames.notificationContent
        )
      },
      import_react87.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "NotifiAlertHistory__notificationTitle",
            classNames == null ? void 0 : classNames.notificationTitle
          )
        },
        notificationTitle
      ),
      import_react87.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "NotifiAlertHistory__notificationSubject",
            classNames == null ? void 0 : classNames.notificationSubject
          )
        },
        notificationSubject
      )
    ),
    import_react87.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiAlertHistory__notificationDate",
          classNames == null ? void 0 : classNames.notificationDate
        )
      },
      formatTimestamp(notificationDate)
    )
  );
};
var AlertHistoryView = ({
  classNames,
  isHidden,
  noAlertDescription,
  setAlertEntry,
  copy
}) => {
  var _a;
  noAlertDescription = noAlertDescription ? noAlertDescription : "You haven’t received any notifications yet";
  const [endCursor, setEndCursor] = (0, import_react85.useState)();
  const [hasNextPage, setHasNextPage] = (0, import_react85.useState)();
  const [isLoading, setIsLoading] = (0, import_react85.useState)(false);
  const fetched = (0, import_react85.useRef)(false);
  const { client, isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [allNodes, setAllNodes] = (0, import_react85.useState)([]);
  const { isClientInitialized, isClientAuthenticated } = (0, import_react85.useMemo)(() => {
    var _a2;
    return {
      isClientInitialized: isUsingFrontendClient ? !!frontendClient.userState : client.isInitialized,
      isClientAuthenticated: isUsingFrontendClient ? ((_a2 = frontendClient.userState) == null ? void 0 : _a2.status) === "authenticated" : client.isAuthenticated
    };
  }, [isUsingFrontendClient, client, frontendClient]);
  const getNotificationHistory = (0, import_react85.useCallback)(
    async ({ first, after }) => {
      var _a2;
      if (isLoading) {
        return;
      }
      const result2 = isUsingFrontendClient ? await frontendClient.getFusionNotificationHistory({
        first,
        after,
        includeHidden: false
      }) : await client.getNotificationHistory({
        first,
        after
      });
      const nodes = (_a2 = result2 == null ? void 0 : result2.nodes) != null ? _a2 : [];
      setAllNodes((existing) => existing.concat(nodes));
      setEndCursor(result2 == null ? void 0 : result2.pageInfo.endCursor);
      setHasNextPage(result2 == null ? void 0 : result2.pageInfo.hasNextPage);
      setIsLoading(false);
      return result2;
    },
    [
      client,
      frontendClient,
      isUsingFrontendClient,
      setAllNodes,
      setEndCursor,
      setHasNextPage
    ]
  );
  (0, import_react85.useEffect)(() => {
    if (!isClientInitialized || !isClientAuthenticated) {
      return;
    }
    if (!fetched.current) {
      fetched.current = true;
      setIsLoading(true);
      getNotificationHistory({
        first: MESSAGES_PER_PAGE
      }).finally(() => setIsLoading(false));
    }
  }, [client, frontendClient, isUsingFrontendClient]);
  (0, import_react85.useEffect)(() => {
    if (isUsingFrontendClient && allNodes.length > 0) {
      frontendClient.markFusionNotificationHistoryAsRead({
        ids: [],
        beforeId: allNodes[0].id
      }).catch((e) => console.log("Failed to mark as read", e));
    }
  }, [allNodes]);
  if (isLoading) {
    return import_react85.default.createElement(
      LoadingStateCard,
      {
        copy: {
          header: (_a = copy == null ? void 0 : copy.loadingHeader) != null ? _a : "",
          content: copy == null ? void 0 : copy.loadingContent
        },
        spinnerSize: copy == null ? void 0 : copy.loadingSpinnerSize,
        ringColor: copy == null ? void 0 : copy.loadingRingColor,
        classNames: classNames == null ? void 0 : classNames.LoadingStateCard
      }
    );
  }
  return import_react85.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiAlertHistory__container",
        classNames == null ? void 0 : classNames.historyContainer,
        { "NotifiAlertHistory__container--hidden": isHidden }
      )
    },
    allNodes.length > 0 ? import_react85.default.createElement(
      cn,
      {
        className: clsx_m_default("NotifiAlertHistory__virtuoso", classNames == null ? void 0 : classNames.virtuoso),
        style: { flex: 1 },
        endReached: () => {
          if (hasNextPage && endCursor) {
            getNotificationHistory({
              first: MESSAGES_PER_PAGE,
              after: endCursor
            });
          }
        },
        data: allNodes.filter(validateIsSupported),
        itemContent: (_index, notification) => {
          return import_react85.default.createElement(
            AlertNotificationRow,
            __spreadProps(__spreadValues({}, getAlertNotificationViewBaseProps(notification)), {
              handleAlertEntrySelection: () => setAlertEntry(notification),
              classNames: classNames == null ? void 0 : classNames.AlertCard
            })
          );
        }
      }
    ) : import_react85.default.createElement("div", { className: "NotifiAlertHistory__noAlertContainer" }, import_react85.default.createElement(
      NotificationEmptyBellIcon,
      {
        className: clsx_m_default(
          "NotifiAlertHistory__emptyAlertsBellIcon",
          classNames == null ? void 0 : classNames.emptyAlertsBellIcon
        )
      }
    ), import_react85.default.createElement(
      "span",
      {
        className: clsx_m_default(
          "NotifiAlertHistory_noAlertDescription",
          classNames == null ? void 0 : classNames.noAlertDescription
        )
      },
      noAlertDescription
    ))
  );
};
var getParsedPercentage2 = (input) => {
  var _a;
  if (input.indexOf("%") === input.length - 1) {
    return (_a = parseFloat(input.slice(0, -1))) != null ? _a : null;
  }
  return null;
};
var getParsedPrice2 = (input) => {
  var _a;
  if (input.indexOf("$") === 0) {
    return (_a = parseFloat(input.slice(1))) != null ? _a : null;
  }
  return null;
};
var EventTypeFusionHealthCheckRow = ({ classNames, config, disabled, inputs }) => {
  var _a, _b, _c;
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = (0, import_react90.useState)(false);
  const [selectedIndex, setSelectedIndex] = (0, import_react90.useState)(null);
  const [isNotificationLoading, setIsNotificationLoading] = (0, import_react90.useState)(false);
  const [customValue, setCustomValue] = (0, import_react90.useState)("");
  const customInputRef = (0, import_react90.useRef)(null);
  const thresholdDirection = "below";
  const [errorMessage, setErrorMessage] = (0, import_react90.useState)("");
  const fusionEventId = (0, import_react90.useMemo)(
    () => resolveStringRef(config.name, config.fusionEventId, inputs),
    [config, inputs]
  );
  const fusionSourceAddress = (0, import_react90.useMemo)(
    () => resolveStringRef(config.name, config.sourceAddress, inputs),
    [config, inputs]
  );
  const alertName = (0, import_react90.useMemo)(() => {
    if (config.fusionEventId.type === "value") {
      return config.name;
    }
    return `${config.name}:${fusionEventId}`;
  }, [config, fusionEventId]);
  const tooltipContent = config.tooltipContent;
  const UNABLE_TO_SUBSCRIBE2 = "Unable to subscribe, please try again";
  const UNABLE_TO_UNSUBSCRIBE = "Unable to unsubscribe, please try again";
  const INVALID_NUMBER2 = "Please enter a valid number";
  const INVALID_RANGE = (validInputRange) => {
    return `Please enter a number between ${validInputRange.min} and ${validInputRange.max}`;
  };
  const handleSuffixPercentage = (value) => {
    value = value.replace("%", "");
    setCustomValue(value + "%");
  };
  const handlePrefixDollar = (value) => {
    value = value.replace("$", "");
    setCustomValue("$" + value);
  };
  const subscribingRatioValue = (0, import_react90.useMemo)(() => {
    const alert = alerts[alertName];
    if (!alert || !alert.filterOptions)
      return null;
    let alertRatioValue = null;
    switch (config.numberType) {
      case "percentage":
        alertRatioValue = JSON.parse(alert.filterOptions).threshold * 100;
        break;
      default:
        alertRatioValue = JSON.parse(alert.filterOptions).threshold;
    }
    return alertRatioValue;
  }, [alerts]);
  const defaultRatios = (0, import_react90.useMemo)(() => {
    var _a2;
    const ratios = (_a2 = config.checkRatios) != null ? _a2 : [];
    return ratios.map((ratio) => ratio.ratio);
  }, [config]);
  (0, import_react90.useEffect)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    if (!subscribingRatioValue) {
      setEnabled(false);
      setSelectedIndex(defaultRatios.length - 1);
      return;
    }
    setEnabled(true);
    const selectedRatioIndex = defaultRatios.findIndex(
      (ratio) => ratio === subscribingRatioValue
    );
    if (selectedRatioIndex !== -1 && customValue === "") {
      setSelectedIndex(selectedRatioIndex);
    }
    if (!defaultRatios.includes(subscribingRatioValue) && customValue === "") {
      setSelectedIndex(3);
      setCustomValue(() => {
        switch (config.numberType) {
          case "percentage":
            return subscribingRatioValue + "%";
          case "price":
            return "$" + subscribingRatioValue;
          default:
            return subscribingRatioValue.toString();
        }
      });
    }
  }, [loading, enabled, setEnabled, defaultRatios, subscribingRatioValue]);
  const validateInput = (0, import_react90.useCallback)(
    (inputValue, regex, inputNumber) => {
      if (!regex.test(inputValue)) {
        return { isInputValid: false, inputInvalidWarning: INVALID_NUMBER2 };
      }
      if (!inputNumber) {
        return { isInputValid: false, inputInvalidWarning: INVALID_NUMBER2 };
      }
      if (config.validInputRange && (inputNumber > config.validInputRange.max || inputNumber < config.validInputRange.min)) {
        return {
          isInputValid: false,
          inputInvalidWarning: INVALID_RANGE(config.validInputRange)
        };
      }
      return { isInputValid: true, inputInvalidWarning: "" };
    },
    [config]
  );
  const subscribeAlert = (0, import_react90.useCallback)(
    async (alertDetail, ratioNumber) => {
      var _a2, _b2;
      if (isUsingFrontendClient) {
        alertDetail.inputs[`${alertDetail.eventType.name}__healthRatio`] = ratioNumber;
        alertDetail.inputs[`${alertDetail.eventType.name}__healthThresholdDirection`] = (_a2 = config.checkRatios[0].type) != null ? _a2 : thresholdDirection;
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: fusionHealthCheckConfiguration({
            maintainSourceGroup: config == null ? void 0 : config.maintainSourceGroup,
            fusionId: fusionEventId,
            fusionSourceAddress,
            alertFrequency: config.alertFrequency,
            thresholdDirection: (_b2 = config.checkRatios[0].type) != null ? _b2 : thresholdDirection,
            threshold: config.numberType === "percentage" ? ratioNumber / 100 : ratioNumber
          }),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const unSubscribeAlert = (0, import_react90.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleCustomRatioButtonNewSubscription = () => {
    if (loading || isNotificationLoading || !customInputRef.current) {
      return;
    }
    const inputValue = customInputRef.current.value;
    let regex = new RegExp(/^[0-9.]+$/);
    let inputNumber = null;
    switch (config.numberType) {
      case "percentage":
        regex = new RegExp(/^[0-9.%]+$/);
        inputNumber = getParsedPercentage2(inputValue);
        break;
      case "price":
        regex = new RegExp(/^[0-9.$]+$/);
        inputNumber = getParsedPrice2(inputValue);
        break;
      default:
        inputNumber = parseFloat(inputValue);
    }
    const { isInputValid, inputInvalidWarning } = validateInput(
      inputValue,
      regex,
      inputNumber
    );
    if (!isInputValid) {
      return setErrorMessage(inputInvalidWarning);
    }
    setErrorMessage("");
    setIsNotificationLoading(true);
    customInputRef.current.placeholder = "Custom";
    if (inputNumber && customValue) {
      subscribeAlert({ eventType: config, inputs }, inputNumber).then(() => {
        setSelectedIndex(3);
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => setErrorMessage(UNABLE_TO_UNSUBSCRIBE)).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setErrorMessage(INVALID_NUMBER2);
      setSelectedIndex(defaultRatios[defaultRatios.length - 1]);
      setIsNotificationLoading(false);
    }
  };
  const handleKeypressUp = (event) => {
    if (event.key === "Enter") {
      if (customInputRef.current) {
        customInputRef.current.blur();
        event.preventDefault();
      }
    }
  };
  const handleRatioButtonNewSubscription = (value, index) => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    setErrorMessage("");
    if (value) {
      subscribeAlert({ eventType: config, inputs }, value).then(() => {
        isUsingFrontendClient && frontendClient.fetchData().then(render);
        setSelectedIndex(index);
        setCustomValue("");
      }).catch(() => setErrorMessage(UNABLE_TO_SUBSCRIBE2)).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setErrorMessage(INVALID_NUMBER2);
      setIsNotificationLoading(false);
    }
  };
  const handleHealthCheckSubscription = (0, import_react90.useCallback)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    setErrorMessage("");
    if (!enabled && !subscribingRatioValue) {
      setEnabled(true);
      subscribeAlert(
        { eventType: config, inputs },
        defaultRatios[defaultRatios.length - 1]
      ).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        setErrorMessage(UNABLE_TO_SUBSCRIBE2);
        setEnabled(false);
        throw e;
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({ eventType: config, inputs }).then((res) => {
        setCustomValue("");
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        setErrorMessage(UNABLE_TO_SUBSCRIBE2);
        setEnabled(true);
        throw e;
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    subscribingRatioValue,
    enabled,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return import_react90.default.createElement("div", null, import_react90.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeCustomHealthCheckRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react90.default.createElement(
      "div",
      {
        className: clsx_m_default("EventTypeHealthCheckRow__label", classNames == null ? void 0 : classNames.label)
      },
      (_a = config.displayNameOverride) != null ? _a : config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react90.default.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    import_react90.default.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleHealthCheckSubscription
      }
    )
  ), enabled && ((_b = config.checkRatios) == null ? void 0 : _b.length) ? import_react90.default.createElement(import_react90.default.Fragment, null, import_react90.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeHealthCheckRow__content",
        classNames == null ? void 0 : classNames.content
      )
    },
    config.healthCheckSubtitle ? config.healthCheckSubtitle : `Alert me when my margin ratio is ${(_c = config.checkRatios[0]) == null ? void 0 : _c.type}`
  ), import_react90.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeHealthCheckRow__buttonContainer",
        classNames == null ? void 0 : classNames.buttonContainer
      )
    },
    config.checkRatios.map((value, index) => {
      const numberType = config.numberType;
      let valueToShow = null;
      switch (numberType) {
        case "percentage":
          valueToShow = value.ratio + "%";
          break;
        case "price":
          valueToShow = "$" + value.ratio;
          break;
        default:
          valueToShow = value.ratio;
      }
      return import_react90.default.createElement(
        "div",
        {
          key: index,
          className: clsx_m_default(
            "EventTypeHealthCheckRow__button",
            `${index === selectedIndex ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
            isNotificationLoading ? "buttonDisabled" : void 0,
            classNames == null ? void 0 : classNames.button
          ),
          onClick: () => {
            if (isNotificationLoading === true || selectedIndex === index) {
              return;
            }
            handleRatioButtonNewSubscription(value.ratio, index);
          }
        },
        valueToShow
      );
    }),
    import_react90.default.createElement(
      "input",
      {
        ref: customInputRef,
        onKeyUp: (e) => handleKeypressUp(e),
        onFocus: (e) => e.target.placeholder = config.numberType === "percentage" ? "0.00%" : "0",
        onClick: () => {
          setErrorMessage("");
          setSelectedIndex(null);
        },
        disabled: isNotificationLoading,
        onBlur: handleCustomRatioButtonNewSubscription,
        value: customValue,
        placeholder: "Custom",
        className: clsx_m_default(
          "EventTypeHealthCheckRow__button",
          "EventTypeHealthCheckRow__customButton",
          `${selectedIndex === 3 ? " EventTypeHealthCheckRow__buttonSelected" : void 0}`,
          classNames == null ? void 0 : classNames.button
        ),
        onChange: (e) => {
          var _a2;
          if (config.numberType === "percentage") {
            handleSuffixPercentage(e.target.value);
          } else if (config.numberType === "price") {
            handlePrefixDollar(e.target.value);
          } else {
            setCustomValue((_a2 = e.target.value) != null ? _a2 : "");
          }
        }
      }
    )
  ), import_react90.default.createElement(
    "label",
    {
      className: clsx_m_default(
        "NotifiEmailInput__errorMessage",
        classNames == null ? void 0 : classNames.errorMessage
      )
    },
    errorMessage
  )) : null);
};
var EventTypeFusionToggleRow = ({
  classNames,
  config,
  disabled,
  inputs
}) => {
  var _a;
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const [enabled, setEnabled] = (0, import_react91.useState)(false);
  const [isNotificationLoading, setIsNotificationLoading] = (0, import_react91.useState)(false);
  const fusionEventId = (0, import_react91.useMemo)(
    () => resolveStringRef(config.name, config.fusionEventId, inputs),
    [config, inputs]
  );
  const fusionSourceAddress = (0, import_react91.useMemo)(
    () => resolveStringRef(config.name, config.sourceAddress, inputs),
    [config, inputs]
  );
  const alertName = (0, import_react91.useMemo)(() => {
    if (config.fusionEventId.type === "value") {
      return config.name;
    }
    return `${config.name}:${fusionEventId}`;
  }, [config, fusionEventId]);
  const alertConfiguration = (0, import_react91.useMemo)(() => {
    return fusionToggleConfiguration({
      maintainSourceGroup: config == null ? void 0 : config.maintainSourceGroup,
      fusionId: fusionEventId,
      fusionSourceAddress,
      alertFrequency: config == null ? void 0 : config.alertFrequency
    });
  }, [alertName, config, inputs]);
  const subscribeAlert = (0, import_react91.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const unSubscribeAlert = (0, import_react91.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient, alertConfiguration]
  );
  const tooltipContent = config.tooltipContent;
  const didFetch = (0, import_react91.useRef)(false);
  (0, import_react91.useEffect)(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const handleNewSubscription = (0, import_react91.useCallback)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    loading,
    enabled,
    instantSubscribe,
    alertConfiguration,
    alertName,
    isNotificationLoading,
    setIsNotificationLoading
  ]);
  return import_react91.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "EventTypeFusionToggleRow__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react91.default.createElement(
      "div",
      {
        className: clsx_m_default("EventTypeFusionToggleRow__label", classNames == null ? void 0 : classNames.label)
      },
      (_a = config.displayNameOverride) != null ? _a : config.name,
      tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react91.default.createElement(
        NotifiTooltip,
        {
          classNames: classNames == null ? void 0 : classNames.tooltip,
          content: tooltipContent
        }
      ) : null
    ),
    import_react91.default.createElement(
      NotifiToggle,
      {
        checked: enabled,
        classNames: classNames == null ? void 0 : classNames.toggle,
        disabled: disabled || isNotificationLoading,
        setChecked: handleNewSubscription
      }
    )
  );
};
var EventTypeXMTPRow = ({
  classNames,
  disabled,
  config,
  inputs
}) => {
  const { alerts, loading, render } = useNotifiSubscriptionContext();
  const { instantSubscribe } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const alertName = (0, import_react92.useMemo)(() => config.name, [config]);
  const alertConfiguration = (0, import_react92.useMemo)(() => {
    return XMTPToggleConfiguration({
      XMTPTopics: resolveStringArrayRef(config.name, config.XMTPTopics, inputs)
    });
  }, [alertName, config]);
  const [enabled, setEnabled] = (0, import_react92.useState)(false);
  const [isNotificationLoading, setIsNotificationLoading] = (0, import_react92.useState)(false);
  const tooltipContent = config.tooltipContent;
  const didFetch = (0, import_react92.useRef)(false);
  (0, import_react92.useEffect)(() => {
    if (didFetch.current) {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setEnabled(hasAlert);
    didFetch.current = true;
  }, [alertName, alerts]);
  const subscribeAlert = (0, import_react92.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration,
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const unSubscribeAlert = (0, import_react92.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return unsubscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertName: alertDetail.eventType.name,
          alertConfiguration: null
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  const handleNewSubscription = (0, import_react92.useCallback)(() => {
    if (loading || isNotificationLoading) {
      return;
    }
    setIsNotificationLoading(true);
    if (!enabled) {
      setEnabled(true);
      subscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        const responseHasAlert = res.alerts[alertName] !== void 0;
        if (responseHasAlert !== true) {
          setEnabled(false);
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch((e) => {
        console.log("Failed to subscribeAlert", e);
        setEnabled(false);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    } else {
      setEnabled(false);
      unSubscribeAlert({
        eventType: config,
        inputs
      }).then((res) => {
        if (res) {
          const responseHasAlert = res.alerts[alertName] !== void 0;
          if (responseHasAlert !== false) {
            setEnabled(true);
          }
        }
        isUsingFrontendClient && frontendClient.fetchData().then(render);
      }).catch(() => {
        setEnabled(true);
      }).finally(() => {
        setIsNotificationLoading(false);
      });
    }
  }, [
    enabled,
    alerts,
    instantSubscribe,
    alertName,
    isNotificationLoading,
    setEnabled,
    setIsNotificationLoading
  ]);
  return import_react92.default.createElement("div", { className: clsx_m_default("EventTypeXMTPRow__container", classNames == null ? void 0 : classNames.container) }, import_react92.default.createElement("div", { className: clsx_m_default("EventTypeXMTPRow__label", classNames == null ? void 0 : classNames.label) }, config.name, tooltipContent !== void 0 && tooltipContent.length > 0 ? import_react92.default.createElement(
    NotifiTooltip,
    {
      classNames: classNames == null ? void 0 : classNames.tooltip,
      content: tooltipContent
    }
  ) : null), import_react92.default.createElement(
    NotifiToggle,
    {
      classNames: classNames == null ? void 0 : classNames.toggle,
      disabled: disabled || isNotificationLoading,
      checked: enabled,
      setChecked: handleNewSubscription
    }
  ));
};
var AlertsPanel = ({
  data,
  inputDisabled,
  classNames,
  inputs
}) => {
  var _a;
  return import_react89.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiEventTypeContainer",
        classNames == null ? void 0 : classNames.EventTypeContainer
      )
    },
    (_a = data.eventTypes) == null ? void 0 : _a.map((eventType) => {
      switch (eventType.type) {
        case "broadcast":
          return import_react89.default.createElement(
            EventTypeBroadcastRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeBroadcastRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        case "custom": {
          return eventType.selectedUIType === "HEALTH_CHECK" ? import_react89.default.createElement(
            EventTypeCustomHealthCheckRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeCustomHealthCheckRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          ) : import_react89.default.createElement(
            EventTypeCustomToggleRow,
            {
              key: eventType.name,
              disabled: inputDisabled,
              config: eventType,
              classNames: classNames == null ? void 0 : classNames.EventTypeCustomHealthCheckRow,
              inputs
            }
          );
        }
        case "directPush":
          return import_react89.default.createElement(
            EventTypeDirectPushRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeDirectPushRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        case "XMTP":
          return import_react89.default.createElement(
            EventTypeXMTPRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeXMTPRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        case "healthCheck":
          return import_react89.default.createElement(
            EventTypeHealthCheckRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeHealthCheckRow,
              disabled: inputDisabled,
              config: eventType
            }
          );
        case "label":
          return import_react89.default.createElement(
            EventTypeLabelRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeLabelRow,
              config: eventType
            }
          );
        case "tradingPair":
          return import_react89.default.createElement(
            EventTypeTradingPairsRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeTradingPairsRow,
              config: eventType,
              inputs
            }
          );
        case "walletBalance":
          return import_react89.default.createElement(
            EventTypeWalletBalanceRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypeWalletBalanceRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        case "fusionToggle":
        case "fusion":
          switch (eventType.selectedUIType) {
            case "HEALTH_CHECK":
              return import_react89.default.createElement(
                EventTypeFusionHealthCheckRow,
                {
                  key: eventType.name,
                  disabled: inputDisabled,
                  config: eventType,
                  classNames: classNames == null ? void 0 : classNames.EventTypeFusionHealthCheckRow,
                  inputs
                }
              );
            case "TOGGLE":
              return import_react89.default.createElement(
                EventTypeFusionToggleRow,
                {
                  key: eventType.name,
                  classNames: classNames == null ? void 0 : classNames.EventTypeFusionToggleRow,
                  disabled: inputDisabled,
                  config: eventType,
                  inputs
                }
              );
            case "MULTI_THRESHOLD":
              return import_react89.default.createElement(
                EventTypeFusionMultiThresholdRow,
                {
                  key: eventType.name,
                  classNames: classNames == null ? void 0 : classNames.EventTypeFusionMultiThresholdRow,
                  config: eventType,
                  inputs
                }
              );
            default:
              throw new Error(`Unknown fusion UI type`);
          }
        case "priceChange":
          return import_react89.default.createElement(
            EventTypePriceChangeRow,
            {
              key: eventType.name,
              classNames: classNames == null ? void 0 : classNames.EventTypePriceChangeRow,
              disabled: inputDisabled,
              config: eventType,
              inputs
            }
          );
        default:
          return import_react89.default.createElement(
            EventTypeUnsupportedRow,
            {
              key: JSON.stringify(eventType),
              classNames: classNames == null ? void 0 : classNames.EventTypeUnsupportedRow
            }
          );
      }
    })
  );
};
var PenIcon = (props) => {
  return import_react93.default.createElement(
    "svg",
    __spreadProps(__spreadValues({}, props), {
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    import_react93.default.createElement(
      "path",
      {
        d: "M5.293 15.619L15.619 5.29299C16.009 4.90299 16.642 4.90299 17.032 5.29299L18.708 6.96899C19.098 7.35899 19.098 7.99199 18.708 8.38199L8.381 18.707C8.194 18.895 7.94 19 7.675 19H5V16.325C5 16.06 5.105 15.806 5.293 15.619V15.619Z",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    ),
    import_react93.default.createElement(
      "path",
      {
        d: "M13.75 7.16003L16.84 10.25",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }
    )
  );
};
var UserInfoPanel = ({
  classNames,
  contactInfo,
  confirmationLabels
}) => {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t2, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F;
  const [isEmailConfirmationSent, setIsEmailConfirmationSent] = (0, import_react94.useState)(false);
  const {
    phoneNumber,
    email,
    telegramId,
    setCardView,
    destinationErrorMessages,
    useDiscord,
    discordTargetData
  } = useNotifiSubscriptionContext();
  const {
    params: { multiWallet }
  } = useNotifiClientContext();
  const handleEditClick = (0, import_react94.useCallback)(() => {
    setCardView({ state: "edit" });
  }, [setCardView, phoneNumber, email, telegramId]);
  const {
    telegram: telegramErrorMessage,
    email: emailErrorMessage,
    phoneNumber: phoneNumberErrorMessage,
    discord: discordErrrorMessage
  } = destinationErrorMessages;
  const handleResendEmailVerificationClick = (0, import_react94.useCallback)(() => {
    if ((emailErrorMessage == null ? void 0 : emailErrorMessage.type) !== "recoverableError")
      return;
    setIsEmailConfirmationSent(true);
    emailErrorMessage.onClick();
    setTimeout(() => setIsEmailConfirmationSent(false), 3e3);
  }, [emailErrorMessage]);
  const discordUserName = (0, import_react94.useMemo)(() => {
    const { username, discriminator } = discordTargetData || {};
    return discriminator === "0" ? username : `${username}#${discriminator}`;
  }, [discordTargetData]);
  return import_react94.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiUserInfoPanelContainer", classNames == null ? void 0 : classNames.container)
    },
    contactInfo.email.active && email ? import_react94.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiUserInfoPanel__email",
          (_a = classNames == null ? void 0 : classNames.email) == null ? void 0 : _a.container
        )
      },
      import_react94.default.createElement(
        "label",
        {
          className: clsx_m_default(
            "NotifiUserInfoPanel__emailLabel",
            (_b = classNames == null ? void 0 : classNames.email) == null ? void 0 : _b.label
          )
        },
        email
      ),
      (emailErrorMessage == null ? void 0 : emailErrorMessage.type) === "recoverableError" ? import_react94.default.createElement(
        DestinationErrorMessage,
        {
          classNames: {
            errorMessage: clsx_m_default((_c = classNames == null ? void 0 : classNames.email) == null ? void 0 : _c.errorMessage, {
              DestinationError__emailConfirmationSent: isEmailConfirmationSent
            }),
            errorMessageContainer: (_d = classNames == null ? void 0 : classNames.email) == null ? void 0 : _d.errorMessageContainer,
            tooltipContent: (_e2 = classNames == null ? void 0 : classNames.email) == null ? void 0 : _e2.tooltipContent
          },
          onClick: () => handleResendEmailVerificationClick(),
          errorMessage: isEmailConfirmationSent ? "Sent" : emailErrorMessage.message,
          tooltipContent: emailErrorMessage == null ? void 0 : emailErrorMessage.tooltip
        }
      ) : null
    ) : null,
    contactInfo.sms.active && phoneNumber ? import_react94.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiUserInfoPanel__sms",
          (_f = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _f.container
        )
      },
      import_react94.default.createElement(
        "label",
        {
          className: clsx_m_default(
            "NotifiUserInfoPanel__smsLabel",
            (_g = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _g.label
          )
        },
        phoneNumber
      ),
      (phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.type) !== void 0 ? import_react94.default.createElement(
        DestinationErrorMessage,
        {
          classNames: {
            errorMessage: (_h = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _h.errorMessage,
            errorMessageContainer: (_i = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _i.errorMessageContainer,
            tooltipContent: (_j = classNames == null ? void 0 : classNames.sms) == null ? void 0 : _j.tooltipContent
          },
          errorMessage: phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.message,
          tooltipContent: phoneNumberErrorMessage == null ? void 0 : phoneNumberErrorMessage.tooltip
        }
      ) : null
    ) : null,
    contactInfo.telegram.active && telegramId ? import_react94.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiUserInfoPanel__telegram",
          (_k = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _k.container
        )
      },
      import_react94.default.createElement(
        "label",
        {
          className: clsx_m_default(
            "NotifiUserInfoPanel__telegramLabel",
            (_l = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _l.label
          )
        },
        telegramId
      ),
      (telegramErrorMessage == null ? void 0 : telegramErrorMessage.type) === "recoverableError" ? import_react94.default.createElement(
        DestinationErrorMessage,
        {
          classNames: {
            errorMessage: clsx_m_default(
              (_m = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _m.errorMessage,
              (_n = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _n.confirmationLink
            ),
            errorMessageContainer: (_o = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _o.errorMessageContainer,
            tooltipContent: (_p = classNames == null ? void 0 : classNames.telegram) == null ? void 0 : _p.tooltipContent
          },
          onClick: () => {
            telegramErrorMessage == null ? void 0 : telegramErrorMessage.onClick();
          },
          errorMessage: (_r = (_q = telegramErrorMessage == null ? void 0 : telegramErrorMessage.message) != null ? _q : confirmationLabels == null ? void 0 : confirmationLabels.telegram) != null ? _r : "",
          tooltipContent: (_s = destinationErrorMessages == null ? void 0 : destinationErrorMessages.telegram) == null ? void 0 : _s.tooltip
        }
      ) : null
    ) : null,
    ((_t2 = contactInfo == null ? void 0 : contactInfo.discord) == null ? void 0 : _t2.active) && useDiscord ? import_react94.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiUserInfoPanel__discord",
          (_u = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _u.container
        )
      },
      import_react94.default.createElement(
        "label",
        {
          className: clsx_m_default(
            "NotifiUserInfoPanel__discordLabel",
            (_v = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _v.label
          )
        },
        (discordTargetData == null ? void 0 : discordTargetData.isConfirmed) === true ? discordUserName : "Discord"
      ),
      (discordErrrorMessage == null ? void 0 : discordErrrorMessage.type) === "recoverableError" ? import_react94.default.createElement(
        DestinationErrorMessage,
        {
          classNames: {
            errorMessage: clsx_m_default(
              (_w = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _w.errorMessage,
              (_x = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _x.confirmationLink
            ),
            errorMessageContainer: (_y = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _y.errorMessageContainer,
            tooltipContent: (_z = classNames == null ? void 0 : classNames.discord) == null ? void 0 : _z.tooltipContent
          },
          onClick: () => {
            discordErrrorMessage == null ? void 0 : discordErrrorMessage.onClick();
          },
          errorMessage: (_B = (_A = discordErrrorMessage == null ? void 0 : discordErrrorMessage.message) != null ? _A : confirmationLabels == null ? void 0 : confirmationLabels.telegram) != null ? _B : "",
          tooltipContent: (_C = destinationErrorMessages == null ? void 0 : destinationErrorMessages.discord) == null ? void 0 : _C.tooltip
        }
      ) : null
    ) : null,
    multiWallet !== void 0 && multiWallet.ownedWallets.length > 0 ? import_react94.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiUserInfoPanel__myWallet",
          (_D = classNames == null ? void 0 : classNames.myWallet) == null ? void 0 : _D.container
        )
      },
      import_react94.default.createElement(
        "label",
        {
          className: clsx_m_default(
            "NotifiUserInfoPanel__myWalletLabel",
            (_E = classNames == null ? void 0 : classNames.myWallet) == null ? void 0 : _E.label
          )
        },
        "My wallets"
      ),
      import_react94.default.createElement(
        "button",
        {
          className: clsx_m_default(
            "NotifiUserInfoPanel__myWalletConfirmation",
            (_F = classNames == null ? void 0 : classNames.myWallet) == null ? void 0 : _F.confirmationLink
          ),
          onClick: () => {
            setCardView({ state: "verify" });
          }
        },
        "Edit"
      )
    ) : null,
    import_react94.default.createElement(
      "button",
      {
        className: clsx_m_default(
          "NotifiPreviewCard__editButton",
          classNames == null ? void 0 : classNames.EditButton
        ),
        onClick: handleEditClick
      },
      import_react94.default.createElement(PenIcon, null),
      "Edit"
    )
  );
};
var PreviewCard = ({
  classNames,
  data,
  inputDisabled,
  inputs = {}
}) => {
  const { isTargetsExist } = useDestinationState();
  return import_react88.default.createElement(
    "div",
    {
      "data-cy": "previewCard",
      className: clsx_m_default(
        "NotifiPreviewCard__container",
        classNames == null ? void 0 : classNames.NotifiPreviewCardContainer
      )
    },
    isTargetsExist ? import_react88.default.createElement(
      UserInfoPanel,
      {
        classNames: classNames == null ? void 0 : classNames.UserInfoPanel,
        contactInfo: data.contactInfo
      }
    ) : null,
    import_react88.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiPreviewCard__dividerLine",
          classNames == null ? void 0 : classNames.NotifiPreviewCardDividerLine
        )
      }
    ),
    import_react88.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiPreviewCard__title",
          classNames == null ? void 0 : classNames.NotifiPreviewCardTitle
        )
      },
      "Select the alerts you want to receive:"
    ),
    import_react88.default.createElement(
      AlertsPanel,
      {
        classNames: classNames == null ? void 0 : classNames.AlertsPanel,
        data,
        inputDisabled,
        inputs
      }
    )
  );
};
var hasKey3 = (obj, key) => {
  return typeof obj === "object" && obj !== null && key in obj;
};
var findError = (errors, code) => {
  return errors.find(
    (err) => typeof err === "object" && err !== null && hasKey3(err, "extensions") && typeof err.extensions === "object" && err.extensions !== null && hasKey3(err.extensions, "code") && code === err.extensions.code
  );
};
var ConnectWalletRow = (_a) => {
  var _b = _a, {
    connectedWallets,
    displayName,
    disabled
  } = _b, walletParams = __objRest(_b, [
    "connectedWallets",
    "displayName",
    "disabled"
  ]);
  const { subscribeWallet } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const isConnected = (0, import_react96.useMemo)(() => {
    const key = "accountAddress";
    const address = hasKey3(walletParams, key) ? walletParams[key] : walletParams.walletPublicKey;
    return connectedWallets.some(
      (it2) => it2.address === address && it2.walletBlockchain === walletParams.walletBlockchain
    );
  }, [connectedWallets, walletParams]);
  const shortenedAddress = (0, import_react96.useMemo)(() => {
    if (walletParams === null || walletParams.walletPublicKey === null) {
      return null;
    }
    return addressEllipsis(walletParams.walletPublicKey);
  }, [walletParams]);
  const [isLoading, setIsLoading] = (0, import_react96.useState)(false);
  const [isConnectedElsewhere, setIsConnectedElsewhere] = (0, import_react96.useState)(false);
  const connectWallet = (0, import_react96.useCallback)(
    async (technique) => {
      var _a2;
      setIsLoading(true);
      try {
        await subscribeWallet({
          walletParams,
          connectWalletConflictResolutionTechnique: technique
        });
        setIsConnectedElsewhere(false);
      } catch (e) {
        if (e instanceof import_notifi_react_hooks2.GqlError) {
          const alreadyConnectedError = (_a2 = findError(
            e.errors,
            "ERROR_WALLETCONNECT_ALREADY_CONNECTED_TO_ANOTHER_ACCOUNT_AND_LAST"
          )) != null ? _a2 : findError(
            e.errors,
            "ERROR_WALLETCONNECT_ALREADY_CONNECTED_TO_ANOTHER_ACCOUNT"
          );
          if (alreadyConnectedError !== void 0) {
            setIsConnectedElsewhere(true);
          }
        }
        throw e;
      } finally {
        setIsLoading(false);
      }
    },
    [subscribeWallet, walletParams]
  );
  return import_react96.default.createElement("div", { className: "ConnectWalletRow__container" }, import_react96.default.createElement("div", { className: "ConnectWalletRow__topRow" }, import_react96.default.createElement("p", { className: "ConnectWalletRow__publicKey" }, displayName != null ? displayName : shortenedAddress), isConnected || isConnectedElsewhere ? null : import_react96.default.createElement(
    "button",
    {
      disabled: disabled || isLoading || isConnectedElsewhere,
      className: "ConnectWalletRow__button",
      onClick: () => {
        connectWallet("FAIL").catch((e) => {
          console.log("Error connecting wallet", e);
        });
      }
    },
    "Verify"
  ), isConnected ? import_react96.default.createElement("p", { className: "ConnectWalletRow__verified" }, "Verified") : null), isConnectedElsewhere ? import_react96.default.createElement(import_react96.default.Fragment, null, import_react96.default.createElement("div", { className: "ConnectWalletRow__messageRow" }, "This wallet is already connected to another Notifi Hub account. If you continue, this wallet can only be used to access this account. You will lose access to the subscriptions in your other account."), import_react96.default.createElement("div", { className: "ConnectWalletRow__bottomRow" }, import_react96.default.createElement(
    "button",
    {
      disabled: disabled || isLoading,
      className: "ConnectWalletRow__connectAnywayButton",
      onClick: () => {
        connectWallet("DISCONNECT_AND_CLOSE_OLD_ACCOUNT").catch((e) => {
          console.log("Error connecting wallet", e);
        });
      }
    },
    "Verify anyway"
  ))) : null);
};
var WalletListInternal = ({
  connectedWallets,
  ownedWallets,
  disabled
}) => {
  return import_react97.default.createElement("ul", null, ownedWallets.map((wallet) => {
    return import_react97.default.createElement(
      ConnectWalletRow,
      __spreadProps(__spreadValues({
        key: wallet.walletPublicKey
      }, wallet), {
        connectedWallets,
        disabled
      })
    );
  }));
};
var WalletList = () => {
  const {
    params: { multiWallet }
  } = useNotifiClientContext();
  const { connectedWallets, loading } = useNotifiSubscriptionContext();
  const owned = multiWallet == null ? void 0 : multiWallet.ownedWallets;
  if (owned === void 0 || owned.length === 0) {
    return null;
  }
  return import_react97.default.createElement(
    WalletListInternal,
    {
      ownedWallets: owned,
      connectedWallets: connectedWallets.filter(
        (wallet) => !!wallet
      ),
      disabled: loading
    }
  );
};
var NotifiCardButton = ({
  buttonText,
  classNames,
  disabled,
  onClick
}) => {
  return import_react98.default.createElement(
    "button",
    {
      className: clsx_m_default("NotifiCardButton__button", classNames == null ? void 0 : classNames.button),
      disabled,
      onClick
    },
    import_react98.default.createElement("span", { className: clsx_m_default("NotifiCardButtonn__label", classNames == null ? void 0 : classNames.label) }, buttonText)
  );
};
var NotifiCardButton_default = NotifiCardButton;
var VerifyWalletView = ({
  classNames,
  buttonText,
  data,
  inputs
}) => {
  const {
    cardView,
    setCardView,
    loading,
    setLoading,
    connectedWallets,
    useDiscord
  } = useNotifiSubscriptionContext();
  const {
    formState: { phoneNumber, telegram: telegramId, email }
  } = useNotifiForm();
  const { subscribe: subscribe2, updateWallets } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const targetGroup = (0, import_react95.useMemo)(
    () => ({
      name: "Default",
      emailAddress: email === "" ? void 0 : email,
      phoneNumber: isValidPhoneNumber2(phoneNumber) ? phoneNumber : void 0,
      telegramId: telegramId === "" ? void 0 : formatTelegramForSubscription(telegramId),
      discordId: useDiscord ? "Default" : void 0
    }),
    [email, phoneNumber, telegramId, useDiscord]
  );
  const subscribeAlerts = (0, import_react95.useCallback)(
    async (eventTypes, inputs2) => {
      if (isUsingFrontendClient) {
        await frontendClient.ensureTargetGroup(targetGroup);
        return subscribeAlertsByFrontendClient(
          frontendClient,
          eventTypes,
          inputs2
        );
      }
      return subscribe2(
        createConfigurations(data.eventTypes, inputs2, connectedWallets)
      );
    },
    [
      isUsingFrontendClient,
      frontendClient,
      email,
      phoneNumber,
      telegramId,
      useDiscord,
      subscribe2
    ]
  );
  const renewWallets = (0, import_react95.useCallback)(async () => {
    if (isUsingFrontendClient) {
      return frontendClient.updateWallets();
    }
    return updateWallets();
  }, [isUsingFrontendClient, frontendClient, updateWallets]);
  const onClick = (0, import_react95.useCallback)(async () => {
    if (cardView.state === "verifyonboarding") {
      setLoading(true);
      try {
        const subEvents = data.eventTypes.filter((event) => {
          return event.optOutAtSignup ? false : true;
        });
        await subscribeAlerts(subEvents, inputs);
      } finally {
        setLoading(false);
      }
    } else {
      setLoading(true);
      try {
        await renewWallets();
      } finally {
        setLoading(false);
      }
    }
    setCardView({ state: "preview" });
  }, [setLoading, data, inputs, connectedWallets, subscribe2, renewWallets]);
  return import_react95.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiVerifyContainer",
        classNames == null ? void 0 : classNames.NotifiVerifyContainer
      )
    },
    import_react95.default.createElement(WalletList, null),
    import_react95.default.createElement(
      NotifiCardButton_default,
      {
        buttonText,
        disabled: loading,
        onClick
      }
    )
  );
};
var VerifyWalletView_default = VerifyWalletView;
var SubscriptionCardV1 = ({
  classNames,
  copy,
  data,
  inputDisabled,
  inputs,
  inputLabels,
  inputSeparators,
  onClose
}) => {
  var _a, _b;
  const allowedCountryCodes = [...data.contactInfo.sms.supportedCountryCodes];
  const {
    cardView,
    email,
    phoneNumber,
    telegramId,
    setCardView,
    ftuStage,
    syncFtuStage,
    updateFtuStage,
    loading,
    setLoading
  } = useNotifiSubscriptionContext();
  const { demoPreview } = useNotifiDemoPreviewContext();
  const {
    setEmail,
    setTelegram,
    setPhoneNumber,
    setEmailErrorMessage,
    setTelegramErrorMessage,
    setPhoneNumberErrorMessage
  } = useNotifiForm();
  const { isAuthenticated, isTokenExpired } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const { isClientTokenExpired, isClientAuthenticated } = (0, import_react61.useMemo)(() => {
    var _a2, _b2;
    let isClientTokenExpired2 = false;
    let isClientAuthenticated2 = false;
    if (isUsingFrontendClient) {
      isClientTokenExpired2 = ((_a2 = frontendClient.userState) == null ? void 0 : _a2.status) === "expired";
      isClientAuthenticated2 = ((_b2 = frontendClient.userState) == null ? void 0 : _b2.status) === "authenticated";
    } else {
      isClientTokenExpired2 = isTokenExpired;
      isClientAuthenticated2 = isAuthenticated;
    }
    return { isClientTokenExpired: isClientTokenExpired2, isClientAuthenticated: isClientAuthenticated2 };
  }, [
    (_a = frontendClient.userState) == null ? void 0 : _a.status,
    isTokenExpired,
    isAuthenticated,
    isUsingFrontendClient
  ]);
  const { unverifiedDestinations, isTargetsExist } = useDestinationState();
  const [selectedAlertEntry, setAlertEntry] = (0, import_react61.useState)(void 0);
  let view = null;
  const resetFormState = (0, import_react61.useCallback)(() => {
    setEmail(email);
    setPhoneNumber(phoneNumber);
    setTelegram(telegramId);
    setEmailErrorMessage("");
    setTelegramErrorMessage("");
    setPhoneNumberErrorMessage("");
  }, [email, phoneNumber, telegramId]);
  (0, import_react61.useEffect)(() => {
    setCardView(() => {
      if (demoPreview) {
        return {
          state: demoPreview.view,
          reason: demoPreview.view === "error" ? "test example reason" : void 0
        };
      }
      if (isClientTokenExpired) {
        return { state: "expired" };
      }
      if (!isClientAuthenticated) {
        return { state: "signup" };
      }
      setLoading(true);
      syncFtuStage(data.isContactInfoRequired).catch((e) => {
        console.log(`Failed to syncFtuStage: ${e}`);
      }).finally(() => setLoading(false));
      return { state: "history" };
    });
  }, []);
  const rightIcon = (0, import_react61.useMemo)(() => {
    if (onClose === void 0) {
      return void 0;
    }
    return {
      name: "close",
      onClick: onClose
    };
  }, [onClose]);
  const useCustomTitles = ((_b = data == null ? void 0 : data.titles) == null ? void 0 : _b.active) === true;
  const expiredHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.expiredView) !== "" ? data == null ? void 0 : data.titles.expiredView : (_a2 = copy == null ? void 0 : copy.expiredHeader) != null ? _a2 : "Welcome Back";
  };
  const previewHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.previewView) !== "" ? data == null ? void 0 : data.titles.previewView : (_a2 = copy == null ? void 0 : copy.manageAlertsHeader) != null ? _a2 : "Manage Alerts";
  };
  const signUpHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.signupView) !== "" ? data == null ? void 0 : data.titles.signupView : (_a2 = copy == null ? void 0 : copy.signUpHeader) != null ? _a2 : "Get Notified";
  };
  const editHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.editView) !== "" ? data == null ? void 0 : data.titles.editView : (_a2 = copy == null ? void 0 : copy.editHeader) != null ? _a2 : "Update Settings";
  };
  const verifyOnboardingHeader = () => {
    var _a2;
    return useCustomTitles && (data == null ? void 0 : data.titles.verifyWalletsView) !== "" ? data == null ? void 0 : data.titles.verifyWalletsView : (_a2 = copy == null ? void 0 : copy.verifyWalletsHeader) != null ? _a2 : "Verify Wallets";
  };
  const historyView = () => {
    if (!useCustomTitles) {
      return selectedAlertEntry ? "Alert Details" : "Alert History";
    }
    return selectedAlertEntry ? (data == null ? void 0 : data.titles.alertDetailsView) || "Alert Details" : (data == null ? void 0 : data.titles.historyView) || "Alert History";
  };
  switch (cardView.state) {
    case "expired":
      view = import_react61.default.createElement(import_react61.default.Fragment, null, import_react61.default.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          rightIcon
        },
        import_react61.default.createElement("h2", null, expiredHeader())
      ), import_react61.default.createElement(
        "div",
        {
          className: clsx_m_default("DividerLine expired", classNames == null ? void 0 : classNames.dividerLine)
        }
      ), import_react61.default.createElement(ExpiredTokenView, { classNames: classNames == null ? void 0 : classNames.ExpiredTokenView }));
      break;
    case "preview":
      view = import_react61.default.createElement(import_react61.default.Fragment, null, import_react61.default.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          leftIcon: {
            name: "back",
            onClick: () => setCardView({ state: "history" })
          },
          rightIcon
        },
        import_react61.default.createElement("h2", null, previewHeader())
      ), import_react61.default.createElement(
        "div",
        {
          className: clsx_m_default("DividerLine preview", classNames == null ? void 0 : classNames.dividerLine)
        }
      ), !isTargetsExist ? import_react61.default.createElement(SignupBanner, { data, classNames: classNames == null ? void 0 : classNames.signupBanner }) : null, import_react61.default.createElement(
        PreviewCard,
        {
          data,
          inputs,
          inputDisabled,
          classNames: classNames == null ? void 0 : classNames.PreviewCard
        }
      ));
      break;
    case "edit":
    case "signup":
      view = import_react61.default.createElement(import_react61.default.Fragment, null, import_react61.default.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          leftIcon: cardView.state === "signup" ? void 0 : {
            name: "back",
            onClick: () => {
              resetFormState();
              setCardView({ state: "preview" });
            }
          },
          rightIcon
        },
        cardView.state === "signup" ? import_react61.default.createElement("h2", null, signUpHeader()) : import_react61.default.createElement("h2", null, editHeader())
      ), import_react61.default.createElement(
        "div",
        {
          className: clsx_m_default("DividerLine signup", classNames == null ? void 0 : classNames.dividerLine)
        }
      ), import_react61.default.createElement(
        EditCardView,
        {
          buttonText: cardView.state === "signup" ? "Next" : "Update",
          data,
          copy: copy == null ? void 0 : copy.EditCard,
          classNames: classNames == null ? void 0 : classNames.EditCard,
          inputDisabled,
          inputTextFields: inputLabels,
          inputSeparators,
          allowedCountryCodes,
          showPreview: cardView.state === "signup",
          inputs
        }
      ));
      break;
    case "verifyonboarding":
    case "verify":
      view = import_react61.default.createElement(import_react61.default.Fragment, null, import_react61.default.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          leftIcon: {
            name: "back",
            onClick: () => setCardView({
              state: cardView.state === "verifyonboarding" ? "signup" : "preview"
            })
          },
          rightIcon
        },
        import_react61.default.createElement("h2", null, verifyOnboardingHeader())
      ), import_react61.default.createElement(
        "div",
        {
          className: clsx_m_default("DividerLine verify", classNames == null ? void 0 : classNames.dividerLine)
        }
      ), import_react61.default.createElement(
        VerifyWalletView_default,
        {
          classNames: classNames == null ? void 0 : classNames.VerifyWalletView,
          data,
          inputs,
          buttonText: cardView.state === "verifyonboarding" ? "Next" : "Confirm"
        }
      ));
      break;
    case "history":
      view = import_react61.default.createElement(import_react61.default.Fragment, null, ftuStage === 2 ? import_react61.default.createElement(
        ConfigAlertModal,
        {
          classNames: classNames == null ? void 0 : classNames.ConfigAlertModal,
          updateFtuStage,
          data,
          inputDisabled,
          inputs
        }
      ) : null, ftuStage === 3 ? import_react61.default.createElement(
        ConfigDestinationModal,
        {
          classNames: classNames == null ? void 0 : classNames.ConfigDestinationModal,
          updateFtuStage,
          contactInfo: data.contactInfo
        }
      ) : null, import_react61.default.createElement(
        NotifiAlertBox_default,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiAlertBox,
          leftIcon: selectedAlertEntry === void 0 ? {
            name: "settings",
            onClick: () => setCardView({ state: "preview" })
          } : {
            name: "back",
            onClick: () => setAlertEntry(void 0)
          },
          rightIcon
        },
        import_react61.default.createElement("h2", null, historyView())
      ), import_react61.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "NotifiSubscriptionCardV1__alertContainer",
            classNames == null ? void 0 : classNames.alertContainer
          )
        },
        import_react61.default.createElement(
          "div",
          {
            className: clsx_m_default("DividerLine history", classNames == null ? void 0 : classNames.dividerLine)
          }
        ),
        unverifiedDestinations.length > 0 ? import_react61.default.createElement(
          VerifyBanner,
          {
            classNames: classNames == null ? void 0 : classNames.verifyBanner,
            unVerifiedDestinations: unverifiedDestinations
          }
        ) : null,
        !isTargetsExist ? import_react61.default.createElement(SignupBanner, { data, classNames: classNames == null ? void 0 : classNames.signupBanner }) : null,
        selectedAlertEntry === void 0 ? null : import_react61.default.createElement(
          AlertDetailsCard,
          {
            notificationEntry: selectedAlertEntry,
            classNames: classNames == null ? void 0 : classNames.AlertDetailsCard
          }
        ),
        import_react61.default.createElement(
          AlertHistoryView,
          {
            classNames: classNames == null ? void 0 : classNames.AlertHistoryView,
            copy: copy == null ? void 0 : copy.AlertHistory,
            isHidden: selectedAlertEntry !== void 0,
            setAlertEntry,
            data
          }
        )
      ));
      break;
    case "error":
      view = import_react61.default.createElement(ErrorStateCard, { reason: cardView.reason });
      break;
    default:
      view = import_react61.default.createElement("div", null, "Not supported view");
  }
  return import_react61.default.createElement(import_react61.default.Fragment, null, " ", loading ? import_react61.default.createElement(LoadingStateCard, null) : view);
};
var FetchedStateCard = ({
  inputDisabled,
  classNames,
  copy,
  card,
  inputs,
  inputLabels,
  inputSeparators,
  onClose
}) => {
  let contents = import_react58.default.createElement(SubscriptionCardUnsupported, null);
  switch (card.data.version) {
    case "v1":
      contents = import_react58.default.createElement(
        SubscriptionCardV1,
        {
          classNames: classNames == null ? void 0 : classNames.SubscriptionCardV1,
          copy: copy == null ? void 0 : copy.SubscriptionCardV1,
          data: card.data,
          inputs,
          inputDisabled,
          inputLabels,
          inputSeparators,
          onClose
        }
      );
  }
  return import_react58.default.createElement(import_react58.default.Fragment, null, contents);
};
var NotifiSubscriptionCard = ({
  classNames,
  copy,
  cardId,
  darkMode,
  inputLabels,
  inputs = {},
  inputSeparators,
  disclosureCopy,
  children,
  loadingRingColor,
  loadingSpinnerSize,
  onClose
}) => {
  var _a;
  const { isInitialized, reload, isAuthenticated } = useNotifiSubscribe({
    targetGroupName: "Default"
  });
  const { isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const { isClientInitialized, isClientAuthenticated } = (0, import_react99.useMemo)(() => {
    var _a2;
    return {
      isClientInitialized: isUsingFrontendClient ? !!frontendClient.userState : isInitialized,
      isClientAuthenticated: isUsingFrontendClient ? ((_a2 = frontendClient.userState) == null ? void 0 : _a2.status) === "authenticated" : isAuthenticated
    };
  }, [
    isUsingFrontendClient,
    isInitialized,
    (_a = frontendClient.userState) == null ? void 0 : _a.status,
    isAuthenticated
  ]);
  const { loading, render } = useNotifiSubscriptionContext();
  const inputDisabled = loading || !isClientInitialized;
  const card = useSubscriptionCard({
    id: cardId,
    type: "SUBSCRIPTION_CARD"
  });
  let contents = null;
  (0, import_react99.useEffect)(() => {
    const handler = () => {
      if (!isClientInitialized || !isClientAuthenticated) {
        return;
      }
      if (isUsingFrontendClient) {
        return frontendClient.fetchData().then(render);
      }
      reload();
    };
    window.addEventListener("focus", handler);
    return () => {
      window.removeEventListener("focus", handler);
    };
  }, [
    isClientInitialized,
    isAuthenticated,
    isClientAuthenticated,
    isUsingFrontendClient,
    frontendClient
  ]);
  switch (card.state) {
    case "loading":
      contents = import_react99.default.createElement(
        LoadingStateCard,
        {
          copy: copy == null ? void 0 : copy.LoadingStateCard,
          spinnerSize: loadingSpinnerSize,
          ringColor: loadingRingColor,
          classNames: classNames == null ? void 0 : classNames.LoadingStateCard,
          onClose
        }
      );
      break;
    case "error":
      contents = import_react99.default.createElement(
        ErrorStateCard,
        {
          copy: copy == null ? void 0 : copy.ErrorStateCard,
          classNames: classNames == null ? void 0 : classNames.ErrorStateCard,
          reason: card.reason,
          onClose
        }
      );
      break;
    case "fetched":
      contents = import_react99.default.createElement(
        FetchedStateCard,
        {
          classNames: classNames == null ? void 0 : classNames.FetchedStateCard,
          copy: copy == null ? void 0 : copy.FetchedStateCard,
          card,
          inputs,
          inputDisabled,
          inputLabels,
          inputSeparators,
          onClose
        }
      );
      break;
  }
  return import_react99.default.createElement(
    "div",
    {
      className: clsx_m_default(
        darkMode ? "notifi__dark" : "notifi__light",
        "NotifiSubscriptionCard__container",
        classNames == null ? void 0 : classNames.container
      ),
      "data-cy": "notifiSubscriptionCardContainer"
    },
    children,
    contents,
    import_react99.default.createElement(
      NotifiFooter,
      {
        classNames: classNames == null ? void 0 : classNames.NotifiFooter,
        copy: { disclosure: disclosureCopy }
      }
    )
  );
};
var sortByDate = (getDate, direction) => {
  return (a2, b2) => {
    const aDate = getDate(a2);
    const bDate = getDate(b2);
    switch (direction) {
      case "ASC":
        return aDate.getTime() - bDate.getTime();
      case "DESC":
        return bDate.getTime() - aDate.getTime();
    }
  };
};
var formatConversationDateTimestamp = (date) => {
  try {
    const parsedDate = parseISO(date);
    const month = parsedDate.toLocaleString("default", { month: "short" });
    const day = format(parsedDate, "d");
    return `${month} ${day}`;
  } catch (e) {
    return "";
  }
};
var formatHourTimestamp = (date) => {
  const parsedDate = parseISO(date);
  return format(parsedDate, "H:mm");
};
var formatConversationStartTimestamp = (date) => {
  try {
    const parsedDate = parseISO(date);
    const month = parsedDate.toLocaleString("default", { month: "short" });
    const day = format(parsedDate, "d");
    const finalTimestamp = isToday2(parsedDate) ? "Today" : `${month} ${day}`;
    return finalTimestamp;
  } catch (e) {
    return "";
  }
};
var isToday2 = (date) => {
  const today = /* @__PURE__ */ new Date();
  return date.getDate() == today.getDate() && date.getMonth() == today.getMonth() && date.getFullYear() == today.getFullYear();
};
var ChatMessageDate = ({
  classNames,
  createdDate,
  isStartDate = true
}) => {
  return import_react100.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiIntercomChatMessageDate__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react100.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiIntercomChatMessageDate__body",
          classNames == null ? void 0 : classNames.body
        )
      },
      import_react100.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "NotifiIntercomChatMessageDate__content",
            classNames == null ? void 0 : classNames.content
          )
        },
        isStartDate ? formatConversationStartTimestamp(createdDate) : formatConversationDateTimestamp(createdDate)
      )
    )
  );
};
var MESSAGES_NUMBER = 5;
var useIntercomChat = ({
  conversationId,
  userId
}) => {
  const [chatMessages, setChatMessages] = (0, import_react102.useState)([]);
  const [endCursor, setEndCursor] = (0, import_react102.useState)();
  const [hasNextPage, setHasNextPage] = (0, import_react102.useState)(null);
  const [isLoading, setIsLoading] = (0, import_react102.useState)(false);
  const [atTop, setAtTop] = (0, import_react102.useState)(false);
  const [visibleRange, setVisibleRange] = (0, import_react102.useState)({
    startIndex: 0,
    endIndex: 0
  });
  const [isScrolling, setIsScrolling] = (0, import_react102.useState)();
  const { client } = useNotifiClientContext();
  (0, import_react102.useEffect)(() => {
    const intervalId = setInterval(function() {
      client.getConversationMessages({
        first: 50,
        getConversationMessagesInput: { conversationId }
      }).then((response) => {
        if (Array.isArray(response.nodes)) {
          const nodes = response.nodes;
          const chatMessageIds = new Set(
            chatMessages.map((message) => message.id)
          );
          const dedupeNewMessages = nodes.filter(
            (node) => chatMessageIds.has(node.id) === false
          );
          const dedupeMessages = [...dedupeNewMessages, ...chatMessages];
          const sortedMessages = dedupeMessages.sort(
            sortByDate((message) => new Date(message.createdDate), "DESC")
          );
          setChatMessages([...sortedMessages]);
        }
      });
    }, 5e3);
    return () => clearInterval(intervalId);
  }, [chatMessages]);
  const getConversationMessages = (0, import_react102.useCallback)(
    (first = MESSAGES_NUMBER) => {
      setIsLoading(true);
      if (conversationId) {
        client.getConversationMessages({
          first,
          after: endCursor,
          getConversationMessagesInput: { conversationId }
        }).then((response) => {
          if (Array.isArray(response.nodes)) {
            setChatMessages([...chatMessages, ...response.nodes]);
          }
          if (response.pageInfo) {
            setEndCursor(response.pageInfo.endCursor);
            setHasNextPage(response.pageInfo.hasNextPage);
          }
          setIsLoading(false);
        });
      }
    },
    [conversationId, endCursor, chatMessages]
  );
  (0, import_react102.useEffect)(() => {
    getConversationMessages();
  }, []);
  (0, import_react102.useEffect)(() => {
    if (hasNextPage && atTop && isScrolling && visibleRange.startIndex === 0) {
      getConversationMessages();
    }
  }, [
    getConversationMessages,
    hasNextPage,
    atTop,
    isScrolling,
    visibleRange.startIndex
  ]);
  const conversation = (0, import_react102.useMemo)(() => {
    var _a, _b;
    const messageGroups = [];
    let messages = [];
    chatMessages == null ? void 0 : chatMessages.forEach((message, index) => {
      const nextMessage = chatMessages[index + 1];
      const isSameUserId = (message == null ? void 0 : message.userId) === (nextMessage == null ? void 0 : nextMessage.userId);
      const isSameDate = formatConversationDateTimestamp(message == null ? void 0 : message.createdDate) === formatConversationDateTimestamp(nextMessage == null ? void 0 : nextMessage.createdDate);
      messages.unshift(message);
      if (!isSameUserId || !isSameDate) {
        messageGroups.unshift(messages);
        messages = [];
      }
    });
    const feed = messageGroups.map((messageGroup, index) => {
      const firstMessage = messageGroup[0];
      const isSameDate = () => {
        if (messageGroups.length === 1 && index === 0) {
          return false;
        } else if (index >= 1) {
          const prevMessageGroup = messageGroups[index - 1];
          const prevGroupFirstMessage = prevMessageGroup[0];
          return formatConversationDateTimestamp(firstMessage == null ? void 0 : firstMessage.createdDate) === formatConversationDateTimestamp(prevGroupFirstMessage == null ? void 0 : prevGroupFirstMessage.createdDate);
        }
      };
      return {
        isSameDate: isSameDate(),
        direction: (firstMessage == null ? void 0 : firstMessage.userId) === userId ? "OUTGOING" : "INCOMING",
        id: firstMessage == null ? void 0 : firstMessage.id,
        messages: messageGroup,
        timestamp: firstMessage == null ? void 0 : firstMessage.createdDate,
        type: "MESSAGES_BLOCK"
      };
    });
    return {
      feed,
      createdDate: (_b = (_a = chatMessages == null ? void 0 : chatMessages[chatMessages.length - 1]) == null ? void 0 : _a.createdDate) != null ? _b : (/* @__PURE__ */ new Date()).toISOString(),
      lastMessage: chatMessages == null ? void 0 : chatMessages[0]
    };
  }, [chatMessages, conversationId]);
  const sendConversationMessages = (0, import_react102.useCallback)(
    (message) => {
      if (message === "") {
        return;
      } else {
        client.sendConversationMessages({
          sendConversationMessageInput: {
            conversationId,
            message
          }
        }).then((response) => {
          setChatMessages([response, ...chatMessages]);
        });
      }
    },
    [conversationId, chatMessages]
  );
  return {
    conversation,
    getConversationMessages,
    setIsScrolling,
    setVisibleRange,
    setAtTop,
    hasNextPage,
    isLoading,
    sendConversationMessages
  };
};
var ChatWindowIntroSection = ({
  classNames,
  startDate,
  children,
  inVirtualContainerStyle,
  chatIntroQuestion
}) => {
  return import_react103.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiIntercomChatMessageSection__container",
        inVirtualContainerStyle,
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react103.default.createElement(ChatMessageDate, { classNames: classNames == null ? void 0 : classNames.date, createdDate: startDate }),
    import_react103.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiIntercomChatMessageSectionIntro__content",
          classNames == null ? void 0 : classNames.content
        )
      },
      chatIntroQuestion
    ),
    children
  );
};
var MessageGroup = ({
  classNames,
  messages,
  direction
}) => {
  const isIncoming = direction === "INCOMING";
  return import_react105.default.createElement(
    "div",
    {
      className: clsx_m_default(
        isIncoming ? "NotifiIntercomChatIncomingMessageGroup__container" : "NotifiIntercomChatOutgoingMessageGroup__container",
        classNames == null ? void 0 : classNames.messageGroupContainer
      )
    },
    messages.map((message, index) => {
      var _a;
      return import_react105.default.createElement(
        "div",
        {
          className: clsx_m_default(
            isIncoming ? "NotifiIntercomChatIncomingMessage__container" : "NotifiIntercomChatOutgoingMessage__container",
            classNames == null ? void 0 : classNames.messageContainer
          ),
          key: index
        },
        import_react105.default.createElement(
          "div",
          {
            key: index,
            className: clsx_m_default(
              isIncoming ? "NotifiIntercomChatIncomingMessage__body" : "NotifiIntercomChatOutgoingMessage__body",
              classNames == null ? void 0 : classNames.messageBody
            )
          },
          isIncoming && index === 0 ? import_react105.default.createElement(
            "div",
            {
              className: clsx_m_default(
                "NotifiIntercomChatOutgoingMessage__sender",
                classNames == null ? void 0 : classNames.sender
              )
            },
            (_a = message.conversationParticipant) == null ? void 0 : _a.resolvedName
          ) : null,
          import_react105.default.createElement("div", { key: index }, message.message),
          import_react105.default.createElement(
            "div",
            {
              className: clsx_m_default(
                "NotifiIntercomChatOutgoingMessage__timeStamp",
                classNames == null ? void 0 : classNames.timeStamp
              )
            },
            formatHourTimestamp(message.createdDate)
          )
        )
      );
    })
  );
};
var MessageList = ({
  classNames,
  feed
}) => {
  var _a;
  const isIncoming = feed.direction === "INCOMING";
  const participantProfile = (_a = feed.messages[0].conversationParticipant) == null ? void 0 : _a.profile;
  return import_react104.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiIntercomChatMessageList__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    isIncoming ? import_react104.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiIntercomChatMessageList__groupContainer",
          classNames == null ? void 0 : classNames.container
        )
      },
      import_react104.default.createElement(
        "img",
        {
          src: (participantProfile == null ? void 0 : participantProfile.avatarDataType) === "URL" ? participantProfile.avatarData : "",
          onError: (e) => {
            const img = e.target;
            img.style.display = "none";
          },
          className: clsx_m_default(
            "NotifiIntercomChatMessage__avatar",
            classNames == null ? void 0 : classNames.avatar
          )
        }
      ),
      import_react104.default.createElement(
        MessageGroup,
        {
          classNames: classNames == null ? void 0 : classNames.messageGroup,
          messages: feed.messages,
          direction: feed.direction
        }
      )
    ) : import_react104.default.createElement(import_react104.default.Fragment, null, import_react104.default.createElement(
      MessageGroup,
      {
        classNames: classNames == null ? void 0 : classNames.messageGroup,
        messages: feed.messages,
        direction: feed.direction
      }
    ))
  );
};
var SendMessageSection = ({
  classNames,
  sendConversationMessages
}) => {
  const [sendMessage, setSendMessage] = (0, import_react106.useState)(void 0);
  const disabled = (sendMessage == null ? void 0 : sendMessage.trim().length) === 0 || sendMessage === void 0;
  const handleSend = () => {
    if (sendMessage) {
      sendConversationMessages(sendMessage);
      setSendMessage("");
    }
  };
  const handleKeypressUp = (0, import_react106.useCallback)(
    (event) => {
      if (event.key === "Enter" && !event.shiftKey && !disabled) {
        handleSend();
        event.preventDefault();
      }
    },
    [handleSend]
  );
  return import_react106.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiIntercomSendMessageSection__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    import_react106.default.createElement(
      "textarea",
      {
        onKeyUp: (e) => handleKeypressUp(e),
        className: clsx_m_default(
          "NotifiIntercomSendMessageSection__textarea",
          classNames == null ? void 0 : classNames.textarea
        ),
        value: sendMessage,
        onChange: (e) => {
          var _a;
          setSendMessage((_a = e.target.value) != null ? _a : "");
        },
        placeholder: "Write a message..."
      }
    ),
    import_react106.default.createElement(
      "button",
      {
        disabled,
        onClick: handleSend,
        className: clsx_m_default(
          "NotifiIntercomSendMessageSection__button",
          classNames == null ? void 0 : classNames.button
        )
      },
      "Send"
    )
  );
};
var ChatMessageSection = ({
  classNames,
  chatIntroQuestion
}) => {
  const { conversationId, userId } = useNotifiSubscriptionContext();
  const {
    conversation,
    setIsScrolling,
    setVisibleRange,
    setAtTop,
    isLoading,
    hasNextPage,
    sendConversationMessages
  } = useIntercomChat({
    conversationId,
    userId
  });
  return import_react101.default.createElement(import_react101.default.Fragment, null, conversation.feed.length === 0 ? import_react101.default.createElement(
    ChatWindowIntroSection,
    {
      chatIntroQuestion,
      classNames: classNames == null ? void 0 : classNames.chatWindowIntro,
      startDate: conversation.createdDate
    }
  ) : import_react101.default.createElement(
    cn,
    {
      atTopStateChange: setAtTop,
      className: "virtual-container",
      data: conversation.feed,
      followOutput: "auto",
      isScrolling: setIsScrolling,
      rangeChanged: setVisibleRange,
      itemContent: (index, feed) => {
        const isFirstIndexOnLastPage = index === 0 && !hasNextPage;
        return import_react101.default.createElement("div", { key: index }, isLoading ? import_react101.default.createElement(
          "div",
          {
            style: {
              display: "flex",
              justifyContent: "center",
              padding: "10px"
            }
          },
          "Loading..."
        ) : null, isFirstIndexOnLastPage && import_react101.default.createElement(
          ChatWindowIntroSection,
          {
            classNames: classNames == null ? void 0 : classNames.chatWindowIntro,
            startDate: conversation.createdDate,
            chatIntroQuestion,
            inVirtualContainerStyle: "ChatWindowIntro__virtualContainer"
          }
        ), index != 0 && !feed.isSameDate && import_react101.default.createElement(
          ChatMessageDate,
          {
            classNames: classNames == null ? void 0 : classNames.date,
            createdDate: feed.timestamp,
            isStartDate: false
          }
        ), import_react101.default.createElement(MessageList, { classNames: classNames == null ? void 0 : classNames.messageList, feed }));
      },
      style: {
        flexGrow: 1,
        scrollbarGutter: "stable",
        overflowY: "scroll"
      }
    }
  ), import_react101.default.createElement(
    SendMessageSection,
    {
      classNames: classNames == null ? void 0 : classNames.sendMessageSection,
      sendConversationMessages
    }
  ));
};
var ChatIcon = (props) => {
  return import_react108.default.createElement(
    "svg",
    __spreadValues({
      viewBox: "0 0 25 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props),
    import_react108.default.createElement(
      "path",
      {
        d: "M3.15311 3.40909C3.15311 2.07859 4.2317 1 5.5622 1H17.0455C18.376 1 19.4545 2.07859 19.4545 3.40909V6.81818C19.4545 8.14869 18.376 9.22727 17.0455 9.22727H4.96513C4.60464 9.22727 4.2455 9.27148 3.89577 9.35892L2.08876 9.81067C2.04981 9.82041 2.02716 9.81574 2.01212 9.8104C1.99287 9.80356 1.97002 9.78898 1.95023 9.76483C1.93043 9.74069 1.92062 9.71542 1.91769 9.6952C1.9154 9.67941 1.91526 9.65628 1.93245 9.62L2.72868 7.93906C3.00814 7.34909 3.15311 6.70441 3.15311 6.05159V3.40909Z",
        stroke: "currentColor",
        strokeWidth: "2"
      }
    ),
    import_react108.default.createElement(
      "path",
      {
        d: "M20.9831 16.0454C20.9831 14.7149 19.9045 13.6364 18.574 13.6364H7.09077C5.76027 13.6364 4.68168 14.7149 4.68168 16.0454V19.4545C4.68168 20.785 5.76027 21.8636 7.09078 21.8636H19.1711C19.5316 21.8636 19.8907 21.9078 20.2405 21.9953L22.0475 22.447C22.0864 22.4568 22.1091 22.4521 22.1241 22.4467C22.1434 22.4399 22.1662 22.4253 22.186 22.4012C22.2058 22.377 22.2156 22.3518 22.2185 22.3316C22.2208 22.3158 22.221 22.2926 22.2038 22.2564L21.4075 20.5754C21.1281 19.9854 20.9831 19.3408 20.9831 18.6879V16.0454Z",
        stroke: "currentColor",
        strokeWidth: "2"
      }
    ),
    import_react108.default.createElement("mask", { id: "path-3-inside-1_136_525", fill: "white" }, import_react108.default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M11.6362 17.75C11.6362 18.3776 12.1449 18.8864 12.7725 18.8864C13.4001 18.8864 13.9089 18.3776 13.9089 17.75C13.9089 17.1224 13.4001 16.6136 12.7725 16.6136C12.1449 16.6136 11.6362 17.1224 11.6362 17.75ZM16.1816 17.75C16.1816 18.3776 16.6904 18.8864 17.318 18.8864C17.9456 18.8864 18.4543 18.3776 18.4543 17.75C18.4543 17.1224 17.9456 16.6137 17.318 16.6137C16.6904 16.6137 16.1816 17.1224 16.1816 17.75ZM8.22709 18.8864C7.59949 18.8864 7.09073 18.3776 7.09073 17.75C7.09073 17.1224 7.59949 16.6136 8.22709 16.6136C8.85469 16.6136 9.36345 17.1224 9.36345 17.75C9.36345 18.3776 8.85469 18.8864 8.22709 18.8864Z"
      }
    )),
    import_react108.default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M11.6362 17.75C11.6362 18.3776 12.1449 18.8864 12.7725 18.8864C13.4001 18.8864 13.9089 18.3776 13.9089 17.75C13.9089 17.1224 13.4001 16.6136 12.7725 16.6136C12.1449 16.6136 11.6362 17.1224 11.6362 17.75ZM16.1816 17.75C16.1816 18.3776 16.6904 18.8864 17.318 18.8864C17.9456 18.8864 18.4543 18.3776 18.4543 17.75C18.4543 17.1224 17.9456 16.6137 17.318 16.6137C16.6904 16.6137 16.1816 17.1224 16.1816 17.75ZM8.22709 18.8864C7.59949 18.8864 7.09073 18.3776 7.09073 17.75C7.09073 17.1224 7.59949 16.6136 8.22709 16.6136C8.85469 16.6136 9.36345 17.1224 9.36345 17.75C9.36345 18.3776 8.85469 18.8864 8.22709 18.8864Z",
        fill: "currentColor"
      }
    ),
    import_react108.default.createElement(
      "path",
      {
        d: "M12.7725 20.8864C11.0404 20.8864 9.63618 19.4822 9.63618 17.75H13.6362C13.6362 17.273 13.2495 16.8864 12.7725 16.8864V20.8864ZM15.9089 17.75C15.9089 19.4822 14.5047 20.8864 12.7725 20.8864V16.8864C12.2956 16.8864 11.9089 17.273 11.9089 17.75H15.9089ZM12.7725 14.6136C14.5047 14.6136 15.9089 16.0178 15.9089 17.75H11.9089C11.9089 18.227 12.2956 18.6136 12.7725 18.6136V14.6136ZM9.63618 17.75C9.63618 16.0178 11.0404 14.6136 12.7725 14.6136V18.6136C13.2495 18.6136 13.6362 18.227 13.6362 17.75H9.63618ZM17.318 20.8864C15.5858 20.8864 14.1816 19.4822 14.1816 17.75H18.1816C18.1816 17.273 17.795 16.8864 17.318 16.8864V20.8864ZM20.4543 17.75C20.4543 19.4822 19.0501 20.8864 17.318 20.8864V16.8864C16.841 16.8864 16.4543 17.273 16.4543 17.75H20.4543ZM17.318 14.6137C19.0501 14.6137 20.4543 16.0178 20.4543 17.75H16.4543C16.4543 18.227 16.841 18.6137 17.318 18.6137V14.6137ZM14.1816 17.75C14.1816 16.0178 15.5858 14.6137 17.318 14.6137V18.6137C17.795 18.6137 18.1816 18.227 18.1816 17.75H14.1816ZM9.09073 17.75C9.09073 17.273 8.70406 16.8864 8.22709 16.8864V20.8864C6.49492 20.8864 5.09073 19.4822 5.09073 17.75H9.09073ZM8.22709 18.6136C8.70406 18.6136 9.09073 18.227 9.09073 17.75H5.09073C5.09073 16.0178 6.49492 14.6136 8.22709 14.6136V18.6136ZM7.36345 17.75C7.36345 18.227 7.75012 18.6136 8.22709 18.6136V14.6136C9.95926 14.6136 11.3635 16.0178 11.3635 17.75H7.36345ZM8.22709 16.8864C7.75012 16.8864 7.36345 17.273 7.36345 17.75H11.3635C11.3635 19.4822 9.95926 20.8864 8.22709 20.8864V16.8864Z",
        fill: "currentColor",
        mask: "url(#path-3-inside-1_136_525)"
      }
    )
  );
};
var ChatWindowHeader = ({
  classNames,
  chatWindowHeaderContent
}) => {
  const { setIntercomCardView } = useNotifiSubscriptionContext();
  const handleClick = () => {
    setIntercomCardView({ state: "settingView" });
  };
  return import_react107.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiIntercomHeader__container", classNames == null ? void 0 : classNames.container)
    },
    import_react107.default.createElement("div", { className: "NotifiIntercomHeader__leftContainer" }, import_react107.default.createElement(ChatIcon, { width: 25, height: 24 }), import_react107.default.createElement(
      "div",
      {
        className: clsx_m_default("NotifiIntercomHeader__content", classNames == null ? void 0 : classNames.content)
      },
      chatWindowHeaderContent
    )),
    import_react107.default.createElement(
      "div",
      {
        onClick: handleClick,
        className: "NotifiIntercomChatWindow__settingIcon"
      },
      import_react107.default.createElement(SettingIcon, null)
    )
  );
};
var NotifiIntercomChatWindowContainer = ({
  classNames,
  chatWindowHeaderContent,
  chatIntroQuestion
}) => {
  return import_react110.default.createElement(import_react110.default.Fragment, null, import_react110.default.createElement(
    ChatWindowHeader,
    {
      classNames: classNames == null ? void 0 : classNames.header,
      chatWindowHeaderContent
    }
  ), import_react110.default.createElement(
    ChatMessageSection,
    {
      classNames: classNames == null ? void 0 : classNames.chatMessageSection,
      chatIntroQuestion
    }
  ));
};
var NotifiIntercomFTUNotificationTargetSection = ({ data, inputSeparators, classNames, inputTextFields }) => {
  var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m;
  const allowedCountryCodes = [...data.contactInfo.sms.supportedCountryCodes];
  return import_react111.default.createElement("div", { className: "NotifiSupportNotificationOption__container" }, data.contactInfo.email.active ? import_react111.default.createElement(
    NotifiEmailInput,
    {
      disabled: false,
      classNames: classNames == null ? void 0 : classNames.NotifiEmailInput,
      copy: { label: (_a = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _a.email },
      intercomEmailInputContainerStyle: "NotifiIntercomEmailInput__container",
      intercomEmailInputStyle: "NotifiIntercomEmailInput__input",
      intercomView: true
    }
  ) : null, ((_b = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _b.content) ? import_react111.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiInputSeparator__container",
        "NotifiIntercomInputSeparator__container",
        (_d = (_c = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _c.classNames) == null ? void 0 : _d.container
      )
    },
    import_react111.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiInputSeparator__content",
          (_e2 = inputSeparators.emailSeparator.classNames) == null ? void 0 : _e2.content
        )
      },
      (_f = inputSeparators == null ? void 0 : inputSeparators.emailSeparator) == null ? void 0 : _f.content
    )
  ) : null, data.contactInfo.sms.active ? import_react111.default.createElement(
    NotifiSmsInput,
    {
      disabled: false,
      classNames: classNames == null ? void 0 : classNames.NotifiSmsInput,
      allowedCountryCodes,
      copy: { label: (_g = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _g.sms },
      intercomSmsInputContainerStyle: "NotifiIntercomSmsInput__container",
      intercomSmsInputStyle: "NotifiIntercomSmsInput__input",
      intercomSmsDropdownContainerStyle: "NotifiIntercomSmsInput__dropdownContainer",
      intercomSmsDropdownSelectStyle: "NotifiIntercomSmsInput__dropdownSelect",
      intercomView: true
    }
  ) : null, ((_h = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _h.content) ? import_react111.default.createElement(
    "div",
    {
      className: clsx_m_default(
        "NotifiInputSeparator__container",
        "NotifiIntercomInputSeparator__container",
        (_j = (_i = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _i.classNames) == null ? void 0 : _j.container
      )
    },
    import_react111.default.createElement(
      "div",
      {
        className: clsx_m_default(
          "NotifiInputSeparator__content",
          (_k = inputSeparators.smsSeparator.classNames) == null ? void 0 : _k.content
        )
      },
      (_l = inputSeparators == null ? void 0 : inputSeparators.smsSeparator) == null ? void 0 : _l.content
    )
  ) : null, data.contactInfo.telegram.active ? import_react111.default.createElement(
    NotifiTelegramInput,
    {
      disabled: false,
      classNames: classNames == null ? void 0 : classNames.NotifiTelegramInput,
      copy: { label: (_m = inputTextFields == null ? void 0 : inputTextFields.label) == null ? void 0 : _m.telegram },
      intercomTelegramInputContainerStyle: "NotifiIntercomTelegramInput__container",
      intercomTelegramInputStyle: "NotifiIntercomTelegramInput__input",
      intercomView: true
    }
  ) : null);
};
var NotifiStartChatButton = ({
  classNames,
  disabled,
  onClick
}) => {
  const { intercomCardView } = useNotifiSubscriptionContext();
  return import_react112.default.createElement(
    "button",
    {
      disabled,
      className: clsx_m_default("NotifiStartChatButton__button", classNames == null ? void 0 : classNames.button),
      onClick
    },
    import_react112.default.createElement("span", { className: clsx_m_default("NotifiStartChatButton__label", classNames == null ? void 0 : classNames.label) }, intercomCardView.state === "settingView" ? "Save Changes" : "Start Chatting")
  );
};
var SettingHeader = ({ classNames }) => {
  const { setIntercomCardView } = useNotifiSubscriptionContext();
  const handleClick = () => {
    setIntercomCardView({ state: "chatWindowView" });
  };
  return import_react113.default.createElement(
    "div",
    {
      className: clsx_m_default("NotifiIntercomHeader__container", classNames == null ? void 0 : classNames.container)
    },
    import_react113.default.createElement("div", { className: "NotifiIntercomHeader__leftContainer" }, import_react113.default.createElement(
      "div",
      {
        onClick: handleClick,
        className: "NotifiIntercomSettingHeader__backArrow"
      },
      import_react113.default.createElement(BackArrowIcon, null)
    ), import_react113.default.createElement(
      "div",
      {
        className: clsx_m_default("NotifiIntercomHeader__content", classNames == null ? void 0 : classNames.content)
      },
      "Settings"
    ))
  );
};
var IntercomCard = ({
  classNames,
  inputLabels,
  inputs = {},
  inputSeparators,
  data
}) => {
  const [chatAlertErrorMessage, setChatAlertErrorMessage] = (0, import_react109.useState)("");
  const { instantSubscribe, isAuthenticated, isInitialized } = useNotifiSubscribe({
    targetGroupName: "Intercom"
  });
  const { client, isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  const { isClientInitialized, isClientAuthenticated } = (0, import_react109.useMemo)(() => {
    var _a;
    return {
      isClientInitialized: isUsingFrontendClient ? !!frontendClient.userState : isInitialized,
      isClientAuthenticated: isUsingFrontendClient ? ((_a = frontendClient.userState) == null ? void 0 : _a.status) === "authenticated" : isAuthenticated
    };
  }, [isUsingFrontendClient, client, frontendClient]);
  const subscribeAlert = (0, import_react109.useCallback)(
    async (alertDetail) => {
      if (isUsingFrontendClient) {
        return subscribeAlertByFrontendClient(frontendClient, alertDetail);
      } else {
        return instantSubscribe({
          alertConfiguration: chatConfiguration(),
          alertName
        });
      }
    },
    [isUsingFrontendClient, frontendClient]
  );
  (0, import_react109.useEffect)(() => {
    if (isClientAuthenticated && isClientInitialized && hasChanges === false) {
      checkForExistingTargetGroups();
    }
  }, [instantSubscribe, isClientAuthenticated, isClientInitialized]);
  const {
    alerts,
    intercomCardView,
    loading,
    setConversationId,
    setHasChatAlert,
    setIntercomCardView,
    setUserId
  } = useNotifiSubscriptionContext();
  const {
    formErrorMessages,
    formState,
    setEmail: setFormEmail,
    setTelegram: setFormTelegram,
    hasChanges
  } = useNotifiForm();
  const { email, phoneNumber, telegram: telegramId } = formState;
  const {
    email: emailErrorMessage,
    phoneNumber: smsErrorMessage,
    telegram: telegramErrorMessage
  } = formErrorMessages;
  const createSupportConversation = (0, import_react109.useCallback)(() => {
    if (isUsingFrontendClient) {
      return frontendClient.createSupportConversation(
        inputs
      ).then((result2) => {
        var _a;
        (_a = result2.createSupportConversation.participants) == null ? void 0 : _a.forEach(
          (participant) => {
            if ((participant == null ? void 0 : participant.conversationParticipantType) === "MEMBER") {
              setUserId(participant.profile.id);
            }
          }
        );
        setConversationId(result2.createSupportConversation.id);
        setIntercomCardView({
          state: "chatWindowView"
        });
      });
    }
    return client.createSupportConversation().then((result2) => {
      result2.participants.forEach((participant) => {
        if (participant.conversationParticipantType === "MEMBER") {
          setUserId(participant.profile.id);
        }
      });
      setConversationId(result2.id);
      setIntercomCardView({
        state: "chatWindowView"
      });
    });
  }, [inputs]);
  const checkForExistingTargetGroups = (0, import_react109.useCallback)(() => {
    var _a, _b, _c, _d, _e2, _f;
    for (const alert of Object.values(alerts)) {
      if (!alert)
        continue;
      const { targetGroup } = alert;
      const confirmedEmailTarget = (_a = targetGroup.emailTargets) == null ? void 0 : _a.find(
        (email2) => (email2 == null ? void 0 : email2.isConfirmed) === true
      );
      if (confirmedEmailTarget == null ? void 0 : confirmedEmailTarget.emailAddress) {
        setFormEmail(confirmedEmailTarget.emailAddress);
      }
      const confirmedTelegramTarget = (_b = targetGroup.telegramTargets) == null ? void 0 : _b.find(
        (telegram) => (telegram == null ? void 0 : telegram.isConfirmed) === true
      );
      if (confirmedTelegramTarget == null ? void 0 : confirmedTelegramTarget.telegramId) {
        setFormTelegram(confirmedTelegramTarget == null ? void 0 : confirmedTelegramTarget.telegramId);
      }
      if (confirmedEmailTarget || confirmedTelegramTarget) {
        break;
      }
      const unconfirmedEmailTarget = (_c = targetGroup.emailTargets) == null ? void 0 : _c.find(
        (email2) => (email2 == null ? void 0 : email2.isConfirmed) === false
      );
      setFormEmail((_d = unconfirmedEmailTarget == null ? void 0 : unconfirmedEmailTarget.emailAddress) != null ? _d : "");
      const unconfirmedTelegramTarget = (_e2 = targetGroup.telegramTargets) == null ? void 0 : _e2.find(
        (telegram) => (telegram == null ? void 0 : telegram.isConfirmed) === false
      );
      setFormTelegram((_f = unconfirmedTelegramTarget == null ? void 0 : unconfirmedTelegramTarget.telegramId) != null ? _f : "");
      if (unconfirmedEmailTarget || unconfirmedTelegramTarget) {
        break;
      }
    }
  }, [alerts]);
  const alertName = "NOTIFI_CHAT_MESSAGES";
  (0, import_react109.useEffect)(() => {
    if (loading || !isClientInitialized || intercomCardView.state === "settingView") {
      return;
    }
    const hasAlert = alerts[alertName] !== void 0;
    setHasChatAlert(hasAlert);
    if (hasAlert) {
      createSupportConversation();
    } else {
      setIntercomCardView({
        state: "startChatView"
      });
    }
  }, [alerts, loading, isClientInitialized]);
  const hasErrors = emailErrorMessage !== "" || smsErrorMessage !== "" || telegramErrorMessage !== "";
  const disabled = email === "" && telegramId === "" && phoneNumber === "" || hasErrors;
  const labels = data.labels;
  const labelsValues = {};
  labels.forEach((label) => {
    labelsValues[label.type] = label.name;
  });
  const companySupportTitle = labelsValues.ChatFTUTitle || "Your Company Support";
  const companySupportSubtitle = labelsValues.ChatFTUSubTitle || "Start chatting with our team to get support. We’re here for you 24/7!";
  const companySupportDescription = labelsValues.ChatFTUDescription || "Get notifications for your support request";
  const companyHeaderContent = labelsValues.ChatBannerTitle || "Company Support";
  const chatIntroQuestion = labelsValues.ChatIntroQuestion || "What can we help you with today?";
  const handleStartChatClick = async () => {
    if (loading) {
      return;
    }
    try {
      await subscribeAlert({
        eventType: {
          type: "createSupportConversation",
          name: alertName,
          sourceType: "NOTIFI_CHAT",
          filterType: "NOTIFI_CHAT_MESSAGES",
          alertFrequency: "THREE_MINUTES"
        },
        inputs
      });
      const result2 = await client.createSupportConversation();
      setConversationId(result2.id);
      result2.participants.forEach((participant) => {
        if (participant.conversationParticipantType === "MEMBER") {
          setUserId(participant.profile.id);
        }
      });
      setIntercomCardView({ state: "chatWindowView" });
    } catch (e) {
      setChatAlertErrorMessage("An error occurred, please try again.");
      setTimeout(() => {
        setChatAlertErrorMessage("");
      }, 5e3);
    }
  };
  let view = null;
  switch (intercomCardView.state) {
    case "startChatView":
      view = import_react109.default.createElement(import_react109.default.Fragment, null, import_react109.default.createElement("h1", { className: clsx_m_default("NotifiIntercomCard__title", classNames == null ? void 0 : classNames.title) }, companySupportTitle), import_react109.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "NotifiIntercomCard__subtitle1",
            classNames == null ? void 0 : classNames.subtitle1
          )
        },
        companySupportSubtitle
      ), import_react109.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "NotifiIntercomCard__subtitle2",
            classNames == null ? void 0 : classNames.subtitle2
          )
        },
        companySupportDescription
      ), import_react109.default.createElement(
        NotifiIntercomFTUNotificationTargetSection,
        {
          data,
          inputSeparators,
          inputTextFields: inputLabels,
          inputs
        }
      ), import_react109.default.createElement(
        "label",
        {
          className: clsx_m_default(
            "NotifiEmailInput__errorMessage",
            classNames == null ? void 0 : classNames.errorMessage
          )
        },
        chatAlertErrorMessage
      ), import_react109.default.createElement(
        NotifiStartChatButton,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiStartChatButton,
          disabled,
          onClick: handleStartChatClick
        }
      ));
      break;
    case "chatWindowView":
      view = import_react109.default.createElement(
        NotifiIntercomChatWindowContainer,
        {
          chatIntroQuestion,
          chatWindowHeaderContent: companyHeaderContent,
          classNames: classNames == null ? void 0 : classNames.NotifiIntercomChatWindowContainer
        }
      );
      break;
    case "settingView":
      view = import_react109.default.createElement(import_react109.default.Fragment, null, import_react109.default.createElement(SettingHeader, { classNames: classNames == null ? void 0 : classNames.NotifiIntercomSettingHeader }), import_react109.default.createElement("div", { className: "NotifiIntercomCardSettingContent__container" }, import_react109.default.createElement(
        "div",
        {
          className: clsx_m_default(
            "NotifiIntercomCard__subtitle2",
            classNames == null ? void 0 : classNames.subtitle2
          )
        },
        companySupportDescription
      ), import_react109.default.createElement(
        NotifiIntercomFTUNotificationTargetSection,
        {
          data,
          inputSeparators,
          inputTextFields: inputLabels,
          inputs
        }
      ), import_react109.default.createElement(
        "label",
        {
          className: clsx_m_default(
            "NotifiEmailInput__errorMessage",
            classNames == null ? void 0 : classNames.errorMessage
          )
        },
        chatAlertErrorMessage
      ), import_react109.default.createElement(
        NotifiStartChatButton,
        {
          classNames: classNames == null ? void 0 : classNames.NotifiStartChatButton,
          disabled,
          onClick: handleStartChatClick
        }
      )));
      break;
    case "loadingView":
      view = import_react109.default.createElement(
        "div",
        {
          style: {
            display: "flex",
            justifyContent: "center"
          }
        },
        "Loading…"
      );
      break;
  }
  return import_react109.default.createElement(import_react109.default.Fragment, null, view);
};
var useIntercomCard = (cardId) => {
  const [state, setState] = (0, import_react116.useState)({
    state: "loading"
  });
  const { client, isUsingFrontendClient, frontendClient } = useNotifiClientContext();
  (0, import_react116.useEffect)(() => {
    setState({ state: "loading" });
    let card;
    (isUsingFrontendClient ? frontendClient : client).fetchSubscriptionCard({
      type: "INTERCOM_CARD",
      id: cardId
    }).then((result2) => {
      if ("dataJson" in result2) {
        if (!result2.dataJson) {
          return Promise.reject(new Error("Failed to fetch data"));
        }
        card = JSON.parse(result2.dataJson);
      } else if ("version" in result2) {
        card = result2;
      }
      if ((card == null ? void 0 : card.version) !== "IntercomV1") {
        return Promise.reject(new Error("Unsupported config format"));
      }
      setState({
        state: "fetched",
        data: card
      });
    }).catch((error) => {
      setState({
        state: "error",
        reason: error
      });
    });
  }, [cardId]);
  return state;
};
var NotifiIntercomCardContainer = ({
  classNames,
  darkMode,
  inputLabels,
  inputs = {},
  inputSeparators,
  children,
  cardId
}) => {
  let contents = null;
  const card = useIntercomCard(cardId);
  switch (card.state) {
    case "loading":
      contents = import_react115.default.createElement(LoadingStateCard, { classNames: classNames == null ? void 0 : classNames.LoadingStateCard });
      break;
    case "error":
      contents = import_react115.default.createElement(
        ErrorStateCard,
        {
          classNames: classNames == null ? void 0 : classNames.ErrorStateCard,
          reason: card.reason
        }
      );
      break;
    case "fetched":
      contents = import_react115.default.createElement(
        IntercomCard,
        {
          data: card.data,
          inputs,
          inputLabels,
          inputSeparators,
          classNames
        }
      );
      break;
  }
  return import_react115.default.createElement(
    "div",
    {
      className: clsx_m_default(
        darkMode ? "notifi__dark" : "notifi__light",
        "NotifiIntercomCard__container",
        classNames == null ? void 0 : classNames.container
      )
    },
    children,
    contents
  );
};
var NotifiIntercomCard = (props) => {
  const { params } = useNotifiClientContext();
  return import_react114.default.createElement(NotifiSubscriptionContextProvider, __spreadValues({}, params), import_react114.default.createElement(NotifiFormProvider, null, import_react114.default.createElement(NotifiIntercomCardContainer, __spreadValues({}, props))));
};
export {
  AlertHistoryView,
  AlertListPreview,
  AlertsPanel,
  ChatMessageDate,
  ChatMessageSection,
  ChatWindowHeader,
  ChatWindowIntroSection,
  EditCardView,
  EventTypeBroadcastRow,
  EventTypeCustomHealthCheckRow,
  EventTypeCustomToggleRow,
  EventTypeDirectPushRow,
  EventTypeFusionMultiThresholdRow,
  EventTypeHealthCheckRow,
  EventTypeLabelRow,
  EventTypePriceChangeRow,
  EventTypeTradingPairsRow,
  EventTypeUnsupportedRow,
  EventTypeWalletBalanceRow,
  FetchedStateCard,
  FtuStage,
  FusionMultiThresholdAlertRow,
  FusionMultiThresholdSettingsRow,
  InputFields,
  IntercomCard,
  MessageGroup,
  MessageList,
  NotifiClientContextProvider,
  NotifiContext,
  NotifiDemoPreviewContextProvider,
  NotifiEmailInput,
  NotifiFooter,
  NotifiFormProvider,
  NotifiIntercomCard,
  NotifiIntercomCardContainer,
  NotifiIntercomChatWindowContainer,
  NotifiIntercomFTUNotificationTargetSection,
  NotifiLogo,
  NotifiSmsInput,
  NotifiStartChatButton,
  NotifiSubscribeButton,
  NotifiSubscriptionCard,
  NotifiSubscriptionContextProvider,
  NotifiTelegramInput,
  NotifiToggle,
  NotifiTooltip,
  PreviewCard,
  SendMessageSection,
  SettingHeader,
  SubscriptionCardUnsupported,
  SubscriptionCardV1,
  TradingPairAlertRow,
  TradingPairSettingsRow,
  UserInfoPanel,
  XMTPToggleConfiguration,
  broadcastMessageConfiguration,
  chatConfiguration,
  createConfigurations,
  customThresholdConfiguration,
  customToggleConfiguration,
  defaultDemoConfigV1,
  directMessageConfiguration,
  fusionHealthCheckConfiguration,
  fusionToggleConfiguration,
  getAlertDetailsContents,
  getAlertNotificationViewBaseProps,
  healthThresholdConfiguration,
  hedgeProtocolConfiguration,
  objectKeys,
  priceChangeConfiguration,
  resolveStringArrayRef,
  resolveStringRef,
  subscribeAlertByFrontendClient,
  subscribeAlertsByFrontendClient,
  tradingPairConfiguration,
  unsubscribeAlertByFrontendClient,
  useFetchedCardState,
  useFrontendClientLogin,
  useNotifiClientContext,
  useNotifiDemoPreviewContext,
  useNotifiForm,
  useNotifiSubscribe,
  useNotifiSubscriptionContext,
  useSubscriptionCard,
  useUnreadState,
  validateIsSupported,
  walletBalanceConfiguration
};
//# sourceMappingURL=@notifi-network_notifi-react-card.js.map
