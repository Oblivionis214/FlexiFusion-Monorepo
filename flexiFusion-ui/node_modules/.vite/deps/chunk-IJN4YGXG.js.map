{
  "version": 3,
  "sources": ["../../toformat/toFormat.js", "../../jsbi/lib/jsbi.ts", "../../decimal.js-light/decimal.mjs", "../../big.js/big.mjs"],
  "sourcesContent": ["/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n", null, "/*\r\n *  decimal.js-light v2.5.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js-light\r\n *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Expat Licence\r\n */\r\n\r\n\r\n// ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //\r\n\r\n\r\n// The limit on the value of `precision`, and on the value of the first argument to\r\n// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\nvar MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  defaults = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n    // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to MAX_E\r\n\r\n    // The natural logarithm of 10.\r\n    // 115 digits\r\n    LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n  },\r\n\r\n\r\n// ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //\r\n\r\n\r\n  Decimal,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  ONE,\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n  MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n  // Decimal.prototype object\r\n  P = {};\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue                       abs\r\n *  comparedTo                          cmp\r\n *  decimalPlaces                       dp\r\n *  dividedBy                           div\r\n *  dividedToIntegerBy                  idiv\r\n *  equals                              eq\r\n *  exponent\r\n *  greaterThan                         gt\r\n *  greaterThanOrEqualTo                gte\r\n *  isInteger                           isint\r\n *  isNegative                          isneg\r\n *  isPositive                          ispos\r\n *  isZero\r\n *  lessThan                            lt\r\n *  lessThanOrEqualTo                   lte\r\n *  logarithm                           log\r\n *  minus                               sub\r\n *  modulo                              mod\r\n *  naturalExponential                  exp\r\n *  naturalLogarithm                    ln\r\n *  negated                             neg\r\n *  plus                                add\r\n *  precision                           sd\r\n *  squareRoot                          sqrt\r\n *  times                               mul\r\n *  toDecimalPlaces                     todp\r\n *  toExponential\r\n *  toFixed\r\n *  toInteger                           toint\r\n *  toNumber\r\n *  toPower                             pow\r\n *  toPrecision\r\n *  toSignificantDigits                 tosd\r\n *  toString\r\n *  valueOf                             val\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s) x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this;\r\n\r\n  y = new x.constructor(y);\r\n\r\n  // Signs differ?\r\n  if (x.s !== y.s) return x.s || -y.s;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n  xdL = x.d.length;\r\n  ydL = y.d.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var x = this,\r\n    w = x.d.length - 1,\r\n    dp = (w - x.e) * LOG_BASE;\r\n\r\n  // Subtract the number of trailing zeros of the last word.\r\n  w = x.d[w];\r\n  if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n  return dp < 0 ? 0 : dp;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, truncated to `precision` significant digits.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.idiv = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n *\r\n */\r\nP.exponent = function () {\r\n  return getBase10Exponent(this);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  return this.cmp(y) >= 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isint = function () {\r\n  return this.e > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isneg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.ispos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return this.s === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n * `precision` significant digits.\r\n *\r\n * If no base is specified, return log[10](x).\r\n *\r\n * log[base](x) = ln(x) / ln(base)\r\n *\r\n * The maximum error of the result is 1 ulp (unit in the last place).\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var r,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    wpr = pr + 5;\r\n\r\n  // Default base is 10.\r\n  if (base === void 0) {\r\n    base = new Ctor(10);\r\n  } else {\r\n    base = new Ctor(base);\r\n\r\n    // log[-b](x) = NaN\r\n    // log[0](x)  = NaN\r\n    // log[1](x)  = NaN\r\n    if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  // log[b](-x) = NaN\r\n  // log[b](0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // log[b](1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  external = false;\r\n  r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // x % 0 = NaN\r\n  if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n  // Return x if x is 0.\r\n  if (!x.s) return round(new Ctor(x), pr);\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n  q = divide(x, y, 0, 1).times(y);\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return exp(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * truncated to `precision` significant digits.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return ln(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s || 0;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var e, sd, w,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  e = getBase10Exponent(x) + 1;\r\n  w = x.d.length - 1;\r\n  sd = w * LOG_BASE + 1;\r\n  w = x.d[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n  }\r\n\r\n  return z && e > sd ? e : sd;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var e, n, pr, r, s, t, wpr,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative or zero?\r\n  if (x.s < 1) {\r\n    if (!x.s) return new Ctor(0);\r\n\r\n    // sqrt(-x) = NaN\r\n    throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  e = getBase10Exponent(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  pr = Ctor.precision;\r\n  s = wpr = pr + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n      n = n.slice(wpr - 3, wpr + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (s == wpr && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        round(t, pr + 1, 0);\r\n\r\n        if (t.times(t).eq(x)) {\r\n          r = t;\r\n          break;\r\n        }\r\n      } else if (n != '9999') {\r\n        break;\r\n      }\r\n\r\n      wpr += 4;\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  // Return 0 if either is 0.\r\n  if (!x.s || !y.s) return new Ctor(0);\r\n\r\n  y.s *= x.s;\r\n  e = x.e + y.e;\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = e;\r\n\r\n  return external ? round(y, Ctor.precision) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.todp = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = toString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), dp + 1, rm);\r\n    str = toString(x, true, dp + 1);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) return toString(x);\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n  str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isneg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.toInteger = P.toint = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n * truncated to `precision` significant digits.\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * The maximum error is 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, sign, yIsInt,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    guard = 12,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // pow(x, 0) = 1\r\n  if (!y.s) return new Ctor(ONE);\r\n\r\n  x = new Ctor(x);\r\n\r\n  // pow(0, y > 0) = 0\r\n  // pow(0, y < 0) = Infinity\r\n  if (!x.s) {\r\n    if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n    return x;\r\n  }\r\n\r\n  // pow(1, y) = 1\r\n  if (x.eq(ONE)) return x;\r\n\r\n  pr = Ctor.precision;\r\n\r\n  // pow(x, 1) = x\r\n  if (y.eq(ONE)) return round(x, pr);\r\n\r\n  e = y.e;\r\n  k = y.d.length - 1;\r\n  yIsInt = e >= k;\r\n  sign = x.s;\r\n\r\n  if (!yIsInt) {\r\n\r\n    // pow(x < 0, y non-integer) = NaN\r\n    if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = new Ctor(ONE);\r\n\r\n    // Max k of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (k % 2) {\r\n        r = r.times(x);\r\n        truncate(r.d, e);\r\n      }\r\n\r\n      k = mathfloor(k / 2);\r\n      if (k === 0) break;\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, e);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n  }\r\n\r\n  // Result is negative if x is negative and the last digit of integer y is odd.\r\n  sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n  x.s = 1;\r\n  external = false;\r\n  r = y.times(ln(x, pr + guard));\r\n  external = true;\r\n  r = exp(r);\r\n  r.s = sign;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var e, str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), sd, rm);\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toSignificantDigits = P.tosd = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return round(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {\r\n  var x = this,\r\n    e = getBase10Exponent(x),\r\n    Ctor = x.constructor;\r\n\r\n  return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  add                 P.minus, P.plus\r\n *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n *  exp                 P.exp, P.pow\r\n *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n *                      P.toString, divide, round, toString, exp, ln\r\n *  getLn10             P.log, ln\r\n *  getZeroString       digitsToString, toString\r\n *  ln                  P.log, P.ln, P.pow, exp\r\n *  parseDecimal        Decimal\r\n *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n *                      divide, getLn10, exp, ln\r\n *  subtract            P.minus, P.plus\r\n *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n *  truncate            P.pow\r\n *\r\n *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n */\r\n\r\n\r\nfunction add(x, y) {\r\n  var carry, d, e, i, k, len, xd, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // If either is zero...\r\n  if (!x.s || !y.s) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!y.s) y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  k = x.e;\r\n  e = y.e;\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % BASE | 0;\r\n      carry = temp / BASE | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * BASE + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, dp) {\r\n    var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either 0?\r\n    if (!x.s) return new Ctor(x);\r\n    if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n    e = x.e - y.e;\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n    if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n    } else if (dp) {\r\n      sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) return new Ctor(0);\r\n\r\n    // Convert precision in number of base 10 digits to base 1e7 digits.\r\n    sd = sd / LOG_BASE + 2 | 0;\r\n    i = 0;\r\n\r\n    // divisor < 1e7\r\n    if (yL == 1) {\r\n      k = 0;\r\n      yd = yd[0];\r\n      sd++;\r\n\r\n      // k is the carry.\r\n      for (; (i < xL || k) && sd--; i++) {\r\n        t = k * BASE + (xd[i] || 0);\r\n        qd[i] = t / yd | 0;\r\n        k = t % yd | 0;\r\n      }\r\n\r\n    // divisor >= 1e7\r\n    } else {\r\n\r\n      // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n      k = BASE / (yd[0] + 1) | 0;\r\n\r\n      if (k > 1) {\r\n        yd = multiplyInteger(yd, k);\r\n        xd = multiplyInteger(xd, k);\r\n        yL = yd.length;\r\n        xL = xd.length;\r\n      }\r\n\r\n      xi = yL;\r\n      rem = xd.slice(0, yL);\r\n      remL = rem.length;\r\n\r\n      // Add zeros to make remainder as long as divisor.\r\n      for (; remL < yL;) rem[remL++] = 0;\r\n\r\n      yz = yd.slice();\r\n      yz.unshift(0);\r\n      yd0 = yd[0];\r\n\r\n      if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n      do {\r\n        k = 0;\r\n\r\n        // Compare divisor and remainder.\r\n        cmp = compare(yd, rem, yL, remL);\r\n\r\n        // If divisor < remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Calculate trial digit, k.\r\n          rem0 = rem[0];\r\n          if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n          // k will be how many times the divisor goes into the current remainder.\r\n          k = rem0 / yd0 | 0;\r\n\r\n          //  Algorithm:\r\n          //  1. product = divisor * trial digit (k)\r\n          //  2. if product > remainder: product -= divisor, k--\r\n          //  3. remainder -= product\r\n          //  4. if product was < remainder at 2:\r\n          //    5. compare new remainder and divisor\r\n          //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n          if (k > 1) {\r\n            if (k >= BASE) k = BASE - 1;\r\n\r\n            // product = divisor * trial digit.\r\n            prod = multiplyInteger(yd, k);\r\n            prodL = prod.length;\r\n            remL = rem.length;\r\n\r\n            // Compare product and remainder.\r\n            cmp = compare(prod, rem, prodL, remL);\r\n\r\n            // product > remainder.\r\n            if (cmp == 1) {\r\n              k--;\r\n\r\n              // Subtract divisor from product.\r\n              subtract(prod, yL < prodL ? yz : yd, prodL);\r\n            }\r\n          } else {\r\n\r\n            // cmp is -1.\r\n            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n            if (k == 0) cmp = k = 1;\r\n            prod = yd.slice();\r\n          }\r\n\r\n          prodL = prod.length;\r\n          if (prodL < remL) prod.unshift(0);\r\n\r\n          // Subtract product from remainder.\r\n          subtract(rem, prod, remL);\r\n\r\n          // If product was < previous remainder.\r\n          if (cmp == -1) {\r\n            remL = rem.length;\r\n\r\n            // Compare divisor and new remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < new remainder, subtract divisor from remainder.\r\n            if (cmp < 1) {\r\n              k++;\r\n\r\n              // Subtract divisor from remainder.\r\n              subtract(rem, yL < remL ? yz : yd, remL);\r\n            }\r\n          }\r\n\r\n          remL = rem.length;\r\n        } else if (cmp === 0) {\r\n          k++;\r\n          rem = [0];\r\n        }    // if cmp === 1, k will be 0\r\n\r\n        // Add the next digit, k, to the result array.\r\n        qd[i++] = k;\r\n\r\n        // Update the remainder.\r\n        if (cmp && rem[0]) {\r\n          rem[remL++] = xd[xi] || 0;\r\n        } else {\r\n          rem = [xd[xi]];\r\n          remL = 1;\r\n        }\r\n\r\n      } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n    }\r\n\r\n    // Leading zero?\r\n    if (!qd[0]) qd.shift();\r\n\r\n    q.e = e;\r\n\r\n    return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n * significant digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n */\r\nfunction exp(x, sd) {\r\n  var denominator, guard, pow, sum, t, wpr,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n  // exp(0) = 1\r\n  if (!x.s) return new Ctor(ONE);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  while (x.abs().gte(0.1)) {\r\n    x = x.times(t);    // x = x / 2^5\r\n    k += 5;\r\n  }\r\n\r\n  // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(ONE);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = round(pow.times(x), wpr);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      while (k--) sum = round(sum.times(sum), wpr);\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(x) {\r\n  var e = x.e * LOG_BASE,\r\n    w = x.d[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for (; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n\r\n  if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(decimalError + 'LN10 precision limit exceeded');\r\n  }\r\n\r\n  return round(new Ctor(Ctor.LN10), sd);\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n * digits.\r\n *\r\n *  ln(n) is non-terminating (n != 1)\r\n *\r\n */\r\nfunction ln(y, sd) {\r\n  var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // ln(-x) = NaN\r\n  // ln(0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // ln(1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  if (x.eq(10)) {\r\n    if (sd == null) external = true;\r\n    return getLn10(Ctor, wpr);\r\n  }\r\n\r\n  wpr += guard;\r\n  Ctor.precision = wpr;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n  e = getBase10Exponent(x);\r\n\r\n  if (Math.abs(e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n    Ctor.precision = pr;\r\n    return sd == null ? (external = true, round(x, pr)) : x;\r\n  }\r\n\r\n  // x is reduced to a value near 1.\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n  x2 = round(x.times(x), wpr);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = round(numerator.times(x2), wpr);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    e = e - i - 1;\r\n    x.e = mathfloor(e / LOG_BASE);\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n  } else {\r\n\r\n    // Zero.\r\n    x.s = 0;\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n */\r\n function round(x, sd, rm) {\r\n  var i, j, k, n, rd, doRound, w, xdi,\r\n    xd = x.d;\r\n\r\n  // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n  // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n  // xdi: the index of w within xd.\r\n  // n: the number of digits of w.\r\n  // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n  // they had leading zeros)\r\n  // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n  // Get the length of the first word of the digits array xd.\r\n  for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n  i = sd - n;\r\n\r\n  // Is the rounding digit in the first word of xd?\r\n  if (i < 0) {\r\n    i += LOG_BASE;\r\n    j = sd;\r\n    w = xd[xdi = 0];\r\n  } else {\r\n    xdi = Math.ceil((i + 1) / LOG_BASE);\r\n    k = xd.length;\r\n    if (xdi >= k) return x;\r\n    w = k = xd[xdi];\r\n\r\n    // Get the number of digits of w.\r\n    for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n    // Get the index of rd within w.\r\n    i %= LOG_BASE;\r\n\r\n    // Get the index of rd within w, adjusted for leading zeros.\r\n    // The number of leading zeros of w is given by LOG_BASE - n.\r\n    j = i - LOG_BASE + n;\r\n  }\r\n\r\n  if (rm !== void 0) {\r\n    k = mathpow(10, n - j - 1);\r\n\r\n    // Get the rounding digit at index j of w.\r\n    rd = w / k % 10 | 0;\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n    // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n    // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n    // 714.\r\n\r\n    doRound = rm < 4\r\n      ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n  }\r\n\r\n  if (sd < 1 || !xd[0]) {\r\n    if (doRound) {\r\n      k = getBase10Exponent(x);\r\n      xd.length = 1;\r\n\r\n      // Convert sd to decimal places.\r\n      sd = sd - k - 1;\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n      x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n    } else {\r\n      xd.length = 1;\r\n\r\n      // Zero.\r\n      xd[0] = x.e = x.s = 0;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n  // Remove excess digits.\r\n  if (i == 0) {\r\n    xd.length = xdi;\r\n    k = 1;\r\n    xdi--;\r\n  } else {\r\n    xd.length = xdi + 1;\r\n    k = mathpow(10, LOG_BASE - i);\r\n\r\n    // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n    // j > 0 means i > number of leading zeros of w.\r\n    xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n  }\r\n\r\n  if (doRound) {\r\n    for (;;) {\r\n\r\n      // Is the digit to be rounded up in the first word of xd?\r\n      if (xdi == 0) {\r\n        if ((xd[0] += k) == BASE) {\r\n          xd[0] = 1;\r\n          ++x.e;\r\n        }\r\n\r\n        break;\r\n      } else {\r\n        xd[xdi] += k;\r\n        if (xd[xdi] != BASE) break;\r\n        xd[xdi--] = 0;\r\n        k = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n  if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n    throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction subtract(x, y) {\r\n  var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // Return y negated if x is zero.\r\n  // Return x if y is zero and x is non-zero.\r\n  if (!x.s || !y.s) {\r\n    if (y.s) y.s = -y.s;\r\n    else y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are non-zero numbers with the same sign.\r\n\r\n  e = y.e;\r\n  xe = x.e;\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of zeros\r\n    // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n    // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to xd if shorter.\r\n  // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(0);\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction toString(x, isExp, sd) {\r\n  var k,\r\n    e = getBase10Exponent(x),\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (e < 0 ? 'e' : 'e+') + e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  clone\r\n *  config/set\r\n */\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * value {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(value) {\r\n    var x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (value instanceof Decimal) {\r\n      x.s = value.s;\r\n      x.e = value.e;\r\n      x.d = (value = value.d) ? value.slice() : value;\r\n      return;\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n\r\n      // Reject Infinity/NaN.\r\n      if (value * 0 !== 0) {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      if (value > 0) {\r\n        x.s = 1;\r\n      } else if (value < 0) {\r\n        value = -value;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 0;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (value === ~~value && value < 1e7) {\r\n        x.e = 0;\r\n        x.d = [value];\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, value.toString());\r\n    } else if (typeof value !== 'string') {\r\n      throw Error(invalidArgument + value);\r\n    }\r\n\r\n    // Minus sign?\r\n    if (value.charCodeAt(0) === 45) {\r\n      value = value.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      x.s = 1;\r\n    }\r\n\r\n    if (isDecimal.test(value)) parseDecimal(x, value);\r\n    else throw Error(invalidArgument + value);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n  Decimal.clone = clone;\r\n  Decimal.config = Decimal.set = config;\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n    for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw Error(decimalError + 'Object expected');\r\n  }\r\n  var i, p, v,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -1 / 0, 0,\r\n      'toExpPos', 0, 1 / 0\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if ((v = obj[p = ps[i]]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if ((v = obj[p = 'LN10']) !== void 0) {\r\n      if (v == Math.LN10) this[p] = new this(v);\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = clone(defaults);\r\n\r\n// Internal constant.\r\nONE = new Decimal(1);\r\n\r\nexport default Decimal;\r\n", "/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n  // The default values below must be integers within the stated ranges.\r\n\r\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\r\nvar DP = 20,          // 0 to MAX_DP\r\n\r\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\r\n  RM = 1,             // 0, 1, 2 or 3\r\n\r\n  // The maximum value of DP and Big.DP.\r\n  MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n  // The maximum magnitude of the exponent argument to the pow method.\r\n  MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\r\n  NE = -7,            // 0 to -1000000\r\n\r\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big.\r\n   * (This limit is not enforced or checked.)\r\n   */\r\n  PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n  // Error messages.\r\n  NAME = '[big.js] ',\r\n  INVALID = NAME + 'Invalid ',\r\n  INVALID_DP = INVALID + 'decimal places',\r\n  INVALID_RM = INVALID + 'rounding mode',\r\n  DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n  // The shared prototype object.\r\n  P = {},\r\n  UNDEFINED = void 0,\r\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n/*\r\n * Create and return a Big constructor.\r\n *\r\n */\r\nfunction _Big_() {\r\n\r\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\r\n  function Big(n) {\r\n    var x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n    // Duplicate.\r\n    if (n instanceof Big) {\r\n      x.s = n.s;\r\n      x.e = n.e;\r\n      x.c = n.c.slice();\r\n    } else {\r\n      parse(x, n);\r\n    }\r\n\r\n    /*\r\n     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n     * points to Object.\r\n     */\r\n    x.constructor = Big;\r\n  }\r\n\r\n  Big.prototype = P;\r\n  Big.DP = DP;\r\n  Big.RM = RM;\r\n  Big.NE = NE;\r\n  Big.PE = PE;\r\n  Big.version = '5.2.2';\r\n\r\n  return Big;\r\n}\r\n\r\n\r\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\r\nfunction parse(x, n) {\r\n  var e, i, nl;\r\n\r\n  // Minus zero?\r\n  if (n === 0 && 1 / n < 0) n = '-0';\r\n  else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n  // Determine sign.\r\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n  // Decimal point?\r\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = n.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +n.slice(i + 1);\r\n    n = n.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = n.length;\r\n  }\r\n\r\n  nl = n.length;\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n  if (i == nl) {\r\n\r\n    // Zero.\r\n    x.c = [x.e = 0];\r\n  } else {\r\n\r\n    // Determine trailing zeros.\r\n    for (; nl > 0 && n.charAt(--nl) == '0';);\r\n    x.e = e - i - 1;\r\n    x.c = [];\r\n\r\n    // Convert string to array of digits without leading/trailing zeros.\r\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n * Called by stringify, P.div, P.round and P.sqrt.\r\n *\r\n * x {Big} The Big to round.\r\n * dp {number} Integer, 0 to MAX_DP inclusive.\r\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\r\nfunction round(x, dp, rm, more) {\r\n  var xc = x.c,\r\n    i = x.e + dp + 1;\r\n\r\n  if (i < xc.length) {\r\n    if (rm === 1) {\r\n\r\n      // xc[i] is the digit after the digit that may be rounded up.\r\n      more = xc[i] >= 5;\r\n    } else if (rm === 2) {\r\n      more = xc[i] > 5 || xc[i] == 5 &&\r\n        (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n    } else if (rm === 3) {\r\n      more = more || !!xc[0];\r\n    } else {\r\n      more = false;\r\n      if (rm !== 0) throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (i < 1) {\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = -dp;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else {\r\n\r\n      // Remove any digits after the required decimal places.\r\n      xc.length = i--;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[i] > 9;) {\r\n          xc[i] = 0;\r\n          if (!i--) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xc.length; !xc[--i];) xc.pop();\r\n    }\r\n  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n    throw Error(INVALID_RM);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n *\r\n * x {Big}\r\n * id? {number} Caller id.\r\n *         1 toExponential\r\n *         2 toFixed\r\n *         3 toPrecision\r\n *         4 valueOf\r\n * n? {number|undefined} Caller's argument.\r\n * k? {number|undefined}\r\n */\r\nfunction stringify(x, id, n, k) {\r\n  var e, s,\r\n    Big = x.constructor,\r\n    z = !x.c[0];\r\n\r\n  if (n !== UNDEFINED) {\r\n    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n      throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n    }\r\n\r\n    x = new Big(x);\r\n\r\n    // The index of the digit that may be rounded up.\r\n    n = k - x.e;\r\n\r\n    // Round?\r\n    if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n    // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n    if (id == 2) k = x.e + n + 1;\r\n\r\n    // Append zeros?\r\n    for (; x.c.length < k;) x.c.push(0);\r\n  }\r\n\r\n  e = x.e;\r\n  s = x.c.join('');\r\n  n = s.length;\r\n\r\n  // Exponential notation?\r\n  if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n  // Normal notation.\r\n  } else if (e < 0) {\r\n    for (; ++e;) s = '0' + s;\r\n    s = '0.' + s;\r\n  } else if (e > 0) {\r\n    if (++e > n) for (e -= n; e--;) s += '0';\r\n    else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n  } else if (n > 1) {\r\n    s = s.charAt(0) + '.' + s.slice(1);\r\n  }\r\n\r\n  return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n}\r\n\r\n\r\n// Prototype/instance methods\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\r\nP.abs = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n*/\r\nP.cmp = function (y) {\r\n  var isneg,\r\n    x = this,\r\n    xc = x.c,\r\n    yc = (y = new x.constructor(y)).c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  isneg = i < 0;\r\n\r\n  // Compare exponents.\r\n  if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = -1; ++i < j;) {\r\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.div = function (y) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    a = x.c,                  // dividend\r\n    b = (y = new Big(y)).c,   // divisor\r\n    k = x.s == y.s ? 1 : -1,\r\n    dp = Big.DP;\r\n\r\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n  // Divisor is zero?\r\n  if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  // Dividend is 0? Return +-0.\r\n  if (!a[0]) return new Big(k * 0);\r\n\r\n  var bl, bt, n, cmp, ri,\r\n    bz = b.slice(),\r\n    ai = bl = b.length,\r\n    al = a.length,\r\n    r = a.slice(0, bl),   // remainder\r\n    rl = r.length,\r\n    q = y,                // quotient\r\n    qc = q.c = [],\r\n    qi = 0,\r\n    d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n  q.s = k;\r\n  k = d < 0 ? 0 : d;\r\n\r\n  // Create version of divisor with leading zero.\r\n  bz.unshift(0);\r\n\r\n  // Add zeros to make remainder as long as divisor.\r\n  for (; rl++ < bl;) r.push(0);\r\n\r\n  do {\r\n\r\n    // n is how many times the divisor goes into current remainder.\r\n    for (n = 0; n < 10; n++) {\r\n\r\n      // Compare divisor and remainder.\r\n      if (bl != (rl = r.length)) {\r\n        cmp = bl > rl ? 1 : -1;\r\n      } else {\r\n        for (ri = -1, cmp = 0; ++ri < bl;) {\r\n          if (b[ri] != r[ri]) {\r\n            cmp = b[ri] > r[ri] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If divisor < remainder, subtract divisor from remainder.\r\n      if (cmp < 0) {\r\n\r\n        // Remainder can't be more than 1 digit longer than divisor.\r\n        // Equalise lengths using divisor with extra leading zero?\r\n        for (bt = rl == bl ? b : bz; rl;) {\r\n          if (r[--rl] < bt[rl]) {\r\n            ri = rl;\r\n            for (; ri && !r[--ri];) r[ri] = 9;\r\n            --r[ri];\r\n            r[rl] += 10;\r\n          }\r\n          r[rl] -= bt[rl];\r\n        }\r\n\r\n        for (; !r[0];) r.shift();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Add the digit n to the result array.\r\n    qc[qi++] = cmp ? n : ++n;\r\n\r\n    // Update the remainder.\r\n    if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n    else r = [a[ai]];\r\n\r\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n  if (!qc[0] && qi != 1) {\r\n\r\n    // There can't be more than one zero.\r\n    qc.shift();\r\n    q.e--;\r\n  }\r\n\r\n  // Round?\r\n  if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n  return q;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\r\nP.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\r\nP.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.gte = function (y) {\r\n  return this.cmp(y) > -1;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\r\nP.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var i, j, t, xlty,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.plus(y);\r\n  }\r\n\r\n  var xc = x.c.slice(),\r\n    xe = x.e,\r\n    yc = y.c,\r\n    ye = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n\r\n    // y is non-zero? x is non-zero? Or both are zero.\r\n    return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n  }\r\n\r\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n  if (a = xe - ye) {\r\n\r\n    if (xlty = a < 0) {\r\n      a = -a;\r\n      t = xc;\r\n    } else {\r\n      ye = xe;\r\n      t = yc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (b = a; b--;) t.push(0);\r\n    t.reverse();\r\n  } else {\r\n\r\n    // Exponents equal. Check digit by digit.\r\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n    for (a = b = 0; b < j; b++) {\r\n      if (xc[b] != yc[b]) {\r\n        xlty = xc[b] < yc[b];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // x < y? Point xc to the array of the bigger number.\r\n  if (xlty) {\r\n    t = xc;\r\n    xc = yc;\r\n    yc = t;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\r\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n  // Subtract yc from xc.\r\n  for (b = i; j > a;) {\r\n    if (xc[--j] < yc[j]) {\r\n      for (i = j; i && !xc[--i];) xc[i] = 9;\r\n      --xc[i];\r\n      xc[j] += 10;\r\n    }\r\n\r\n    xc[j] -= yc[j];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xc[--b] === 0;) xc.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xc[0] === 0;) {\r\n    xc.shift();\r\n    --ye;\r\n  }\r\n\r\n  if (!xc[0]) {\r\n\r\n    // n - n = +0\r\n    y.s = 1;\r\n\r\n    // Result must be zero.\r\n    xc = [ye = 0];\r\n  }\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\r\nP.mod = function (y) {\r\n  var ygtx,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  x.s = y.s = 1;\r\n  ygtx = y.cmp(x) == 1;\r\n  x.s = a;\r\n  y.s = b;\r\n\r\n  if (ygtx) return new Big(x);\r\n\r\n  a = Big.DP;\r\n  b = Big.RM;\r\n  Big.DP = Big.RM = 0;\r\n  x = x.div(y);\r\n  Big.DP = a;\r\n  Big.RM = b;\r\n\r\n  return this.minus(x.times(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\r\nP.plus = P.add = function (y) {\r\n  var t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.minus(y);\r\n  }\r\n\r\n  var xe = x.e,\r\n    xc = x.c,\r\n    ye = y.e,\r\n    yc = y.c;\r\n\r\n  // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n  if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n  xc = xc.slice();\r\n\r\n  // Prepend zeros to equalise exponents.\r\n  // Note: reverse faster than unshifts.\r\n  if (a = xe - ye) {\r\n    if (a > 0) {\r\n      ye = xe;\r\n      t = yc;\r\n    } else {\r\n      a = -a;\r\n      t = xc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (; a--;) t.push(0);\r\n    t.reverse();\r\n  }\r\n\r\n  // Point xc to the longer array.\r\n  if (xc.length - yc.length < 0) {\r\n    t = yc;\r\n    yc = xc;\r\n    xc = t;\r\n  }\r\n\r\n  a = yc.length;\r\n\r\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n  for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n  if (b) {\r\n    xc.unshift(b);\r\n    ++ye;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP.pow = function (n) {\r\n  var x = this,\r\n    one = new x.constructor(1),\r\n    y = one,\r\n    isneg = n < 0;\r\n\r\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n  if (isneg) n = -n;\r\n\r\n  for (;;) {\r\n    if (n & 1) y = y.times(x);\r\n    n >>= 1;\r\n    if (!n) break;\r\n    x = x.times(x);\r\n  }\r\n\r\n  return isneg ? one.div(y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n * multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n * If rm is not specified, use Big.RM.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n */\r\nP.round = function (dp, rm) {\r\n  var Big = this.constructor;\r\n  if (dp === UNDEFINED) dp = 0;\r\n  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n  return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.sqrt = function () {\r\n  var r, c, t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    s = x.s,\r\n    e = x.e,\r\n    half = new Big(0.5);\r\n\r\n  // Zero?\r\n  if (!x.c[0]) return new Big(x);\r\n\r\n  // Negative?\r\n  if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n  // Estimate.\r\n  s = Math.sqrt(x + '');\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n  if (s === 0 || s === 1 / 0) {\r\n    c = x.c.join('');\r\n    if (!(c.length + e & 1)) c += '0';\r\n    s = Math.sqrt(c);\r\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n  } else {\r\n    r = new Big(s);\r\n  }\r\n\r\n  e = r.e + (Big.DP += 4);\r\n\r\n  // Newton-Raphson iteration.\r\n  do {\r\n    t = r;\r\n    r = half.times(t.plus(x.div(t)));\r\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n  return round(r, Big.DP -= 4, Big.RM);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\r\nP.times = P.mul = function (y) {\r\n  var c,\r\n    x = this,\r\n    Big = x.constructor,\r\n    xc = x.c,\r\n    yc = (y = new Big(y)).c,\r\n    a = xc.length,\r\n    b = yc.length,\r\n    i = x.e,\r\n    j = y.e;\r\n\r\n  // Determine sign of result.\r\n  y.s = x.s == y.s ? 1 : -1;\r\n\r\n  // Return signed 0 if either 0.\r\n  if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n  // Initialise exponent of result as x.e + y.e.\r\n  y.e = i + j;\r\n\r\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n  if (a < b) {\r\n    c = xc;\r\n    xc = yc;\r\n    yc = c;\r\n    j = a;\r\n    a = b;\r\n    b = j;\r\n  }\r\n\r\n  // Initialise coefficient array of result with zeros.\r\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n  // Multiply.\r\n\r\n  // i is initially xc.length.\r\n  for (i = b; i--;) {\r\n    b = 0;\r\n\r\n    // a is yc.length.\r\n    for (j = a + i; j > i;) {\r\n\r\n      // Current sum of products at this digit position, plus carry.\r\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n      c[j--] = b % 10;\r\n\r\n      // carry\r\n      b = b / 10 | 0;\r\n    }\r\n\r\n    c[j] = (c[j] + b) % 10;\r\n  }\r\n\r\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n  if (b) ++y.e;\r\n  else c.shift();\r\n\r\n  // Remove trailing zeros.\r\n  for (i = c.length; !c[--i];) c.pop();\r\n  y.c = c;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n */\r\nP.toExponential = function (dp) {\r\n  return stringify(this, 1, dp, dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\r\nP.toFixed = function (dp) {\r\n  return stringify(this, 2, dp, this.e + dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Integer, 1 to MAX_DP inclusive.\r\n */\r\nP.toPrecision = function (sd) {\r\n  return stringify(this, 3, sd, sd - 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\r\nP.toString = function () {\r\n  return stringify(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  return stringify(this, 4);\r\n};\r\n\r\n\r\n// Export\r\n\r\n\r\nexport var Big = _Big_();\r\n\r\nexport default Big;\r\n"],
  "mappings": "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",
  "names": ["toFormat", "JSBI", "Array", "constructor", "length", "sign", "__kMaxLength", "RangeError", "BigInt", "arg", "Math", "floor", "Number", "isFinite", "__zero", "__isOneDigitInt", "__oneDigit", "__fromDouble", "result", "__fromString", "SyntaxError", "primitive", "__toPrimitive", "TypeError", "toDebugString", "digit", "push", "toString", "join", "radix", "__toStringBasePowerOfTwo", "__toStringGeneric", "toNumber", "x", "xLength", "value", "__unsignedDigit", "xMsd", "__digit", "msdLeadingZeros", "__clz30", "xBitLength", "exponent", "currentDigit", "digitIndex", "shift", "mantissaHigh", "mantissaHighBitsUnset", "mantissaLow", "mantissaLowBitsUnset", "rounding", "__decideRounding", "signBit", "__kBitConversionInts", "__kBitConversionDouble", "unaryMinus", "__copy", "bitwiseNot", "__absoluteSubOne", "__trim", "__absoluteAddOne", "exponentiate", "y", "expValue", "__kMaxLengthBits", "neededDigits", "__initializeDigits", "msd", "__setDigit", "runningSquare", "multiply", "resultLength", "__clzmsd", "i", "__multiplyAccumulate", "divide", "__absoluteCompare", "resultSign", "divisor", "quotient", "__absoluteDivSmall", "__absoluteDivLarge", "remainder", "remainderDigit", "__absoluteModSmall", "add", "__absoluteAdd", "__absoluteSub", "subtract", "leftShift", "__rightShiftByAbsolute", "__leftShiftByAbsolute", "signedRightShift", "unsignedRightShift", "lessThan", "__compareToBigInt", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual", "equal", "notEqual", "bitwiseAnd", "max", "__absoluteAnd", "y1", "__absoluteOr", "__absoluteAndNot", "bitwiseXor", "__absoluteXor", "bitwiseOr", "asIntN", "n", "neededLength", "topDigit", "compareDigit", "__truncateToNBits", "__truncateAndSubFromPowerOfTwo", "asUintN", "bitsInTopDigit", "ADD", "__toNumeric", "__isBigInt", "LT", "__compare", "LE", "GT", "GE", "EQ", "__equalToNumber", "NE", "newLength", "last", "pop", "mantissaBitsUnset", "topUnconsumedBit", "mask", "rawExponent", "digits", "kMantissaHighTopBit", "msdTopBit", "remainingMantissaBits", "__isWhitespace", "c", "string", "cursor", "current", "charCodeAt", "chars", "bitsPerChar", "__kMaxBitsPerChar", "roundup", "__kBitsPerCharTableMultiplier", "bitsMin", "__kBitsPerCharTableShift", "limDigit", "limAlpha", "parts", "partsBits", "done", "part", "bits", "d", "__fillFromParts", "charsSoFar", "multiplier", "m", "digitsSoFar", "__inplaceMultiplyAdd", "bitsInDigit", "partBits", "Error", "charMask", "charsRequired", "pos", "availableBits", "newDigit", "__kConversionChars", "consumedBits", "isRecursiveCall", "bitLength", "maxBitsPerChar", "minBitsPerChar", "secondHalfChars", "conqueror", "secondHalf", "input", "__halfDigit", "__setHalfDigit", "divisionResult", "firstHalf", "__unequalSign", "leftNegative", "__absoluteGreater", "bothNegative", "__absoluteLess", "xSign", "__compareToNumber", "ySign", "yAbs", "abs", "xDigit", "__compareToDouble", "yBitLength", "compareMantissa", "__comparisonResultToBool", "op", "carry", "r", "borrow", "inputLength", "__setDigitGrow", "yLength", "numPairs", "tmp", "tmpLength", "diff", "multiplicand", "accumulator", "accumulatorIndex", "m2Low", "m2High", "high", "acc", "m1", "m1Low", "m1High", "rLow", "__imul", "rMid1", "rMid2", "rHigh", "__internalMultiplyAdd", "source", "factor", "summand", "rx", "ry", "mLow", "mHigh", "dLow", "dHigh", "pLow", "pMid1", "pMid2", "pHigh", "upperHalf", "lowerHalf", "dividend", "wantQuotient", "wantRemainder", "__halfDigitLength", "n2", "q", "qhatv", "__clz15", "__specialLeftShift", "u", "vn1", "halfDigitBuffer", "qhat", "j", "ujn", "rhat", "vn2", "ujn2", "__inplaceSub", "__inplaceAdd", "__inplaceRightShift", "startIndex", "halfDigits", "sum", "subtrahend", "r0", "sub", "r15", "addDigit", "__toShiftAmount", "digitShift", "bitsShift", "grow", "__rightShiftByMaximum", "mustRoundDown", "obj", "hint", "Symbol", "toPrimitive", "exoticToPrim", "valueOf", "call", "drop", "min", "limit", "msdBitsConsumed", "resultMsd", "minuendMsd", "len", "previous", "updated", "__digitPow", "base", "ArrayBuffer", "Float64Array", "__kBitConversionBuffer", "Int32Array", "clz32", "log", "LN2", "imul", "a", "b", "subtract", "Decimal", "P", "Big", "round"]
}
