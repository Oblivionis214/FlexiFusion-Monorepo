import {
  big_default,
  decimal_default,
  jsbi_default,
  require_toFormat
} from "./chunk-IJN4YGXG.js";
import {
  invariant
} from "./chunk-YL5RHWIY.js";
import {
  getAddress,
  init_lib6 as init_lib
} from "./chunk-L3SKMLJR.js";
import "./chunk-M2ZFBI33.js";
import {
  __toESM,
  import_process,
  init_shim
} from "./chunk-KEE3FHXB.js";

// node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
init_shim();
var import_toformat = __toESM(require_toFormat());
init_lib();
var SupportedChainId;
(function(SupportedChainId2) {
  SupportedChainId2[SupportedChainId2["MAINNET"] = 1] = "MAINNET";
  SupportedChainId2[SupportedChainId2["GOERLI"] = 5] = "GOERLI";
  SupportedChainId2[SupportedChainId2["SEPOLIA"] = 11155111] = "SEPOLIA";
  SupportedChainId2[SupportedChainId2["ARBITRUM_ONE"] = 42161] = "ARBITRUM_ONE";
  SupportedChainId2[SupportedChainId2["ARBITRUM_GOERLI"] = 421613] = "ARBITRUM_GOERLI";
  SupportedChainId2[SupportedChainId2["OPTIMISM"] = 10] = "OPTIMISM";
  SupportedChainId2[SupportedChainId2["OPTIMISM_GOERLI"] = 420] = "OPTIMISM_GOERLI";
  SupportedChainId2[SupportedChainId2["POLYGON"] = 137] = "POLYGON";
  SupportedChainId2[SupportedChainId2["POLYGON_MUMBAI"] = 80001] = "POLYGON_MUMBAI";
  SupportedChainId2[SupportedChainId2["CELO"] = 42220] = "CELO";
  SupportedChainId2[SupportedChainId2["CELO_ALFAJORES"] = 44787] = "CELO_ALFAJORES";
  SupportedChainId2[SupportedChainId2["BNB"] = 56] = "BNB";
})(SupportedChainId || (SupportedChainId = {}));
var TradeType;
(function(TradeType2) {
  TradeType2[TradeType2["EXACT_INPUT"] = 0] = "EXACT_INPUT";
  TradeType2[TradeType2["EXACT_OUTPUT"] = 1] = "EXACT_OUTPUT";
})(TradeType || (TradeType = {}));
var Rounding;
(function(Rounding2) {
  Rounding2[Rounding2["ROUND_DOWN"] = 0] = "ROUND_DOWN";
  Rounding2[Rounding2["ROUND_HALF_UP"] = 1] = "ROUND_HALF_UP";
  Rounding2[Rounding2["ROUND_UP"] = 2] = "ROUND_UP";
})(Rounding || (Rounding = {}));
var MaxUint256 = jsbi_default.BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var _toSignificantRoundin;
var _toFixedRounding;
var Decimal = (0, import_toformat.default)(decimal_default);
var Big = (0, import_toformat.default)(big_default);
var toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);
var toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);
var Fraction = function() {
  function Fraction2(numerator, denominator) {
    if (denominator === void 0) {
      denominator = jsbi_default.BigInt(1);
    }
    this.numerator = jsbi_default.BigInt(numerator);
    this.denominator = jsbi_default.BigInt(denominator);
  }
  Fraction2.tryParseFraction = function tryParseFraction(fractionish) {
    if (fractionish instanceof jsbi_default || typeof fractionish === "number" || typeof fractionish === "string")
      return new Fraction2(fractionish);
    if ("numerator" in fractionish && "denominator" in fractionish)
      return fractionish;
    throw new Error("Could not parse fraction");
  };
  var _proto = Fraction2.prototype;
  _proto.invert = function invert() {
    return new Fraction2(this.denominator, this.numerator);
  };
  _proto.add = function add(other) {
    var otherParsed = Fraction2.tryParseFraction(other);
    if (jsbi_default.equal(this.denominator, otherParsed.denominator)) {
      return new Fraction2(jsbi_default.add(this.numerator, otherParsed.numerator), this.denominator);
    }
    return new Fraction2(jsbi_default.add(jsbi_default.multiply(this.numerator, otherParsed.denominator), jsbi_default.multiply(otherParsed.numerator, this.denominator)), jsbi_default.multiply(this.denominator, otherParsed.denominator));
  };
  _proto.subtract = function subtract(other) {
    var otherParsed = Fraction2.tryParseFraction(other);
    if (jsbi_default.equal(this.denominator, otherParsed.denominator)) {
      return new Fraction2(jsbi_default.subtract(this.numerator, otherParsed.numerator), this.denominator);
    }
    return new Fraction2(jsbi_default.subtract(jsbi_default.multiply(this.numerator, otherParsed.denominator), jsbi_default.multiply(otherParsed.numerator, this.denominator)), jsbi_default.multiply(this.denominator, otherParsed.denominator));
  };
  _proto.lessThan = function lessThan(other) {
    var otherParsed = Fraction2.tryParseFraction(other);
    return jsbi_default.lessThan(jsbi_default.multiply(this.numerator, otherParsed.denominator), jsbi_default.multiply(otherParsed.numerator, this.denominator));
  };
  _proto.equalTo = function equalTo(other) {
    var otherParsed = Fraction2.tryParseFraction(other);
    return jsbi_default.equal(jsbi_default.multiply(this.numerator, otherParsed.denominator), jsbi_default.multiply(otherParsed.numerator, this.denominator));
  };
  _proto.greaterThan = function greaterThan(other) {
    var otherParsed = Fraction2.tryParseFraction(other);
    return jsbi_default.greaterThan(jsbi_default.multiply(this.numerator, otherParsed.denominator), jsbi_default.multiply(otherParsed.numerator, this.denominator));
  };
  _proto.multiply = function multiply(other) {
    var otherParsed = Fraction2.tryParseFraction(other);
    return new Fraction2(jsbi_default.multiply(this.numerator, otherParsed.numerator), jsbi_default.multiply(this.denominator, otherParsed.denominator));
  };
  _proto.divide = function divide(other) {
    var otherParsed = Fraction2.tryParseFraction(other);
    return new Fraction2(jsbi_default.multiply(this.numerator, otherParsed.denominator), jsbi_default.multiply(this.denominator, otherParsed.numerator));
  };
  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
    if (format === void 0) {
      format = {
        groupSeparator: ""
      };
    }
    if (rounding === void 0) {
      rounding = Rounding.ROUND_HALF_UP;
    }
    !Number.isInteger(significantDigits) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, significantDigits + " is not an integer.") : invariant(false) : void 0;
    !(significantDigits > 0) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, significantDigits + " is not positive.") : invariant(false) : void 0;
    Decimal.set({
      precision: significantDigits + 1,
      rounding: toSignificantRounding[rounding]
    });
    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);
    return quotient.toFormat(quotient.decimalPlaces(), format);
  };
  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
    if (format === void 0) {
      format = {
        groupSeparator: ""
      };
    }
    if (rounding === void 0) {
      rounding = Rounding.ROUND_HALF_UP;
    }
    !Number.isInteger(decimalPlaces) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, decimalPlaces + " is not an integer.") : invariant(false) : void 0;
    !(decimalPlaces >= 0) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, decimalPlaces + " is negative.") : invariant(false) : void 0;
    Big.DP = decimalPlaces;
    Big.RM = toFixedRounding[rounding];
    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);
  };
  _createClass(Fraction2, [{
    key: "quotient",
    get: function get() {
      return jsbi_default.divide(this.numerator, this.denominator);
    }
    // remainder after floor division
  }, {
    key: "remainder",
    get: function get() {
      return new Fraction2(jsbi_default.remainder(this.numerator, this.denominator), this.denominator);
    }
  }, {
    key: "asFraction",
    get: function get() {
      return new Fraction2(this.numerator, this.denominator);
    }
  }]);
  return Fraction2;
}();
var Big$1 = (0, import_toformat.default)(big_default);
var CurrencyAmount = function(_Fraction) {
  _inheritsLoose(CurrencyAmount2, _Fraction);
  function CurrencyAmount2(currency, numerator, denominator) {
    var _this;
    _this = _Fraction.call(this, numerator, denominator) || this;
    !jsbi_default.lessThanOrEqual(_this.quotient, MaxUint256) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "AMOUNT") : invariant(false) : void 0;
    _this.currency = currency;
    _this.decimalScale = jsbi_default.exponentiate(jsbi_default.BigInt(10), jsbi_default.BigInt(currency.decimals));
    return _this;
  }
  CurrencyAmount2.fromRawAmount = function fromRawAmount(currency, rawAmount) {
    return new CurrencyAmount2(currency, rawAmount);
  };
  CurrencyAmount2.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {
    return new CurrencyAmount2(currency, numerator, denominator);
  };
  var _proto = CurrencyAmount2.prototype;
  _proto.add = function add(other) {
    !this.currency.equals(other.currency) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "CURRENCY") : invariant(false) : void 0;
    var added = _Fraction.prototype.add.call(this, other);
    return CurrencyAmount2.fromFractionalAmount(this.currency, added.numerator, added.denominator);
  };
  _proto.subtract = function subtract(other) {
    !this.currency.equals(other.currency) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "CURRENCY") : invariant(false) : void 0;
    var subtracted = _Fraction.prototype.subtract.call(this, other);
    return CurrencyAmount2.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);
  };
  _proto.multiply = function multiply(other) {
    var multiplied = _Fraction.prototype.multiply.call(this, other);
    return CurrencyAmount2.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);
  };
  _proto.divide = function divide(other) {
    var divided = _Fraction.prototype.divide.call(this, other);
    return CurrencyAmount2.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);
  };
  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
    if (significantDigits === void 0) {
      significantDigits = 6;
    }
    if (rounding === void 0) {
      rounding = Rounding.ROUND_DOWN;
    }
    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);
  };
  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
    if (decimalPlaces === void 0) {
      decimalPlaces = this.currency.decimals;
    }
    if (rounding === void 0) {
      rounding = Rounding.ROUND_DOWN;
    }
    !(decimalPlaces <= this.currency.decimals) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "DECIMALS") : invariant(false) : void 0;
    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);
  };
  _proto.toExact = function toExact(format) {
    if (format === void 0) {
      format = {
        groupSeparator: ""
      };
    }
    Big$1.DP = this.currency.decimals;
    return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);
  };
  _createClass(CurrencyAmount2, [{
    key: "wrapped",
    get: function get() {
      if (this.currency.isToken)
        return this;
      return CurrencyAmount2.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);
    }
  }]);
  return CurrencyAmount2;
}(Fraction);
var ONE_HUNDRED = new Fraction(jsbi_default.BigInt(100));
function toPercent(fraction) {
  return new Percent(fraction.numerator, fraction.denominator);
}
var Percent = function(_Fraction) {
  _inheritsLoose(Percent2, _Fraction);
  function Percent2() {
    var _this;
    _this = _Fraction.apply(this, arguments) || this;
    _this.isPercent = true;
    return _this;
  }
  var _proto = Percent2.prototype;
  _proto.add = function add(other) {
    return toPercent(_Fraction.prototype.add.call(this, other));
  };
  _proto.subtract = function subtract(other) {
    return toPercent(_Fraction.prototype.subtract.call(this, other));
  };
  _proto.multiply = function multiply(other) {
    return toPercent(_Fraction.prototype.multiply.call(this, other));
  };
  _proto.divide = function divide(other) {
    return toPercent(_Fraction.prototype.divide.call(this, other));
  };
  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
    if (significantDigits === void 0) {
      significantDigits = 5;
    }
    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);
  };
  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
    if (decimalPlaces === void 0) {
      decimalPlaces = 2;
    }
    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);
  };
  return Percent2;
}(Fraction);
var Price = function(_Fraction) {
  _inheritsLoose(Price2, _Fraction);
  function Price2() {
    var _this;
    var baseCurrency, quoteCurrency, denominator, numerator;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length === 4) {
      baseCurrency = args[0];
      quoteCurrency = args[1];
      denominator = args[2];
      numerator = args[3];
    } else {
      var result = args[0].quoteAmount.divide(args[0].baseAmount);
      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];
      baseCurrency = _ref[0];
      quoteCurrency = _ref[1];
      denominator = _ref[2];
      numerator = _ref[3];
    }
    _this = _Fraction.call(this, numerator, denominator) || this;
    _this.baseCurrency = baseCurrency;
    _this.quoteCurrency = quoteCurrency;
    _this.scalar = new Fraction(jsbi_default.exponentiate(jsbi_default.BigInt(10), jsbi_default.BigInt(baseCurrency.decimals)), jsbi_default.exponentiate(jsbi_default.BigInt(10), jsbi_default.BigInt(quoteCurrency.decimals)));
    return _this;
  }
  var _proto = Price2.prototype;
  _proto.invert = function invert() {
    return new Price2(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);
  };
  _proto.multiply = function multiply(other) {
    !this.quoteCurrency.equals(other.baseCurrency) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "TOKEN") : invariant(false) : void 0;
    var fraction = _Fraction.prototype.multiply.call(this, other);
    return new Price2(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);
  };
  _proto.quote = function quote(currencyAmount) {
    !currencyAmount.currency.equals(this.baseCurrency) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "TOKEN") : invariant(false) : void 0;
    var result = _Fraction.prototype.multiply.call(this, currencyAmount);
    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);
  };
  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
    if (significantDigits === void 0) {
      significantDigits = 6;
    }
    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);
  };
  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
    if (decimalPlaces === void 0) {
      decimalPlaces = 4;
    }
    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);
  };
  _createClass(Price2, [{
    key: "adjustedForDecimals",
    get: function get() {
      return _Fraction.prototype.multiply.call(this, this.scalar);
    }
  }]);
  return Price2;
}(Fraction);
var BaseCurrency = (
  /**
   * Constructs an instance of the base class `BaseCurrency`.
   * @param chainId the chain ID on which this currency resides
   * @param decimals decimals of the currency
   * @param symbol symbol of the currency
   * @param name of the currency
   */
  function BaseCurrency2(chainId, decimals, symbol, name) {
    !Number.isSafeInteger(chainId) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "CHAIN_ID") : invariant(false) : void 0;
    !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "DECIMALS") : invariant(false) : void 0;
    this.chainId = chainId;
    this.decimals = decimals;
    this.symbol = symbol;
    this.name = name;
  }
);
var NativeCurrency = function(_BaseCurrency) {
  _inheritsLoose(NativeCurrency2, _BaseCurrency);
  function NativeCurrency2() {
    var _this;
    _this = _BaseCurrency.apply(this, arguments) || this;
    _this.isNative = true;
    _this.isToken = false;
    return _this;
  }
  return NativeCurrency2;
}(BaseCurrency);
function validateAndParseAddress(address) {
  try {
    return getAddress(address);
  } catch (error) {
    throw new Error(address + " is not a valid address.");
  }
}
var startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;
function checkValidAddress(address) {
  if (startsWith0xLen42HexRegex.test(address)) {
    return address;
  }
  throw new Error(address + " is not a valid address.");
}
var Token = function(_BaseCurrency) {
  _inheritsLoose(Token2, _BaseCurrency);
  function Token2(chainId, address, decimals, symbol, name, bypassChecksum) {
    var _this;
    _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;
    _this.isNative = false;
    _this.isToken = true;
    if (bypassChecksum) {
      _this.address = checkValidAddress(address);
    } else {
      _this.address = validateAndParseAddress(address);
    }
    return _this;
  }
  var _proto = Token2.prototype;
  _proto.equals = function equals(other) {
    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase();
  };
  _proto.sortsBefore = function sortsBefore(other) {
    !(this.chainId === other.chainId) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "CHAIN_IDS") : invariant(false) : void 0;
    !(this.address.toLowerCase() !== other.address.toLowerCase()) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "ADDRESSES") : invariant(false) : void 0;
    return this.address.toLowerCase() < other.address.toLowerCase();
  };
  _createClass(Token2, [{
    key: "wrapped",
    get: function get() {
      return this;
    }
  }]);
  return Token2;
}(BaseCurrency);
var _WETH;
var WETH9 = (_WETH = {}, _WETH[1] = new Token(1, "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2", 18, "WETH", "Wrapped Ether"), _WETH[3] = new Token(3, "0xc778417E063141139Fce010982780140Aa0cD5Ab", 18, "WETH", "Wrapped Ether"), _WETH[4] = new Token(4, "0xc778417E063141139Fce010982780140Aa0cD5Ab", 18, "WETH", "Wrapped Ether"), _WETH[5] = new Token(5, "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6", 18, "WETH", "Wrapped Ether"), _WETH[42] = new Token(42, "0xd0A1E359811322d97991E03f863a0C30C2cF029C", 18, "WETH", "Wrapped Ether"), _WETH[10] = new Token(10, "0x4200000000000000000000000000000000000006", 18, "WETH", "Wrapped Ether"), _WETH[69] = new Token(69, "0x4200000000000000000000000000000000000006", 18, "WETH", "Wrapped Ether"), _WETH[42161] = new Token(42161, "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1", 18, "WETH", "Wrapped Ether"), _WETH[421611] = new Token(421611, "0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681", 18, "WETH", "Wrapped Ether"), _WETH);
var Ether = function(_NativeCurrency) {
  _inheritsLoose(Ether2, _NativeCurrency);
  function Ether2(chainId) {
    return _NativeCurrency.call(this, chainId, 18, "ETH", "Ether") || this;
  }
  Ether2.onChain = function onChain(chainId) {
    var _this$_etherCache$cha;
    return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether2(chainId);
  };
  var _proto = Ether2.prototype;
  _proto.equals = function equals(other) {
    return other.isNative && other.chainId === this.chainId;
  };
  _createClass(Ether2, [{
    key: "wrapped",
    get: function get() {
      var weth9 = WETH9[this.chainId];
      !!!weth9 ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "WRAPPED") : invariant(false) : void 0;
      return weth9;
    }
  }]);
  return Ether2;
}(NativeCurrency);
Ether._etherCache = {};
function computePriceImpact(midPrice, inputAmount, outputAmount) {
  var quotedOutputAmount = midPrice.quote(inputAmount);
  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);
  return new Percent(priceImpact.numerator, priceImpact.denominator);
}
function sortedInsert(items, add, maxSize, comparator) {
  !(maxSize > 0) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "MAX_SIZE_ZERO") : invariant(false) : void 0;
  !(items.length <= maxSize) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "ITEMS_SIZE") : invariant(false) : void 0;
  if (items.length === 0) {
    items.push(add);
    return null;
  } else {
    var isFull = items.length === maxSize;
    if (isFull && comparator(items[items.length - 1], add) <= 0) {
      return add;
    }
    var lo = 0, hi = items.length;
    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (comparator(items[mid], add) <= 0) {
        lo = mid + 1;
      } else {
        hi = mid;
      }
    }
    items.splice(lo, 0, add);
    return isFull ? items.pop() : null;
  }
}
var MAX_SAFE_INTEGER = jsbi_default.BigInt(Number.MAX_SAFE_INTEGER);
var ZERO = jsbi_default.BigInt(0);
var ONE = jsbi_default.BigInt(1);
var TWO = jsbi_default.BigInt(2);
function sqrt(value) {
  !jsbi_default.greaterThanOrEqual(value, ZERO) ? import_process.default.env.NODE_ENV !== "production" ? invariant(false, "NEGATIVE") : invariant(false) : void 0;
  if (jsbi_default.lessThan(value, MAX_SAFE_INTEGER)) {
    return jsbi_default.BigInt(Math.floor(Math.sqrt(jsbi_default.toNumber(value))));
  }
  var z;
  var x;
  z = value;
  x = jsbi_default.add(jsbi_default.divide(value, TWO), ONE);
  while (jsbi_default.lessThan(x, z)) {
    z = x;
    x = jsbi_default.divide(jsbi_default.add(jsbi_default.divide(value, x), x), TWO);
  }
  return z;
}
export {
  CurrencyAmount,
  Ether,
  Fraction,
  MaxUint256,
  NativeCurrency,
  Percent,
  Price,
  Rounding,
  SupportedChainId,
  Token,
  TradeType,
  WETH9,
  computePriceImpact,
  sortedInsert,
  sqrt,
  validateAndParseAddress
};
//# sourceMappingURL=@uniswap_sdk-core.js.map
