import {
  init_lib,
  lib_exports2 as lib_exports
} from "./chunk-6AICWJZF.js";
import {
  require_utils
} from "./chunk-ADQGWDOT.js";
import "./chunk-KYPZAIFW.js";
import "./chunk-H4VV7EDM.js";
import "./chunk-WT34FUMT.js";
import "./chunk-BYENIVSH.js";
import "./chunk-L3SKMLJR.js";
import "./chunk-M2ZFBI33.js";
import {
  __commonJS,
  __publicField,
  __toCommonJS,
  global,
  init_shim
} from "./chunk-KEE3FHXB.js";

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    init_shim();
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    init_shim();
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    init_shim();
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/now.js
var require_now = __commonJS({
  "node_modules/lodash/now.js"(exports, module) {
    init_shim();
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module.exports = now;
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
    init_shim();
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module) {
    init_shim();
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module.exports = baseTrim;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    init_shim();
    var root = require_root();
    var Symbol = root.Symbol;
    module.exports = Symbol;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    init_shim();
    var Symbol = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    init_shim();
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    init_shim();
    var Symbol = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    init_shim();
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    init_shim();
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module) {
    init_shim();
    var baseTrim = require_baseTrim();
    var isObject = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  }
});

// node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "node_modules/lodash/debounce.js"(exports, module) {
    init_shim();
    var isObject = require_isObject();
    var now = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    module.exports = debounce;
  }
});

// node_modules/ethers-multicall-provider/lib/constants.js
var require_constants = __commonJS({
  "node_modules/ethers-multicall-provider/lib/constants.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multicall2DeploymentBlockNumbers = exports.multicall3DeploymentBlockNumbers = exports.multicallAddresses = exports.multicall3Address = exports.multicall2Address = void 0;
    exports.multicall2Address = "0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696";
    exports.multicall3Address = "0xcA11bde05977b3631167028862bE2a173976CA11";
    exports.multicallAddresses = /* @__PURE__ */ new Set([
      exports.multicall2Address.toLowerCase(),
      exports.multicall3Address.toLowerCase()
    ]);
    exports.multicall3DeploymentBlockNumbers = {
      1: 14353601,
      3: 12063863,
      4: 10299530,
      5: 6507670,
      42: 30285908,
      11155111: 751532,
      10: 4286263,
      420: 49461,
      42161: 7654707,
      42170: 1746963,
      421613: 88114,
      421611: 88114,
      137: 25770160,
      80001: 25444704,
      100: 21022491,
      43114: 11907934,
      43113: 7096959,
      250: 33001987,
      4002: 8328688,
      56: 15921452,
      97: 17422483,
      1284: 609002,
      1285: 1597904,
      1287: 1850686,
      16666e5: 24185753,
      25: 1963112,
      122: 16146628,
      14: 3002461
      // Flare
    };
    exports.multicall2DeploymentBlockNumbers = {
      1: 12336033,
      3: 9894101,
      4: 8283206,
      5: 4489716,
      42: 24025820
      // Kovan
    };
  }
});

// node_modules/ethers-multicall-provider/lib/types/factories/Multicall2__factory.js
var require_Multicall2_factory = __commonJS({
  "node_modules/ethers-multicall-provider/lib/types/factories/Multicall2__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multicall2__factory = void 0;
    var ethers_1 = (init_lib(), __toCommonJS(lib_exports));
    var _abi = [
      {
        inputs: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall2.Call[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "aggregate",
        outputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            internalType: "bytes[]",
            name: "returnData",
            type: "bytes[]"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall2.Call[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "blockAndAggregate",
        outputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          },
          {
            components: [
              {
                internalType: "bool",
                name: "success",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "returnData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall2.Result[]",
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          }
        ],
        name: "getBlockHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getBlockNumber",
        outputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentBlockCoinbase",
        outputs: [
          {
            internalType: "address",
            name: "coinbase",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentBlockDifficulty",
        outputs: [
          {
            internalType: "uint256",
            name: "difficulty",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentBlockGasLimit",
        outputs: [
          {
            internalType: "uint256",
            name: "gaslimit",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentBlockTimestamp",
        outputs: [
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "addr",
            type: "address"
          }
        ],
        name: "getEthBalance",
        outputs: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getLastBlockHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bool",
            name: "requireSuccess",
            type: "bool"
          },
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall2.Call[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "tryAggregate",
        outputs: [
          {
            components: [
              {
                internalType: "bool",
                name: "success",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "returnData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall2.Result[]",
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bool",
            name: "requireSuccess",
            type: "bool"
          },
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall2.Call[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "tryBlockAndAggregate",
        outputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          },
          {
            components: [
              {
                internalType: "bool",
                name: "success",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "returnData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall2.Result[]",
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Multicall2__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    __publicField(Multicall2__factory, "abi", _abi);
    exports.Multicall2__factory = Multicall2__factory;
  }
});

// node_modules/ethers-multicall-provider/lib/types/factories/Multicall3__factory.js
var require_Multicall3_factory = __commonJS({
  "node_modules/ethers-multicall-provider/lib/types/factories/Multicall3__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multicall3__factory = void 0;
    var ethers_1 = (init_lib(), __toCommonJS(lib_exports));
    var _abi = [
      {
        inputs: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Call[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "aggregate",
        outputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            internalType: "bytes[]",
            name: "returnData",
            type: "bytes[]"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bool",
                name: "allowFailure",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Call3[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "aggregate3",
        outputs: [
          {
            components: [
              {
                internalType: "bool",
                name: "success",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "returnData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Result[]",
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bool",
                name: "allowFailure",
                type: "bool"
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Call3Value[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "aggregate3Value",
        outputs: [
          {
            components: [
              {
                internalType: "bool",
                name: "success",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "returnData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Result[]",
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Call[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "blockAndAggregate",
        outputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          },
          {
            components: [
              {
                internalType: "bool",
                name: "success",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "returnData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Result[]",
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [],
        name: "getBasefee",
        outputs: [
          {
            internalType: "uint256",
            name: "basefee",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          }
        ],
        name: "getBlockHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getBlockNumber",
        outputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getChainId",
        outputs: [
          {
            internalType: "uint256",
            name: "chainid",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentBlockCoinbase",
        outputs: [
          {
            internalType: "address",
            name: "coinbase",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentBlockDifficulty",
        outputs: [
          {
            internalType: "uint256",
            name: "difficulty",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentBlockGasLimit",
        outputs: [
          {
            internalType: "uint256",
            name: "gaslimit",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentBlockTimestamp",
        outputs: [
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "addr",
            type: "address"
          }
        ],
        name: "getEthBalance",
        outputs: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getLastBlockHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bool",
            name: "requireSuccess",
            type: "bool"
          },
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Call[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "tryAggregate",
        outputs: [
          {
            components: [
              {
                internalType: "bool",
                name: "success",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "returnData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Result[]",
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bool",
            name: "requireSuccess",
            type: "bool"
          },
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Call[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "tryBlockAndAggregate",
        outputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          },
          {
            components: [
              {
                internalType: "bool",
                name: "success",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "returnData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Result[]",
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "payable",
        type: "function"
      }
    ];
    var Multicall3__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    __publicField(Multicall3__factory, "abi", _abi);
    exports.Multicall3__factory = Multicall3__factory;
  }
});

// node_modules/ethers-multicall-provider/lib/types/factories/index.js
var require_factories = __commonJS({
  "node_modules/ethers-multicall-provider/lib/types/factories/index.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multicall3__factory = exports.Multicall2__factory = void 0;
    var Multicall2__factory_1 = require_Multicall2_factory();
    Object.defineProperty(exports, "Multicall2__factory", { enumerable: true, get: function() {
      return Multicall2__factory_1.Multicall2__factory;
    } });
    var Multicall3__factory_1 = require_Multicall3_factory();
    Object.defineProperty(exports, "Multicall3__factory", { enumerable: true, get: function() {
      return Multicall3__factory_1.Multicall3__factory;
    } });
  }
});

// node_modules/ethers-multicall-provider/lib/types/index.js
var require_types = __commonJS({
  "node_modules/ethers-multicall-provider/lib/types/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multicall3__factory = exports.Multicall2__factory = exports.factories = void 0;
    exports.factories = __importStar(require_factories());
    var Multicall2__factory_1 = require_Multicall2_factory();
    Object.defineProperty(exports, "Multicall2__factory", { enumerable: true, get: function() {
      return Multicall2__factory_1.Multicall2__factory;
    } });
    var Multicall3__factory_1 = require_Multicall3_factory();
    Object.defineProperty(exports, "Multicall3__factory", { enumerable: true, get: function() {
      return Multicall3__factory_1.Multicall3__factory;
    } });
  }
});

// node_modules/ethers-multicall-provider/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/ethers-multicall-provider/lib/utils.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMulticallVersion = exports.getBlockNumber = void 0;
    var utils_1 = require_utils();
    var constants_1 = require_constants();
    var multicall_provider_1 = require_multicall_provider();
    var getBlockNumber = (blockTag) => {
      if ((0, utils_1.isHexString)(blockTag))
        return parseInt(blockTag, 16);
      else if (typeof blockTag === "number")
        return blockTag;
      else if (blockTag === "earliest")
        return 0;
      return null;
    };
    exports.getBlockNumber = getBlockNumber;
    var getMulticallVersion = (blockNumber, chainId) => {
      if (blockNumber != null) {
        if (blockNumber <= (constants_1.multicall3DeploymentBlockNumbers[chainId] ?? Infinity)) {
          if (blockNumber <= (constants_1.multicall2DeploymentBlockNumbers[chainId] ?? Infinity))
            return null;
          return multicall_provider_1.MulticallVersion.V2;
        }
      }
      return multicall_provider_1.MulticallVersion.V3;
    };
    exports.getMulticallVersion = getMulticallVersion;
  }
});

// node_modules/ethers-multicall-provider/lib/multicall-provider.js
var require_multicall_provider = __commonJS({
  "node_modules/ethers-multicall-provider/lib/multicall-provider.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MulticallWrapper = exports.MulticallVersion = void 0;
    var debounce_1 = __importDefault(require_debounce());
    var constants_1 = require_constants();
    var types_1 = require_types();
    var utils_1 = require_utils2();
    var MulticallVersion;
    (function(MulticallVersion2) {
      MulticallVersion2["V2"] = "2";
      MulticallVersion2["V3"] = "3";
    })(MulticallVersion = exports.MulticallVersion || (exports.MulticallVersion = {}));
    var MulticallWrapper = class _MulticallWrapper {
      /**
       * Returns whether a given provider is a multicall-enabled provider.
       * @param provider The provider to check.
       * @returns A boolean indicating whether the given provider is a multicall-enabled provider.
       */
      static isMulticallProvider(provider) {
        if (provider._isMulticallProvider)
          return true;
        return false;
      }
      /**
       * Wraps a given ethers provider to enable automatic call batching.
       * @param provider The underlying provider to use to batch calls.
       * @param delay The delay (in milliseconds) to wait before performing the ongoing batch of calls. Defaults to 16ms.
       * @param maxMulticallDataLength The maximum total calldata length allowed in a multicall batch, to avoid having the RPC backend to revert because of too large (or too long) request. Set to 0 to disable this behavior. Defaults to 200k.
       * @returns The multicall provider, which is a proxy to the given provider, automatically batching any call performed with it.
       */
      static wrap(provider, delay = 16, maxMulticallDataLength = 2e5) {
        if (_MulticallWrapper.isMulticallProvider(provider))
          return _MulticallWrapper.wrap(provider._provider);
        const prototype = Object.getPrototypeOf(provider);
        const multicallProvider = Object.assign(Object.create(prototype, {
          _isMulticallProvider: {
            value: true,
            writable: false,
            enumerable: true,
            configurable: false
          },
          _provider: {
            value: provider,
            writable: false,
            enumerable: true,
            configurable: false
          },
          maxMulticallDataLength: {
            value: maxMulticallDataLength,
            writable: true,
            enumerable: true,
            configurable: true
          },
          multicallDelay: {
            get: function() {
              return this._multicallDelay;
            },
            set: function(delay2) {
              var _a;
              (_a = this._debouncedPerformMulticall) == null ? void 0 : _a.flush();
              this._multicallDelay = delay2;
              this._debouncedPerformMulticall = (0, debounce_1.default)(this._performMulticall, delay2);
            },
            enumerable: true,
            configurable: false
          }
        }), provider);
        Object.defineProperties(multicallProvider, Object.fromEntries(Object.entries(Object.getOwnPropertyDescriptors(prototype)).map(([name, { value, get, set, ...descriptor }]) => {
          return [
            name,
            {
              ...descriptor,
              ...value !== void 0 && {
                value: typeof value === "function" ? value.bind(provider) : value
              },
              ...get != null && { get: get.bind(provider) },
              ...set != null && { set: set.bind(provider) }
            }
          ];
        })));
        const multicall2 = types_1.Multicall2__factory.connect(constants_1.multicall2Address, provider);
        const multicall3 = types_1.Multicall3__factory.connect(constants_1.multicall3Address, provider);
        let queuedCalls = [];
        multicallProvider._performMulticall = async function() {
          const _queuedCalls = [...queuedCalls];
          if (queuedCalls.length === 0)
            return;
          queuedCalls = [];
          const blockTagCalls = _queuedCalls.reduce((acc, queuedCall) => {
            const blockTag = queuedCall.blockTag.toString();
            return {
              ...acc,
              [blockTag]: [queuedCall].concat(acc[blockTag] ?? [])
            };
          }, {});
          await Promise.all(Object.values(blockTagCalls).map(async (blockTagQueuedCalls) => {
            const callStructs = blockTagQueuedCalls.map(({ to, data }) => ({
              target: to,
              callData: data
            }));
            let currentLength = 0;
            const calls = [[]];
            callStructs.forEach((callStruct) => {
              const newLength = currentLength + callStruct.callData.length;
              if (this.maxMulticallDataLength > 0 && newLength > this.maxMulticallDataLength) {
                currentLength = callStruct.callData.length;
                calls.push([]);
              } else
                currentLength = newLength;
              calls[calls.length - 1].push(callStruct);
            });
            const { blockTag, multicallVersion } = blockTagQueuedCalls[0];
            const multicall = multicallVersion === MulticallVersion.V2 ? multicall2 : multicall3;
            try {
              const res = (await Promise.all(calls.map((call) => multicall.callStatic.tryAggregate(false, call, { blockTag })))).flat();
              if (res.length !== callStructs.length)
                throw new Error(`Unexpected multicall response length: received ${res.length}; expected ${callStructs.length}`);
              blockTagQueuedCalls.forEach(({ resolve }, i) => {
                resolve(res[i].returnData);
              });
            } catch (error) {
              blockTagQueuedCalls.forEach(({ reject }) => {
                reject(error);
              });
            }
          }));
        };
        multicallProvider.multicallDelay = delay;
        multicallProvider.perform = async function(method, params) {
          if (method !== "call")
            return this._provider.perform(method, params);
          const { transaction: { to, data }, blockTag } = params;
          const blockNumber = (0, utils_1.getBlockNumber)(blockTag);
          const multicallVersion = (0, utils_1.getMulticallVersion)(blockNumber, this.network.chainId);
          if (!to || !data || multicallVersion == null || constants_1.multicallAddresses.has(to.toLowerCase()))
            return this._provider.perform(method, params);
          this._debouncedPerformMulticall();
          return new Promise((resolve, reject) => {
            queuedCalls.push({
              to,
              data,
              blockTag,
              multicallVersion,
              resolve,
              reject
            });
          });
        };
        return multicallProvider;
      }
    };
    exports.MulticallWrapper = MulticallWrapper;
    exports.default = MulticallWrapper;
  }
});

// node_modules/ethers-multicall-provider/lib/index.js
var require_lib = __commonJS({
  "node_modules/ethers-multicall-provider/lib/index.js"(exports) {
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MulticallWrapper = void 0;
    var multicall_provider_1 = require_multicall_provider();
    Object.defineProperty(exports, "MulticallWrapper", { enumerable: true, get: function() {
      return __importDefault(multicall_provider_1).default;
    } });
  }
});
export default require_lib();
//# sourceMappingURL=ethers-multicall-provider.js.map
