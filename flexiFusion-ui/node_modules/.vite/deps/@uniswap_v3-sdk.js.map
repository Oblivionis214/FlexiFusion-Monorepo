{
  "version": 3,
  "sources": ["../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/chains.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/addresses.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/constants.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/entities/fractions/fraction.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/entities/fractions/currencyAmount.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/entities/fractions/percent.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/entities/fractions/price.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/entities/baseCurrency.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/entities/nativeCurrency.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/utils/validateAndParseAddress.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/entities/token.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/entities/weth9.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/entities/ether.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/utils/computePriceImpact.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/utils/sortedInsert.ts", "../../@uniswap/v3-sdk/node_modules/@uniswap/sdk-core/src/utils/sqrt.ts", "../../@uniswap/v3-periphery/artifacts/contracts/interfaces/IMulticall.sol/IMulticall.json", "../../@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json", "../../@uniswap/v3-periphery/artifacts/contracts/interfaces/ISelfPermit.sol/ISelfPermit.json", "../../@uniswap/v3-periphery/artifacts/contracts/interfaces/IPeripheryPaymentsWithFee.sol/IPeripheryPaymentsWithFee.json", "../../@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json", "../../@uniswap/swap-router-contracts/artifacts/contracts/lens/QuoterV2.sol/QuoterV2.json", "../../@uniswap/v3-staker/artifacts/contracts/UniswapV3Staker.sol/UniswapV3Staker.json", "../../@uniswap/v3-periphery/artifacts/contracts/SwapRouter.sol/SwapRouter.json", "../../@uniswap/v3-sdk/node_modules/regenerator-runtime/runtime.js", "../../@uniswap/v3-sdk/src/constants.ts", "../../@uniswap/v3-sdk/src/internalConstants.ts", "../../@uniswap/v3-sdk/src/utils/computePoolAddress.ts", "../../@uniswap/v3-sdk/src/utils/liquidityMath.ts", "../../@uniswap/v3-sdk/src/utils/fullMath.ts", "../../@uniswap/v3-sdk/src/utils/sqrtPriceMath.ts", "../../@uniswap/v3-sdk/src/utils/swapMath.ts", "../../@uniswap/v3-sdk/src/utils/mostSignificantBit.ts", "../../@uniswap/v3-sdk/src/utils/tickMath.ts", "../../@uniswap/v3-sdk/src/entities/tickDataProvider.ts", "../../@uniswap/v3-sdk/src/utils/isSorted.ts", "../../@uniswap/v3-sdk/src/utils/tickList.ts", "../../@uniswap/v3-sdk/src/utils/calldata.ts", "../../@uniswap/v3-sdk/src/utils/encodeRouteToPath.ts", "../../@uniswap/v3-sdk/src/utils/encodeSqrtRatioX96.ts", "../../@uniswap/v3-sdk/src/utils/maxLiquidityForAmounts.ts", "../../@uniswap/v3-sdk/src/utils/nearestUsableTick.ts", "../../@uniswap/v3-sdk/src/utils/position.ts", "../../@uniswap/v3-sdk/src/utils/priceTickConversions.ts", "../../@uniswap/v3-sdk/src/utils/tickLibrary.ts", "../../@uniswap/v3-sdk/src/entities/tick.ts", "../../@uniswap/v3-sdk/src/entities/tickListDataProvider.ts", "../../@uniswap/v3-sdk/src/entities/pool.ts", "../../@uniswap/v3-sdk/src/entities/position.ts", "../../@uniswap/v3-sdk/src/entities/route.ts", "../../@uniswap/v3-sdk/src/entities/trade.ts", "../../@uniswap/v3-sdk/src/multicall.ts", "../../@uniswap/v3-sdk/src/selfPermit.ts", "../../@uniswap/v3-sdk/src/payments.ts", "../../@uniswap/v3-sdk/src/nonfungiblePositionManager.ts", "../../@uniswap/v3-sdk/src/quoter.ts", "../../@uniswap/v3-sdk/src/staker.ts", "../../@uniswap/v3-sdk/src/swapRouter.ts"],
  "sourcesContent": ["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC'\n}\n", "import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n", "import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n", "import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n", "import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n", "import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n", "import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n", "import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n", "import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n", "import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\n}\n", "import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n", "import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n", "import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IMulticall\",\n  \"sourceName\": \"contracts/interfaces/IMulticall.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"NonfungiblePositionManager\",\n  \"sourceName\": \"contracts/NonfungiblePositionManager.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_WETH9\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_tokenDescriptor_\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Collect\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"DecreaseLiquidity\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"IncreaseLiquidity\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DOMAIN_SEPARATOR\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"PERMIT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH9\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"baseURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"tokenId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint128\",\n              \"name\": \"amount0Max\",\n              \"type\": \"uint128\"\n            },\n            {\n              \"internalType\": \"uint128\",\n              \"name\": \"amount1Max\",\n              \"type\": \"uint128\"\n            }\n          ],\n          \"internalType\": \"struct INonfungiblePositionManager.CollectParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"collect\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token0\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token1\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint24\",\n          \"name\": \"fee\",\n          \"type\": \"uint24\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96\",\n          \"type\": \"uint160\"\n        }\n      ],\n      \"name\": \"createAndInitializePoolIfNecessary\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"pool\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"tokenId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint128\",\n              \"name\": \"liquidity\",\n              \"type\": \"uint128\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"decreaseLiquidity\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"tokenId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Desired\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Desired\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"increaseLiquidity\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"token0\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"token1\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"int24\",\n              \"name\": \"tickLower\",\n              \"type\": \"int24\"\n            },\n            {\n              \"internalType\": \"int24\",\n              \"name\": \"tickUpper\",\n              \"type\": \"int24\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Desired\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Desired\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct INonfungiblePositionManager.MintParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"mint\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"permit\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"positions\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint96\",\n          \"name\": \"nonce\",\n          \"type\": \"uint96\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token0\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token1\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint24\",\n          \"name\": \"fee\",\n          \"type\": \"uint24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeGrowthInside0LastX128\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeGrowthInside1LastX128\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"tokensOwed0\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"tokensOwed1\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"refundETH\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"_data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermit\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowed\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowedIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenByIndex\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenOfOwnerByIndex\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0Owed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1Owed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"uniswapV3MintCallback\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x610120604052600d80546001600160b01b0319166001176001600160b01b0316600160b01b1790553480156200003457600080fd5b50604051620062e9380380620062e98339810160408190526200005791620002db565b82826040518060400160405280601b81526020017f556e697377617020563320506f736974696f6e73204e46542d563100000000008152506040518060400160405280600a815260200169554e492d56332d504f5360b01b815250604051806040016040528060018152602001603160f81b8152508282620000e66301ffc9a760e01b6200018d60201b60201c565b8151620000fb90600690602085019062000212565b5080516200011190600790602084019062000212565b50620001246380ac58cd60e01b6200018d565b62000136635b5e139f60e01b6200018d565b6200014863780e9d6360e01b6200018d565b50508251602093840120608052805192019190912060a052506001600160601b0319606092831b811660c05290821b811660e05291901b166101005250620003249050565b6001600160e01b03198082161415620001ed576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200024a576000855562000295565b82601f106200026557805160ff191683800117855562000295565b8280016001018555821562000295579182015b828111156200029557825182559160200191906001019062000278565b50620002a3929150620002a7565b5090565b5b80821115620002a35760008155600101620002a8565b80516001600160a01b0381168114620002d657600080fd5b919050565b600080600060608486031215620002f0578283fd5b620002fb84620002be565b92506200030b60208501620002be565b91506200031b60408501620002be565b90509250925092565b60805160a05160c05160601c60e05160601c6101005160601c615f40620003a960003980612a835250806102995280611718528061180e52806118965280613e5d5280613ea35280613f17525080610aa75280610dde5280610ea55280612a1d5280612b235280612e4452806136e15250806114ff5250806114de5250615f406000f3fe6080604052600436106102895760003560e01c80636352211e11610153578063ac9650d8116100cb578063d34879971161007f578063e985e9c511610064578063e985e9c5146106f5578063f3995c6714610715578063fc6f7865146107285761030d565b8063d3487997146106c2578063df2ab5bb146106e25761030d565b8063c2e3140a116100b0578063c2e3140a1461067a578063c45a01551461068d578063c87b56dd146106a25761030d565b8063ac9650d81461063a578063b88d4fde1461065a5761030d565b8063883164561161012257806399fbab881161010757806399fbab88146105cf578063a22cb46514610607578063a4a78f0c146106275761030d565b8063883164561461059757806395d89b41146105ba5761030d565b80636352211e1461052f5780636c0360eb1461054f57806370a08231146105645780637ac2ff7b146105845761030d565b806323b872dd1161020157806342966c68116101b557806349404b7c1161019a57806349404b7c146104e75780634aa4a4fc146104fa5780634f6ccce71461050f5761030d565b806342966c68146104c15780634659a494146104d45761030d565b806330adf81f116101e657806330adf81f146104775780633644e5151461048c57806342842e0e146104a15761030d565b806323b872dd146104375780632f745c59146104575761030d565b80630c49ccbe1161025857806313ead5621161023d57806313ead562146103e057806318160ddd146103f3578063219f5d17146104155761030d565b80630c49ccbe146103b757806312210e8a146103d85761030d565b806301ffc9a71461031257806306fdde0314610348578063081812fc1461036a578063095ea7b3146103975761030d565b3661030d57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461030b576040805162461bcd60e51b815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561031e57600080fd5b5061033261032d3660046153a6565b61073b565b60405161033f919061591e565b60405180910390f35b34801561035457600080fd5b5061035d610776565b60405161033f9190615971565b34801561037657600080fd5b5061038a6103853660046156b8565b61080c565b60405161033f91906157e2565b3480156103a357600080fd5b5061030b6103b2366004615270565b610868565b6103ca6103c5366004615483565b61093e565b60405161033f929190615b42565b61030b610daa565b61038a6103ee366004615103565b610dbc565b3480156103ff57600080fd5b506104086110c9565b60405161033f9190615929565b610428610423366004615494565b6110da565b60405161033f93929190615afd565b34801561044357600080fd5b5061030b61045236600461515c565b611413565b34801561046357600080fd5b50610408610472366004615270565b61146a565b34801561048357600080fd5b50610408611495565b34801561049857600080fd5b506104086114b9565b3480156104ad57600080fd5b5061030b6104bc36600461515c565b611577565b61030b6104cf3660046156b8565b611592565b61030b6104e23660046152dc565b611661565b61030b6104f53660046156d0565b611714565b34801561050657600080fd5b5061038a611894565b34801561051b57600080fd5b5061040861052a3660046156b8565b6118b8565b34801561053b57600080fd5b5061038a61054a3660046156b8565b6118ce565b34801561055b57600080fd5b5061035d6118f6565b34801561057057600080fd5b5061040861057f3660046150af565b6118fb565b61030b6105923660046152dc565b611963565b6105aa6105a5366004615550565b611e0f565b60405161033f9493929190615b1e565b3480156105c657600080fd5b5061035d612370565b3480156105db57600080fd5b506105ef6105ea3660046156b8565b6123d1565b60405161033f9c9b9a99989796959493929190615b50565b34801561061357600080fd5b5061030b610622366004615243565b612600565b61030b6106353660046152dc565b612723565b61064d610648366004615337565b6127d5565b60405161033f91906158a0565b34801561066657600080fd5b5061030b61067536600461519c565b612915565b61030b6106883660046152dc565b612973565b34801561069957600080fd5b5061038a612a1b565b3480156106ae57600080fd5b5061035d6106bd3660046156b8565b612a3f565b3480156106ce57600080fd5b5061030b6106dd366004615717565b612b0e565b61030b6106f036600461529b565b612b8c565b34801561070157600080fd5b506103326107103660046150cb565b612c6f565b61030b6107233660046152dc565b612c9d565b6103ca61073636600461546c565b612d28565b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b820191906000526020600020905b8154815290600101906020018083116107e557829003601f168201915b5050505050905090565b600061081782613246565b61083c5760405162461bcd60e51b8152600401610833906159bb565b60405180910390fd5b506000908152600c60205260409020546c0100000000000000000000000090046001600160a01b031690565b6000610873826118ce565b9050806001600160a01b0316836001600160a01b031614156108c65760405162461bcd60e51b8152600401808060200182810382526021815260200180615ee26021913960400191505060405180910390fd5b806001600160a01b03166108d8613253565b6001600160a01b031614806108f457506108f481610710613253565b61092f5760405162461bcd60e51b8152600401808060200182810382526038815260200180615e0c6038913960400191505060405180910390fd5b6109398383613257565b505050565b600080823561094d33826132db565b6109695760405162461bcd60e51b815260040161083390615984565b836080013580610977613377565b11156109ca576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b60006109dc6040870160208801615562565b6001600160801b0316116109ef57600080fd5b84356000908152600c602090815260409182902060018101549092600160801b9091046001600160801b031691610a2a918901908901615562565b6001600160801b0316816001600160801b03161015610a4857600080fd5b60018281015469ffffffffffffffffffff166000908152600b60209081526040808320815160608101835281546001600160a01b039081168252919095015490811692850192909252600160a01b90910462ffffff1690830152610acc7f00000000000000000000000000000000000000000000000000000000000000008361337b565b60018501549091506001600160a01b0382169063a34123a7906a01000000000000000000008104600290810b91600160681b9004900b610b1260408e0160208f01615562565b6040518463ffffffff1660e01b8152600401610b309392919061594b565b6040805180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8191906156f4565b909850965060408901358810801590610b9e575088606001358710155b610bba5760405162461bcd60e51b815260040161083390615a18565b6001840154600090610bea9030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b8152600401610c1b9190615929565b60a06040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b91906155ac565b50509250925050610c9087600201548303876001600160801b0316600160801b6134d1565b6004880180546fffffffffffffffffffffffffffffffff198116928e016001600160801b039182160181169290921790556003880154610cda91908303908816600160801b6134d1565b6004880180546001600160801b03808216938e01600160801b9283900482160116029190911790556002870182905560038701819055610d2060408d0160208e01615562565b86038760010160106101000a8154816001600160801b0302191690836001600160801b031602179055508b600001357f26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b48d6020016020810190610d839190615562565b8d8d604051610d9493929190615afd565b60405180910390a2505050505050505050915091565b4715610dba57610dba3347613580565b565b6000836001600160a01b0316856001600160a01b031610610ddc57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631698ee828686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff168152602001935050505060206040518083038186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d6020811015610e9157600080fd5b505190506001600160a01b038116610fe0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a16712958686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff1681526020019350505050602060405180830381600087803b158015610f3057600080fd5b505af1158015610f44573d6000803e3d6000fd5b505050506040513d6020811015610f5a57600080fd5b5051604080517ff637731d0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519293509083169163f637731d9160248082019260009290919082900301818387803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050506110c1565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d60e081101561104557600080fd5b505190506001600160a01b0381166110bf57816001600160a01b031663f637731d846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b505050505b505b949350505050565b60006110d56002613689565b905090565b60008060008360a00135806110ed613377565b1115611140576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b84356000908152600c6020908152604080832060018082015469ffffffffffffffffffff81168652600b855283862084516060808201875282546001600160a01b039081168352929094015480831682890190815262ffffff600160a01b9092048216838901908152885161014081018a528451861681529151909416818a01529251168287015230828501526a01000000000000000000008304600290810b810b608080850191909152600160681b909404810b900b60a0830152958c013560c0820152938b013560e0850152908a0135610100840152890135610120830152929061122c90613694565b6001870154939a50919850965091506000906112669030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016112979190615929565b60a06040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e791906155ac565b50509250925050611323866002015483038760010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b6004870180546001600160801b0380821690930183166fffffffffffffffffffffffffffffffff19909116179055600387015460018801546113739291840391600160801b9182900416906134d1565b6004870180546001600160801b03600160801b80830482169094018116840291811691909117909155600288018490556003880183905560018801805483810483168e018316909302929091169190911790556040518b35907f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f906113fd908d908d908d90615afd565b60405180910390a2505050505050509193909250565b61142461141e613253565b826132db565b61145f5760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b6109398383836138cf565b6001600160a01b038216600090815260016020526040812061148c9083613a1b565b90505b92915050565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611526613a27565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b61093983838360405180602001604052806000815250612915565b8061159d33826132db565b6115b95760405162461bcd60e51b815260040161083390615984565b6000828152600c602052604090206001810154600160801b90046001600160801b03161580156115f4575060048101546001600160801b0316155b801561161257506004810154600160801b90046001600160801b0316155b61162e5760405162461bcd60e51b815260040161083390615a86565b6000838152600c602052604081208181556001810182905560028101829055600381018290556004015561093983613a2b565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e4810183905290516001600160a01b03881691638fcbaf0c9161010480830192600092919082900301818387803b1580156116f457600080fd5b505af1158015611708573d6000803e3d6000fd5b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d60208110156117ad57600080fd5b5051905082811015611806576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610939577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561187257600080fd5b505af1158015611886573d6000803e3d6000fd5b505050506109398282613580565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806118c6600284613af8565b509392505050565b600061148f82604051806060016040528060298152602001615e6e6029913960029190613b16565b606090565b60006001600160a01b0382166119425760405162461bcd60e51b815260040180806020018281038252602a815260200180615e44602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061148f90613689565b8361196c613377565b11156119bf576040805162461bcd60e51b815260206004820152600e60248201527f5065726d69742065787069726564000000000000000000000000000000000000604482015290519081900360640190fd5b60006119c96114b9565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad88886119f581613b23565b604080516020808201969096526001600160a01b03909416848201526060840192909252608083015260a08083018a90528151808403909101815260c0830182528051908401207f190100000000000000000000000000000000000000000000000000000000000060e084015260e283019490945261010280830194909452805180830390940184526101229091019052815191012090506000611a98876118ce565b9050806001600160a01b0316886001600160a01b03161415611aeb5760405162461bcd60e51b8152600401808060200182810382526027815260200180615d6f6027913960400191505060405180910390fd5b611af481613b62565b15611ccf576040805160208082018790528183018690527fff0000000000000000000000000000000000000000000000000000000000000060f889901b16606083015282516041818403018152606183018085527f1626ba7e0000000000000000000000000000000000000000000000000000000090526065830186815260858401948552815160a585015281516001600160a01b03871695631626ba7e958995919260c59091019185019080838360005b83811015611bbe578181015183820152602001611ba6565b50505050905090810190601f168015611beb5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611c0957600080fd5b505afa158015611c1d573d6000803e3d6000fd5b505050506040513d6020811015611c3357600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f1626ba7e0000000000000000000000000000000000000000000000000000000014611cca576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b611dfb565b600060018387878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611d2b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d93576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316816001600160a01b031614611df9576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b505b611e058888613257565b5050505050505050565b60008060008084610140013580611e24613377565b1115611e77576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b604080516101408101909152600090611f439080611e9860208b018b6150af565b6001600160a01b03168152602001896020016020810190611eb991906150af565b6001600160a01b03168152602001611ed760608b0160408c0161569e565b62ffffff168152306020820152604001611ef760808b0160608c016153e6565b60020b8152602001611f0f60a08b0160808c016153e6565b60020b81526020018960a0013581526020018960c0013581526020018960e001358152602001896101000135815250613694565b92975090955093509050611fb7611f6261014089016101208a016150af565b600d80547fffffffffffffffffffff000000000000000000000000000000000000000000008116600175ffffffffffffffffffffffffffffffffffffffffffff92831690810190921617909155975087613b68565b6000611fe230611fcd60808b0160608c016153e6565b611fdd60a08c0160808d016153e6565b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016120139190615929565b60a06040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206391906155ac565b5050925092505060006120dc8560405180606001604052808e600001602081019061208e91906150af565b6001600160a01b031681526020018e60200160208101906120af91906150af565b6001600160a01b031681526020018e60400160208101906120d0919061569e565b62ffffff169052613c96565b905060405180610140016040528060006bffffffffffffffffffffffff16815260200160006001600160a01b031681526020018269ffffffffffffffffffff1681526020018c606001602081019061213491906153e6565b60020b815260200161214c60a08e0160808f016153e6565b60020b81526020018a6001600160801b0316815260200184815260200183815260200160006001600160801b0316815260200160006001600160801b0316815250600c60008c815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550606082015181600101600a6101000a81548162ffffff021916908360020b62ffffff160217905550608082015181600101600d6101000a81548162ffffff021916908360020b62ffffff16021790555060a08201518160010160106101000a8154816001600160801b0302191690836001600160801b0316021790555060c0820151816002015560e082015181600301556101008201518160040160006101000a8154816001600160801b0302191690836001600160801b031602179055506101208201518160040160106101000a8154816001600160801b0302191690836001600160801b03160217905550905050897f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f8a8a8a60405161235b93929190615afd565b60405180910390a25050505050509193509193565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b6000818152600c6020908152604080832081516101408101835281546bffffffffffffffffffffffff811682526001600160a01b036c010000000000000000000000009091041693810193909352600181015469ffffffffffffffffffff81169284018390526a01000000000000000000008104600290810b810b810b6060860152600160681b8204810b810b810b60808601526001600160801b03600160801b92839004811660a08701529083015460c0860152600383015460e0860152600490920154808316610100860152041661012083015282918291829182918291829182918291829182918291906124da5760405162461bcd60e51b815260040161083390615a4f565b6000600b6000836040015169ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905081600001518260200151826000015183602001518460400151866060015187608001518860a001518960c001518a60e001518b61010001518c61012001519d509d509d509d509d509d509d509d509d509d509d509d50505091939597999b5091939597999b565b612608613253565b6001600160a01b0316826001600160a01b0316141561266e576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806005600061267b613253565b6001600160a01b0390811682526020808301939093526040918201600090812091871680825291909352912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091556126dd613253565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051600019916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b15801561278d57600080fd5b505afa1580156127a1573d6000803e3d6000fd5b505050506040513d60208110156127b757600080fd5b505110156127cd576127cd868686868686611661565b505050505050565b60608167ffffffffffffffff811180156127ee57600080fd5b5060405190808252806020026020018201604052801561282257816020015b606081526020019060019003908161280d5790505b50905060005b8281101561290e576000803086868581811061284057fe5b90506020028101906128529190615bef565b6040516128609291906157d2565b600060405180830381855af49150503d806000811461289b576040519150601f19603f3d011682016040523d82523d6000602084013e6128a0565b606091505b5091509150816128ec576044815110156128b957600080fd5b600481019050808060200190518101906128d39190615402565b60405162461bcd60e51b81526004016108339190615971565b808484815181106128f957fe5b60209081029190910101525050600101612828565b5092915050565b612926612920613253565b836132db565b6129615760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b61296d84848484613de6565b50505050565b604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152905186916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b1580156129db57600080fd5b505afa1580156129ef573d6000803e3d6000fd5b505050506040513d6020811015612a0557600080fd5b505110156127cd576127cd868686868686612c9d565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060612a4a82613246565b612a5357600080fd5b6040517fe9dc63750000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e9dc637590612aba9030908690600401615932565b60006040518083038186803b158015612ad257600080fd5b505afa158015612ae6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261148f9190810190615402565b6000612b1c828401846154a5565b9050612b4c7f00000000000000000000000000000000000000000000000000000000000000008260000151613e38565b508415612b67578051516020820151612b6791903388613e5b565b8315612b8557612b8581600001516020015182602001513387613e5b565b5050505050565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612bdb57600080fd5b505afa158015612bef573d6000803e3d6000fd5b505050506040513d6020811015612c0557600080fd5b5051905082811015612c5e576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561296d5761296d848383613feb565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c4810183905290516001600160a01b0388169163d505accf9160e480830192600092919082900301818387803b1580156116f457600080fd5b6000808235612d3733826132db565b612d535760405162461bcd60e51b815260040161083390615984565b6000612d656060860160408701615562565b6001600160801b03161180612d9257506000612d876080860160608701615562565b6001600160801b0316115b612d9b57600080fd5b600080612dae60408701602088016150af565b6001600160a01b031614612dd157612dcc60408601602087016150af565b612dd3565b305b85356000908152600c6020908152604080832060018082015469ffffffffffffffffffff168552600b8452828520835160608101855281546001600160a01b039081168252919092015490811694820194909452600160a01b90930462ffffff169183019190915292935090612e697f00000000000000000000000000000000000000000000000000000000000000008361337b565b600484015460018501549192506001600160801b0380821692600160801b92839004821692900416156130865760018501546040517fa34123a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385169163a34123a791612f00916a01000000000000000000008104600290810b92600160681b909204900b9060009060040161594b565b6040805180830381600087803b158015612f1957600080fd5b505af1158015612f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5191906156f4565b5050600185015460009081906001600160a01b0386169063514ea4bf90612f969030906a01000000000000000000008104600290810b91600160681b9004900b613477565b6040518263ffffffff1660e01b8152600401612fb29190615929565b60a06040518083038186803b158015612fca57600080fd5b505afa158015612fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300291906155ac565b5050925092505061303e876002015483038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b84019350613077876003015482038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b60028801929092556003870155015b6000806001600160801b0384166130a360608e0160408f01615562565b6001600160801b0316116130c6576130c160608d0160408e01615562565b6130c8565b835b836001600160801b03168d60600160208101906130e59190615562565b6001600160801b0316116131085761310360808e0160608f01615562565b61310a565b835b60018901546040517f4f1eb3d80000000000000000000000000000000000000000000000000000000081529294509092506001600160a01b03871691634f1eb3d89161317d918c916a01000000000000000000008104600290810b92600160681b909204900b9088908890600401615839565b6040805180830381600087803b15801561319657600080fd5b505af11580156131aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ce919061557e565b6004890180546fffffffffffffffffffffffffffffffff196001600160801b03918216600160801b878a0384160217168689038216179091556040519281169d50169a508c35907f40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f0190610d94908b9086908690615876565b600061148f60028361417b565b3390565b6000818152600c6020526040902080546bffffffffffffffffffffffff166c010000000000000000000000006001600160a01b0385169081029190911790915581906132a2826118ce565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006132e682613246565b6133215760405162461bcd60e51b815260040180806020018281038252602c815260200180615de0602c913960400191505060405180910390fd5b600061332c836118ce565b9050806001600160a01b0316846001600160a01b031614806133675750836001600160a01b031661335c8461080c565b6001600160a01b0316145b806110c157506110c18185612c6f565b4290565b600081602001516001600160a01b031682600001516001600160a01b0316106133a357600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516bffffffffffffffffffffffff19606086901b16602080830191909152600285810b60e890811b60348501529085900b901b60378301528251601a818403018152603a90920190925280519101205b9392505050565b600080806000198587098686029250828110908390030390508061350757600084116134fc57600080fd5b5082900490506134ca565b80841161351357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106135cc5780518252601f1990920191602091820191016135ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461362e576040519150601f19603f3d011682016040523d82523d6000602084013e613633565b606091505b5050905080610939576040805162461bcd60e51b815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148f82614187565b6000806000806000604051806060016040528087600001516001600160a01b0316815260200187602001516001600160a01b03168152602001876040015162ffffff1681525090506137067f00000000000000000000000000000000000000000000000000000000000000008261337b565b91506000826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561374357600080fd5b505afa158015613757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377b919061560d565b50505050505090506000613792886080015161418b565b905060006137a38960a0015161418b565b90506137ba8383838c60c001518d60e001516144d9565b9750505050816001600160a01b0316633c8a7d8d876060015188608001518960a00151896040518060400160405280888152602001336001600160a01b031681525060405160200161380c9190615abd565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161383b9594939291906157f6565b6040805180830381600087803b15801561385457600080fd5b505af1158015613868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388c91906156f4565b610100880151919550935084108015906138ab57508561012001518310155b6138c75760405162461bcd60e51b815260040161083390615a18565b509193509193565b826001600160a01b03166138e2826118ce565b6001600160a01b0316146139275760405162461bcd60e51b8152600401808060200182810382526029815260200180615eb96029913960400191505060405180910390fd5b6001600160a01b03821661396c5760405162461bcd60e51b8152600401808060200182810382526024815260200180615d966024913960400191505060405180910390fd5b613977838383610939565b613982600082613257565b6001600160a01b03831660009081526001602052604090206139a4908261459d565b506001600160a01b03821660009081526001602052604090206139c790826145a9565b506139d4600282846145b5565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061148c83836145cb565b4690565b6000613a36826118ce565b9050613a4481600084610939565b613a4f600083613257565b6000828152600860205260409020546002600019610100600184161502019091160415613a8d576000828152600860205260408120613a8d9161501f565b6001600160a01b0381166000908152600160205260409020613aaf908361459d565b50613abb60028361462f565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000808080613b07868661463b565b909450925050505b9250929050565b60006110c18484846146b6565b6000908152600c6020526040902080546bffffffffffffffffffffffff19811660016bffffffffffffffffffffffff9283169081019092161790915590565b3b151590565b6001600160a01b038216613bc3576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b613bcc81613246565b15613c1e576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b613c2a60008383610939565b6001600160a01b0382166000908152600160205260409020613c4c90826145a9565b50613c59600282846145b5565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0382166000908152600a602052604090205469ffffffffffffffffffff168061148f5750600d8054600169ffffffffffffffffffff76010000000000000000000000000000000000000000000080840482168381019092160275ffffffffffffffffffffffffffffffffffffffffffff909316929092179092556001600160a01b038085166000908152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001686179055848352600b825291829020865181549085167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825591870151950180549287015162ffffff16600160a01b027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff969094169290911691909117939093161790915592915050565b613df18484846138cf565b613dfd84848484614780565b61296d5760405162461bcd60e51b8152600401808060200182810382526032815260200180615d3d6032913960400191505060405180910390fd5b6000613e44838361337b565b9050336001600160a01b0382161461148f57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148015613e9c5750804710155b15613fbe577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613efc57600080fd5b505af1158015613f10573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613f8c57600080fd5b505af1158015613fa0573d6000803e3d6000fd5b505050506040513d6020811015613fb657600080fd5b5061296d9050565b6001600160a01b038316301415613fdf57613fda848383613feb565b61296d565b61296d8484848461495c565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b602083106140955780518252601f199092019160209182019101614076565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146140f7576040519150601f19603f3d011682016040523d82523d6000602084013e6140fc565b606091505b509150915081801561412a57508051158061412a575080806020019051602081101561412757600080fd5b50515b612b85576040805162461bcd60e51b815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148c8383614af4565b5490565b60008060008360020b126141a2578260020b6141aa565b8260020b6000035b9050620d89e8811115614204576040805162461bcd60e51b815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001821661421857600160801b61422a565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600282161561425e576ffff97272373d413259a46990580e213a0260801c5b600482161561427d576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561429c576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156142bb576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156142da576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156142f9576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615614318576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615614338576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615614358576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615614378576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615614398576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156143b8576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156143d8576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156143f8576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615614418576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615614439576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615614459576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615614478576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615614495576b048a170391f7dc42444e8fa20260801c5b60008460020b13156144b05780600019816144ac57fe5b0490505b6401000000008106156144c45760016144c7565b60005b60ff16602082901c0192505050919050565b6000836001600160a01b0316856001600160a01b031611156144f9579293925b846001600160a01b0316866001600160a01b0316116145245761451d858585614b0c565b9050614594565b836001600160a01b0316866001600160a01b0316101561458657600061454b878686614b0c565b9050600061455a878986614b78565b9050806001600160801b0316826001600160801b03161061457b578061457d565b815b92505050614594565b614591858584614b78565b90505b95945050505050565b600061148c8383614bbe565b600061148c8383614c84565b60006110c184846001600160a01b038516614cce565b8154600090821061460d5760405162461bcd60e51b8152600401808060200182810382526022815260200180615d1b6022913960400191505060405180910390fd5b82600001828154811061461c57fe5b9060005260206000200154905092915050565b600061148c8383614d65565b81546000908190831061467f5760405162461bcd60e51b8152600401808060200182810382526022815260200180615e976022913960400191505060405180910390fd5b600084600001848154811061469057fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816147515760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156147165781810151838201526020016146fe565b50505050905090810190601f1680156147435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061476457fe5b9060005260206000209060020201600101549150509392505050565b6000614794846001600160a01b0316613b62565b6147a0575060016110c1565b60006148f17f150b7a02000000000000000000000000000000000000000000000000000000006147ce613253565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561483557818101518382015260200161481d565b50505050905090810190601f1680156148625780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001615d3d603291396001600160a01b0388169190614e39565b9050600081806020019051602081101561490a57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001492505050949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b60208310614a0e5780518252601f1990920191602091820191016149ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614a70576040519150601f19603f3d011682016040523d82523d6000602084013e614a75565b606091505b5091509150818015614aa3575080511580614aa35750808060200190516020811015614aa057600080fd5b50515b6127cd576040805162461bcd60e51b815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60009081526001919091016020526040902054151590565b6000826001600160a01b0316846001600160a01b03161115614b2c579192915b6000614b58856001600160a01b0316856001600160a01b03166c010000000000000000000000006134d1565b9050614594614b7384838888036001600160a01b03166134d1565b614e48565b6000826001600160a01b0316846001600160a01b03161115614b98579192915b6110c1614b73836c010000000000000000000000008787036001600160a01b03166134d1565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614bf157fe5b9060005260206000200154905080876000018481548110614c0e57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080614c3e57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061148f565b600091505061148f565b6000614c908383614af4565b614cc65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561148f565b50600061148f565b600082815260018401602052604081205480614d335750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556134ca565b82856000016001830381548110614d4657fe5b90600052602060002090600202016001018190555060009150506134ca565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614d9857fe5b9060005260206000209060020201905080876000018481548110614db857fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080614df757fe5b600082815260208082206002600019909401938402018281556001908101839055929093558881528982019092526040822091909155945061148f9350505050565b60606110c18484600085614e5e565b806001600160801b038116811461077157600080fd5b606082471015614e9f5760405162461bcd60e51b8152600401808060200182810382526026815260200180615dba6026913960400191505060405180910390fd5b614ea885613b62565b614ef9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310614f375780518252601f199092019160209182019101614f18565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614f99576040519150601f19603f3d011682016040523d82523d6000602084013e614f9e565b606091505b5091509150614fae828286614fb9565b979650505050505050565b60608315614fc85750816134ca565b825115614fd85782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156147165781810151838201526020016146fe565b50805460018160011615610100020316600290046000825580601f106150455750615063565b601f0160209004906000526020600020908101906150639190615066565b50565b5b8082111561507b5760008155600101615067565b5090565b803561077181615cc4565b805161ffff8116811461077157600080fd5b803562ffffff8116811461077157600080fd5b6000602082840312156150c0578081fd5b81356134ca81615cc4565b600080604083850312156150dd578081fd5b82356150e881615cc4565b915060208301356150f881615cc4565b809150509250929050565b60008060008060808587031215615118578182fd5b843561512381615cc4565b9350602085013561513381615cc4565b92506151416040860161509c565b9150606085013561515181615cc4565b939692955090935050565b600080600060608486031215615170578081fd5b833561517b81615cc4565b9250602084013561518b81615cc4565b929592945050506040919091013590565b600080600080608085870312156151b1578182fd5b84356151bc81615cc4565b935060208501356151cc81615cc4565b925060408501359150606085013567ffffffffffffffff8111156151ee578182fd5b8501601f810187136151fe578182fd5b803561521161520c82615c76565b615c52565b818152886020838501011115615225578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215615255578182fd5b823561526081615cc4565b915060208301356150f881615cd9565b60008060408385031215615282578182fd5b823561528d81615cc4565b946020939093013593505050565b6000806000606084860312156152af578081fd5b83356152ba81615cc4565b92506020840135915060408401356152d181615cc4565b809150509250925092565b60008060008060008060c087890312156152f4578384fd5b86356152ff81615cc4565b95506020870135945060408701359350606087013561531d81615d0b565b9598949750929560808101359460a0909101359350915050565b60008060208385031215615349578182fd5b823567ffffffffffffffff80821115615360578384fd5b818501915085601f830112615373578384fd5b813581811115615381578485fd5b8660208083028501011115615394578485fd5b60209290920196919550909350505050565b6000602082840312156153b7578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146134ca578182fd5b6000602082840312156153f7578081fd5b81356134ca81615ce7565b600060208284031215615413578081fd5b815167ffffffffffffffff811115615429578182fd5b8201601f81018413615439578182fd5b805161544761520c82615c76565b81815285602083850101111561545b578384fd5b614594826020830160208601615c98565b60006080828403121561547d578081fd5b50919050565b600060a0828403121561547d578081fd5b600060c0828403121561547d578081fd5b600081830360808112156154b7578182fd5b6040516040810167ffffffffffffffff82821081831117156154d557fe5b8160405260608412156154e6578485fd5b60a08301935081841081851117156154fa57fe5b50826040528435925061550c83615cc4565b91825260208401359161551e83615cc4565b8260608301526155306040860161509c565b608083015281526155436060850161507f565b6020820152949350505050565b6000610160828403121561547d578081fd5b600060208284031215615573578081fd5b81356134ca81615cf6565b60008060408385031215615590578182fd5b825161559b81615cf6565b60208401519092506150f881615cf6565b600080600080600060a086880312156155c3578283fd5b85516155ce81615cf6565b80955050602086015193506040860151925060608601516155ee81615cf6565b60808701519092506155ff81615cf6565b809150509295509295909350565b600080600080600080600060e0888a031215615627578485fd5b875161563281615cc4565b602089015190975061564381615ce7565b95506156516040890161508a565b945061565f6060890161508a565b935061566d6080890161508a565b925060a088015161567d81615d0b565b60c089015190925061568e81615cd9565b8091505092959891949750929550565b6000602082840312156156af578081fd5b61148c8261509c565b6000602082840312156156c9578081fd5b5035919050565b600080604083850312156156e2578182fd5b8235915060208301356150f881615cc4565b60008060408385031215615706578182fd5b505080516020909101519092909150565b6000806000806060858703121561572c578182fd5b8435935060208501359250604085013567ffffffffffffffff80821115615751578384fd5b818701915087601f830112615764578384fd5b813581811115615772578485fd5b886020828501011115615783578485fd5b95989497505060200194505050565b600081518084526157aa816020860160208601615c98565b601f01601f19169290920160200192915050565b60020b9052565b6001600160801b03169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b60006001600160a01b03871682528560020b60208301528460020b60408301526001600160801b038416606083015260a06080830152614fae60a0830184615792565b6001600160a01b03959095168552600293840b60208601529190920b60408401526001600160801b03918216606084015216608082015260a00190565b6001600160a01b039390931683526001600160801b03918216602084015216604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015615911577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526158ff858351615792565b945092850192908501906001016158c5565b5092979650505050505050565b901515815260200190565b90815260200190565b6001600160a01b03929092168252602082015260400190565b600293840b81529190920b60208201526001600160801b03909116604082015260600190565b60006020825261148c6020830184615792565b6020808252600c908201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f507269636520736c69707061676520636865636b000000000000000000000000604082015260600190565b60208082526010908201527f496e76616c696420746f6b656e20494400000000000000000000000000000000604082015260600190565b6020808252600b908201527f4e6f7420636c6561726564000000000000000000000000000000000000000000604082015260600190565b815180516001600160a01b03908116835260208083015182168185015260409283015162ffffff1692840192909252920151909116606082015260800190565b6001600160801b039390931683526020830191909152604082015260600190565b9384526001600160801b039290921660208401526040830152606082015260800190565b918252602082015260400190565b6bffffffffffffffffffffffff8d1681526001600160a01b038c811660208301528b811660408301528a16606082015262ffffff89166080820152600288900b60a08201526101808101615ba760c08301896157be565b615bb460e08301886157c5565b8561010083015284610120830152615bd06101408301856157c5565b615bde6101608301846157c5565b9d9c50505050505050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112615c23578283fd5b83018035915067ffffffffffffffff821115615c3d578283fd5b602001915036819003821315613b0f57600080fd5b60405181810167ffffffffffffffff81118282101715615c6e57fe5b604052919050565b600067ffffffffffffffff821115615c8a57fe5b50601f01601f191660200190565b60005b83811015615cb3578181015183820152602001615c9b565b8381111561296d5750506000910152565b6001600160a01b038116811461506357600080fd5b801515811461506357600080fd5b8060020b811461506357600080fd5b6001600160801b038116811461506357600080fd5b60ff8116811461506357600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732315065726d69743a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a164736f6c6343000706000a\",\n  \"deployedBytecode\": \"0x6080604052600436106102895760003560e01c80636352211e11610153578063ac9650d8116100cb578063d34879971161007f578063e985e9c511610064578063e985e9c5146106f5578063f3995c6714610715578063fc6f7865146107285761030d565b8063d3487997146106c2578063df2ab5bb146106e25761030d565b8063c2e3140a116100b0578063c2e3140a1461067a578063c45a01551461068d578063c87b56dd146106a25761030d565b8063ac9650d81461063a578063b88d4fde1461065a5761030d565b8063883164561161012257806399fbab881161010757806399fbab88146105cf578063a22cb46514610607578063a4a78f0c146106275761030d565b8063883164561461059757806395d89b41146105ba5761030d565b80636352211e1461052f5780636c0360eb1461054f57806370a08231146105645780637ac2ff7b146105845761030d565b806323b872dd1161020157806342966c68116101b557806349404b7c1161019a57806349404b7c146104e75780634aa4a4fc146104fa5780634f6ccce71461050f5761030d565b806342966c68146104c15780634659a494146104d45761030d565b806330adf81f116101e657806330adf81f146104775780633644e5151461048c57806342842e0e146104a15761030d565b806323b872dd146104375780632f745c59146104575761030d565b80630c49ccbe1161025857806313ead5621161023d57806313ead562146103e057806318160ddd146103f3578063219f5d17146104155761030d565b80630c49ccbe146103b757806312210e8a146103d85761030d565b806301ffc9a71461031257806306fdde0314610348578063081812fc1461036a578063095ea7b3146103975761030d565b3661030d57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461030b576040805162461bcd60e51b815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561031e57600080fd5b5061033261032d3660046153a6565b61073b565b60405161033f919061591e565b60405180910390f35b34801561035457600080fd5b5061035d610776565b60405161033f9190615971565b34801561037657600080fd5b5061038a6103853660046156b8565b61080c565b60405161033f91906157e2565b3480156103a357600080fd5b5061030b6103b2366004615270565b610868565b6103ca6103c5366004615483565b61093e565b60405161033f929190615b42565b61030b610daa565b61038a6103ee366004615103565b610dbc565b3480156103ff57600080fd5b506104086110c9565b60405161033f9190615929565b610428610423366004615494565b6110da565b60405161033f93929190615afd565b34801561044357600080fd5b5061030b61045236600461515c565b611413565b34801561046357600080fd5b50610408610472366004615270565b61146a565b34801561048357600080fd5b50610408611495565b34801561049857600080fd5b506104086114b9565b3480156104ad57600080fd5b5061030b6104bc36600461515c565b611577565b61030b6104cf3660046156b8565b611592565b61030b6104e23660046152dc565b611661565b61030b6104f53660046156d0565b611714565b34801561050657600080fd5b5061038a611894565b34801561051b57600080fd5b5061040861052a3660046156b8565b6118b8565b34801561053b57600080fd5b5061038a61054a3660046156b8565b6118ce565b34801561055b57600080fd5b5061035d6118f6565b34801561057057600080fd5b5061040861057f3660046150af565b6118fb565b61030b6105923660046152dc565b611963565b6105aa6105a5366004615550565b611e0f565b60405161033f9493929190615b1e565b3480156105c657600080fd5b5061035d612370565b3480156105db57600080fd5b506105ef6105ea3660046156b8565b6123d1565b60405161033f9c9b9a99989796959493929190615b50565b34801561061357600080fd5b5061030b610622366004615243565b612600565b61030b6106353660046152dc565b612723565b61064d610648366004615337565b6127d5565b60405161033f91906158a0565b34801561066657600080fd5b5061030b61067536600461519c565b612915565b61030b6106883660046152dc565b612973565b34801561069957600080fd5b5061038a612a1b565b3480156106ae57600080fd5b5061035d6106bd3660046156b8565b612a3f565b3480156106ce57600080fd5b5061030b6106dd366004615717565b612b0e565b61030b6106f036600461529b565b612b8c565b34801561070157600080fd5b506103326107103660046150cb565b612c6f565b61030b6107233660046152dc565b612c9d565b6103ca61073636600461546c565b612d28565b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b820191906000526020600020905b8154815290600101906020018083116107e557829003601f168201915b5050505050905090565b600061081782613246565b61083c5760405162461bcd60e51b8152600401610833906159bb565b60405180910390fd5b506000908152600c60205260409020546c0100000000000000000000000090046001600160a01b031690565b6000610873826118ce565b9050806001600160a01b0316836001600160a01b031614156108c65760405162461bcd60e51b8152600401808060200182810382526021815260200180615ee26021913960400191505060405180910390fd5b806001600160a01b03166108d8613253565b6001600160a01b031614806108f457506108f481610710613253565b61092f5760405162461bcd60e51b8152600401808060200182810382526038815260200180615e0c6038913960400191505060405180910390fd5b6109398383613257565b505050565b600080823561094d33826132db565b6109695760405162461bcd60e51b815260040161083390615984565b836080013580610977613377565b11156109ca576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b60006109dc6040870160208801615562565b6001600160801b0316116109ef57600080fd5b84356000908152600c602090815260409182902060018101549092600160801b9091046001600160801b031691610a2a918901908901615562565b6001600160801b0316816001600160801b03161015610a4857600080fd5b60018281015469ffffffffffffffffffff166000908152600b60209081526040808320815160608101835281546001600160a01b039081168252919095015490811692850192909252600160a01b90910462ffffff1690830152610acc7f00000000000000000000000000000000000000000000000000000000000000008361337b565b60018501549091506001600160a01b0382169063a34123a7906a01000000000000000000008104600290810b91600160681b9004900b610b1260408e0160208f01615562565b6040518463ffffffff1660e01b8152600401610b309392919061594b565b6040805180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8191906156f4565b909850965060408901358810801590610b9e575088606001358710155b610bba5760405162461bcd60e51b815260040161083390615a18565b6001840154600090610bea9030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b8152600401610c1b9190615929565b60a06040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b91906155ac565b50509250925050610c9087600201548303876001600160801b0316600160801b6134d1565b6004880180546fffffffffffffffffffffffffffffffff198116928e016001600160801b039182160181169290921790556003880154610cda91908303908816600160801b6134d1565b6004880180546001600160801b03808216938e01600160801b9283900482160116029190911790556002870182905560038701819055610d2060408d0160208e01615562565b86038760010160106101000a8154816001600160801b0302191690836001600160801b031602179055508b600001357f26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b48d6020016020810190610d839190615562565b8d8d604051610d9493929190615afd565b60405180910390a2505050505050505050915091565b4715610dba57610dba3347613580565b565b6000836001600160a01b0316856001600160a01b031610610ddc57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631698ee828686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff168152602001935050505060206040518083038186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d6020811015610e9157600080fd5b505190506001600160a01b038116610fe0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a16712958686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff1681526020019350505050602060405180830381600087803b158015610f3057600080fd5b505af1158015610f44573d6000803e3d6000fd5b505050506040513d6020811015610f5a57600080fd5b5051604080517ff637731d0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519293509083169163f637731d9160248082019260009290919082900301818387803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050506110c1565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d60e081101561104557600080fd5b505190506001600160a01b0381166110bf57816001600160a01b031663f637731d846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b505050505b505b949350505050565b60006110d56002613689565b905090565b60008060008360a00135806110ed613377565b1115611140576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b84356000908152600c6020908152604080832060018082015469ffffffffffffffffffff81168652600b855283862084516060808201875282546001600160a01b039081168352929094015480831682890190815262ffffff600160a01b9092048216838901908152885161014081018a528451861681529151909416818a01529251168287015230828501526a01000000000000000000008304600290810b810b608080850191909152600160681b909404810b900b60a0830152958c013560c0820152938b013560e0850152908a0135610100840152890135610120830152929061122c90613694565b6001870154939a50919850965091506000906112669030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016112979190615929565b60a06040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e791906155ac565b50509250925050611323866002015483038760010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b6004870180546001600160801b0380821690930183166fffffffffffffffffffffffffffffffff19909116179055600387015460018801546113739291840391600160801b9182900416906134d1565b6004870180546001600160801b03600160801b80830482169094018116840291811691909117909155600288018490556003880183905560018801805483810483168e018316909302929091169190911790556040518b35907f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f906113fd908d908d908d90615afd565b60405180910390a2505050505050509193909250565b61142461141e613253565b826132db565b61145f5760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b6109398383836138cf565b6001600160a01b038216600090815260016020526040812061148c9083613a1b565b90505b92915050565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611526613a27565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b61093983838360405180602001604052806000815250612915565b8061159d33826132db565b6115b95760405162461bcd60e51b815260040161083390615984565b6000828152600c602052604090206001810154600160801b90046001600160801b03161580156115f4575060048101546001600160801b0316155b801561161257506004810154600160801b90046001600160801b0316155b61162e5760405162461bcd60e51b815260040161083390615a86565b6000838152600c602052604081208181556001810182905560028101829055600381018290556004015561093983613a2b565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e4810183905290516001600160a01b03881691638fcbaf0c9161010480830192600092919082900301818387803b1580156116f457600080fd5b505af1158015611708573d6000803e3d6000fd5b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d60208110156117ad57600080fd5b5051905082811015611806576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610939577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561187257600080fd5b505af1158015611886573d6000803e3d6000fd5b505050506109398282613580565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806118c6600284613af8565b509392505050565b600061148f82604051806060016040528060298152602001615e6e6029913960029190613b16565b606090565b60006001600160a01b0382166119425760405162461bcd60e51b815260040180806020018281038252602a815260200180615e44602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061148f90613689565b8361196c613377565b11156119bf576040805162461bcd60e51b815260206004820152600e60248201527f5065726d69742065787069726564000000000000000000000000000000000000604482015290519081900360640190fd5b60006119c96114b9565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad88886119f581613b23565b604080516020808201969096526001600160a01b03909416848201526060840192909252608083015260a08083018a90528151808403909101815260c0830182528051908401207f190100000000000000000000000000000000000000000000000000000000000060e084015260e283019490945261010280830194909452805180830390940184526101229091019052815191012090506000611a98876118ce565b9050806001600160a01b0316886001600160a01b03161415611aeb5760405162461bcd60e51b8152600401808060200182810382526027815260200180615d6f6027913960400191505060405180910390fd5b611af481613b62565b15611ccf576040805160208082018790528183018690527fff0000000000000000000000000000000000000000000000000000000000000060f889901b16606083015282516041818403018152606183018085527f1626ba7e0000000000000000000000000000000000000000000000000000000090526065830186815260858401948552815160a585015281516001600160a01b03871695631626ba7e958995919260c59091019185019080838360005b83811015611bbe578181015183820152602001611ba6565b50505050905090810190601f168015611beb5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611c0957600080fd5b505afa158015611c1d573d6000803e3d6000fd5b505050506040513d6020811015611c3357600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f1626ba7e0000000000000000000000000000000000000000000000000000000014611cca576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b611dfb565b600060018387878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611d2b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d93576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316816001600160a01b031614611df9576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b505b611e058888613257565b5050505050505050565b60008060008084610140013580611e24613377565b1115611e77576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b604080516101408101909152600090611f439080611e9860208b018b6150af565b6001600160a01b03168152602001896020016020810190611eb991906150af565b6001600160a01b03168152602001611ed760608b0160408c0161569e565b62ffffff168152306020820152604001611ef760808b0160608c016153e6565b60020b8152602001611f0f60a08b0160808c016153e6565b60020b81526020018960a0013581526020018960c0013581526020018960e001358152602001896101000135815250613694565b92975090955093509050611fb7611f6261014089016101208a016150af565b600d80547fffffffffffffffffffff000000000000000000000000000000000000000000008116600175ffffffffffffffffffffffffffffffffffffffffffff92831690810190921617909155975087613b68565b6000611fe230611fcd60808b0160608c016153e6565b611fdd60a08c0160808d016153e6565b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016120139190615929565b60a06040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206391906155ac565b5050925092505060006120dc8560405180606001604052808e600001602081019061208e91906150af565b6001600160a01b031681526020018e60200160208101906120af91906150af565b6001600160a01b031681526020018e60400160208101906120d0919061569e565b62ffffff169052613c96565b905060405180610140016040528060006bffffffffffffffffffffffff16815260200160006001600160a01b031681526020018269ffffffffffffffffffff1681526020018c606001602081019061213491906153e6565b60020b815260200161214c60a08e0160808f016153e6565b60020b81526020018a6001600160801b0316815260200184815260200183815260200160006001600160801b0316815260200160006001600160801b0316815250600c60008c815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550606082015181600101600a6101000a81548162ffffff021916908360020b62ffffff160217905550608082015181600101600d6101000a81548162ffffff021916908360020b62ffffff16021790555060a08201518160010160106101000a8154816001600160801b0302191690836001600160801b0316021790555060c0820151816002015560e082015181600301556101008201518160040160006101000a8154816001600160801b0302191690836001600160801b031602179055506101208201518160040160106101000a8154816001600160801b0302191690836001600160801b03160217905550905050897f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f8a8a8a60405161235b93929190615afd565b60405180910390a25050505050509193509193565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b6000818152600c6020908152604080832081516101408101835281546bffffffffffffffffffffffff811682526001600160a01b036c010000000000000000000000009091041693810193909352600181015469ffffffffffffffffffff81169284018390526a01000000000000000000008104600290810b810b810b6060860152600160681b8204810b810b810b60808601526001600160801b03600160801b92839004811660a08701529083015460c0860152600383015460e0860152600490920154808316610100860152041661012083015282918291829182918291829182918291829182918291906124da5760405162461bcd60e51b815260040161083390615a4f565b6000600b6000836040015169ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905081600001518260200151826000015183602001518460400151866060015187608001518860a001518960c001518a60e001518b61010001518c61012001519d509d509d509d509d509d509d509d509d509d509d509d50505091939597999b5091939597999b565b612608613253565b6001600160a01b0316826001600160a01b0316141561266e576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806005600061267b613253565b6001600160a01b0390811682526020808301939093526040918201600090812091871680825291909352912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091556126dd613253565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051600019916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b15801561278d57600080fd5b505afa1580156127a1573d6000803e3d6000fd5b505050506040513d60208110156127b757600080fd5b505110156127cd576127cd868686868686611661565b505050505050565b60608167ffffffffffffffff811180156127ee57600080fd5b5060405190808252806020026020018201604052801561282257816020015b606081526020019060019003908161280d5790505b50905060005b8281101561290e576000803086868581811061284057fe5b90506020028101906128529190615bef565b6040516128609291906157d2565b600060405180830381855af49150503d806000811461289b576040519150601f19603f3d011682016040523d82523d6000602084013e6128a0565b606091505b5091509150816128ec576044815110156128b957600080fd5b600481019050808060200190518101906128d39190615402565b60405162461bcd60e51b81526004016108339190615971565b808484815181106128f957fe5b60209081029190910101525050600101612828565b5092915050565b612926612920613253565b836132db565b6129615760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b61296d84848484613de6565b50505050565b604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152905186916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b1580156129db57600080fd5b505afa1580156129ef573d6000803e3d6000fd5b505050506040513d6020811015612a0557600080fd5b505110156127cd576127cd868686868686612c9d565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060612a4a82613246565b612a5357600080fd5b6040517fe9dc63750000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e9dc637590612aba9030908690600401615932565b60006040518083038186803b158015612ad257600080fd5b505afa158015612ae6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261148f9190810190615402565b6000612b1c828401846154a5565b9050612b4c7f00000000000000000000000000000000000000000000000000000000000000008260000151613e38565b508415612b67578051516020820151612b6791903388613e5b565b8315612b8557612b8581600001516020015182602001513387613e5b565b5050505050565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612bdb57600080fd5b505afa158015612bef573d6000803e3d6000fd5b505050506040513d6020811015612c0557600080fd5b5051905082811015612c5e576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561296d5761296d848383613feb565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c4810183905290516001600160a01b0388169163d505accf9160e480830192600092919082900301818387803b1580156116f457600080fd5b6000808235612d3733826132db565b612d535760405162461bcd60e51b815260040161083390615984565b6000612d656060860160408701615562565b6001600160801b03161180612d9257506000612d876080860160608701615562565b6001600160801b0316115b612d9b57600080fd5b600080612dae60408701602088016150af565b6001600160a01b031614612dd157612dcc60408601602087016150af565b612dd3565b305b85356000908152600c6020908152604080832060018082015469ffffffffffffffffffff168552600b8452828520835160608101855281546001600160a01b039081168252919092015490811694820194909452600160a01b90930462ffffff169183019190915292935090612e697f00000000000000000000000000000000000000000000000000000000000000008361337b565b600484015460018501549192506001600160801b0380821692600160801b92839004821692900416156130865760018501546040517fa34123a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385169163a34123a791612f00916a01000000000000000000008104600290810b92600160681b909204900b9060009060040161594b565b6040805180830381600087803b158015612f1957600080fd5b505af1158015612f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5191906156f4565b5050600185015460009081906001600160a01b0386169063514ea4bf90612f969030906a01000000000000000000008104600290810b91600160681b9004900b613477565b6040518263ffffffff1660e01b8152600401612fb29190615929565b60a06040518083038186803b158015612fca57600080fd5b505afa158015612fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300291906155ac565b5050925092505061303e876002015483038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b84019350613077876003015482038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b60028801929092556003870155015b6000806001600160801b0384166130a360608e0160408f01615562565b6001600160801b0316116130c6576130c160608d0160408e01615562565b6130c8565b835b836001600160801b03168d60600160208101906130e59190615562565b6001600160801b0316116131085761310360808e0160608f01615562565b61310a565b835b60018901546040517f4f1eb3d80000000000000000000000000000000000000000000000000000000081529294509092506001600160a01b03871691634f1eb3d89161317d918c916a01000000000000000000008104600290810b92600160681b909204900b9088908890600401615839565b6040805180830381600087803b15801561319657600080fd5b505af11580156131aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ce919061557e565b6004890180546fffffffffffffffffffffffffffffffff196001600160801b03918216600160801b878a0384160217168689038216179091556040519281169d50169a508c35907f40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f0190610d94908b9086908690615876565b600061148f60028361417b565b3390565b6000818152600c6020526040902080546bffffffffffffffffffffffff166c010000000000000000000000006001600160a01b0385169081029190911790915581906132a2826118ce565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006132e682613246565b6133215760405162461bcd60e51b815260040180806020018281038252602c815260200180615de0602c913960400191505060405180910390fd5b600061332c836118ce565b9050806001600160a01b0316846001600160a01b031614806133675750836001600160a01b031661335c8461080c565b6001600160a01b0316145b806110c157506110c18185612c6f565b4290565b600081602001516001600160a01b031682600001516001600160a01b0316106133a357600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516bffffffffffffffffffffffff19606086901b16602080830191909152600285810b60e890811b60348501529085900b901b60378301528251601a818403018152603a90920190925280519101205b9392505050565b600080806000198587098686029250828110908390030390508061350757600084116134fc57600080fd5b5082900490506134ca565b80841161351357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106135cc5780518252601f1990920191602091820191016135ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461362e576040519150601f19603f3d011682016040523d82523d6000602084013e613633565b606091505b5050905080610939576040805162461bcd60e51b815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148f82614187565b6000806000806000604051806060016040528087600001516001600160a01b0316815260200187602001516001600160a01b03168152602001876040015162ffffff1681525090506137067f00000000000000000000000000000000000000000000000000000000000000008261337b565b91506000826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561374357600080fd5b505afa158015613757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377b919061560d565b50505050505090506000613792886080015161418b565b905060006137a38960a0015161418b565b90506137ba8383838c60c001518d60e001516144d9565b9750505050816001600160a01b0316633c8a7d8d876060015188608001518960a00151896040518060400160405280888152602001336001600160a01b031681525060405160200161380c9190615abd565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161383b9594939291906157f6565b6040805180830381600087803b15801561385457600080fd5b505af1158015613868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388c91906156f4565b610100880151919550935084108015906138ab57508561012001518310155b6138c75760405162461bcd60e51b815260040161083390615a18565b509193509193565b826001600160a01b03166138e2826118ce565b6001600160a01b0316146139275760405162461bcd60e51b8152600401808060200182810382526029815260200180615eb96029913960400191505060405180910390fd5b6001600160a01b03821661396c5760405162461bcd60e51b8152600401808060200182810382526024815260200180615d966024913960400191505060405180910390fd5b613977838383610939565b613982600082613257565b6001600160a01b03831660009081526001602052604090206139a4908261459d565b506001600160a01b03821660009081526001602052604090206139c790826145a9565b506139d4600282846145b5565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061148c83836145cb565b4690565b6000613a36826118ce565b9050613a4481600084610939565b613a4f600083613257565b6000828152600860205260409020546002600019610100600184161502019091160415613a8d576000828152600860205260408120613a8d9161501f565b6001600160a01b0381166000908152600160205260409020613aaf908361459d565b50613abb60028361462f565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000808080613b07868661463b565b909450925050505b9250929050565b60006110c18484846146b6565b6000908152600c6020526040902080546bffffffffffffffffffffffff19811660016bffffffffffffffffffffffff9283169081019092161790915590565b3b151590565b6001600160a01b038216613bc3576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b613bcc81613246565b15613c1e576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b613c2a60008383610939565b6001600160a01b0382166000908152600160205260409020613c4c90826145a9565b50613c59600282846145b5565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0382166000908152600a602052604090205469ffffffffffffffffffff168061148f5750600d8054600169ffffffffffffffffffff76010000000000000000000000000000000000000000000080840482168381019092160275ffffffffffffffffffffffffffffffffffffffffffff909316929092179092556001600160a01b038085166000908152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001686179055848352600b825291829020865181549085167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825591870151950180549287015162ffffff16600160a01b027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff969094169290911691909117939093161790915592915050565b613df18484846138cf565b613dfd84848484614780565b61296d5760405162461bcd60e51b8152600401808060200182810382526032815260200180615d3d6032913960400191505060405180910390fd5b6000613e44838361337b565b9050336001600160a01b0382161461148f57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148015613e9c5750804710155b15613fbe577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613efc57600080fd5b505af1158015613f10573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613f8c57600080fd5b505af1158015613fa0573d6000803e3d6000fd5b505050506040513d6020811015613fb657600080fd5b5061296d9050565b6001600160a01b038316301415613fdf57613fda848383613feb565b61296d565b61296d8484848461495c565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b602083106140955780518252601f199092019160209182019101614076565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146140f7576040519150601f19603f3d011682016040523d82523d6000602084013e6140fc565b606091505b509150915081801561412a57508051158061412a575080806020019051602081101561412757600080fd5b50515b612b85576040805162461bcd60e51b815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148c8383614af4565b5490565b60008060008360020b126141a2578260020b6141aa565b8260020b6000035b9050620d89e8811115614204576040805162461bcd60e51b815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001821661421857600160801b61422a565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600282161561425e576ffff97272373d413259a46990580e213a0260801c5b600482161561427d576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561429c576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156142bb576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156142da576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156142f9576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615614318576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615614338576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615614358576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615614378576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615614398576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156143b8576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156143d8576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156143f8576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615614418576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615614439576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615614459576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615614478576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615614495576b048a170391f7dc42444e8fa20260801c5b60008460020b13156144b05780600019816144ac57fe5b0490505b6401000000008106156144c45760016144c7565b60005b60ff16602082901c0192505050919050565b6000836001600160a01b0316856001600160a01b031611156144f9579293925b846001600160a01b0316866001600160a01b0316116145245761451d858585614b0c565b9050614594565b836001600160a01b0316866001600160a01b0316101561458657600061454b878686614b0c565b9050600061455a878986614b78565b9050806001600160801b0316826001600160801b03161061457b578061457d565b815b92505050614594565b614591858584614b78565b90505b95945050505050565b600061148c8383614bbe565b600061148c8383614c84565b60006110c184846001600160a01b038516614cce565b8154600090821061460d5760405162461bcd60e51b8152600401808060200182810382526022815260200180615d1b6022913960400191505060405180910390fd5b82600001828154811061461c57fe5b9060005260206000200154905092915050565b600061148c8383614d65565b81546000908190831061467f5760405162461bcd60e51b8152600401808060200182810382526022815260200180615e976022913960400191505060405180910390fd5b600084600001848154811061469057fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816147515760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156147165781810151838201526020016146fe565b50505050905090810190601f1680156147435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061476457fe5b9060005260206000209060020201600101549150509392505050565b6000614794846001600160a01b0316613b62565b6147a0575060016110c1565b60006148f17f150b7a02000000000000000000000000000000000000000000000000000000006147ce613253565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561483557818101518382015260200161481d565b50505050905090810190601f1680156148625780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001615d3d603291396001600160a01b0388169190614e39565b9050600081806020019051602081101561490a57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001492505050949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b60208310614a0e5780518252601f1990920191602091820191016149ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614a70576040519150601f19603f3d011682016040523d82523d6000602084013e614a75565b606091505b5091509150818015614aa3575080511580614aa35750808060200190516020811015614aa057600080fd5b50515b6127cd576040805162461bcd60e51b815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60009081526001919091016020526040902054151590565b6000826001600160a01b0316846001600160a01b03161115614b2c579192915b6000614b58856001600160a01b0316856001600160a01b03166c010000000000000000000000006134d1565b9050614594614b7384838888036001600160a01b03166134d1565b614e48565b6000826001600160a01b0316846001600160a01b03161115614b98579192915b6110c1614b73836c010000000000000000000000008787036001600160a01b03166134d1565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614bf157fe5b9060005260206000200154905080876000018481548110614c0e57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080614c3e57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061148f565b600091505061148f565b6000614c908383614af4565b614cc65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561148f565b50600061148f565b600082815260018401602052604081205480614d335750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556134ca565b82856000016001830381548110614d4657fe5b90600052602060002090600202016001018190555060009150506134ca565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614d9857fe5b9060005260206000209060020201905080876000018481548110614db857fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080614df757fe5b600082815260208082206002600019909401938402018281556001908101839055929093558881528982019092526040822091909155945061148f9350505050565b60606110c18484600085614e5e565b806001600160801b038116811461077157600080fd5b606082471015614e9f5760405162461bcd60e51b8152600401808060200182810382526026815260200180615dba6026913960400191505060405180910390fd5b614ea885613b62565b614ef9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310614f375780518252601f199092019160209182019101614f18565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614f99576040519150601f19603f3d011682016040523d82523d6000602084013e614f9e565b606091505b5091509150614fae828286614fb9565b979650505050505050565b60608315614fc85750816134ca565b825115614fd85782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156147165781810151838201526020016146fe565b50805460018160011615610100020316600290046000825580601f106150455750615063565b601f0160209004906000526020600020908101906150639190615066565b50565b5b8082111561507b5760008155600101615067565b5090565b803561077181615cc4565b805161ffff8116811461077157600080fd5b803562ffffff8116811461077157600080fd5b6000602082840312156150c0578081fd5b81356134ca81615cc4565b600080604083850312156150dd578081fd5b82356150e881615cc4565b915060208301356150f881615cc4565b809150509250929050565b60008060008060808587031215615118578182fd5b843561512381615cc4565b9350602085013561513381615cc4565b92506151416040860161509c565b9150606085013561515181615cc4565b939692955090935050565b600080600060608486031215615170578081fd5b833561517b81615cc4565b9250602084013561518b81615cc4565b929592945050506040919091013590565b600080600080608085870312156151b1578182fd5b84356151bc81615cc4565b935060208501356151cc81615cc4565b925060408501359150606085013567ffffffffffffffff8111156151ee578182fd5b8501601f810187136151fe578182fd5b803561521161520c82615c76565b615c52565b818152886020838501011115615225578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215615255578182fd5b823561526081615cc4565b915060208301356150f881615cd9565b60008060408385031215615282578182fd5b823561528d81615cc4565b946020939093013593505050565b6000806000606084860312156152af578081fd5b83356152ba81615cc4565b92506020840135915060408401356152d181615cc4565b809150509250925092565b60008060008060008060c087890312156152f4578384fd5b86356152ff81615cc4565b95506020870135945060408701359350606087013561531d81615d0b565b9598949750929560808101359460a0909101359350915050565b60008060208385031215615349578182fd5b823567ffffffffffffffff80821115615360578384fd5b818501915085601f830112615373578384fd5b813581811115615381578485fd5b8660208083028501011115615394578485fd5b60209290920196919550909350505050565b6000602082840312156153b7578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146134ca578182fd5b6000602082840312156153f7578081fd5b81356134ca81615ce7565b600060208284031215615413578081fd5b815167ffffffffffffffff811115615429578182fd5b8201601f81018413615439578182fd5b805161544761520c82615c76565b81815285602083850101111561545b578384fd5b614594826020830160208601615c98565b60006080828403121561547d578081fd5b50919050565b600060a0828403121561547d578081fd5b600060c0828403121561547d578081fd5b600081830360808112156154b7578182fd5b6040516040810167ffffffffffffffff82821081831117156154d557fe5b8160405260608412156154e6578485fd5b60a08301935081841081851117156154fa57fe5b50826040528435925061550c83615cc4565b91825260208401359161551e83615cc4565b8260608301526155306040860161509c565b608083015281526155436060850161507f565b6020820152949350505050565b6000610160828403121561547d578081fd5b600060208284031215615573578081fd5b81356134ca81615cf6565b60008060408385031215615590578182fd5b825161559b81615cf6565b60208401519092506150f881615cf6565b600080600080600060a086880312156155c3578283fd5b85516155ce81615cf6565b80955050602086015193506040860151925060608601516155ee81615cf6565b60808701519092506155ff81615cf6565b809150509295509295909350565b600080600080600080600060e0888a031215615627578485fd5b875161563281615cc4565b602089015190975061564381615ce7565b95506156516040890161508a565b945061565f6060890161508a565b935061566d6080890161508a565b925060a088015161567d81615d0b565b60c089015190925061568e81615cd9565b8091505092959891949750929550565b6000602082840312156156af578081fd5b61148c8261509c565b6000602082840312156156c9578081fd5b5035919050565b600080604083850312156156e2578182fd5b8235915060208301356150f881615cc4565b60008060408385031215615706578182fd5b505080516020909101519092909150565b6000806000806060858703121561572c578182fd5b8435935060208501359250604085013567ffffffffffffffff80821115615751578384fd5b818701915087601f830112615764578384fd5b813581811115615772578485fd5b886020828501011115615783578485fd5b95989497505060200194505050565b600081518084526157aa816020860160208601615c98565b601f01601f19169290920160200192915050565b60020b9052565b6001600160801b03169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b60006001600160a01b03871682528560020b60208301528460020b60408301526001600160801b038416606083015260a06080830152614fae60a0830184615792565b6001600160a01b03959095168552600293840b60208601529190920b60408401526001600160801b03918216606084015216608082015260a00190565b6001600160a01b039390931683526001600160801b03918216602084015216604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015615911577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526158ff858351615792565b945092850192908501906001016158c5565b5092979650505050505050565b901515815260200190565b90815260200190565b6001600160a01b03929092168252602082015260400190565b600293840b81529190920b60208201526001600160801b03909116604082015260600190565b60006020825261148c6020830184615792565b6020808252600c908201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f507269636520736c69707061676520636865636b000000000000000000000000604082015260600190565b60208082526010908201527f496e76616c696420746f6b656e20494400000000000000000000000000000000604082015260600190565b6020808252600b908201527f4e6f7420636c6561726564000000000000000000000000000000000000000000604082015260600190565b815180516001600160a01b03908116835260208083015182168185015260409283015162ffffff1692840192909252920151909116606082015260800190565b6001600160801b039390931683526020830191909152604082015260600190565b9384526001600160801b039290921660208401526040830152606082015260800190565b918252602082015260400190565b6bffffffffffffffffffffffff8d1681526001600160a01b038c811660208301528b811660408301528a16606082015262ffffff89166080820152600288900b60a08201526101808101615ba760c08301896157be565b615bb460e08301886157c5565b8561010083015284610120830152615bd06101408301856157c5565b615bde6101608301846157c5565b9d9c50505050505050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112615c23578283fd5b83018035915067ffffffffffffffff821115615c3d578283fd5b602001915036819003821315613b0f57600080fd5b60405181810167ffffffffffffffff81118282101715615c6e57fe5b604052919050565b600067ffffffffffffffff821115615c8a57fe5b50601f01601f191660200190565b60005b83811015615cb3578181015183820152602001615c9b565b8381111561296d5750506000910152565b6001600160a01b038116811461506357600080fd5b801515811461506357600080fd5b8060020b811461506357600080fd5b6001600160801b038116811461506357600080fd5b60ff8116811461506357600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732315065726d69743a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a164736f6c6343000706000a\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ISelfPermit\",\n  \"sourceName\": \"contracts/interfaces/ISelfPermit.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermit\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowed\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowedIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IPeripheryPaymentsWithFee\",\n  \"sourceName\": \"contracts/interfaces/IPeripheryPaymentsWithFee.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"refundETH\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeBips\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"feeRecipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepTokenWithFee\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeBips\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"feeRecipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9WithFee\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Quoter\",\n  \"sourceName\": \"contracts/lens/Quoter.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_WETH9\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH9\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quoteExactInput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenIn\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenOut\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint24\",\n          \"name\": \"fee\",\n          \"type\": \"uint24\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceLimitX96\",\n          \"type\": \"uint160\"\n        }\n      ],\n      \"name\": \"quoteExactInputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quoteExactOutput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenIn\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenOut\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint24\",\n          \"name\": \"fee\",\n          \"type\": \"uint24\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceLimitX96\",\n          \"type\": \"uint160\"\n        }\n      ],\n      \"name\": \"quoteExactOutputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount0Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount1Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"uniswapV3SwapCallback\",\n      \"outputs\": [],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x60c060405234801561001057600080fd5b506040516112e53803806112e583398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c6112176100ce60003980610342525080610366528061058652806106d552506112176000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100d3578063cdca1753146100db578063f7729d43146100ee578063fa461e33146101015761007d565b80632f80bb1d1461008257806330d07f21146100ab5780634aa4a4fc146100be575b600080fd5b610095610090366004610e9e565b610116565b6040516100a29190611148565b60405180910390f35b6100956100b9366004610e30565b61017b565b6100c6610340565b6040516100a29190611084565b6100c6610364565b6100956100e9366004610e9e565b610388565b6100956100fc366004610e30565b6103d6565b61011461010f366004610f04565b610555565b005b60005b600061012484610660565b9050600080600061013487610668565b92509250925061014882848389600061017b565b955083156101605761015987610699565b965061016c565b85945050505050610175565b50505050610119565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff808616878216109083166101a65760008490555b6101b18787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836101d78861070c565b60000373ffffffffffffffffffffffffffffffffffffffff8816156101fc5787610222565b8561021b5773fffd8963efd1fc6a506488495d951d5263988d25610222565b6401000276a45b8b8b8e6040516020016102379392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102669594939291906110a5565b6040805180830381600087803b15801561027f57600080fd5b505af19250505080156102cd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102ca91810190610ee1565b60015b610333573d8080156102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5073ffffffffffffffffffffffffffffffffffffffff841661032157600080555b61032a8161073e565b92505050610337565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b600061039684610660565b905060008060006103a687610668565b9250925092506103ba8383838960006103d6565b95508315610160576103cb87610699565b96505050505061038b565b600073ffffffffffffffffffffffffffffffffffffffff808616908716106103ff8787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836104258861070c565b73ffffffffffffffffffffffffffffffffffffffff881615610447578761046d565b856104665773fffd8963efd1fc6a506488495d951d5263988d2561046d565b6401000276a45b8c8b8d6040516020016104829392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016104b19594939291906110a5565b6040805180830381600087803b1580156104ca57600080fd5b505af1925050508015610518575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261051591810190610ee1565b60015b610333573d808015610546576040519150601f19603f3d011682016040523d82523d6000602084013e61054b565b606091505b5061032a8161073e565b60008313806105645750600082135b61056d57600080fd5b600080600061057b84610668565b9250925092506105ad7f00000000000000000000000000000000000000000000000000000000000000008484846107ef565b5060008060008089136105f3578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a600003610628565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b925092509250821561063f57604051818152602081fd5b6000541561065557600054811461065557600080fd5b604051828152602081fd5b516042111590565b600080806106768482610805565b9250610683846014610905565b9050610690846017610805565b91509193909250565b80516060906101759083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9016109f5565b60006107047f00000000000000000000000000000000000000000000000000000000000000006106ff868686610bdc565b610c59565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061073a57600080fd5b5090565b600081516020146107db5760448251101561078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611111565b60405180910390fd5b600482019150818060200190518101906107a89190610f52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078591906110f7565b818060200190518101906101759190610fbc565b600061033785610800868686610bdc565b610d8f565b60008182601401101561087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60008182600301101561097957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b81600301835110156109ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610a6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610ada57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610b6b5760405191506000825260208201604052610bd3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ba4578051835260209283019201610b8c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b610be4610dbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c1c579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c9b57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000610d9b8383610c59565b90503373ffffffffffffffffffffffffffffffffffffffff82161461017557600080fd5b604080516060810182526000808252602082018190529181019190915290565b600082601f830112610def578081fd5b8135610e02610dfd82611175565b611151565b818152846020838601011115610e16578283fd5b816020850160208301379081016020019190915292915050565b600080600080600060a08688031215610e47578081fd5b8535610e52816111e5565b94506020860135610e62816111e5565b9350604086013562ffffff81168114610e79578182fd5b9250606086013591506080860135610e90816111e5565b809150509295509295909350565b60008060408385031215610eb0578182fd5b823567ffffffffffffffff811115610ec6578283fd5b610ed285828601610ddf565b95602094909401359450505050565b60008060408385031215610ef3578182fd5b505080516020909101519092909150565b600080600060608486031215610f18578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610f3c578182fd5b610f4886828701610ddf565b9150509250925092565b600060208284031215610f63578081fd5b815167ffffffffffffffff811115610f79578182fd5b8201601f81018413610f89578182fd5b8051610f97610dfd82611175565b818152856020838501011115610fab578384fd5b6103378260208301602086016111b5565b600060208284031215610fcd578081fd5b5051919050565b60008151808452610fec8160208601602086016111b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526110ec60a0830184610fd4565b979650505050505050565b60006020825261110a6020830184610fd4565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156111d05781810151838201526020016111b8565b838111156111df576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461120757600080fd5b5056fea164736f6c6343000706000a\",\n  \"deployedBytecode\": \"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100d3578063cdca1753146100db578063f7729d43146100ee578063fa461e33146101015761007d565b80632f80bb1d1461008257806330d07f21146100ab5780634aa4a4fc146100be575b600080fd5b610095610090366004610e9e565b610116565b6040516100a29190611148565b60405180910390f35b6100956100b9366004610e30565b61017b565b6100c6610340565b6040516100a29190611084565b6100c6610364565b6100956100e9366004610e9e565b610388565b6100956100fc366004610e30565b6103d6565b61011461010f366004610f04565b610555565b005b60005b600061012484610660565b9050600080600061013487610668565b92509250925061014882848389600061017b565b955083156101605761015987610699565b965061016c565b85945050505050610175565b50505050610119565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff808616878216109083166101a65760008490555b6101b18787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836101d78861070c565b60000373ffffffffffffffffffffffffffffffffffffffff8816156101fc5787610222565b8561021b5773fffd8963efd1fc6a506488495d951d5263988d25610222565b6401000276a45b8b8b8e6040516020016102379392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102669594939291906110a5565b6040805180830381600087803b15801561027f57600080fd5b505af19250505080156102cd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102ca91810190610ee1565b60015b610333573d8080156102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5073ffffffffffffffffffffffffffffffffffffffff841661032157600080555b61032a8161073e565b92505050610337565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b600061039684610660565b905060008060006103a687610668565b9250925092506103ba8383838960006103d6565b95508315610160576103cb87610699565b96505050505061038b565b600073ffffffffffffffffffffffffffffffffffffffff808616908716106103ff8787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836104258861070c565b73ffffffffffffffffffffffffffffffffffffffff881615610447578761046d565b856104665773fffd8963efd1fc6a506488495d951d5263988d2561046d565b6401000276a45b8c8b8d6040516020016104829392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016104b19594939291906110a5565b6040805180830381600087803b1580156104ca57600080fd5b505af1925050508015610518575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261051591810190610ee1565b60015b610333573d808015610546576040519150601f19603f3d011682016040523d82523d6000602084013e61054b565b606091505b5061032a8161073e565b60008313806105645750600082135b61056d57600080fd5b600080600061057b84610668565b9250925092506105ad7f00000000000000000000000000000000000000000000000000000000000000008484846107ef565b5060008060008089136105f3578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a600003610628565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b925092509250821561063f57604051818152602081fd5b6000541561065557600054811461065557600080fd5b604051828152602081fd5b516042111590565b600080806106768482610805565b9250610683846014610905565b9050610690846017610805565b91509193909250565b80516060906101759083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9016109f5565b60006107047f00000000000000000000000000000000000000000000000000000000000000006106ff868686610bdc565b610c59565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061073a57600080fd5b5090565b600081516020146107db5760448251101561078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611111565b60405180910390fd5b600482019150818060200190518101906107a89190610f52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078591906110f7565b818060200190518101906101759190610fbc565b600061033785610800868686610bdc565b610d8f565b60008182601401101561087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60008182600301101561097957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b81600301835110156109ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610a6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610ada57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610b6b5760405191506000825260208201604052610bd3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ba4578051835260209283019201610b8c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b610be4610dbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c1c579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c9b57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000610d9b8383610c59565b90503373ffffffffffffffffffffffffffffffffffffffff82161461017557600080fd5b604080516060810182526000808252602082018190529181019190915290565b600082601f830112610def578081fd5b8135610e02610dfd82611175565b611151565b818152846020838601011115610e16578283fd5b816020850160208301379081016020019190915292915050565b600080600080600060a08688031215610e47578081fd5b8535610e52816111e5565b94506020860135610e62816111e5565b9350604086013562ffffff81168114610e79578182fd5b9250606086013591506080860135610e90816111e5565b809150509295509295909350565b60008060408385031215610eb0578182fd5b823567ffffffffffffffff811115610ec6578283fd5b610ed285828601610ddf565b95602094909401359450505050565b60008060408385031215610ef3578182fd5b505080516020909101519092909150565b600080600060608486031215610f18578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610f3c578182fd5b610f4886828701610ddf565b9150509250925092565b600060208284031215610f63578081fd5b815167ffffffffffffffff811115610f79578182fd5b8201601f81018413610f89578182fd5b8051610f97610dfd82611175565b818152856020838501011115610fab578384fd5b6103378260208301602086016111b5565b600060208284031215610fcd578081fd5b5051919050565b60008151808452610fec8160208601602086016111b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526110ec60a0830184610fd4565b979650505050505050565b60006020825261110a6020830184610fd4565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156111d05781810151838201526020016111b8565b838111156111df576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461120757600080fd5b5056fea164736f6c6343000706000a\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"QuoterV2\",\n  \"sourceName\": \"contracts/lens/QuoterV2.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_WETH9\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH9\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quoteExactInput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160[]\",\n          \"name\": \"sqrtPriceX96AfterList\",\n          \"type\": \"uint160[]\"\n        },\n        {\n          \"internalType\": \"uint32[]\",\n          \"name\": \"initializedTicksCrossedList\",\n          \"type\": \"uint32[]\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"gasEstimate\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenIn\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenOut\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountIn\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"uint160\",\n              \"name\": \"sqrtPriceLimitX96\",\n              \"type\": \"uint160\"\n            }\n          ],\n          \"internalType\": \"struct IQuoterV2.QuoteExactInputSingleParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"quoteExactInputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96After\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"initializedTicksCrossed\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"gasEstimate\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quoteExactOutput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160[]\",\n          \"name\": \"sqrtPriceX96AfterList\",\n          \"type\": \"uint160[]\"\n        },\n        {\n          \"internalType\": \"uint32[]\",\n          \"name\": \"initializedTicksCrossedList\",\n          \"type\": \"uint32[]\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"gasEstimate\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenIn\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenOut\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"uint160\",\n              \"name\": \"sqrtPriceLimitX96\",\n              \"type\": \"uint160\"\n            }\n          ],\n          \"internalType\": \"struct IQuoterV2.QuoteExactOutputSingleParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"quoteExactOutputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96After\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"initializedTicksCrossed\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"gasEstimate\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount0Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount1Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"uniswapV3SwapCallback\",\n      \"outputs\": [],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x60c06040523480156200001157600080fd5b506040516200212c3803806200212c833981016040819052620000349162000070565b6001600160601b0319606092831b8116608052911b1660a052620000a7565b80516001600160a01b03811681146200006b57600080fd5b919050565b6000806040838503121562000083578182fd5b6200008e8362000053565b91506200009e6020840162000053565b90509250929050565b60805160601c60a05160601c612051620000db60003980610321525080610577528061095d5280610b9252506120516000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100e6578063c6a5026a146100ee578063cdca175314610101578063fa461e33146101145761007d565b80632f80bb1d146100825780634aa4a4fc146100ae578063bd21704a146100c3575b600080fd5b610095610090366004611b2b565b610129565b6040516100a59493929190611eac565b60405180910390f35b6100b661031f565b6040516100a59190611def565b6100d66100d1366004611c49565b610343565b6040516100a59493929190611f54565b6100b6610575565b6100d66100fc366004611c49565b610599565b61009561010f366004611b2b565b610754565b610127610122366004611b91565b61092c565b005b6000606080600061013986610ae8565b67ffffffffffffffff8111801561014f57600080fd5b50604051908082528060200260200182016040528015610179578160200160208202803683370190505b50925061018586610ae8565b67ffffffffffffffff8111801561019b57600080fd5b506040519080825280602002602001820160405280156101c5578160200160208202803683370190505b50915060005b60008060006101d98a610b17565b92509250925060008060008061025c6040518060a001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610343565b9350935093509350828b898151811061027157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106102b857fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926102e58e610b48565b156102fa576102f38e610b50565b9d5061030a565b8c9b505050505050505050610316565b505050505050506101cb565b92959194509250565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926103819290610b8b565b9050866080015173ffffffffffffffffffffffffffffffffffffffff16600014156103af5760408701516000555b60005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856103df8c60400151610bc9565b6000038c6080015173ffffffffffffffffffffffffffffffffffffffff1660001461040e578c60800151610434565b8761042d5773fffd8963efd1fc6a506488495d951d5263988d25610434565b6401000276a45b8d602001518e606001518f6000015160405160200161045593929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610484959493929190611e10565b6040805180830381600087803b15801561049d57600080fd5b505af19250505080156104eb575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526104e891810190611b6e565b60015b610568573d808015610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b505a82039450886080015173ffffffffffffffffffffffffffffffffffffffff166000141561054c57600080555b610557818487610bfb565b97509750975097505050505061056e565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926105d79290610b8b565b905060005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856106098c60400151610bc9565b60808d015173ffffffffffffffffffffffffffffffffffffffff1615610633578c60800151610659565b876106525773fffd8963efd1fc6a506488495d951d5263988d25610659565b6401000276a45b8d600001518e606001518f6020015160405160200161067a93929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016106a9959493929190611e10565b6040805180830381600087803b1580156106c257600080fd5b505af1925050508015610710575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261070d91810190611b6e565b60015b610568573d80801561073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b505a82039450610557818487610bfb565b6000606080600061076486610ae8565b67ffffffffffffffff8111801561077a57600080fd5b506040519080825280602002602001820160405280156107a4578160200160208202803683370190505b5092506107b086610ae8565b67ffffffffffffffff811180156107c657600080fd5b506040519080825280602002602001820160405280156107f0578160200160208202803683370190505b50915060005b60008060006108048a610b17565b9250925092506000806000806108876040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610599565b9350935093509350828b898151811061089c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106108e357fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926109108e610b48565b156102fa5761091e8e610b50565b9d50505050505050506107f6565b600083138061093b5750600082135b61094457600080fd5b600080600061095284610b17565b9250925092506109847f0000000000000000000000000000000000000000000000000000000000000000848484610ccf565b5060008060008089136109ca578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a6000036109ff565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b9250925092506000610a12878787610b8b565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190611c6b565b5050505050915091508515610abb57604051848152826020820152816040820152606081fd5b60005415610ad1576000548414610ad157600080fd5b604051858152826020820152816040820152606081fd5b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b60008080610b258482610cee565b9250610b32846014610dee565b9050610b3f846017610cee565b91509193909250565b516042111590565b8051606090610b859083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901610ede565b92915050565b6000610bc17f0000000000000000000000000000000000000000000000000000000000000000610bbc8686866110c5565b611142565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210610bf757600080fd5b5090565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190611c6b565b50939650610c9794508d935061127892505050565b91975095509050610cbf73ffffffffffffffffffffffffffffffffffffffff89168383611339565b9350869250505093509350935093565b6000610ce585610ce08686866110c5565b611991565b95945050505050565b600081826014011015610d6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610dd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610e6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610ed557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610f5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610fc357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8183018451101561103557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561105457604051915060008252602082016040526110bc565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561108d578051835260209283019201611075565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6110cd6119fa565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611105579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061118457600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014611318576044845110156112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290611e75565b60405180910390fd5b600484019350838060200190518101906112e59190611bdf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190611e62565b8380602001905181019061132c9190611d02565b9250925092509193909250565b60008060008060008060008060088b73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b5051600290810b908c900b816113c957fe5b0560020b901d905060006101008c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b5051600290810b908d900b8161145857fe5b0560020b8161146357fe5b079050600060088d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b5051600290810b908d900b816114ec57fe5b0560020b901d905060006101008e73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153f57600080fd5b505afa158015611553573d6000803e3d6000fd5b505050506040513d602081101561156957600080fd5b5051600290810b908e900b8161157b57fe5b0560020b8161158657fe5b07905060008160ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d602081101561161157600080fd5b5051161180156116a457508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b5051600290810b908d900b8161169e57fe5b0760020b155b80156116b557508b60020b8d60020b135b945060008360ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b5051161180156117d257508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d60208110156117ba57600080fd5b5051600290810b908e900b816117cc57fe5b0760020b155b80156117e357508b60020b8d60020b125b95508160010b8460010b128061180f57508160010b8460010b14801561180f57508060ff168360ff1611155b1561182557839950829750819850809650611832565b8199508097508398508296505b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff87161b9150505b8560010b8760010b13611969578560010b8760010b14156118a3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff858103161c165b6000818c73ffffffffffffffffffffffffffffffffffffffff16635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b5051169050611932816119c1565b61ffff16989098019750506001909501947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61185e565b8115611976576001880397505b8215611983576001880397505b505050505050509392505050565b600061199d8383611142565b90503373ffffffffffffffffffffffffffffffffffffffff821614610b8557600080fd5b6000805b8215610b85577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301909216916001016119c5565b604080516060810182526000808252602082018190529181019190915290565b600082601f830112611a2a578081fd5b8135611a3d611a3882611faf565b611f8b565b818152846020838601011115611a51578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b8114610b1257600080fd5b600060a08284031215611a8e578081fd5b60405160a0810181811067ffffffffffffffff82111715611aab57fe5b6040529050808235611abc8161201f565b81526020830135611acc8161201f565b602082015260408381013590820152606083013562ffffff81168114611af157600080fd5b6060820152611b0260808401611b0e565b60808201525092915050565b8035610b128161201f565b805161ffff81168114610b1257600080fd5b60008060408385031215611b3d578182fd5b823567ffffffffffffffff811115611b53578283fd5b611b5f85828601611a1a565b95602094909401359450505050565b60008060408385031215611b80578182fd5b505080516020909101519092909150565b600080600060608486031215611ba5578081fd5b8335925060208401359150604084013567ffffffffffffffff811115611bc9578182fd5b611bd586828701611a1a565b9150509250925092565b600060208284031215611bf0578081fd5b815167ffffffffffffffff811115611c06578182fd5b8201601f81018413611c16578182fd5b8051611c24611a3882611faf565b818152856020838501011115611c38578384fd5b610ce5826020830160208601611fef565b600060a08284031215611c5a578081fd5b611c648383611a7d565b9392505050565b600080600080600080600060e0888a031215611c85578283fd5b8751611c908161201f565b9650611c9e60208901611a6b565b9550611cac60408901611b19565b9450611cba60608901611b19565b9350611cc860808901611b19565b925060a088015160ff81168114611cdd578283fd5b60c08901519092508015158114611cf2578182fd5b8091505092959891949750929550565b600080600060608486031215611d16578081fd5b835192506020840151611d288161201f565b9150611d3660408501611a6b565b90509250925092565b60008151808452611d57816020860160208601611fef565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152611e5760a0830184611d3f565b979650505050505050565b600060208252611c646020830184611d3f565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611f0257845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101611ed0565b505084810360408601528651808252908201925081870190845b81811015611f3e57825163ffffffff1685529383019391830191600101611f1c565b5050505060609290920192909252949350505050565b93845273ffffffffffffffffffffffffffffffffffffffff92909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611fa757fe5b604052919050565b600067ffffffffffffffff821115611fc357fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561200a578181015183820152602001611ff2565b83811115612019576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461204157600080fd5b5056fea164736f6c6343000706000a\",\n  \"deployedBytecode\": \"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100e6578063c6a5026a146100ee578063cdca175314610101578063fa461e33146101145761007d565b80632f80bb1d146100825780634aa4a4fc146100ae578063bd21704a146100c3575b600080fd5b610095610090366004611b2b565b610129565b6040516100a59493929190611eac565b60405180910390f35b6100b661031f565b6040516100a59190611def565b6100d66100d1366004611c49565b610343565b6040516100a59493929190611f54565b6100b6610575565b6100d66100fc366004611c49565b610599565b61009561010f366004611b2b565b610754565b610127610122366004611b91565b61092c565b005b6000606080600061013986610ae8565b67ffffffffffffffff8111801561014f57600080fd5b50604051908082528060200260200182016040528015610179578160200160208202803683370190505b50925061018586610ae8565b67ffffffffffffffff8111801561019b57600080fd5b506040519080825280602002602001820160405280156101c5578160200160208202803683370190505b50915060005b60008060006101d98a610b17565b92509250925060008060008061025c6040518060a001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610343565b9350935093509350828b898151811061027157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106102b857fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926102e58e610b48565b156102fa576102f38e610b50565b9d5061030a565b8c9b505050505050505050610316565b505050505050506101cb565b92959194509250565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926103819290610b8b565b9050866080015173ffffffffffffffffffffffffffffffffffffffff16600014156103af5760408701516000555b60005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856103df8c60400151610bc9565b6000038c6080015173ffffffffffffffffffffffffffffffffffffffff1660001461040e578c60800151610434565b8761042d5773fffd8963efd1fc6a506488495d951d5263988d25610434565b6401000276a45b8d602001518e606001518f6000015160405160200161045593929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610484959493929190611e10565b6040805180830381600087803b15801561049d57600080fd5b505af19250505080156104eb575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526104e891810190611b6e565b60015b610568573d808015610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b505a82039450886080015173ffffffffffffffffffffffffffffffffffffffff166000141561054c57600080555b610557818487610bfb565b97509750975097505050505061056e565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926105d79290610b8b565b905060005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856106098c60400151610bc9565b60808d015173ffffffffffffffffffffffffffffffffffffffff1615610633578c60800151610659565b876106525773fffd8963efd1fc6a506488495d951d5263988d25610659565b6401000276a45b8d600001518e606001518f6020015160405160200161067a93929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016106a9959493929190611e10565b6040805180830381600087803b1580156106c257600080fd5b505af1925050508015610710575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261070d91810190611b6e565b60015b610568573d80801561073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b505a82039450610557818487610bfb565b6000606080600061076486610ae8565b67ffffffffffffffff8111801561077a57600080fd5b506040519080825280602002602001820160405280156107a4578160200160208202803683370190505b5092506107b086610ae8565b67ffffffffffffffff811180156107c657600080fd5b506040519080825280602002602001820160405280156107f0578160200160208202803683370190505b50915060005b60008060006108048a610b17565b9250925092506000806000806108876040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610599565b9350935093509350828b898151811061089c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106108e357fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926109108e610b48565b156102fa5761091e8e610b50565b9d50505050505050506107f6565b600083138061093b5750600082135b61094457600080fd5b600080600061095284610b17565b9250925092506109847f0000000000000000000000000000000000000000000000000000000000000000848484610ccf565b5060008060008089136109ca578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a6000036109ff565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b9250925092506000610a12878787610b8b565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190611c6b565b5050505050915091508515610abb57604051848152826020820152816040820152606081fd5b60005415610ad1576000548414610ad157600080fd5b604051858152826020820152816040820152606081fd5b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b60008080610b258482610cee565b9250610b32846014610dee565b9050610b3f846017610cee565b91509193909250565b516042111590565b8051606090610b859083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901610ede565b92915050565b6000610bc17f0000000000000000000000000000000000000000000000000000000000000000610bbc8686866110c5565b611142565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210610bf757600080fd5b5090565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190611c6b565b50939650610c9794508d935061127892505050565b91975095509050610cbf73ffffffffffffffffffffffffffffffffffffffff89168383611339565b9350869250505093509350935093565b6000610ce585610ce08686866110c5565b611991565b95945050505050565b600081826014011015610d6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610dd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610e6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610ed557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610f5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610fc357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8183018451101561103557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561105457604051915060008252602082016040526110bc565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561108d578051835260209283019201611075565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6110cd6119fa565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611105579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061118457600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014611318576044845110156112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290611e75565b60405180910390fd5b600484019350838060200190518101906112e59190611bdf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190611e62565b8380602001905181019061132c9190611d02565b9250925092509193909250565b60008060008060008060008060088b73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b5051600290810b908c900b816113c957fe5b0560020b901d905060006101008c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b5051600290810b908d900b8161145857fe5b0560020b8161146357fe5b079050600060088d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b5051600290810b908d900b816114ec57fe5b0560020b901d905060006101008e73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153f57600080fd5b505afa158015611553573d6000803e3d6000fd5b505050506040513d602081101561156957600080fd5b5051600290810b908e900b8161157b57fe5b0560020b8161158657fe5b07905060008160ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d602081101561161157600080fd5b5051161180156116a457508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b5051600290810b908d900b8161169e57fe5b0760020b155b80156116b557508b60020b8d60020b135b945060008360ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b5051161180156117d257508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d60208110156117ba57600080fd5b5051600290810b908e900b816117cc57fe5b0760020b155b80156117e357508b60020b8d60020b125b95508160010b8460010b128061180f57508160010b8460010b14801561180f57508060ff168360ff1611155b1561182557839950829750819850809650611832565b8199508097508398508296505b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff87161b9150505b8560010b8760010b13611969578560010b8760010b14156118a3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff858103161c165b6000818c73ffffffffffffffffffffffffffffffffffffffff16635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b5051169050611932816119c1565b61ffff16989098019750506001909501947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61185e565b8115611976576001880397505b8215611983576001880397505b505050505050509392505050565b600061199d8383611142565b90503373ffffffffffffffffffffffffffffffffffffffff821614610b8557600080fd5b6000805b8215610b85577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301909216916001016119c5565b604080516060810182526000808252602082018190529181019190915290565b600082601f830112611a2a578081fd5b8135611a3d611a3882611faf565b611f8b565b818152846020838601011115611a51578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b8114610b1257600080fd5b600060a08284031215611a8e578081fd5b60405160a0810181811067ffffffffffffffff82111715611aab57fe5b6040529050808235611abc8161201f565b81526020830135611acc8161201f565b602082015260408381013590820152606083013562ffffff81168114611af157600080fd5b6060820152611b0260808401611b0e565b60808201525092915050565b8035610b128161201f565b805161ffff81168114610b1257600080fd5b60008060408385031215611b3d578182fd5b823567ffffffffffffffff811115611b53578283fd5b611b5f85828601611a1a565b95602094909401359450505050565b60008060408385031215611b80578182fd5b505080516020909101519092909150565b600080600060608486031215611ba5578081fd5b8335925060208401359150604084013567ffffffffffffffff811115611bc9578182fd5b611bd586828701611a1a565b9150509250925092565b600060208284031215611bf0578081fd5b815167ffffffffffffffff811115611c06578182fd5b8201601f81018413611c16578182fd5b8051611c24611a3882611faf565b818152856020838501011115611c38578384fd5b610ce5826020830160208601611fef565b600060a08284031215611c5a578081fd5b611c648383611a7d565b9392505050565b600080600080600080600060e0888a031215611c85578283fd5b8751611c908161201f565b9650611c9e60208901611a6b565b9550611cac60408901611b19565b9450611cba60608901611b19565b9350611cc860808901611b19565b925060a088015160ff81168114611cdd578283fd5b60c08901519092508015158114611cf2578182fd5b8091505092959891949750929550565b600080600060608486031215611d16578081fd5b835192506020840151611d288161201f565b9150611d3660408501611a6b565b90509250925092565b60008151808452611d57816020860160208601611fef565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152611e5760a0830184611d3f565b979650505050505050565b600060208252611c646020830184611d3f565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611f0257845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101611ed0565b505084810360408601528651808252908201925081870190845b81811015611f3e57825163ffffffff1685529383019391830191600101611f1c565b5050505060609290920192909252949350505050565b93845273ffffffffffffffffffffffffffffffffffffffff92909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611fa757fe5b604052919050565b600067ffffffffffffffff821115611fc357fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561200a578181015183820152602001611ff2565b83811115612019576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461204157600080fd5b5056fea164736f6c6343000706000a\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"UniswapV3Staker\",\n  \"sourceName\": \"contracts/UniswapV3Staker.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IUniswapV3Factory\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"contract INonfungiblePositionManager\",\n          \"name\": \"_nonfungiblePositionManager\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"_maxIncentiveStartLeadTime\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"_maxIncentiveDuration\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"oldOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"DepositTransferred\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"contract IERC20Minimal\",\n          \"name\": \"rewardToken\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"contract IUniswapV3Pool\",\n          \"name\": \"pool\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"startTime\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"endTime\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"refundee\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"IncentiveCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"incentiveId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"refund\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"IncentiveEnded\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"RewardClaimed\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"incentiveId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"name\": \"TokenStaked\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"incentiveId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"TokenUnstaked\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IERC20Minimal\",\n          \"name\": \"rewardToken\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountRequested\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"claimReward\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"createIncentive\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"deposits\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"numberOfStakes\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"endIncentive\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"refund\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract IUniswapV3Factory\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getRewardInfo\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"secondsInsideX128\",\n          \"type\": \"uint160\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"incentives\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"totalRewardUnclaimed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"totalSecondsClaimedX128\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint96\",\n          \"name\": \"numberOfStakes\",\n          \"type\": \"uint96\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"maxIncentiveDuration\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"maxIncentiveStartLeadTime\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"nonfungiblePositionManager\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract INonfungiblePositionManager\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IERC20Minimal\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"rewards\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"stakeToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"incentiveId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"stakes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"secondsPerLiquidityInsideInitialX128\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"transferDeposit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"unstakeToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"withdrawToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x6101006040523480156200001257600080fd5b5060405162003ba338038062003ba383398101604081905262000035916200005e565b6001600160601b0319606094851b81166080529290931b90911660a05260c05260e052620000c3565b6000806000806080858703121562000074578384fd5b84516200008181620000aa565b60208601519094506200009481620000aa565b6040860151606090960151949790965092505050565b6001600160a01b0381168114620000c057600080fd5b50565b60805160601c60a05160601c60c05160e051613a816200012260003980610bbd5280610cfa5250806103b15280610c595250806103ed52806104525280610b4852806110555280611ad552508061124c5280611ab45250613a816000f3fe6080604052600436106101295760003560e01c8063b02c43d0116100a5578063c45a015511610074578063e70b9e2711610059578063e70b9e271461034f578063f2d2909b1461036f578063f549ab421461038f57610129565b8063c45a01551461030c578063d953186e1461032157610129565b8063b02c43d01461026c578063b44a27221461029c578063b5ada6e4146102be578063c36c1ea5146102de57610129565b80633c423f0b116100fc5780635cc5e3d9116100e15780635cc5e3d9146101fd578063607777951461021d578063ac9650d81461024c57610129565b80633c423f0b146101c85780633dc0714b146101e857610129565b806301b754401461012e578063150b7a021461015957806326bfee04146101865780632f2d783d146101a8575b600080fd5b34801561013a57600080fd5b506101436103af565b60405161015091906138b9565b60405180910390f35b34801561016557600080fd5b5061017961017436600461273f565b6103d3565b6040516101509190612db4565b34801561019257600080fd5b506101a66101a1366004612a9c565b61071c565b005b3480156101b457600080fd5b506101436101c3366004612946565b61084a565b3480156101d457600080fd5b506101a66101e3366004612ac0565b610928565b3480156101f457600080fd5b50610143610bbb565b34801561020957600080fd5b506101a6610218366004612a72565b610bdf565b34801561022957600080fd5b5061023d6102383660046128f6565b610e10565b604051610150939291906138e6565b61025f61025a3660046127d9565b610e67565b6040516101509190612d36565b34801561027857600080fd5b5061028c6102873660046128f6565b610fc1565b6040516101509493929190612cf5565b3480156102a857600080fd5b506102b1611053565b6040516101509190612de1565b3480156102ca57600080fd5b506101436102d9366004612a57565b611077565b3480156102ea57600080fd5b506102fe6102f9366004612b52565b6111c5565b604051610150929190613881565b34801561031857600080fd5b506102b161124a565b34801561032d57600080fd5b5061034161033c366004612a72565b61126e565b6040516101509291906138c2565b34801561035b57600080fd5b5061014361036a36600461290e565b611493565b34801561037b57600080fd5b506101a661038a366004612a72565b6114b0565b34801561039b57600080fd5b506101a66103aa366004612a72565b61151b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461044d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104449061375a565b60405180910390fd5b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166399fbab88876040518263ffffffff1660e01b81526004016104a991906138b9565b6101806040518083038186803b1580156104c257600080fd5b505afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa9190612b73565b505050505096509650505050505060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff1681526020018360020b81526020018260020b8152506001600088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001601a6101000a81548162ffffff021916908360020b62ffffff160217905550606082015181600001601d6101000a81548162ffffff021916908360020b62ffffff1602179055509050508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16877fcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f60405160405180910390a483156106ef5760a08414156106ab576106a66106a085870187612a57565b87611964565b6106ef565b60006106b985870187612848565b905060005b81518110156106ec576106e48282815181106106d657fe5b602002602001015189611964565b6001016106be565b50505b507f150b7a0200000000000000000000000000000000000000000000000000000000979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490613183565b60008281526001602052604090205473ffffffffffffffffffffffffffffffffffffffff163381146107c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490612e86565b60008381526001602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff868116918217909255915191929084169186917fcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f91a4505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360209081526040808320338452909152902054811580159061088957508082105b156108915750805b73ffffffffffffffffffffffffffffffffffffffff841660009081526003602090815260408083203384529091529020805482900390556108d3848483611ed1565b8273ffffffffffffffffffffffffffffffffffffffff167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72418260405161091991906138b9565b60405180910390a29392505050565b73ffffffffffffffffffffffffffffffffffffffff8216301415610978576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906137b7565b6000838152600160209081526040918290208251608081018452905473ffffffffffffffffffffffffffffffffffffffff8116825265ffffffffffff740100000000000000000000000000000000000000008204169282018390527a0100000000000000000000000000000000000000000000000000008104600290810b810b810b948301949094527d0100000000000000000000000000000000000000000000000000000000009004830b830b90920b606083015215610a65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490613046565b805173ffffffffffffffffffffffffffffffffffffffff163314610ab5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490613481565b6000848152600160205260408082208290558251905173ffffffffffffffffffffffffffffffffffffffff9091169086907fcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f908490a46040517fb88d4fde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b88d4fde90610b83903090879089908890600401612cac565b600060405180830381600087803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008111610c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906135be565b8160400151421115610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906131e0565b7f0000000000000000000000000000000000000000000000000000000000000000428360400151031115610cb7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104449061361b565b8160600151826040015110610cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906136d7565b7f000000000000000000000000000000000000000000000000000000000000000082604001518360600151031115610d5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490613679565b6000610d67836120ad565b60008181526020819052604090208054840190558351909150610d8c903330856120de565b826020015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff167fa876344e28d4b5191ad03bc0d43f740e3695827ab0faccac739930b915ef8b0285604001518660600151876080015187604051610e039493929190613920565b60405180910390a3505050565b6000602081905290815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1683565b60608167ffffffffffffffff81118015610e8057600080fd5b50604051908082528060200260200182016040528015610eb457816020015b6060815260200190600190039081610e9f5790505b50905060005b82811015610fba5760008030868685818110610ed257fe5b9050602002810190610ee49190613951565b604051610ef2929190612c9c565b600060405180830381855af49150503d8060008114610f2d576040519150601f19603f3d011682016040523d82523d6000602084013e610f32565b606091505b509150915081610f9857604481511015610f4b57600080fd5b60048101905080806020019051810190610f6591906129df565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104449190612e16565b80848481518110610fa557fe5b60209081029190910101525050600101610eba565b5092915050565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169065ffffffffffff74010000000000000000000000000000000000000000820416907a0100000000000000000000000000000000000000000000000000008104600290810b917d0100000000000000000000000000000000000000000000000000000000009004900b84565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081606001514210156110b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490612f66565b60006110c2836120ad565b6000818152602081905260409020805493509091508261110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490612e29565b60018101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1615611170576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906134de565b6000815583516080850151611186919085611ed1565b817f65124e6175aa9904f40735e87e2a37c76e87a609b855287bb4d1aba8257d9763846040516111b691906138b9565b60405180910390a25050919050565b60008281526002602090815260408083208484529091529020805473ffffffffffffffffffffffffffffffffffffffff8116916bffffffffffffffffffffffff740100000000000000000000000000000000000000009092048216918214156112425760018101546fffffffffffffffffffffffffffffffff1691505b509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600061127c856120ad565b905060008061128b86846111c5565b915091506000816fffffffffffffffffffffffffffffffff16116112db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490612f09565b60008681526001602081815260408084208151608081018352905473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000080830465ffffffffffff16848701527a0100000000000000000000000000000000000000000000000000008304600290810b810b810b8587019081527d010000000000000000000000000000000000000000000000000000000000909404810b810b900b60608086019182528c8a52898852868a2087519182018852805482529098015480841689890152919091046bffffffffffffffffffffffff1687860152948e01519151945193517fa38807f200000000000000000000000000000000000000000000000000000000815292969491169263a38807f29261140e929190600401612e02565b60606040518083038186803b15801561142657600080fd5b505afa15801561143a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145e9190612986565b50915050611482826000015183602001518c604001518d60600151888a87426122c3565b909b909a5098505050505050505050565b600360209081526000928352604080842090915290825290205481565b60008181526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16331461150d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490613561565b6115178282611964565b5050565b6000818152600160209081526040918290208251608081018452905473ffffffffffffffffffffffffffffffffffffffff8116825265ffffffffffff74010000000000000000000000000000000000000000820416928201929092527a0100000000000000000000000000000000000000000000000000008204600290810b810b810b938201939093527d010000000000000000000000000000000000000000000000000000000000909104820b820b90910b60608083019190915283015142101561163157805173ffffffffffffffffffffffffffffffffffffffff163314611631576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104449061331e565b600061163c846120ad565b905060008061164b85846111c5565b91509150806fffffffffffffffffffffffffffffffff166000141561169c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490612fe9565b600083815260208181526040808320888452600180845282852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff740100000000000000000000000000000000000000008084048216830190911681027fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff9093169290921790925591830180546bffffffffffffffffffffffff848204811690930190921690920273ffffffffffffffffffffffffffffffffffffffff91821617909155928a01518883015160608a015193517fa38807f2000000000000000000000000000000000000000000000000000000008152929594919091169263a38807f2926117b7929190600401612e02565b60606040518083038186803b1580156117cf57600080fd5b505afa1580156117e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118079190612986565b508354600185015460408c015160608d0151939550600094508493611848939273ffffffffffffffffffffffffffffffffffffffff169190898b89426122c3565b6001860180547fffffffffffffffffffffffff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff9182168401821617909155865483900387558c51811660009081526003602090815260408083208e5190941683529281528282208054860190558d8252600281528282208c8352905290812090815591935091506bffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff87161061192a576001810180547fffffffffffffffffffffffffffffffff000000000000000000000000000000001690555b60405188908b907fe1ba67e807ae0efa0a9549f9520ddc15c27f0a4dae2bc045e800ca66a940778f90600090a35050505050505050505050565b81604001514210156119a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906133a1565b816060015142106119df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490613126565b60006119ea836120ad565b600081815260208190526040902054909150611a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906132c1565b60008281526002602090815260408083208484529091529020547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1615611aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906130c9565b600080600080611afa7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000088612345565b9350935093509350866020015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906133fe565b6000816fffffffffffffffffffffffffffffffff1611611bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490613263565b6000868152600160208181526040808420805465ffffffffffff740100000000000000000000000000000000000000008083048216870190911681027fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff9092169190911790915589855291849052808420830180546bffffffffffffffffffffffff848204811690950190941690920273ffffffffffffffffffffffffffffffffffffffff93841617909155517fa38807f20000000000000000000000000000000000000000000000000000000081529086169063a38807f290611ca19087908790600401612e02565b60606040518083038186803b158015611cb957600080fd5b505afa158015611ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf19190612986565b509150506bffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff831610611e0a576040805160608101825273ffffffffffffffffffffffffffffffffffffffff80841682526bffffffffffffffffffffffff60208084018281526fffffffffffffffffffffffffffffffff80891686880190815260008f8152600285528881208f82529094529690922094518554915190931674010000000000000000000000000000000000000000029284167fffffffffffffffffffffffff000000000000000000000000000000000000000090911617909216178255915160019091018054919092167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909116179055611e8e565b6000878152600260209081526040808320898452909152902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169190911716740100000000000000000000000000000000000000006bffffffffffffffffffffffff8516021790555b85877f3fe90ccd0a34e28f2b4b7a1e8323415ed9dd595f4eec5dfd461d18c2df336dbd84604051611ebf9190613864565b60405180910390a35050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310611fa657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611f69565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612008576040519150601f19603f3d011682016040523d82523d6000602084013e61200d565b606091505b509150915081801561203b57508051158061203b575080806020019051602081101561203857600080fd5b50515b6120a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b6000816040516020016120c09190613814565b6040516020818303038152906040528051906020012090505b919050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106121bb57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161217e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461221d576040519150601f19603f3d011682016040523d82523d6000602084013e612222565b606091505b5091509150818015612250575080511580612250575080806020019051602081101561224d57600080fd5b50515b6122bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050505050565b600080878310156122d057fe5b508383036fffffffffffffffffffffffffffffffff861602600073ffffffffffffffffffffffffffffffffffffffff8a1660808a61230e8b8861244e565b03901b0390506123358b8373ffffffffffffffffffffffffffffffffffffffff1683612467565b9250509850989650505050505050565b60008060008060008060008873ffffffffffffffffffffffffffffffffffffffff166399fbab88896040518263ffffffff1660e01b8152600401808281526020019150506101806040518083038186803b1580156123a257600080fd5b505afa1580156123b6573d6000803e3d6000fd5b505050506040513d6101808110156123cd57600080fd5b50604080820151606080840151608085015160a086015160c087015160e0909701518651948501875273ffffffffffffffffffffffffffffffffffffffff80871686528416602086015262ffffff8316968501969096529b50949950929750909550909350909150612440908b90612534565b965050505093509350935093565b60008183101561245e5781612460565b825b9392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709868602925082811090839003039050806124bb57600084116124b057600080fd5b508290049050612460565b8084116124c757600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061257657600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b80516120d981613a4f565b8051600281900b81146120d957600080fd5b600060a08284031215612698578081fd5b60405160a0810181811067ffffffffffffffff821117156126b557fe5b60405290508082356126c681613a4f565b815260208301356126d681613a4f565b80602083015250604083013560408201526060830135606082015260808301356126ff81613a4f565b6080919091015292915050565b80516fffffffffffffffffffffffffffffffff811681146120d957600080fd5b805162ffffff811681146120d957600080fd5b600080600080600060808688031215612756578081fd5b853561276181613a4f565b9450602086013561277181613a4f565b935060408601359250606086013567ffffffffffffffff80821115612794578283fd5b818801915088601f8301126127a7578283fd5b8135818111156127b5578384fd5b8960208285010111156127c6578384fd5b9699959850939650602001949392505050565b600080602083850312156127eb578182fd5b823567ffffffffffffffff80821115612802578384fd5b818501915085601f830112612815578384fd5b813581811115612823578485fd5b8660208083028501011115612836578485fd5b60209290920196919550909350505050565b6000602080838503121561285a578182fd5b823567ffffffffffffffff80821115612871578384fd5b818501915085601f830112612884578384fd5b81358181111561289057fe5b61289d84858302016139bb565b818152848101925083850160a0808402860187018a10156128bc578788fd5b8795505b838610156128e8576128d28a83612687565b85526001959095019493860193908101906128c0565b509098975050505050505050565b600060208284031215612907578081fd5b5035919050565b60008060408385031215612920578182fd5b823561292b81613a4f565b9150602083013561293b81613a4f565b809150509250929050565b60008060006060848603121561295a578081fd5b833561296581613a4f565b9250602084013561297581613a4f565b929592945050506040919091013590565b60008060006060848603121561299a578081fd5b83518060060b81146129aa578182fd5b60208501519093506129bb81613a4f565b604085015190925063ffffffff811681146129d4578182fd5b809150509250925092565b6000602082840312156129f0578081fd5b815167ffffffffffffffff811115612a06578182fd5b8201601f81018413612a16578182fd5b8051612a29612a24826139df565b6139bb565b818152856020838501011115612a3d578384fd5b612a4e826020830160208601613a1f565b95945050505050565b600060a08284031215612a68578081fd5b6124608383612687565b60008060c08385031215612a84578182fd5b612a8e8484612687565b9460a0939093013593505050565b60008060408385031215612aae578182fd5b82359150602083013561293b81613a4f565b600080600060608486031215612ad4578081fd5b833592506020840135612ae681613a4f565b9150604084013567ffffffffffffffff811115612b01578182fd5b8401601f81018613612b11578182fd5b8035612b1f612a24826139df565b818152876020838501011115612b33578384fd5b8160208401602083013783602083830101528093505050509250925092565b60008060408385031215612b64578182fd5b50508035926020909101359150565b6000806000806000806000806000806000806101808d8f031215612b9557898afd5b8c516bffffffffffffffffffffffff81168114612bb0578a8bfd5b9b50612bbe60208e0161266a565b9a50612bcc60408e0161266a565b9950612bda60608e0161266a565b9850612be860808e0161272c565b9750612bf660a08e01612675565b9650612c0460c08e01612675565b9550612c1260e08e0161270c565b94506101008d015193506101208d01519250612c316101408e0161270c565b9150612c406101608e0161270c565b90509295989b509295989b509295989b565b60008151808452612c6a816020860160208601613a1f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152612ceb6080830184612c52565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff94909416845265ffffffffffff929092166020840152600290810b60408401520b606082015260800190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612da7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612d95858351612c52565b94509285019290850190600101612d5b565b5092979650505050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600292830b8152910b602082015260400190565b6000602082526124606020830184612c52565b60208082526032908201527f556e697377617056335374616b65723a3a656e64496e63656e746976653a206e60408201527f6f20726566756e6420617661696c61626c650000000000000000000000000000606082015260800190565b60208082526045908201527f556e697377617056335374616b65723a3a7472616e736665724465706f73697460408201527f3a2063616e206f6e6c792062652063616c6c6564206279206465706f7369742060608201527f6f776e6572000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526034908201527f556e697377617056335374616b65723a3a676574526577617264496e666f3a2060408201527f7374616b6520646f6573206e6f74206578697374000000000000000000000000606082015260800190565b60208082526043908201527f556e697377617056335374616b65723a3a656e64496e63656e746976653a206360408201527f616e6e6f7420656e6420696e63656e74697665206265666f726520656e64207460608201527f696d650000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526033908201527f556e697377617056335374616b65723a3a756e7374616b65546f6b656e3a207360408201527f74616b6520646f6573206e6f7420657869737400000000000000000000000000606082015260800190565b60208082526042908201527f556e697377617056335374616b65723a3a7769746864726177546f6b656e3a2060408201527f63616e6e6f7420776974686472617720746f6b656e207768696c65207374616b60608201527f6564000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526031908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a20746f6b60408201527f656e20616c7265616479207374616b6564000000000000000000000000000000606082015260800190565b6020808252602c908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a20696e6360408201527f656e7469766520656e6465640000000000000000000000000000000000000000606082015260800190565b6020808252603c908201527f556e697377617056335374616b65723a3a7472616e736665724465706f73697460408201527f3a20696e76616c6964207472616e7366657220726563697069656e7400000000606082015260800190565b60208082526049908201527f556e697377617056335374616b65723a3a637265617465496e63656e7469766560408201527f3a2073746172742074696d65206d757374206265206e6f77206f7220696e207460608201527f6865206675747572650000000000000000000000000000000000000000000000608082015260a00190565b602080825260409082018190527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a2063616e908201527f6e6f74207374616b6520746f6b656e20776974682030206c6971756964697479606082015260800190565b60208082526033908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a206e6f6e60408201527f2d6578697374656e7420696e63656e7469766500000000000000000000000000606082015260800190565b60208082526056908201527f556e697377617056335374616b65723a3a756e7374616b65546f6b656e3a206f60408201527f6e6c79206f776e65722063616e20776974686472617720746f6b656e2062656660608201527f6f726520696e63656e7469766520656e642074696d6500000000000000000000608082015260a00190565b60208082526032908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a20696e6360408201527f656e74697665206e6f7420737461727465640000000000000000000000000000606082015260800190565b60208082526041908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a20746f6b60408201527f656e20706f6f6c206973206e6f742074686520696e63656e7469766520706f6f60608201527f6c00000000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252603d908201527f556e697377617056335374616b65723a3a7769746864726177546f6b656e3a2060408201527f6f6e6c79206f776e65722063616e20776974686472617720746f6b656e000000606082015260800190565b6020808252604d908201527f556e697377617056335374616b65723a3a656e64496e63656e746976653a206360408201527f616e6e6f7420656e6420696e63656e74697665207768696c65206465706f736960608201527f747320617265207374616b656400000000000000000000000000000000000000608082015260a00190565b60208082526037908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a206f6e6c60408201527f79206f776e65722063616e207374616b6520746f6b656e000000000000000000606082015260800190565b60208082526039908201527f556e697377617056335374616b65723a3a637265617465496e63656e7469766560408201527f3a20726577617264206d75737420626520706f73697469766500000000000000606082015260800190565b602080825260409082018190527f556e697377617056335374616b65723a3a637265617465496e63656e74697665908201527f3a2073746172742074696d6520746f6f2066617220696e746f20667574757265606082015260800190565b602080825260409082018190527f556e697377617056335374616b65723a3a637265617465496e63656e74697665908201527f3a20696e63656e74697665206475726174696f6e20697320746f6f206c6f6e67606082015260800190565b60208082526044908201527f556e697377617056335374616b65723a3a637265617465496e63656e7469766560408201527f3a2073746172742074696d65206d757374206265206265666f726520656e642060608201527f74696d6500000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526032908201527f556e697377617056335374616b65723a3a6f6e4552433732315265636569766560408201527f643a206e6f74206120756e697633206e66740000000000000000000000000000606082015260800190565b60208082526039908201527f556e697377617056335374616b65723a3a7769746864726177546f6b656e3a2060408201527f63616e6e6f7420776974686472617720746f207374616b657200000000000000606082015260800190565b815173ffffffffffffffffffffffffffffffffffffffff90811682526020808401518216908301526040808401519083015260608084015190830152608092830151169181019190915260a00190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9290921682526fffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b92835273ffffffffffffffffffffffffffffffffffffffff9190911660208301526bffffffffffffffffffffffff16604082015260600190565b938452602084019290925273ffffffffffffffffffffffffffffffffffffffff166040830152606082015260800190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613985578283fd5b83018035915067ffffffffffffffff82111561399f578283fd5b6020019150368190038213156139b457600080fd5b9250929050565b60405181810167ffffffffffffffff811182821017156139d757fe5b604052919050565b600067ffffffffffffffff8211156139f357fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015613a3a578181015183820152602001613a22565b83811115613a49576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114613a7157600080fd5b5056fea164736f6c6343000706000a\",\n  \"deployedBytecode\": \"\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"SwapRouter\",\n  \"sourceName\": \"contracts/SwapRouter.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_WETH9\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH9\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"path\",\n              \"type\": \"bytes\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountIn\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountOutMinimum\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct ISwapRouter.ExactInputParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"exactInput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenIn\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenOut\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountIn\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountOutMinimum\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint160\",\n              \"name\": \"sqrtPriceLimitX96\",\n              \"type\": \"uint160\"\n            }\n          ],\n          \"internalType\": \"struct ISwapRouter.ExactInputSingleParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"exactInputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"path\",\n              \"type\": \"bytes\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountOut\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountInMaximum\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct ISwapRouter.ExactOutputParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"exactOutput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenIn\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenOut\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountOut\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountInMaximum\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint160\",\n              \"name\": \"sqrtPriceLimitX96\",\n              \"type\": \"uint160\"\n            }\n          ],\n          \"internalType\": \"struct ISwapRouter.ExactOutputSingleParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"exactOutputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"refundETH\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermit\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowed\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowedIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeBips\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"feeRecipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepTokenWithFee\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount0Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount1Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"_data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"uniswapV3SwapCallback\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeBips\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"feeRecipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9WithFee\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x60c06040526000196000553480156200001757600080fd5b506040516200302f3803806200302f8339810160408190526200003a9162000076565b6001600160601b0319606092831b8116608052911b1660a052620000ad565b80516001600160a01b03811681146200007157600080fd5b919050565b6000806040838503121562000089578182fd5b620000948362000059565b9150620000a46020840162000059565b90509250929050565b60805160601c60a05160601c612f26620001096000398061012f528061058352806106ad5280610747528061078752806108b15280611c435280611ca35280611d24525080610dc6528061140c5280611e265250612f266000f3fe6080604052600436106101125760003560e01c8063c04b8d59116100a5578063df2ab5bb11610074578063f28c049811610059578063f28c0498146102f5578063f3995c6714610308578063fa461e331461031b576101bd565b8063df2ab5bb146102cf578063e0e189a0146102e2576101bd565b8063c04b8d5914610281578063c2e3140a14610294578063c45a0155146102a7578063db3e2198146102bc576101bd565b80634aa4a4fc116100e15780634aa4a4fc146102195780639b2c0a371461023b578063a4a78f0c1461024e578063ac9650d814610261576101bd565b806312210e8a146101c2578063414bf389146101ca5780634659a494146101f357806349404b7c14610206576101bd565b366101bd573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b6101bb61033b565b6101dd6101d83660046129f8565b61034d565b6040516101ea9190612df1565b60405180910390f35b6101bb610201366004612776565b6104bf565b6101bb610214366004612aff565b61057f565b34801561022557600080fd5b5061022e610745565b6040516101ea9190612c37565b6101bb610249366004612b2e565b610769565b6101bb61025c366004612776565b610981565b61027461026f3660046127d6565b610a56565b6040516101ea9190612caa565b6101dd61028f36600461294d565b610bb0565b6101bb6102a2366004612776565b610d0f565b3480156102b357600080fd5b5061022e610dc4565b6101dd6102ca3660046129f8565b610de8565b6101bb6102dd3660046126d7565b610f78565b6101bb6102f0366004612718565b611095565b6101dd610303366004612a14565b6111fb565b6101bb610316366004612776565b61132f565b34801561032757600080fd5b506101bb610336366004612868565b6113c7565b471561034b5761034b334761150e565b565b600081608001358061035d61165c565b11156103ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b61047060a08401356103e260808601606087016126b4565b6103f3610100870160e088016126b4565b604080518082019091528061040b60208a018a6126b4565b61041b60608b0160408c01612adc565b61042b60408c0160208d016126b4565b60405160200161043d93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611660565b91508260c001358210156104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b60405180910390fd5b50919050565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e48101839052905173ffffffffffffffffffffffffffffffffffffffff881691638fcbaf0c9161010480830192600092919082900301818387803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b50505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d602081101561063257600080fd5b50519050828110156106a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610740577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b50505050610740828261150e565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008211801561077a575060648211155b61078357600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d602081101561083657600080fd5b50519050848110156108a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b801561097a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b50505050600061271061095285846117e690919063ffffffff16565b8161095957fe5b049050801561096c5761096c838261150e565b6109788582840361150e565b505b5050505050565b604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d6020811015610a4057600080fd5b50511015610978576109788686868686866104bf565b60608167ffffffffffffffff81118015610a6f57600080fd5b50604051908082528060200260200182016040528015610aa357816020015b6060815260200190600190039081610a8e5790505b50905060005b82811015610ba95760008030868685818110610ac157fe5b9050602002810190610ad39190612dfa565b604051610ae1929190612c27565b600060405180830381855af49150503d8060008114610b1c576040519150601f19603f3d011682016040523d82523d6000602084013e610b21565b606091505b509150915081610b8757604481511015610b3a57600080fd5b60048101905080806020019051810190610b5491906128e3565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b09190612d28565b80848481518110610b9457fe5b60209081029190910101525050600101610aa9565b5092915050565b6000816040015180610bc061165c565b1115610c2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b335b6000610c3e8560000151611810565b9050610c97856060015182610c57578660200151610c59565b305b60006040518060400160405280610c738b6000015161181c565b81526020018773ffffffffffffffffffffffffffffffffffffffff16815250611660565b60608601528015610cb7578451309250610cb09061182b565b8552610cc4565b8460600151935050610cca565b50610c2f565b8360800151831015610d08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b5050919050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051869173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b505110156109785761097886868686868661132f565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816080013580610df861165c565b1115610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b610f0e60a0840135610e7d60808601606087016126b4565b610e8e610100870160e088016126b4565b6040518060400160405280886020016020810190610eac91906126b4565b610ebc60608b0160408c01612adc565b610ec960208c018c6126b4565b604051602001610edb93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611860565b91508260c00135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600055919050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b505190508281101561107e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561108f5761108f848383611a1c565b50505050565b6000821180156110a6575060648211155b6110af57600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b50519050848110156111b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b80156109785760006127106111ca83866117e6565b816111d157fe5b04905080156111e5576111e5878483611a1c565b6111f28786838503611a1c565b50505050505050565b600081604001358061120b61165c565b111561127857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b6112eb606084013561129060408601602087016126b4565b60408051808201909152600090806112a88980612dfa565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602090910152611860565b5060005491508260800135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c48101839052905173ffffffffffffffffffffffffffffffffffffffff88169163d505accf9160e480830192600092919082900301818387803b15801561055f57600080fd5b60008413806113d65750600083135b6113df57600080fd5b60006113ed82840184612a4c565b905060008060006114018460000151611bf1565b9250925092506114337f0000000000000000000000000000000000000000000000000000000000000000848484611c22565b5060008060008a13611474578473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610896114a5565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16108a5b9150915081156114c4576114bf8587602001513384611c41565b610573565b85516114cf90611810565b156114f45785516114df9061182b565b86526114ee8133600089611860565b50610573565b806000819055508394506105738587602001513384611c41565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061158557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611548565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146115e7576040519150601f19603f3d011682016040523d82523d6000602084013e6115ec565b606091505b505090508061074057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b4290565b600073ffffffffffffffffffffffffffffffffffffffff8416611681573093505b60008060006116938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808316908416106000806116c4868686611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856116ea8f611e5d565b73ffffffffffffffffffffffffffffffffffffffff8e161561170c578d611732565b8761172b5773fffd8963efd1fc6a506488495d951d5263988d25611732565b6401000276a45b8d6040516020016117439190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611772959493929190612c58565b6040805180830381600087803b15801561178b57600080fd5b505af115801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c39190612845565b91509150826117d257816117d4565b805b6000039b9a5050505050505050505050565b6000821580611801575050818102818382816117fe57fe5b04145b61180a57600080fd5b92915050565b8051604211155b919050565b606061180a826000602b611e8f565b805160609061180a9083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901611e8f565b600073ffffffffffffffffffffffffffffffffffffffff8416611881573093505b60008060006118938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808416908316106000806118c4858786611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856118ea8f611e5d565b60000373ffffffffffffffffffffffffffffffffffffffff8e161561190f578d611935565b8761192e5773fffd8963efd1fc6a506488495d951d5263988d25611935565b6401000276a45b8d6040516020016119469190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611975959493929190612c58565b6040805180830381600087803b15801561198e57600080fd5b505af11580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c69190612845565b915091506000836119db5781836000036119e1565b82826000035b909850905073ffffffffffffffffffffffffffffffffffffffff8a16611a0d578b8114611a0d57600080fd5b50505050505050949350505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310611af157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611ab4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b53576040519150601f19603f3d011682016040523d82523d6000602084013e611b58565b606091505b5091509150818015611b86575080511580611b865750808060200190516020811015611b8357600080fd5b50515b61097a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008080611bff8482612076565b9250611c0c846014612176565b9050611c19846017612076565b91509193909250565b6000611c3885611c33868686612266565b6122e3565b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015611c9c5750804710155b15611de5577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d0957600080fd5b505af1158015611d1d573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611db357600080fd5b505af1158015611dc7573d6000803e3d6000fd5b505050506040513d6020811015611ddd57600080fd5b5061108f9050565b73ffffffffffffffffffffffffffffffffffffffff8316301415611e1357611e0e848383611a1c565b61108f565b61108f84848484612313565b6000611e557f0000000000000000000000000000000000000000000000000000000000000000611e50868686612266565b6124f0565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210611e8b57600080fd5b5090565b60608182601f011015611f0357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015611f7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015611fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015612005576040519150600082526020820160405261206d565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561203e578051835260209283019201612026565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6000818260140110156120ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b816014018351101561215d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b6000818260030110156121ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b816003018351101561225d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b61226e612626565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156122a6579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b60006122ef83836124f0565b90503373ffffffffffffffffffffffffffffffffffffffff82161461180a57600080fd5b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106123f057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123b3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612452576040519150601f19603f3d011682016040523d82523d6000602084013e612457565b606091505b5091509150818015612485575080511580612485575080806020019051602081101561248257600080fd5b50515b61097857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061253257600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516060810182526000808252602082018190529181019190915290565b803561181781612ef4565b600082601f830112612661578081fd5b813561267461266f82612e88565b612e64565b818152846020838601011115612688578283fd5b816020850160208301379081016020019190915292915050565b600061010082840312156104b9578081fd5b6000602082840312156126c5578081fd5b81356126d081612ef4565b9392505050565b6000806000606084860312156126eb578182fd5b83356126f681612ef4565b925060208401359150604084013561270d81612ef4565b809150509250925092565b600080600080600060a0868803121561272f578081fd5b853561273a81612ef4565b945060208601359350604086013561275181612ef4565b925060608601359150608086013561276881612ef4565b809150509295509295909350565b60008060008060008060c0878903121561278e578081fd5b863561279981612ef4565b95506020870135945060408701359350606087013560ff811681146127bc578182fd5b9598949750929560808101359460a0909101359350915050565b600080602083850312156127e8578182fd5b823567ffffffffffffffff808211156127ff578384fd5b818501915085601f830112612812578384fd5b813581811115612820578485fd5b8660208083028501011115612833578485fd5b60209290920196919550909350505050565b60008060408385031215612857578182fd5b505080516020909101519092909150565b6000806000806060858703121561287d578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156128a2578384fd5b818701915087601f8301126128b5578384fd5b8135818111156128c3578485fd5b8860208285010111156128d4578485fd5b95989497505060200194505050565b6000602082840312156128f4578081fd5b815167ffffffffffffffff81111561290a578182fd5b8201601f8101841361291a578182fd5b805161292861266f82612e88565b81815285602083850101111561293c578384fd5b611c38826020830160208601612ec8565b60006020828403121561295e578081fd5b813567ffffffffffffffff80821115612975578283fd5b9083019060a08286031215612988578283fd5b60405160a08101818110838211171561299d57fe5b6040528235828111156129ae578485fd5b6129ba87828601612651565b8252506129c960208401612646565b602082015260408301356040820152606083013560608201526080830135608082015280935050505092915050565b60006101008284031215612a0a578081fd5b6126d083836126a2565b600060208284031215612a25578081fd5b813567ffffffffffffffff811115612a3b578182fd5b820160a081850312156126d0578182fd5b600060208284031215612a5d578081fd5b813567ffffffffffffffff80821115612a74578283fd5b9083019060408286031215612a87578283fd5b604051604081018181108382111715612a9c57fe5b604052823582811115612aad578485fd5b612ab987828601612651565b82525060208301359250612acc83612ef4565b6020810192909252509392505050565b600060208284031215612aed578081fd5b813562ffffff811681146126d0578182fd5b60008060408385031215612b11578182fd5b823591506020830135612b2381612ef4565b809150509250929050565b60008060008060808587031215612b43578182fd5b843593506020850135612b5581612ef4565b9250604085013591506060850135612b6c81612ef4565b939692955090935050565b60008151808452612b8f816020860160208601612ec8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152612c9f60a0830184612b77565b979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612d1b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612d09858351612b77565b94509285019290850190600101612ccf565b5092979650505050505050565b6000602082526126d06020830184612b77565b60208082526012908201527f546f6f206d756368207265717565737465640000000000000000000000000000604082015260600190565b60208082526013908201527f546f6f206c6974746c6520726563656976656400000000000000000000000000604082015260600190565b600060208252825160406020840152612dc56060840182612b77565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401528091505092915050565b90815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e2e578283fd5b83018035915067ffffffffffffffff821115612e48578283fd5b602001915036819003821315612e5d57600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715612e8057fe5b604052919050565b600067ffffffffffffffff821115612e9c57fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015612ee3578181015183820152602001612ecb565b8381111561108f5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114612f1657600080fd5b5056fea164736f6c6343000706000a\",\n  \"deployedBytecode\": \"0x6080604052600436106101125760003560e01c8063c04b8d59116100a5578063df2ab5bb11610074578063f28c049811610059578063f28c0498146102f5578063f3995c6714610308578063fa461e331461031b576101bd565b8063df2ab5bb146102cf578063e0e189a0146102e2576101bd565b8063c04b8d5914610281578063c2e3140a14610294578063c45a0155146102a7578063db3e2198146102bc576101bd565b80634aa4a4fc116100e15780634aa4a4fc146102195780639b2c0a371461023b578063a4a78f0c1461024e578063ac9650d814610261576101bd565b806312210e8a146101c2578063414bf389146101ca5780634659a494146101f357806349404b7c14610206576101bd565b366101bd573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b6101bb61033b565b6101dd6101d83660046129f8565b61034d565b6040516101ea9190612df1565b60405180910390f35b6101bb610201366004612776565b6104bf565b6101bb610214366004612aff565b61057f565b34801561022557600080fd5b5061022e610745565b6040516101ea9190612c37565b6101bb610249366004612b2e565b610769565b6101bb61025c366004612776565b610981565b61027461026f3660046127d6565b610a56565b6040516101ea9190612caa565b6101dd61028f36600461294d565b610bb0565b6101bb6102a2366004612776565b610d0f565b3480156102b357600080fd5b5061022e610dc4565b6101dd6102ca3660046129f8565b610de8565b6101bb6102dd3660046126d7565b610f78565b6101bb6102f0366004612718565b611095565b6101dd610303366004612a14565b6111fb565b6101bb610316366004612776565b61132f565b34801561032757600080fd5b506101bb610336366004612868565b6113c7565b471561034b5761034b334761150e565b565b600081608001358061035d61165c565b11156103ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b61047060a08401356103e260808601606087016126b4565b6103f3610100870160e088016126b4565b604080518082019091528061040b60208a018a6126b4565b61041b60608b0160408c01612adc565b61042b60408c0160208d016126b4565b60405160200161043d93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611660565b91508260c001358210156104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b60405180910390fd5b50919050565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e48101839052905173ffffffffffffffffffffffffffffffffffffffff881691638fcbaf0c9161010480830192600092919082900301818387803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b50505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d602081101561063257600080fd5b50519050828110156106a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610740577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b50505050610740828261150e565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008211801561077a575060648211155b61078357600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d602081101561083657600080fd5b50519050848110156108a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b801561097a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b50505050600061271061095285846117e690919063ffffffff16565b8161095957fe5b049050801561096c5761096c838261150e565b6109788582840361150e565b505b5050505050565b604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d6020811015610a4057600080fd5b50511015610978576109788686868686866104bf565b60608167ffffffffffffffff81118015610a6f57600080fd5b50604051908082528060200260200182016040528015610aa357816020015b6060815260200190600190039081610a8e5790505b50905060005b82811015610ba95760008030868685818110610ac157fe5b9050602002810190610ad39190612dfa565b604051610ae1929190612c27565b600060405180830381855af49150503d8060008114610b1c576040519150601f19603f3d011682016040523d82523d6000602084013e610b21565b606091505b509150915081610b8757604481511015610b3a57600080fd5b60048101905080806020019051810190610b5491906128e3565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b09190612d28565b80848481518110610b9457fe5b60209081029190910101525050600101610aa9565b5092915050565b6000816040015180610bc061165c565b1115610c2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b335b6000610c3e8560000151611810565b9050610c97856060015182610c57578660200151610c59565b305b60006040518060400160405280610c738b6000015161181c565b81526020018773ffffffffffffffffffffffffffffffffffffffff16815250611660565b60608601528015610cb7578451309250610cb09061182b565b8552610cc4565b8460600151935050610cca565b50610c2f565b8360800151831015610d08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b5050919050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051869173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b505110156109785761097886868686868661132f565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816080013580610df861165c565b1115610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b610f0e60a0840135610e7d60808601606087016126b4565b610e8e610100870160e088016126b4565b6040518060400160405280886020016020810190610eac91906126b4565b610ebc60608b0160408c01612adc565b610ec960208c018c6126b4565b604051602001610edb93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611860565b91508260c00135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600055919050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b505190508281101561107e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561108f5761108f848383611a1c565b50505050565b6000821180156110a6575060648211155b6110af57600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b50519050848110156111b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b80156109785760006127106111ca83866117e6565b816111d157fe5b04905080156111e5576111e5878483611a1c565b6111f28786838503611a1c565b50505050505050565b600081604001358061120b61165c565b111561127857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b6112eb606084013561129060408601602087016126b4565b60408051808201909152600090806112a88980612dfa565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602090910152611860565b5060005491508260800135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c48101839052905173ffffffffffffffffffffffffffffffffffffffff88169163d505accf9160e480830192600092919082900301818387803b15801561055f57600080fd5b60008413806113d65750600083135b6113df57600080fd5b60006113ed82840184612a4c565b905060008060006114018460000151611bf1565b9250925092506114337f0000000000000000000000000000000000000000000000000000000000000000848484611c22565b5060008060008a13611474578473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610896114a5565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16108a5b9150915081156114c4576114bf8587602001513384611c41565b610573565b85516114cf90611810565b156114f45785516114df9061182b565b86526114ee8133600089611860565b50610573565b806000819055508394506105738587602001513384611c41565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061158557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611548565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146115e7576040519150601f19603f3d011682016040523d82523d6000602084013e6115ec565b606091505b505090508061074057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b4290565b600073ffffffffffffffffffffffffffffffffffffffff8416611681573093505b60008060006116938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808316908416106000806116c4868686611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856116ea8f611e5d565b73ffffffffffffffffffffffffffffffffffffffff8e161561170c578d611732565b8761172b5773fffd8963efd1fc6a506488495d951d5263988d25611732565b6401000276a45b8d6040516020016117439190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611772959493929190612c58565b6040805180830381600087803b15801561178b57600080fd5b505af115801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c39190612845565b91509150826117d257816117d4565b805b6000039b9a5050505050505050505050565b6000821580611801575050818102818382816117fe57fe5b04145b61180a57600080fd5b92915050565b8051604211155b919050565b606061180a826000602b611e8f565b805160609061180a9083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901611e8f565b600073ffffffffffffffffffffffffffffffffffffffff8416611881573093505b60008060006118938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808416908316106000806118c4858786611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856118ea8f611e5d565b60000373ffffffffffffffffffffffffffffffffffffffff8e161561190f578d611935565b8761192e5773fffd8963efd1fc6a506488495d951d5263988d25611935565b6401000276a45b8d6040516020016119469190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611975959493929190612c58565b6040805180830381600087803b15801561198e57600080fd5b505af11580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c69190612845565b915091506000836119db5781836000036119e1565b82826000035b909850905073ffffffffffffffffffffffffffffffffffffffff8a16611a0d578b8114611a0d57600080fd5b50505050505050949350505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310611af157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611ab4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b53576040519150601f19603f3d011682016040523d82523d6000602084013e611b58565b606091505b5091509150818015611b86575080511580611b865750808060200190516020811015611b8357600080fd5b50515b61097a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008080611bff8482612076565b9250611c0c846014612176565b9050611c19846017612076565b91509193909250565b6000611c3885611c33868686612266565b6122e3565b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015611c9c5750804710155b15611de5577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d0957600080fd5b505af1158015611d1d573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611db357600080fd5b505af1158015611dc7573d6000803e3d6000fd5b505050506040513d6020811015611ddd57600080fd5b5061108f9050565b73ffffffffffffffffffffffffffffffffffffffff8316301415611e1357611e0e848383611a1c565b61108f565b61108f84848484612313565b6000611e557f0000000000000000000000000000000000000000000000000000000000000000611e50868686612266565b6124f0565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210611e8b57600080fd5b5090565b60608182601f011015611f0357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015611f7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015611fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015612005576040519150600082526020820160405261206d565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561203e578051835260209283019201612026565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6000818260140110156120ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b816014018351101561215d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b6000818260030110156121ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b816003018351101561225d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b61226e612626565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156122a6579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b60006122ef83836124f0565b90503373ffffffffffffffffffffffffffffffffffffffff82161461180a57600080fd5b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106123f057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123b3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612452576040519150601f19603f3d011682016040523d82523d6000602084013e612457565b606091505b5091509150818015612485575080511580612485575080806020019051602081101561248257600080fd5b50515b61097857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061253257600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516060810182526000808252602082018190529181019190915290565b803561181781612ef4565b600082601f830112612661578081fd5b813561267461266f82612e88565b612e64565b818152846020838601011115612688578283fd5b816020850160208301379081016020019190915292915050565b600061010082840312156104b9578081fd5b6000602082840312156126c5578081fd5b81356126d081612ef4565b9392505050565b6000806000606084860312156126eb578182fd5b83356126f681612ef4565b925060208401359150604084013561270d81612ef4565b809150509250925092565b600080600080600060a0868803121561272f578081fd5b853561273a81612ef4565b945060208601359350604086013561275181612ef4565b925060608601359150608086013561276881612ef4565b809150509295509295909350565b60008060008060008060c0878903121561278e578081fd5b863561279981612ef4565b95506020870135945060408701359350606087013560ff811681146127bc578182fd5b9598949750929560808101359460a0909101359350915050565b600080602083850312156127e8578182fd5b823567ffffffffffffffff808211156127ff578384fd5b818501915085601f830112612812578384fd5b813581811115612820578485fd5b8660208083028501011115612833578485fd5b60209290920196919550909350505050565b60008060408385031215612857578182fd5b505080516020909101519092909150565b6000806000806060858703121561287d578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156128a2578384fd5b818701915087601f8301126128b5578384fd5b8135818111156128c3578485fd5b8860208285010111156128d4578485fd5b95989497505060200194505050565b6000602082840312156128f4578081fd5b815167ffffffffffffffff81111561290a578182fd5b8201601f8101841361291a578182fd5b805161292861266f82612e88565b81815285602083850101111561293c578384fd5b611c38826020830160208601612ec8565b60006020828403121561295e578081fd5b813567ffffffffffffffff80821115612975578283fd5b9083019060a08286031215612988578283fd5b60405160a08101818110838211171561299d57fe5b6040528235828111156129ae578485fd5b6129ba87828601612651565b8252506129c960208401612646565b602082015260408301356040820152606083013560608201526080830135608082015280935050505092915050565b60006101008284031215612a0a578081fd5b6126d083836126a2565b600060208284031215612a25578081fd5b813567ffffffffffffffff811115612a3b578182fd5b820160a081850312156126d0578182fd5b600060208284031215612a5d578081fd5b813567ffffffffffffffff80821115612a74578283fd5b9083019060408286031215612a87578283fd5b604051604081018181108382111715612a9c57fe5b604052823582811115612aad578485fd5b612ab987828601612651565b82525060208301359250612acc83612ef4565b6020810192909252509392505050565b600060208284031215612aed578081fd5b813562ffffff811681146126d0578182fd5b60008060408385031215612b11578182fd5b823591506020830135612b2381612ef4565b809150509250929050565b60008060008060808587031215612b43578182fd5b843593506020850135612b5581612ef4565b9250604085013591506060850135612b6c81612ef4565b939692955090935050565b60008151808452612b8f816020860160208601612ec8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152612c9f60a0830184612b77565b979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612d1b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612d09858351612b77565b94509285019290850190600101612ccf565b5092979650505050505050565b6000602082526126d06020830184612b77565b60208082526012908201527f546f6f206d756368207265717565737465640000000000000000000000000000604082015260600190565b60208082526013908201527f546f6f206c6974746c6520726563656976656400000000000000000000000000604082015260600190565b600060208252825160406020840152612dc56060840182612b77565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401528091505092915050565b90815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e2e578283fd5b83018035915067ffffffffffffffff821115612e48578283fd5b602001915036819003821315612e5d57600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715612e8057fe5b604052919050565b600067ffffffffffffffff821115612e9c57fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015612ee3578181015183820152602001612ecb565b8381111561108f5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114612f1657600080fd5b5056fea164736f6c6343000706000a\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per GeneratorResume behavior specified since ES2015:\n        // ES2015 spec, step 3: https://262.ecma-international.org/6.0/#sec-generatorresume\n        // Latest spec, step 2: https://tc39.es/ecma262/#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next method, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable != null) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    throw new TypeError(typeof iterable + \" is not iterable\");\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n", "export const FACTORY_ADDRESS = '0x1F98431c8aD98523631AE4a59f267346ea31F984'\n\nexport const ADDRESS_ZERO = '0x0000000000000000000000000000000000000000'\n\nexport const POOL_INIT_CODE_HASH = '0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54'\n\n/**\n * The default factory enabled fee amounts, denominated in hundredths of bips.\n */\nexport enum FeeAmount {\n  LOWEST = 100,\n  LOW = 500,\n  MEDIUM = 3000,\n  HIGH = 10000\n}\n\n/**\n * The default factory tick spacings by fee amount.\n */\nexport const TICK_SPACINGS: { [amount in FeeAmount]: number } = {\n  [FeeAmount.LOWEST]: 1,\n  [FeeAmount.LOW]: 10,\n  [FeeAmount.MEDIUM]: 60,\n  [FeeAmount.HIGH]: 200\n}\n", "import JSBI from 'jsbi'\n\n// constants used internally but not expected to be used externally\nexport const NEGATIVE_ONE = JSBI.BigInt(-1)\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// used in liquidity amount math\nexport const Q96 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(96))\nexport const Q192 = JSBI.exponentiate(Q96, JSBI.BigInt(2))\n", "import { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { Token } from '@uniswap/sdk-core'\nimport { FeeAmount, POOL_INIT_CODE_HASH } from '../constants'\n\n/**\n * Computes a pool address\n * @param factoryAddress The Uniswap V3 factory address\n * @param tokenA The first token of the pair, irrespective of sort order\n * @param tokenB The second token of the pair, irrespective of sort order\n * @param fee The fee tier of the pool\n * @param initCodeHashManualOverride Override the init code hash used to compute the pool address if necessary\n * @returns The pool address\n */\nexport function computePoolAddress({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  initCodeHashManualOverride\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: FeeAmount\n  initCodeHashManualOverride?: string\n}): string {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(\n      ['bytes'],\n      [defaultAbiCoder.encode(['address', 'address', 'uint24'], [token0.address, token1.address, fee])]\n    ),\n    initCodeHashManualOverride ?? POOL_INIT_CODE_HASH\n  )\n}\n", "import JSBI from 'jsbi'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\n\nexport abstract class LiquidityMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static addDelta(x: JSBI, y: JSBI): JSBI {\n    if (JSBI.lessThan(y, ZERO)) {\n      return JSBI.subtract(x, JSBI.multiply(y, NEGATIVE_ONE))\n    } else {\n      return JSBI.add(x, y)\n    }\n  }\n}\n", "import JSBI from 'jsbi'\nimport { ONE, ZERO } from '../internalConstants'\n\nexport abstract class FullMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static mulDivRoundingUp(a: JSBI, b: JSBI, denominator: JSBI): JSBI {\n    const product = JSBI.multiply(a, b)\n    let result = JSBI.divide(product, denominator)\n    if (JSBI.notEqual(JSBI.remainder(product, denominator), ZERO)) result = JSBI.add(result, ONE)\n    return result\n  }\n}\n", "import { MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO, Q96 } from '../internalConstants'\nimport { FullMath } from './fullMath'\n\nconst MaxUint160 = JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(160)), ONE)\n\nfunction multiplyIn256(x: JSBI, y: JSBI): JSBI {\n  const product = JSBI.multiply(x, y)\n  return JSBI.bitwiseAnd(product, MaxUint256)\n}\n\nfunction addIn256(x: JSBI, y: JSBI): JSBI {\n  const sum = JSBI.add(x, y)\n  return JSBI.bitwiseAnd(sum, MaxUint256)\n}\n\nexport abstract class SqrtPriceMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getAmount0Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n    const numerator2 = JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), ONE, sqrtRatioAX96)\n      : JSBI.divide(JSBI.divide(JSBI.multiply(numerator1, numerator2), sqrtRatioBX96), sqrtRatioAX96)\n  }\n\n  public static getAmount1Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96), Q96)\n      : JSBI.divide(JSBI.multiply(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)), Q96)\n  }\n\n  public static getNextSqrtPriceFromInput(sqrtPX96: JSBI, liquidity: JSBI, amountIn: JSBI, zeroForOne: boolean): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n      : this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true)\n  }\n\n  public static getNextSqrtPriceFromOutput(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amountOut: JSBI,\n    zeroForOne: boolean\n  ): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n      : this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false)\n  }\n\n  private static getNextSqrtPriceFromAmount0RoundingUp(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (JSBI.equal(amount, ZERO)) return sqrtPX96\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n\n    if (add) {\n      let product = multiplyIn256(amount, sqrtPX96)\n      if (JSBI.equal(JSBI.divide(product, amount), sqrtPX96)) {\n        const denominator = addIn256(numerator1, product)\n        if (JSBI.greaterThanOrEqual(denominator, numerator1)) {\n          return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n        }\n      }\n\n      return FullMath.mulDivRoundingUp(numerator1, ONE, JSBI.add(JSBI.divide(numerator1, sqrtPX96), amount))\n    } else {\n      let product = multiplyIn256(amount, sqrtPX96)\n\n      invariant(JSBI.equal(JSBI.divide(product, amount), sqrtPX96))\n      invariant(JSBI.greaterThan(numerator1, product))\n      const denominator = JSBI.subtract(numerator1, product)\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n    }\n  }\n\n  private static getNextSqrtPriceFromAmount1RoundingDown(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (add) {\n      const quotient = JSBI.lessThanOrEqual(amount, MaxUint160)\n        ? JSBI.divide(JSBI.leftShift(amount, JSBI.BigInt(96)), liquidity)\n        : JSBI.divide(JSBI.multiply(amount, Q96), liquidity)\n\n      return JSBI.add(sqrtPX96, quotient)\n    } else {\n      const quotient = FullMath.mulDivRoundingUp(amount, Q96, liquidity)\n\n      invariant(JSBI.greaterThan(sqrtPX96, quotient))\n      return JSBI.subtract(sqrtPX96, quotient)\n    }\n  }\n}\n", "import JSBI from 'jsbi'\nimport { FeeAmount } from '../constants'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\nimport { FullMath } from './fullMath'\nimport { SqrtPriceMath } from './sqrtPriceMath'\n\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6))\n\nexport abstract class SwapMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static computeSwapStep(\n    sqrtRatioCurrentX96: JSBI,\n    sqrtRatioTargetX96: JSBI,\n    liquidity: JSBI,\n    amountRemaining: JSBI,\n    feePips: FeeAmount\n  ): [JSBI, JSBI, JSBI, JSBI] {\n    const returnValues: Partial<{\n      sqrtRatioNextX96: JSBI\n      amountIn: JSBI\n      amountOut: JSBI\n      feeAmount: JSBI\n    }> = {}\n\n    const zeroForOne = JSBI.greaterThanOrEqual(sqrtRatioCurrentX96, sqrtRatioTargetX96)\n    const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO)\n\n    if (exactIn) {\n      const amountRemainingLessFee = JSBI.divide(\n        JSBI.multiply(amountRemaining, JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))),\n        MAX_FEE\n      )\n      returnValues.amountIn = zeroForOne\n        ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true)\n      if (JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn!)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          amountRemainingLessFee,\n          zeroForOne\n        )\n      }\n    } else {\n      returnValues.amountOut = zeroForOne\n        ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false)\n      if (JSBI.greaterThanOrEqual(JSBI.multiply(amountRemaining, NEGATIVE_ONE), returnValues.amountOut)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          JSBI.multiply(amountRemaining, NEGATIVE_ONE),\n          zeroForOne\n        )\n      }\n    }\n\n    const max = JSBI.equal(sqrtRatioTargetX96, returnValues.sqrtRatioNextX96)\n\n    if (zeroForOne) {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount0Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount1Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false)\n    } else {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, false)\n    }\n\n    if (!exactIn && JSBI.greaterThan(returnValues.amountOut!, JSBI.multiply(amountRemaining, NEGATIVE_ONE))) {\n      returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE)\n    }\n\n    if (exactIn && JSBI.notEqual(returnValues.sqrtRatioNextX96, sqrtRatioTargetX96)) {\n      // we didn't reach the target, so take the remainder of the maximum input as fee\n      returnValues.feeAmount = JSBI.subtract(amountRemaining, returnValues.amountIn!)\n    } else {\n      returnValues.feeAmount = FullMath.mulDivRoundingUp(\n        returnValues.amountIn!,\n        JSBI.BigInt(feePips),\n        JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))\n      )\n    }\n\n    return [returnValues.sqrtRatioNextX96!, returnValues.amountIn!, returnValues.amountOut!, returnValues.feeAmount!]\n  }\n}\n", "import { MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\n\nconst TWO = JSBI.BigInt(2)\nconst POWERS_OF_2 = [128, 64, 32, 16, 8, 4, 2, 1].map((pow: number): [number, JSBI] => [\n  pow,\n  JSBI.exponentiate(TWO, JSBI.BigInt(pow))\n])\n\nexport function mostSignificantBit(x: JSBI): number {\n  invariant(JSBI.greaterThan(x, ZERO), 'ZERO')\n  invariant(JSBI.lessThanOrEqual(x, MaxUint256), 'MAX')\n\n  let msb: number = 0\n  for (const [power, min] of POWERS_OF_2) {\n    if (JSBI.greaterThanOrEqual(x, min)) {\n      x = JSBI.signedRightShift(x, JSBI.BigInt(power))\n      msb += power\n    }\n  }\n  return msb\n}\n", "import { MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { mostSignificantBit } from './mostSignificantBit'\n\nfunction mulShift(val: JSBI, mulBy: string): JSBI {\n  return JSBI.signedRightShift(JSBI.multiply(val, JSBI.BigInt(mulBy)), JSBI.BigInt(128))\n}\n\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32))\n\nexport abstract class TickMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * The minimum tick that can be used on any pool.\n   */\n  public static MIN_TICK: number = -887272\n  /**\n   * The maximum tick that can be used on any pool.\n   */\n  public static MAX_TICK: number = -TickMath.MIN_TICK\n\n  /**\n   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\n   */\n  public static MIN_SQRT_RATIO: JSBI = JSBI.BigInt('4295128739')\n  /**\n   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\n   */\n  public static MAX_SQRT_RATIO: JSBI = JSBI.BigInt('1461446703485210103287273052203988822378723970342')\n\n  /**\n   * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\n   * @param tick the tick for which to compute the sqrt ratio\n   */\n  public static getSqrtRatioAtTick(tick: number): JSBI {\n    invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK && Number.isInteger(tick), 'TICK')\n    const absTick: number = tick < 0 ? tick * -1 : tick\n\n    let ratio: JSBI =\n      (absTick & 0x1) != 0\n        ? JSBI.BigInt('0xfffcb933bd6fad37aa2d162d1a594001')\n        : JSBI.BigInt('0x100000000000000000000000000000000')\n    if ((absTick & 0x2) != 0) ratio = mulShift(ratio, '0xfff97272373d413259a46990580e213a')\n    if ((absTick & 0x4) != 0) ratio = mulShift(ratio, '0xfff2e50f5f656932ef12357cf3c7fdcc')\n    if ((absTick & 0x8) != 0) ratio = mulShift(ratio, '0xffe5caca7e10e4e61c3624eaa0941cd0')\n    if ((absTick & 0x10) != 0) ratio = mulShift(ratio, '0xffcb9843d60f6159c9db58835c926644')\n    if ((absTick & 0x20) != 0) ratio = mulShift(ratio, '0xff973b41fa98c081472e6896dfb254c0')\n    if ((absTick & 0x40) != 0) ratio = mulShift(ratio, '0xff2ea16466c96a3843ec78b326b52861')\n    if ((absTick & 0x80) != 0) ratio = mulShift(ratio, '0xfe5dee046a99a2a811c461f1969c3053')\n    if ((absTick & 0x100) != 0) ratio = mulShift(ratio, '0xfcbe86c7900a88aedcffc83b479aa3a4')\n    if ((absTick & 0x200) != 0) ratio = mulShift(ratio, '0xf987a7253ac413176f2b074cf7815e54')\n    if ((absTick & 0x400) != 0) ratio = mulShift(ratio, '0xf3392b0822b70005940c7a398e4b70f3')\n    if ((absTick & 0x800) != 0) ratio = mulShift(ratio, '0xe7159475a2c29b7443b29c7fa6e889d9')\n    if ((absTick & 0x1000) != 0) ratio = mulShift(ratio, '0xd097f3bdfd2022b8845ad8f792aa5825')\n    if ((absTick & 0x2000) != 0) ratio = mulShift(ratio, '0xa9f746462d870fdf8a65dc1f90e061e5')\n    if ((absTick & 0x4000) != 0) ratio = mulShift(ratio, '0x70d869a156d2a1b890bb3df62baf32f7')\n    if ((absTick & 0x8000) != 0) ratio = mulShift(ratio, '0x31be135f97d08fd981231505542fcfa6')\n    if ((absTick & 0x10000) != 0) ratio = mulShift(ratio, '0x9aa508b5b7a84e1c677de54f3e99bc9')\n    if ((absTick & 0x20000) != 0) ratio = mulShift(ratio, '0x5d6af8dedb81196699c329225ee604')\n    if ((absTick & 0x40000) != 0) ratio = mulShift(ratio, '0x2216e584f5fa1ea926041bedfe98')\n    if ((absTick & 0x80000) != 0) ratio = mulShift(ratio, '0x48a170391f7dc42444e8fa2')\n\n    if (tick > 0) ratio = JSBI.divide(MaxUint256, ratio)\n\n    // back to Q96\n    return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\n      ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\n      : JSBI.divide(ratio, Q32)\n  }\n\n  /**\n   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\n   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\n   * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\n   */\n  public static getTickAtSqrtRatio(sqrtRatioX96: JSBI): number {\n    invariant(\n      JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\n        JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO),\n      'SQRT_RATIO'\n    )\n\n    const sqrtRatioX128 = JSBI.leftShift(sqrtRatioX96, JSBI.BigInt(32))\n\n    const msb = mostSignificantBit(sqrtRatioX128)\n\n    let r: JSBI\n    if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(128))) {\n      r = JSBI.signedRightShift(sqrtRatioX128, JSBI.BigInt(msb - 127))\n    } else {\n      r = JSBI.leftShift(sqrtRatioX128, JSBI.BigInt(127 - msb))\n    }\n\n    let log_2: JSBI = JSBI.leftShift(JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(128)), JSBI.BigInt(64))\n\n    for (let i = 0; i < 14; i++) {\n      r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(127))\n      const f = JSBI.signedRightShift(r, JSBI.BigInt(128))\n      log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(63 - i)))\n      r = JSBI.signedRightShift(r, f)\n    }\n\n    const log_sqrt10001 = JSBI.multiply(log_2, JSBI.BigInt('255738958999603826347141'))\n\n    const tickLow = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.subtract(log_sqrt10001, JSBI.BigInt('3402992956809132418596140100660247210')),\n        JSBI.BigInt(128)\n      )\n    )\n    const tickHigh = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.add(log_sqrt10001, JSBI.BigInt('291339464771989622907027621153398088495')),\n        JSBI.BigInt(128)\n      )\n    )\n\n    return tickLow === tickHigh\n      ? tickLow\n      : JSBI.lessThanOrEqual(TickMath.getSqrtRatioAtTick(tickHigh), sqrtRatioX96)\n      ? tickHigh\n      : tickLow\n  }\n}\n", "import { BigintIsh } from '@uniswap/sdk-core'\n\n/**\n * Provides information about ticks\n */\nexport interface TickDataProvider {\n  /**\n   * Return information corresponding to a specific tick\n   * @param tick the tick to load\n   */\n  getTick(tick: number): Promise<{ liquidityNet: BigintIsh }>\n\n  /**\n   * Return the next tick that is initialized within a single word\n   * @param tick The current tick\n   * @param lte Whether the next tick should be lte the current tick\n   * @param tickSpacing The tick spacing of the pool\n   */\n  nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]>\n}\n\n/**\n * This tick data provider does not know how to fetch any tick data. It throws whenever it is required. Useful if you\n * do not need to load tick data for your use case.\n */\nexport class NoTickDataProvider implements TickDataProvider {\n  private static ERROR_MESSAGE = 'No tick data provider was given'\n  async getTick(_tick: number): Promise<{ liquidityNet: BigintIsh }> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n\n  async nextInitializedTickWithinOneWord(\n    _tick: number,\n    _lte: boolean,\n    _tickSpacing: number\n  ): Promise<[number, boolean]> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n}\n", "/**\n * Determines if a tick list is sorted\n * @param list The tick list\n * @param comparator The comparator\n * @returns true if sorted\n */\nexport function isSorted<T>(list: Array<T>, comparator: (a: T, b: T) => number): boolean {\n  for (let i = 0; i < list.length - 1; i++) {\n    if (comparator(list[i], list[i + 1]) > 0) {\n      return false\n    }\n  }\n  return true\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Tick } from '../entities/tick'\nimport { ZERO } from '../internalConstants'\nimport { isSorted } from './isSorted'\n\nfunction tickComparator(a: Tick, b: Tick) {\n  return a.index - b.index\n}\n\n/**\n * Utility methods for interacting with sorted lists of ticks\n */\nexport abstract class TickList {\n  /**\n   * Cannot be constructed\n   */\n  private constructor() {}\n\n  public static validateList(ticks: Tick[], tickSpacing: number) {\n    invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO')\n    // ensure ticks are spaced appropriately\n    invariant(\n      ticks.every(({ index }) => index % tickSpacing === 0),\n      'TICK_SPACING'\n    )\n\n    // ensure tick liquidity deltas sum to 0\n    invariant(\n      JSBI.equal(\n        ticks.reduce((accumulator, { liquidityNet }) => JSBI.add(accumulator, liquidityNet), ZERO),\n        ZERO\n      ),\n      'ZERO_NET'\n    )\n\n    invariant(isSorted(ticks, tickComparator), 'SORTED')\n  }\n\n  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick < ticks[0].index\n  }\n\n  public static isAtOrAboveLargest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick >= ticks[ticks.length - 1].index\n  }\n\n  public static getTick(ticks: readonly Tick[], index: number): Tick {\n    const tick = ticks[this.binarySearch(ticks, index)]\n    invariant(tick.index === index, 'NOT_CONTAINED')\n    return tick\n  }\n\n  /**\n   * Finds the largest tick in the list of ticks that is less than or equal to tick\n   * @param ticks list of ticks\n   * @param tick tick to find the largest tick that is less than or equal to tick\n   * @private\n   */\n  private static binarySearch(ticks: readonly Tick[], tick: number): number {\n    invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n\n    let l = 0\n    let r = ticks.length - 1\n    let i\n    while (true) {\n      i = Math.floor((l + r) / 2)\n\n      if (ticks[i].index <= tick && (i === ticks.length - 1 || ticks[i + 1].index > tick)) {\n        return i\n      }\n\n      if (ticks[i].index < tick) {\n        l = i + 1\n      } else {\n        r = i - 1\n      }\n    }\n  }\n\n  public static nextInitializedTick(ticks: readonly Tick[], tick: number, lte: boolean): Tick {\n    if (lte) {\n      invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n      if (TickList.isAtOrAboveLargest(ticks, tick)) {\n        return ticks[ticks.length - 1]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index]\n    } else {\n      invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST')\n      if (this.isBelowSmallest(ticks, tick)) {\n        return ticks[0]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index + 1]\n    }\n  }\n\n  public static nextInitializedTickWithinOneWord(\n    ticks: readonly Tick[],\n    tick: number,\n    lte: boolean,\n    tickSpacing: number\n  ): [number, boolean] {\n    const compressed = Math.floor(tick / tickSpacing) // matches rounding in the code\n\n    if (lte) {\n      const wordPos = compressed >> 8\n      const minimum = (wordPos << 8) * tickSpacing\n\n      if (TickList.isBelowSmallest(ticks, tick)) {\n        return [minimum, false]\n      }\n\n      const index = TickList.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.max(minimum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    } else {\n      const wordPos = (compressed + 1) >> 8\n      const maximum = (((wordPos + 1) << 8) - 1) * tickSpacing\n\n      if (this.isAtOrAboveLargest(ticks, tick)) {\n        return [maximum, false]\n      }\n\n      const index = this.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.min(maximum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    }\n  }\n}\n", "import { BigintIsh } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * Generated method parameters for executing a call.\n */\nexport interface MethodParameters {\n  /**\n   * The hex encoded calldata to perform the given operation\n   */\n  calldata: string\n  /**\n   * The amount of ether (wei) to send in hex.\n   */\n  value: string\n}\n\n/**\n * Converts a big int to a hex string\n * @param bigintIsh\n * @returns The hex encoded calldata\n */\nexport function toHex(bigintIsh: BigintIsh) {\n  const bigInt = JSBI.BigInt(bigintIsh)\n  let hex = bigInt.toString(16)\n  if (hex.length % 2 !== 0) {\n    hex = `0${hex}`\n  }\n  return `0x${hex}`\n}\n", "import { pack } from '@ethersproject/solidity'\nimport { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool } from '../entities/pool'\nimport { Route } from '../entities/route'\n\n/**\n * Converts a route to a hex encoded path\n * @param route the v3 path to convert to an encoded path\n * @param exactOutput whether the route should be encoded in reverse, for making exact output swaps\n */\nexport function encodeRouteToPath(route: Route<Currency, Currency>, exactOutput: boolean): string {\n  const firstInputToken: Token = route.input.wrapped\n\n  const { path, types } = route.pools.reduce(\n    (\n      { inputToken, path, types }: { inputToken: Token; path: (string | number)[]; types: string[] },\n      pool: Pool,\n      index\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      if (index === 0) {\n        return {\n          inputToken: outputToken,\n          types: ['address', 'uint24', 'address'],\n          path: [inputToken.address, pool.fee, outputToken.address]\n        }\n      } else {\n        return {\n          inputToken: outputToken,\n          types: [...types, 'uint24', 'address'],\n          path: [...path, pool.fee, outputToken.address]\n        }\n      }\n    },\n    { inputToken: firstInputToken, path: [], types: [] }\n  )\n\n  return exactOutput ? pack(types.reverse(), path.reverse()) : pack(types, path)\n}\n", "import JSBI from 'jsbi'\nimport { BigintIsh, sqrt } from '@uniswap/sdk-core'\n\n/**\n * Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0\n * @param amount1 The numerator amount i.e., the amount of token1\n * @param amount0 The denominator amount i.e., the amount of token0\n * @returns The sqrt ratio\n */\n\nexport function encodeSqrtRatioX96(amount1: BigintIsh, amount0: BigintIsh): JSBI {\n  const numerator = JSBI.leftShift(JSBI.BigInt(amount1), JSBI.BigInt(192))\n  const denominator = JSBI.BigInt(amount0)\n  const ratioX192 = JSBI.divide(numerator, denominator)\n  return sqrt(ratioX192)\n}\n", "import { BigintIsh } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q96 } from '../internalConstants'\n\n/**\n * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.\n * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,\n * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future\n * v3 router contract.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, imprecise\n */\nfunction maxLiquidityForAmount0Imprecise(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  const intermediate = JSBI.divide(JSBI.multiply(sqrtRatioAX96, sqrtRatioBX96), Q96)\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount0), intermediate), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\n/**\n * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, precise\n */\nfunction maxLiquidityForAmount0Precise(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n\n  const numerator = JSBI.multiply(JSBI.multiply(JSBI.BigInt(amount0), sqrtRatioAX96), sqrtRatioBX96)\n  const denominator = JSBI.multiply(Q96, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n\n  return JSBI.divide(numerator, denominator)\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token1\n * @param sqrtRatioAX96 The price at the lower tick boundary\n * @param sqrtRatioBX96 The price at the upper tick boundary\n * @param amount1 The token1 amount\n * @returns liquidity for amount1\n */\nfunction maxLiquidityForAmount1(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount1: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount1), Q96), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n * and the prices at the tick boundaries.\n * @param sqrtRatioCurrentX96 the current price\n * @param sqrtRatioAX96 price at lower boundary\n * @param sqrtRatioBX96 price at upper boundary\n * @param amount0 token0 amount\n * @param amount1 token1 amount\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\n * not what core can theoretically support\n */\nexport function maxLiquidityForAmounts(\n  sqrtRatioCurrentX96: JSBI,\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigintIsh,\n  amount1: BigintIsh,\n  useFullPrecision: boolean\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n\n  const maxLiquidityForAmount0 = useFullPrecision ? maxLiquidityForAmount0Precise : maxLiquidityForAmount0Imprecise\n\n  if (JSBI.lessThanOrEqual(sqrtRatioCurrentX96, sqrtRatioAX96)) {\n    return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0)\n  } else if (JSBI.lessThan(sqrtRatioCurrentX96, sqrtRatioBX96)) {\n    const liquidity0 = maxLiquidityForAmount0(sqrtRatioCurrentX96, sqrtRatioBX96, amount0)\n    const liquidity1 = maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioCurrentX96, amount1)\n    return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1\n  } else {\n    return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1)\n  }\n}\n", "import invariant from 'tiny-invariant'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns the closest tick that is nearest a given tick and usable for the given tick spacing\n * @param tick the target tick\n * @param tickSpacing the spacing of the pool\n */\nexport function nearestUsableTick(tick: number, tickSpacing: number) {\n  invariant(Number.isInteger(tick) && Number.isInteger(tickSpacing), 'INTEGERS')\n  invariant(tickSpacing > 0, 'TICK_SPACING')\n  invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK, 'TICK_BOUND')\n  const rounded = Math.round(tick / tickSpacing) * tickSpacing\n  if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing\n  else if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing\n  else return rounded\n}\n", "import JSBI from 'jsbi'\nimport { subIn256 } from '.'\n\nconst Q128 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128))\n\nexport abstract class PositionLibrary {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // replicates the portions of Position#update required to compute unaccounted fees\n  public static getTokensOwed(\n    feeGrowthInside0LastX128: JSBI,\n    feeGrowthInside1LastX128: JSBI,\n    liquidity: JSBI,\n    feeGrowthInside0X128: JSBI,\n    feeGrowthInside1X128: JSBI\n  ) {\n    const tokensOwed0 = JSBI.divide(\n      JSBI.multiply(subIn256(feeGrowthInside0X128, feeGrowthInside0LastX128), liquidity),\n      Q128\n    )\n\n    const tokensOwed1 = JSBI.divide(\n      JSBI.multiply(subIn256(feeGrowthInside1X128, feeGrowthInside1LastX128), liquidity),\n      Q128\n    )\n\n    return [tokensOwed0, tokensOwed1]\n  }\n}\n", "import { Price, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q192 } from '../internalConstants'\nimport { encodeSqrtRatioX96 } from './encodeSqrtRatioX96'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns a price object corresponding to the input tick and the base/quote token\n * Inputs must be tokens because the address order is used to interpret the price represented by the tick\n * @param baseToken the base token of the price\n * @param quoteToken the quote token of the price\n * @param tick the tick for which to return the price\n */\nexport function tickToPrice(baseToken: Token, quoteToken: Token, tick: number): Price<Token, Token> {\n  const sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick)\n\n  const ratioX192 = JSBI.multiply(sqrtRatioX96, sqrtRatioX96)\n\n  return baseToken.sortsBefore(quoteToken)\n    ? new Price(baseToken, quoteToken, Q192, ratioX192)\n    : new Price(baseToken, quoteToken, ratioX192, Q192)\n}\n\n/**\n * Returns the first tick for which the given price is greater than or equal to the tick price\n * @param price for which to return the closest tick that represents a price less than or equal to the input price,\n * i.e. the price of the returned tick is less than or equal to the input price\n */\nexport function priceToClosestTick(price: Price<Token, Token>): number {\n  const sorted = price.baseCurrency.sortsBefore(price.quoteCurrency)\n\n  const sqrtRatioX96 = sorted\n    ? encodeSqrtRatioX96(price.numerator, price.denominator)\n    : encodeSqrtRatioX96(price.denominator, price.numerator)\n\n  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96)\n  const nextTickPrice = tickToPrice(price.baseCurrency, price.quoteCurrency, tick + 1)\n  if (sorted) {\n    if (!price.lessThan(nextTickPrice)) {\n      tick++\n    }\n  } else {\n    if (!price.greaterThan(nextTickPrice)) {\n      tick++\n    }\n  }\n  return tick\n}\n", "import JSBI from 'jsbi'\nimport { ZERO } from '../internalConstants'\n\ninterface FeeGrowthOutside {\n  feeGrowthOutside0X128: JSBI\n  feeGrowthOutside1X128: JSBI\n}\n\nconst Q256 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(256))\n\nexport function subIn256(x: JSBI, y: JSBI): JSBI {\n  const difference = JSBI.subtract(x, y)\n\n  if (JSBI.lessThan(difference, ZERO)) {\n    return JSBI.add(Q256, difference)\n  } else {\n    return difference\n  }\n}\n\nexport abstract class TickLibrary {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getFeeGrowthInside(\n    feeGrowthOutsideLower: FeeGrowthOutside,\n    feeGrowthOutsideUpper: FeeGrowthOutside,\n    tickLower: number,\n    tickUpper: number,\n    tickCurrent: number,\n    feeGrowthGlobal0X128: JSBI,\n    feeGrowthGlobal1X128: JSBI\n  ) {\n    let feeGrowthBelow0X128: JSBI\n    let feeGrowthBelow1X128: JSBI\n    if (tickCurrent >= tickLower) {\n      feeGrowthBelow0X128 = feeGrowthOutsideLower.feeGrowthOutside0X128\n      feeGrowthBelow1X128 = feeGrowthOutsideLower.feeGrowthOutside1X128\n    } else {\n      feeGrowthBelow0X128 = subIn256(feeGrowthGlobal0X128, feeGrowthOutsideLower.feeGrowthOutside0X128)\n      feeGrowthBelow1X128 = subIn256(feeGrowthGlobal1X128, feeGrowthOutsideLower.feeGrowthOutside1X128)\n    }\n\n    let feeGrowthAbove0X128: JSBI\n    let feeGrowthAbove1X128: JSBI\n    if (tickCurrent < tickUpper) {\n      feeGrowthAbove0X128 = feeGrowthOutsideUpper.feeGrowthOutside0X128\n      feeGrowthAbove1X128 = feeGrowthOutsideUpper.feeGrowthOutside1X128\n    } else {\n      feeGrowthAbove0X128 = subIn256(feeGrowthGlobal0X128, feeGrowthOutsideUpper.feeGrowthOutside0X128)\n      feeGrowthAbove1X128 = subIn256(feeGrowthGlobal1X128, feeGrowthOutsideUpper.feeGrowthOutside1X128)\n    }\n\n    return [\n      subIn256(subIn256(feeGrowthGlobal0X128, feeGrowthBelow0X128), feeGrowthAbove0X128),\n      subIn256(subIn256(feeGrowthGlobal1X128, feeGrowthBelow1X128), feeGrowthAbove1X128)\n    ]\n  }\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { BigintIsh } from '@uniswap/sdk-core'\nimport { TickMath } from '../utils'\n\nexport interface TickConstructorArgs {\n  index: number\n  liquidityGross: BigintIsh\n  liquidityNet: BigintIsh\n}\n\nexport class Tick {\n  public readonly index: number\n  public readonly liquidityGross: JSBI\n  public readonly liquidityNet: JSBI\n\n  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {\n    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, 'TICK')\n    this.index = index\n    this.liquidityGross = JSBI.BigInt(liquidityGross)\n    this.liquidityNet = JSBI.BigInt(liquidityNet)\n  }\n}\n", "import { BigintIsh } from '@uniswap/sdk-core'\nimport { TickList } from '../utils/tickList'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { TickDataProvider } from './tickDataProvider'\n\n/**\n * A data provider for ticks that is backed by an in-memory array of ticks.\n */\nexport class TickListDataProvider implements TickDataProvider {\n  private ticks: readonly Tick[]\n\n  constructor(ticks: (Tick | TickConstructorArgs)[], tickSpacing: number) {\n    const ticksMapped: Tick[] = ticks.map(t => (t instanceof Tick ? t : new Tick(t)))\n    TickList.validateList(ticksMapped, tickSpacing)\n    this.ticks = ticksMapped\n  }\n\n  async getTick(tick: number): Promise<{ liquidityNet: BigintIsh; liquidityGross: BigintIsh }> {\n    return TickList.getTick(this.ticks, tick)\n  }\n\n  async nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]> {\n    return TickList.nextInitializedTickWithinOneWord(this.ticks, tick, lte, tickSpacing)\n  }\n}\n", "import { BigintIsh, CurrencyAmount, Price, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { FACTORY_ADDRESS, FeeAmount, TICK_SPACINGS } from '../constants'\nimport { NEGATIVE_ONE, ONE, Q192, ZERO } from '../internalConstants'\nimport { computePoolAddress } from '../utils/computePoolAddress'\nimport { LiquidityMath } from '../utils/liquidityMath'\nimport { SwapMath } from '../utils/swapMath'\nimport { TickMath } from '../utils/tickMath'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { NoTickDataProvider, TickDataProvider } from './tickDataProvider'\nimport { TickListDataProvider } from './tickListDataProvider'\n\ninterface StepComputations {\n  sqrtPriceStartX96: JSBI\n  tickNext: number\n  initialized: boolean\n  sqrtPriceNextX96: JSBI\n  amountIn: JSBI\n  amountOut: JSBI\n  feeAmount: JSBI\n}\n\n/**\n * By default, pools will not allow operations that require ticks.\n */\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider()\n\n/**\n * Represents a V3 pool\n */\nexport class Pool {\n  public readonly token0: Token\n  public readonly token1: Token\n  public readonly fee: FeeAmount\n  public readonly sqrtRatioX96: JSBI\n  public readonly liquidity: JSBI\n  public readonly tickCurrent: number\n  public readonly tickDataProvider: TickDataProvider\n\n  private _token0Price?: Price<Token, Token>\n  private _token1Price?: Price<Token, Token>\n\n  public static getAddress(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    initCodeHashManualOverride?: string,\n    factoryAddressOverride?: string\n  ): string {\n    return computePoolAddress({\n      factoryAddress: factoryAddressOverride ?? FACTORY_ADDRESS,\n      fee,\n      tokenA,\n      tokenB,\n      initCodeHashManualOverride\n    })\n  }\n\n  /**\n   * Construct a pool\n   * @param tokenA One of the tokens in the pool\n   * @param tokenB The other token in the pool\n   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool\n   * @param sqrtRatioX96 The sqrt of the current ratio of amounts of token1 to token0\n   * @param liquidity The current value of in range liquidity\n   * @param tickCurrent The current tick of the pool\n   * @param ticks The current state of the pool ticks or a data provider that can return tick data\n   */\n  public constructor(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtRatioX96: BigintIsh,\n    liquidity: BigintIsh,\n    tickCurrent: number,\n    ticks: TickDataProvider | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT\n  ) {\n    invariant(Number.isInteger(fee) && fee < 1_000_000, 'FEE')\n\n    const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent)\n    const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1)\n    invariant(\n      JSBI.greaterThanOrEqual(JSBI.BigInt(sqrtRatioX96), tickCurrentSqrtRatioX96) &&\n        JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),\n      'PRICE_BOUNDS'\n    )\n    // always create a copy of the list since we want the pool's tick list to be immutable\n    ;[this.token0, this.token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n    this.fee = fee\n    this.sqrtRatioX96 = JSBI.BigInt(sqrtRatioX96)\n    this.liquidity = JSBI.BigInt(liquidity)\n    this.tickCurrent = tickCurrent\n    this.tickDataProvider = Array.isArray(ticks) ? new TickListDataProvider(ticks, TICK_SPACINGS[fee]) : ticks\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token The token to check\n   * @returns True if token is either token0 or token\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token0, i.e. the ratio of token1 over token0\n   */\n  public get token0Price(): Price<Token, Token> {\n    return (\n      this._token0Price ??\n      (this._token0Price = new Price(\n        this.token0,\n        this.token1,\n        Q192,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96)\n      ))\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token1, i.e. the ratio of token0 over token1\n   */\n  public get token1Price(): Price<Token, Token> {\n    return (\n      this._token1Price ??\n      (this._token1Price = new Price(\n        this.token1,\n        this.token0,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\n        Q192\n      ))\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pool.\n   * @param token The token to return price of\n   * @returns The price of the given token, in terms of the other.\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pool.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  /**\n   * Given an input amount of a token, return the computed output amount, and a pool with state updated after the trade\n   * @param inputAmount The input amount for which to quote the output amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit\n   * @returns The output amount and the pool with updated state\n   */\n  public async getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n\n    const zeroForOne = inputAmount.currency.equals(this.token0)\n\n    const { amountCalculated: outputAmount, sqrtRatioX96, liquidity, tickCurrent } = await this.swap(\n      zeroForOne,\n      inputAmount.quotient,\n      sqrtPriceLimitX96\n    )\n    const outputToken = zeroForOne ? this.token1 : this.token0\n    return [\n      CurrencyAmount.fromRawAmount(outputToken, JSBI.multiply(outputAmount, NEGATIVE_ONE)),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider)\n    ]\n  }\n\n  /**\n   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade\n   * @param outputAmount the output amount for which to quote the input amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns The input amount and the pool with updated state\n   */\n  public async getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(outputAmount.currency.isToken && this.involvesToken(outputAmount.currency), 'TOKEN')\n\n    const zeroForOne = outputAmount.currency.equals(this.token1)\n\n    const { amountCalculated: inputAmount, sqrtRatioX96, liquidity, tickCurrent } = await this.swap(\n      zeroForOne,\n      JSBI.multiply(outputAmount.quotient, NEGATIVE_ONE),\n      sqrtPriceLimitX96\n    )\n    const inputToken = zeroForOne ? this.token0 : this.token1\n    return [\n      CurrencyAmount.fromRawAmount(inputToken, inputAmount),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider)\n    ]\n  }\n\n  /**\n   * Executes a swap\n   * @param zeroForOne Whether the amount in is token0 or token1\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns amountCalculated\n   * @returns sqrtRatioX96\n   * @returns liquidity\n   * @returns tickCurrent\n   */\n  private async swap(\n    zeroForOne: boolean,\n    amountSpecified: JSBI,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<{ amountCalculated: JSBI; sqrtRatioX96: JSBI; liquidity: JSBI; tickCurrent: number }> {\n    if (!sqrtPriceLimitX96)\n      sqrtPriceLimitX96 = zeroForOne\n        ? JSBI.add(TickMath.MIN_SQRT_RATIO, ONE)\n        : JSBI.subtract(TickMath.MAX_SQRT_RATIO, ONE)\n\n    if (zeroForOne) {\n      invariant(JSBI.greaterThan(sqrtPriceLimitX96, TickMath.MIN_SQRT_RATIO), 'RATIO_MIN')\n      invariant(JSBI.lessThan(sqrtPriceLimitX96, this.sqrtRatioX96), 'RATIO_CURRENT')\n    } else {\n      invariant(JSBI.lessThan(sqrtPriceLimitX96, TickMath.MAX_SQRT_RATIO), 'RATIO_MAX')\n      invariant(JSBI.greaterThan(sqrtPriceLimitX96, this.sqrtRatioX96), 'RATIO_CURRENT')\n    }\n\n    const exactInput = JSBI.greaterThanOrEqual(amountSpecified, ZERO)\n\n    // keep track of swap state\n\n    const state = {\n      amountSpecifiedRemaining: amountSpecified,\n      amountCalculated: ZERO,\n      sqrtPriceX96: this.sqrtRatioX96,\n      tick: this.tickCurrent,\n      liquidity: this.liquidity\n    }\n\n    // start swap while loop\n    while (JSBI.notEqual(state.amountSpecifiedRemaining, ZERO) && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n      let step: Partial<StepComputations> = {}\n      step.sqrtPriceStartX96 = state.sqrtPriceX96\n\n      // because each iteration of the while loop rounds, we can't optimize this code (relative to the smart contract)\n      // by simply traversing to the next available tick, we instead need to exactly replicate\n      // tickBitmap.nextInitializedTickWithinOneWord\n      ;[step.tickNext, step.initialized] = await this.tickDataProvider.nextInitializedTickWithinOneWord(\n        state.tick,\n        zeroForOne,\n        this.tickSpacing\n      )\n\n      if (step.tickNext < TickMath.MIN_TICK) {\n        step.tickNext = TickMath.MIN_TICK\n      } else if (step.tickNext > TickMath.MAX_TICK) {\n        step.tickNext = TickMath.MAX_TICK\n      }\n\n      step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext)\n      ;[state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.computeSwapStep(\n        state.sqrtPriceX96,\n        (zeroForOne\n        ? JSBI.lessThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\n        : JSBI.greaterThan(step.sqrtPriceNextX96, sqrtPriceLimitX96))\n          ? sqrtPriceLimitX96\n          : step.sqrtPriceNextX96,\n        state.liquidity,\n        state.amountSpecifiedRemaining,\n        this.fee\n      )\n\n      if (exactInput) {\n        state.amountSpecifiedRemaining = JSBI.subtract(\n          state.amountSpecifiedRemaining,\n          JSBI.add(step.amountIn, step.feeAmount)\n        )\n        state.amountCalculated = JSBI.subtract(state.amountCalculated, step.amountOut)\n      } else {\n        state.amountSpecifiedRemaining = JSBI.add(state.amountSpecifiedRemaining, step.amountOut)\n        state.amountCalculated = JSBI.add(state.amountCalculated, JSBI.add(step.amountIn, step.feeAmount))\n      }\n\n      // TODO\n      if (JSBI.equal(state.sqrtPriceX96, step.sqrtPriceNextX96)) {\n        // if the tick is initialized, run the tick transition\n        if (step.initialized) {\n          let liquidityNet = JSBI.BigInt((await this.tickDataProvider.getTick(step.tickNext)).liquidityNet)\n          // if we're moving leftward, we interpret liquidityNet as the opposite sign\n          // safe because liquidityNet cannot be type(int128).min\n          if (zeroForOne) liquidityNet = JSBI.multiply(liquidityNet, NEGATIVE_ONE)\n\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet)\n        }\n\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext\n      } else if (JSBI.notEqual(state.sqrtPriceX96, step.sqrtPriceStartX96)) {\n        // updated comparison function\n        // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n        state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96)\n      }\n    }\n\n    return {\n      amountCalculated: state.amountCalculated,\n      sqrtRatioX96: state.sqrtPriceX96,\n      liquidity: state.liquidity,\n      tickCurrent: state.tick\n    }\n  }\n\n  public get tickSpacing(): number {\n    return TICK_SPACINGS[this.fee]\n  }\n}\n", "import { BigintIsh, MaxUint256, Percent, Price, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\nimport { maxLiquidityForAmounts } from '../utils/maxLiquidityForAmounts'\nimport { tickToPrice } from '../utils/priceTickConversions'\nimport { SqrtPriceMath } from '../utils/sqrtPriceMath'\nimport { TickMath } from '../utils/tickMath'\nimport { encodeSqrtRatioX96 } from '../utils/encodeSqrtRatioX96'\nimport { Pool } from './pool'\n\ninterface PositionConstructorArgs {\n  pool: Pool\n  tickLower: number\n  tickUpper: number\n  liquidity: BigintIsh\n}\n\n/**\n * Represents a position on a Uniswap V3 Pool\n */\nexport class Position {\n  public readonly pool: Pool\n  public readonly tickLower: number\n  public readonly tickUpper: number\n  public readonly liquidity: JSBI\n\n  // cached resuts for the getters\n  private _token0Amount: CurrencyAmount<Token> | null = null\n  private _token1Amount: CurrencyAmount<Token> | null = null\n  private _mintAmounts: Readonly<{ amount0: JSBI; amount1: JSBI }> | null = null\n\n  /**\n   * Constructs a position for a given pool with the given liquidity\n   * @param pool For which pool the liquidity is assigned\n   * @param liquidity The amount of liquidity that is in the position\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   */\n  public constructor({ pool, liquidity, tickLower, tickUpper }: PositionConstructorArgs) {\n    invariant(tickLower < tickUpper, 'TICK_ORDER')\n    invariant(tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0, 'TICK_LOWER')\n    invariant(tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0, 'TICK_UPPER')\n\n    this.pool = pool\n    this.tickLower = tickLower\n    this.tickUpper = tickUpper\n    this.liquidity = JSBI.BigInt(liquidity)\n  }\n\n  /**\n   * Returns the price of token0 at the lower tick\n   */\n  public get token0PriceLower(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickLower)\n  }\n\n  /**\n   * Returns the price of token0 at the upper tick\n   */\n  public get token0PriceUpper(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickUpper)\n  }\n\n  /**\n   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount0(): CurrencyAmount<Token> {\n    if (this._token0Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token0Amount = CurrencyAmount.fromRawAmount(this.pool.token0, ZERO)\n      }\n    }\n    return this._token0Amount\n  }\n\n  /**\n   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount1(): CurrencyAmount<Token> {\n    if (this._token1Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(this.pool.token1, ZERO)\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      }\n    }\n    return this._token1Amount\n  }\n\n  /**\n   * Returns the lower and upper sqrt ratios if the price 'slips' up to slippage tolerance percentage\n   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert\n   * @returns The sqrt ratios after slippage\n   */\n  private ratiosAfterSlippage(slippageTolerance: Percent): { sqrtRatioX96Lower: JSBI; sqrtRatioX96Upper: JSBI } {\n    const priceLower = this.pool.token0Price.asFraction.multiply(new Percent(1).subtract(slippageTolerance))\n    const priceUpper = this.pool.token0Price.asFraction.multiply(slippageTolerance.add(1))\n    let sqrtRatioX96Lower = encodeSqrtRatioX96(priceLower.numerator, priceLower.denominator)\n    if (JSBI.lessThanOrEqual(sqrtRatioX96Lower, TickMath.MIN_SQRT_RATIO)) {\n      sqrtRatioX96Lower = JSBI.add(TickMath.MIN_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    let sqrtRatioX96Upper = encodeSqrtRatioX96(priceUpper.numerator, priceUpper.denominator)\n    if (JSBI.greaterThanOrEqual(sqrtRatioX96Upper, TickMath.MAX_SQRT_RATIO)) {\n      sqrtRatioX96Upper = JSBI.subtract(TickMath.MAX_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    return {\n      sqrtRatioX96Lower,\n      sqrtRatioX96Upper\n    }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to safely mint the amount of liquidity held by the position\n   * with the given slippage tolerance\n   * @param slippageTolerance Tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public mintAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // because the router is imprecise, we need to calculate the position that will be created (assuming no slippage)\n    const positionThatWillBeCreated = Position.fromAmounts({\n      pool: this.pool,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n      ...this.mintAmounts, // the mint amounts are what will be passed as calldata\n      useFullPrecision: false\n    })\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const { amount0 } = new Position({\n      pool: poolUpper,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).mintAmounts\n    // ...and the lower for amount1\n    const { amount1 } = new Position({\n      pool: poolLower,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).mintAmounts\n\n    return { amount0, amount1 }\n  }\n\n  /**\n   * Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the\n   * position with the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public burnAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const amount0 = new Position({\n      pool: poolUpper,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount0\n    // ...and the lower for amount1\n    const amount1 = new Position({\n      pool: poolLower,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount1\n\n    return { amount0: amount0.quotient, amount1: amount1.quotient }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at\n   * the current price for the pool\n   */\n  public get mintAmounts(): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    if (this._mintAmounts === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: ZERO\n        }\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            true\n          )\n        }\n      } else {\n        return {\n          amount0: ZERO,\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          )\n        }\n      }\n    }\n    return this._mintAmounts\n  }\n\n  /**\n   * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n   * and the prices at the tick boundaries.\n   * @param pool The pool for which the position should be created\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   * @param amount0 token0 amount\n   * @param amount1 token1 amount\n   * @param useFullPrecision If false, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The amount of liquidity for the position\n   */\n  public static fromAmounts({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    amount1,\n    useFullPrecision\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    amount1: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower)\n    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper)\n    return new Position({\n      pool,\n      tickLower,\n      tickUpper,\n      liquidity: maxLiquidityForAmounts(\n        pool.sqrtRatioX96,\n        sqrtRatioAX96,\n        sqrtRatioBX96,\n        amount0,\n        amount1,\n        useFullPrecision\n      )\n    })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount0 The desired amount of token0\n   * @param useFullPrecision If true, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The position\n   */\n  public static fromAmount0({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    useFullPrecision\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0, amount1: MaxUint256, useFullPrecision })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount1 The desired amount of token1\n   * @returns The position\n   */\n  public static fromAmount1({\n    pool,\n    tickLower,\n    tickUpper,\n    amount1\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount1: BigintIsh\n  }) {\n    // this function always uses full precision,\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0: MaxUint256, amount1, useFullPrecision: true })\n  }\n}\n", "import invariant from 'tiny-invariant'\n\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\nimport { Pool } from './pool'\n\n/**\n * Represents a list of pools through which a swap can occur\n * @template TInput The input token\n * @template TOutput The output token\n */\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pools: Pool[]\n  public readonly tokenPath: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  /**\n   * Creates an instance of route.\n   * @param pools An array of `Pool` objects, ordered by the route the swap will take\n   * @param input The input token\n   * @param output The output token\n   */\n  public constructor(pools: Pool[], input: TInput, output: TOutput) {\n    invariant(pools.length > 0, 'POOLS')\n\n    const chainId = pools[0].chainId\n    const allOnSameChain = pools.every(pool => pool.chainId === chainId)\n    invariant(allOnSameChain, 'CHAIN_IDS')\n\n    const wrappedInput = input.wrapped\n    invariant(pools[0].involvesToken(wrappedInput), 'INPUT')\n\n    invariant(pools[pools.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    /**\n     * Normalizes token0-token1 order and selects the next token/fee step to add to the path\n     * */\n    const tokenPath: Token[] = [wrappedInput]\n    for (const [i, pool] of pools.entries()) {\n      const currentInputToken = tokenPath[i]\n      invariant(currentInputToken.equals(pool.token0) || currentInputToken.equals(pool.token1), 'PATH')\n      const nextToken = currentInputToken.equals(pool.token0) ? pool.token1 : pool.token0\n      tokenPath.push(nextToken)\n    }\n\n    this.pools = pools\n    this.tokenPath = tokenPath\n    this.input = input\n    this.output = output ?? tokenPath[tokenPath.length - 1]\n  }\n\n  public get chainId(): number {\n    return this.pools[0].chainId\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.token0)\n          ? {\n              nextInput: pool.token1,\n              price: price.multiply(pool.token0Price)\n            }\n          : {\n              nextInput: pool.token0,\n              price: price.multiply(pool.token1Price)\n            }\n      },\n      this.pools[0].token0.equals(this.input.wrapped)\n        ? {\n            nextInput: this.pools[0].token1,\n            price: this.pools[0].token0Price\n          }\n        : {\n            nextInput: this.pools[0].token0,\n            price: this.pools[0].token1Price\n          }\n    ).price\n\n    return (this._midPrice = new Price(this.input, this.output, price.denominator, price.numerator))\n  }\n}\n", "import { Currency, Fraction, Percent, Price, sortedInsert, CurrencyAmount, TradeType, Token } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { Pool } from './pool'\nimport { Route } from './route'\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      const bHops = b.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      return aHops - bHops\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): Route<TInput, TOutput> {\n    invariant(this.swaps.length == 1, 'MULTIPLE_ROUTES')\n    return this.swaps[0].route\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact in trade\n   * @param amountIn The amount being passed in\n   * @returns The exact in trade\n   */\n  public static async exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>> {\n    return Trade.fromRoute(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact out trade\n   * @param amountOut The amount returned by the trade\n   * @returns The exact out trade\n   */\n  public static async exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>> {\n    return Trade.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n    let inputAmount: CurrencyAmount<TInput>\n    let outputAmount: CurrencyAmount<TOutput>\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      amounts[0] = amount.wrapped\n      for (let i = 0; i < route.tokenPath.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount] = await pool.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amounts[amounts.length - 1].numerator,\n        amounts[amounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount.wrapped\n      for (let i = route.tokenPath.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        const [inputAmount] = await pool.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n\n    return new Trade({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType\n    })\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n      route: Route<TInput, TOutput>\n    }[],\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const populatedRoutes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { route, amount } of routes) {\n      const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n      let inputAmount: CurrencyAmount<TInput>\n      let outputAmount: CurrencyAmount<TOutput>\n\n      if (tradeType === TradeType.EXACT_INPUT) {\n        invariant(amount.currency.equals(route.input), 'INPUT')\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n        amounts[0] = CurrencyAmount.fromFractionalAmount(route.input.wrapped, amount.numerator, amount.denominator)\n\n        for (let i = 0; i < route.tokenPath.length - 1; i++) {\n          const pool = route.pools[i]\n          const [outputAmount] = await pool.getOutputAmount(amounts[i])\n          amounts[i + 1] = outputAmount\n        }\n\n        outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          amounts[amounts.length - 1].numerator,\n          amounts[amounts.length - 1].denominator\n        )\n      } else {\n        invariant(amount.currency.equals(route.output), 'OUTPUT')\n        outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n        amounts[amounts.length - 1] = CurrencyAmount.fromFractionalAmount(\n          route.output.wrapped,\n          amount.numerator,\n          amount.denominator\n        )\n\n        for (let i = route.tokenPath.length - 1; i > 0; i--) {\n          const pool = route.pools[i - 1]\n          const [inputAmount] = await pool.getInputAmount(amounts[i])\n          amounts[i - 1] = inputAmount\n        }\n\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      }\n\n      populatedRoutes.push({ route, inputAmount, outputAmount })\n    }\n\n    return new Trade({\n      routes: populatedRoutes,\n      tradeType\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route\n        }\n      ]\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType\n  }: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency\n    const outputCurrency = routes[0].outputAmount.currency\n    invariant(\n      routes.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      routes.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    const numPools = routes.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, pool.fee))\n      }\n    }\n\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n\n    this.swaps = routes\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountIn.currency) && !pool.token1.equals(amountIn.currency)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.isToken && amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([...currentPools, pool], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the desired currency amount out\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact out trade\n   */\n  public static async bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountOut.currency) && !pool.token1.equals(amountOut.currency)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = await pool.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pool\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([pool, ...currentPools], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactOut(\n          poolsExcludingThisPool,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pool, ...currentPools],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n", "import { Interface } from '@ethersproject/abi'\nimport IMulticall from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IMulticall.sol/IMulticall.json'\n\nexport abstract class Multicall {\n  public static INTERFACE: Interface = new Interface(IMulticall.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[]): string {\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    return calldatas.length === 1 ? calldatas[0] : Multicall.INTERFACE.encodeFunctionData('multicall', [calldatas])\n  }\n}\n", "import { BigintIsh, Token } from '@uniswap/sdk-core'\nimport { Interface } from '@ethersproject/abi'\nimport ISelfPermit from '@uniswap/v3-periphery/artifacts/contracts/interfaces/ISelfPermit.sol/ISelfPermit.json'\nimport { toHex } from './utils'\n\nexport interface StandardPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  amount: BigintIsh\n  deadline: BigintIsh\n}\n\nexport interface AllowedPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  nonce: BigintIsh\n  expiry: BigintIsh\n}\n\nexport type PermitOptions = StandardPermitArguments | AllowedPermitArguments\n\nfunction isAllowedPermit(permitOptions: PermitOptions): permitOptions is AllowedPermitArguments {\n  return 'nonce' in permitOptions\n}\n\nexport abstract class SelfPermit {\n  public static INTERFACE: Interface = new Interface(ISelfPermit.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodePermit(token: Token, options: PermitOptions) {\n    return isAllowedPermit(options)\n      ? SelfPermit.INTERFACE.encodeFunctionData('selfPermitAllowed', [\n          token.address,\n          toHex(options.nonce),\n          toHex(options.expiry),\n          options.v,\n          options.r,\n          options.s\n        ])\n      : SelfPermit.INTERFACE.encodeFunctionData('selfPermit', [\n          token.address,\n          toHex(options.amount),\n          toHex(options.deadline),\n          options.v,\n          options.r,\n          options.s\n        ])\n  }\n}\n", "import JSBI from 'jsbi'\nimport { Interface } from '@ethersproject/abi'\nimport IPeripheryPaymentsWithFee from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IPeripheryPaymentsWithFee.sol/IPeripheryPaymentsWithFee.json'\nimport { Percent, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { toHex } from './utils/calldata'\n\nexport interface FeeOptions {\n  /**\n   * The percent of the output that will be taken as a fee.\n   */\n  fee: Percent\n\n  /**\n   * The recipient of the fee.\n   */\n  recipient: string\n}\n\nexport abstract class Payments {\n  public static INTERFACE: Interface = new Interface(IPeripheryPaymentsWithFee.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeFeeBips(fee: Percent): string {\n    return toHex(fee.multiply(10_000).quotient)\n  }\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient: string, feeOptions?: FeeOptions): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('unwrapWETH9WithFee', [\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('unwrapWETH9', [toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient: string,\n    feeOptions?: FeeOptions\n  ): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('sweepTokenWithFee', [\n        token.address,\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('sweepToken', [token.address, toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeRefundETH(): string {\n    return Payments.INTERFACE.encodeFunctionData('refundETH')\n  }\n}\n", "import {\n  BigintIsh,\n  Percent,\n  Token,\n  CurrencyAmount,\n  validateAndParseAddress,\n  Currency,\n  NativeCurrency\n} from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Position } from './entities/position'\nimport { ONE, ZERO } from './internalConstants'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { Interface } from '@ethersproject/abi'\nimport INonfungiblePositionManager from '@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { ADDRESS_ZERO } from './constants'\nimport { Pool } from './entities'\nimport { Multicall } from './multicall'\nimport { Payments } from './payments'\n\nconst MaxUint128 = toHex(JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)), JSBI.BigInt(1)))\n\nexport interface MintSpecificOptions {\n  /**\n   * The account that should receive the minted NFT.\n   */\n  recipient: string\n\n  /**\n   * Creates pool if not initialized before mint.\n   */\n  createPool?: boolean\n}\n\nexport interface IncreaseSpecificOptions {\n  /**\n   * Indicates the ID of the position to increase liquidity for.\n   */\n  tokenId: BigintIsh\n}\n\n/**\n * Options for producing the calldata to add liquidity.\n */\nexport interface CommonAddLiquidityOptions {\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\n   */\n  useNative?: NativeCurrency\n\n  /**\n   * The optional permit parameters for spending token0\n   */\n  token0Permit?: PermitOptions\n\n  /**\n   * The optional permit parameters for spending token1\n   */\n  token1Permit?: PermitOptions\n}\n\nexport type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions\nexport type IncreaseOptions = CommonAddLiquidityOptions & IncreaseSpecificOptions\n\nexport type AddLiquidityOptions = MintOptions | IncreaseOptions\n\nexport interface SafeTransferOptions {\n  /**\n   * The account sending the NFT.\n   */\n  sender: string\n\n  /**\n   * The account that should receive the NFT.\n   */\n  recipient: string\n\n  /**\n   * The id of the token being sent.\n   */\n  tokenId: BigintIsh\n  /**\n   * The optional parameter that passes data to the `onERC721Received` call for the staker\n   */\n  data?: string\n}\n\n// type guard\nfunction isMint(options: AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some(k => k === 'recipient')\n}\n\nexport interface CollectOptions {\n  /**\n   * Indicates the ID of the position to collect for.\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed0: CurrencyAmount<Currency>\n\n  /**\n   * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed1: CurrencyAmount<Currency>\n\n  /**\n   * The account that should receive the tokens.\n   */\n  recipient: string\n}\n\nexport interface NFTPermitOptions {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  deadline: BigintIsh\n  spender: string\n}\n\n/**\n * Options for producing the calldata to exit a position.\n */\nexport interface RemoveLiquidityOptions {\n  /**\n   * The ID of the token to exit\n   */\n  tokenId: BigintIsh\n\n  /**\n   * The percentage of position liquidity to exit.\n   */\n  liquidityPercentage: Percent\n\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether the NFT should be burned if the entire position is being exited, by default false.\n   */\n  burnToken?: boolean\n\n  /**\n   * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\n   */\n  permit?: NFTPermitOptions\n\n  /**\n   * Parameters to be passed on to collect\n   */\n  collectOptions: Omit<CollectOptions, 'tokenId'>\n}\n\nexport abstract class NonfungiblePositionManager {\n  public static INTERFACE: Interface = new Interface(INonfungiblePositionManager.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeCreate(pool: Pool): string {\n    return NonfungiblePositionManager.INTERFACE.encodeFunctionData('createAndInitializePoolIfNecessary', [\n      pool.token0.address,\n      pool.token1.address,\n      pool.fee,\n      toHex(pool.sqrtRatioX96)\n    ])\n  }\n\n  public static createCallParameters(pool: Pool): MethodParameters {\n    return {\n      calldata: this.encodeCreate(pool),\n      value: toHex(0)\n    }\n  }\n\n  public static addCallParameters(position: Position, options: AddLiquidityOptions): MethodParameters {\n    invariant(JSBI.greaterThan(position.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    const calldatas: string[] = []\n\n    // get amounts\n    const { amount0: amount0Desired, amount1: amount1Desired } = position.mintAmounts\n\n    // adjust for slippage\n    const minimumAmounts = position.mintAmountsWithSlippage(options.slippageTolerance)\n    const amount0Min = toHex(minimumAmounts.amount0)\n    const amount1Min = toHex(minimumAmounts.amount1)\n\n    const deadline = toHex(options.deadline)\n\n    // create pool if needed\n    if (isMint(options) && options.createPool) {\n      calldatas.push(this.encodeCreate(position.pool))\n    }\n\n    // permits if necessary\n    if (options.token0Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token0, options.token0Permit))\n    }\n    if (options.token1Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token1, options.token1Permit))\n    }\n\n    // mint\n    if (isMint(options)) {\n      const recipient: string = validateAndParseAddress(options.recipient)\n\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\n          {\n            token0: position.pool.token0.address,\n            token1: position.pool.token1.address,\n            fee: position.pool.fee,\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            recipient,\n            deadline\n          }\n        ])\n      )\n    } else {\n      // increase\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('increaseLiquidity', [\n          {\n            tokenId: toHex(options.tokenId),\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            deadline\n          }\n        ])\n      )\n    }\n\n    let value: string = toHex(0)\n\n    if (options.useNative) {\n      const wrapped = options.useNative.wrapped\n      invariant(position.pool.token0.equals(wrapped) || position.pool.token1.equals(wrapped), 'NO_WETH')\n\n      const wrappedValue = position.pool.token0.equals(wrapped) ? amount0Desired : amount1Desired\n\n      // we only need to refund if we're actually sending ETH\n      if (JSBI.greaterThan(wrappedValue, ZERO)) {\n        calldatas.push(Payments.encodeRefundETH())\n      }\n\n      value = toHex(wrappedValue)\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value\n    }\n  }\n\n  private static encodeCollect(options: CollectOptions): string[] {\n    const calldatas: string[] = []\n\n    const tokenId = toHex(options.tokenId)\n\n    const involvesETH =\n      options.expectedCurrencyOwed0.currency.isNative || options.expectedCurrencyOwed1.currency.isNative\n\n    const recipient = validateAndParseAddress(options.recipient)\n\n    // collect\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\n        {\n          tokenId,\n          recipient: involvesETH ? ADDRESS_ZERO : recipient,\n          amount0Max: MaxUint128,\n          amount1Max: MaxUint128\n        }\n      ])\n    )\n\n    if (involvesETH) {\n      const ethAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed0.quotient\n        : options.expectedCurrencyOwed1.quotient\n      const token = options.expectedCurrencyOwed0.currency.isNative\n        ? (options.expectedCurrencyOwed1.currency as Token)\n        : (options.expectedCurrencyOwed0.currency as Token)\n      const tokenAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed1.quotient\n        : options.expectedCurrencyOwed0.quotient\n\n      calldatas.push(Payments.encodeUnwrapWETH9(ethAmount, recipient))\n      calldatas.push(Payments.encodeSweepToken(token, tokenAmount, recipient))\n    }\n\n    return calldatas\n  }\n\n  public static collectCallParameters(options: CollectOptions): MethodParameters {\n    const calldatas: string[] = NonfungiblePositionManager.encodeCollect(options)\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   * Produces the calldata for completely or partially exiting a position\n   * @param position The position to exit\n   * @param options Additional information necessary for generating the calldata\n   * @returns The call parameters\n   */\n  public static removeCallParameters(position: Position, options: RemoveLiquidityOptions): MethodParameters {\n    const calldatas: string[] = []\n\n    const deadline = toHex(options.deadline)\n    const tokenId = toHex(options.tokenId)\n\n    // construct a partial position with a percentage of liquidity\n    const partialPosition = new Position({\n      pool: position.pool,\n      liquidity: options.liquidityPercentage.multiply(position.liquidity).quotient,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper\n    })\n    invariant(JSBI.greaterThan(partialPosition.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    // slippage-adjusted underlying amounts\n    const { amount0: amount0Min, amount1: amount1Min } = partialPosition.burnAmountsWithSlippage(\n      options.slippageTolerance\n    )\n\n    if (options.permit) {\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n          validateAndParseAddress(options.permit.spender),\n          tokenId,\n          toHex(options.permit.deadline),\n          options.permit.v,\n          options.permit.r,\n          options.permit.s\n        ])\n      )\n    }\n\n    // remove liquidity\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('decreaseLiquidity', [\n        {\n          tokenId,\n          liquidity: toHex(partialPosition.liquidity),\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          deadline\n        }\n      ])\n    )\n\n    const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } = options.collectOptions\n    calldatas.push(\n      ...NonfungiblePositionManager.encodeCollect({\n        tokenId: toHex(options.tokenId),\n        // add the underlying value to the expected currency already owed\n        expectedCurrencyOwed0: expectedCurrencyOwed0.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed0.currency, amount0Min)\n        ),\n        expectedCurrencyOwed1: expectedCurrencyOwed1.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed1.currency, amount1Min)\n        ),\n        ...rest\n      })\n    )\n\n    if (options.liquidityPercentage.equalTo(ONE)) {\n      if (options.burnToken) {\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [tokenId]))\n      }\n    } else {\n      invariant(options.burnToken !== true, 'CANNOT_BURN')\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  public static safeTransferFromParameters(options: SafeTransferOptions): MethodParameters {\n    const recipient = validateAndParseAddress(options.recipient)\n    const sender = validateAndParseAddress(options.sender)\n\n    let calldata: string\n    if (options.data) {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n        'safeTransferFrom(address,address,uint256,bytes)',\n        [sender, recipient, toHex(options.tokenId), options.data]\n      )\n    } else {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('safeTransferFrom(address,address,uint256)', [\n        sender,\n        recipient,\n        toHex(options.tokenId)\n      ])\n    }\n    return {\n      calldata: calldata,\n      value: toHex(0)\n    }\n  }\n}\n", "import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { encodeRouteToPath, MethodParameters, toHex } from './utils'\nimport IQuoter from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json'\nimport IQuoterV2 from '@uniswap/swap-router-contracts/artifacts/contracts/lens/QuoterV2.sol/QuoterV2.json'\nimport { Route } from './entities'\nimport invariant from 'tiny-invariant'\nimport { FeeAmount } from './constants'\n\n/**\n * Optional arguments to send to the quoter.\n */\nexport interface QuoteOptions {\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * The optional quoter interface to use\n   */\n  useQuoterV2?: boolean\n}\n\ninterface BaseQuoteParams {\n  fee: FeeAmount\n  sqrtPriceLimitX96: string\n  tokenIn: string\n  tokenOut: string\n}\n\n/**\n * Represents the Uniswap V3 QuoterV1 contract with a method for returning the formatted\n * calldata needed to call the quoter contract.\n */\nexport abstract class SwapQuoter {\n  public static V1INTERFACE: Interface = new Interface(IQuoter.abi)\n  public static V2INTERFACE: Interface = new Interface(IQuoterV2.abi)\n\n  /**\n   * Produces the on-chain method name of the appropriate function within QuoterV2,\n   * and the relevant hex encoded parameters.\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The swap route, a list of pools through which a swap can occur\n   * @param amount The amount of the quote, either an amount in, or an amount out\n   * @param tradeType The trade type, either exact input or exact output\n   * @param options The optional params including price limit and Quoter contract switch\n   * @returns The formatted calldata\n   */\n  public static quoteCallParameters<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amount: CurrencyAmount<TInput | TOutput>,\n    tradeType: TradeType,\n    options: QuoteOptions = {}\n  ): MethodParameters {\n    const singleHop = route.pools.length === 1\n    const quoteAmount: string = toHex(amount.quotient)\n    let calldata: string\n    const swapInterface: Interface = options.useQuoterV2 ? this.V2INTERFACE : this.V1INTERFACE\n\n    if (singleHop) {\n      const baseQuoteParams: BaseQuoteParams = {\n        tokenIn: route.tokenPath[0].address,\n        tokenOut: route.tokenPath[1].address,\n        fee: route.pools[0].fee,\n        sqrtPriceLimitX96: toHex(options?.sqrtPriceLimitX96 ?? 0)\n      }\n\n      const v2QuoteParams = {\n        ...baseQuoteParams,\n        ...(tradeType == TradeType.EXACT_INPUT ? { amountIn: quoteAmount } : { amount: quoteAmount })\n      }\n\n      const v1QuoteParams = [\n        baseQuoteParams.tokenIn,\n        baseQuoteParams.tokenOut,\n        baseQuoteParams.fee,\n        quoteAmount,\n        baseQuoteParams.sqrtPriceLimitX96\n      ]\n\n      const tradeTypeFunctionName =\n        tradeType === TradeType.EXACT_INPUT ? 'quoteExactInputSingle' : 'quoteExactOutputSingle'\n      calldata = swapInterface.encodeFunctionData(\n        tradeTypeFunctionName,\n        options.useQuoterV2 ? [v2QuoteParams] : v1QuoteParams\n      )\n    } else {\n      invariant(options?.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n      const path: string = encodeRouteToPath(route, tradeType === TradeType.EXACT_OUTPUT)\n      const tradeTypeFunctionName = tradeType === TradeType.EXACT_INPUT ? 'quoteExactInput' : 'quoteExactOutput'\n      calldata = swapInterface.encodeFunctionData(tradeTypeFunctionName, [path, quoteAmount])\n    }\n    return {\n      calldata,\n      value: toHex(0)\n    }\n  }\n}\n", "import { BigintIsh, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { defaultAbiCoder, Interface } from '@ethersproject/abi'\nimport IUniswapV3Staker from '@uniswap/v3-staker/artifacts/contracts/UniswapV3Staker.sol/UniswapV3Staker.json'\nimport { Pool } from './entities'\nimport { Multicall } from './multicall'\n\nexport type FullWithdrawOptions = ClaimOptions & WithdrawOptions\n/**\n * Represents a unique staking program.\n */\nexport interface IncentiveKey {\n  /**\n   * The token rewarded for participating in the staking program.\n   */\n  rewardToken: Token\n  /**\n   * The pool that the staked positions must provide in.\n   */\n  pool: Pool\n  /**\n   * The time when the incentive program begins.\n   */\n  startTime: BigintIsh\n  /**\n   * The time that the incentive program ends.\n   */\n  endTime: BigintIsh\n  /**\n   * The address which receives any remaining reward tokens at `endTime`.\n   */\n  refundee: string\n}\n\n/**\n * Options to specify when claiming rewards.\n */\nexport interface ClaimOptions {\n  /**\n   * The id of the NFT\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Address to send rewards to.\n   */\n  recipient: string\n\n  /**\n   * The amount of `rewardToken` to claim. 0 claims all.\n   */\n  amount?: BigintIsh\n}\n/**\n * Options to specify when withdrawing a position.\n */\nexport interface WithdrawOptions {\n  /**\n   * Set when withdrawing. The position will be sent to `owner` on withdraw.\n   */\n  owner: string\n\n  /**\n   * Set when withdrawing. `data` is passed to `safeTransferFrom` when transferring the position from contract back to owner.\n   */\n  data?: string\n}\n\nexport abstract class Staker {\n  public static INTERFACE: Interface = new Interface(IUniswapV3Staker.abi)\n\n  protected constructor() {}\n  private static INCENTIVE_KEY_ABI =\n    'tuple(address rewardToken, address pool, uint256 startTime, uint256 endTime, address refundee)'\n\n  /**\n   *  To claim rewards, must unstake and then claim.\n   * @param incentiveKey The unique identifier of a staking program.\n   * @param options Options for producing the calldata to claim. Can't claim unless you unstake.\n   * @returns The calldatas for 'unstakeToken' and 'claimReward'.\n   */\n  private static encodeClaim(incentiveKey: IncentiveKey, options: ClaimOptions): string[] {\n    const calldatas: string[] = []\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('unstakeToken', [\n        this._encodeIncentiveKey(incentiveKey),\n        toHex(options.tokenId)\n      ])\n    )\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const amount = options.amount ?? 0\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('claimReward', [incentiveKey.rewardToken.address, recipient, toHex(amount)])\n    )\n    return calldatas\n  }\n\n  /**\n   *\n   * Note:  A `tokenId` can be staked in many programs but to claim rewards and continue the program you must unstake, claim, and then restake.\n   * @param incentiveKeys An IncentiveKey or array of IncentiveKeys that `tokenId` is staked in.\n   * Input an array of IncentiveKeys to claim rewards for each program.\n   * @param options ClaimOptions to specify tokenId, recipient, and amount wanting to collect.\n   * Note that you can only specify one amount and one recipient across the various programs if you are collecting from multiple programs at once.\n   * @returns\n   */\n  public static collectRewards(incentiveKeys: IncentiveKey | IncentiveKey[], options: ClaimOptions): MethodParameters {\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n    let calldatas: string[] = []\n\n    for (let i = 0; i < incentiveKeys.length; i++) {\n      // the unique program tokenId is staked in\n      const incentiveKey = incentiveKeys[i]\n      // unstakes and claims for the unique program\n      calldatas = calldatas.concat(this.encodeClaim(incentiveKey, options))\n      // re-stakes the position for the unique program\n      calldatas.push(\n        Staker.INTERFACE.encodeFunctionData('stakeToken', [\n          this._encodeIncentiveKey(incentiveKey),\n          toHex(options.tokenId)\n        ])\n      )\n    }\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   *\n   * @param incentiveKeys A list of incentiveKeys to unstake from. Should include all incentiveKeys (unique staking programs) that `options.tokenId` is staked in.\n   * @param withdrawOptions Options for producing claim calldata and withdraw calldata. Can't withdraw without unstaking all programs for `tokenId`.\n   * @returns Calldata for unstaking, claiming, and withdrawing.\n   */\n  public static withdrawToken(\n    incentiveKeys: IncentiveKey | IncentiveKey[],\n    withdrawOptions: FullWithdrawOptions\n  ): MethodParameters {\n    let calldatas: string[] = []\n\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n\n    const claimOptions = {\n      tokenId: withdrawOptions.tokenId,\n      recipient: withdrawOptions.recipient,\n      amount: withdrawOptions.amount\n    }\n\n    for (let i = 0; i < incentiveKeys.length; i++) {\n      const incentiveKey = incentiveKeys[i]\n      calldatas = calldatas.concat(this.encodeClaim(incentiveKey, claimOptions))\n    }\n    const owner = validateAndParseAddress(withdrawOptions.owner)\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('withdrawToken', [\n        toHex(withdrawOptions.tokenId),\n        owner,\n        withdrawOptions.data ? withdrawOptions.data : toHex(0)\n      ])\n    )\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   *\n   * @param incentiveKeys A single IncentiveKey or array of IncentiveKeys to be encoded and used in the data parameter in `safeTransferFrom`\n   * @returns An IncentiveKey as a string\n   */\n  public static encodeDeposit(incentiveKeys: IncentiveKey | IncentiveKey[]): string {\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n    let data: string\n\n    if (incentiveKeys.length > 1) {\n      const keys = []\n      for (let i = 0; i < incentiveKeys.length; i++) {\n        const incentiveKey = incentiveKeys[i]\n        keys.push(this._encodeIncentiveKey(incentiveKey))\n      }\n      data = defaultAbiCoder.encode([`${Staker.INCENTIVE_KEY_ABI}[]`], [keys])\n    } else {\n      data = defaultAbiCoder.encode([Staker.INCENTIVE_KEY_ABI], [this._encodeIncentiveKey(incentiveKeys[0])])\n    }\n    return data\n  }\n  /**\n   *\n   * @param incentiveKey An `IncentiveKey` which represents a unique staking program.\n   * @returns An encoded IncentiveKey to be read by ethers\n   */\n  private static _encodeIncentiveKey(incentiveKey: IncentiveKey): {} {\n    const { token0, token1, fee } = incentiveKey.pool\n    const refundee = validateAndParseAddress(incentiveKey.refundee)\n    return {\n      rewardToken: incentiveKey.rewardToken.address,\n      pool: Pool.getAddress(token0, token1, fee),\n      startTime: toHex(incentiveKey.startTime),\n      endTime: toHex(incentiveKey.endTime),\n      refundee\n    }\n  }\n}\n", "import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { Trade } from './entities/trade'\nimport { ADDRESS_ZERO } from './constants'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { encodeRouteToPath } from './utils'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport ISwapRouter from '@uniswap/v3-periphery/artifacts/contracts/SwapRouter.sol/SwapRouter.json'\nimport { Multicall } from './multicall'\nimport { FeeOptions, Payments } from './payments'\n\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * The account that should receive the output.\n   */\n  recipient: string\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions\n\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptions\n}\n\n/**\n * Represents the Uniswap V3 SwapRouter, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(ISwapRouter.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trades: Trade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>[],\n    options: SwapOptions\n  ): MethodParameters {\n    if (!Array.isArray(trades)) {\n      trades = [trades]\n    }\n\n    const sampleTrade = trades[0]\n    const tokenIn = sampleTrade.inputAmount.currency.wrapped\n    const tokenOut = sampleTrade.outputAmount.currency.wrapped\n\n    // All trades should have the same starting and ending token.\n    invariant(\n      trades.every(trade => trade.inputAmount.currency.wrapped.equals(tokenIn)),\n      'TOKEN_IN_DIFF'\n    )\n    invariant(\n      trades.every(trade => trade.outputAmount.currency.wrapped.equals(tokenOut)),\n      'TOKEN_OUT_DIFF'\n    )\n\n    const calldatas: string[] = []\n\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].inputAmount.currency, 0)\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].outputAmount.currency, 0)\n\n    const totalAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n      ZERO_OUT\n    )\n\n    // flag for whether a refund needs to happen\n    const mustRefund = sampleTrade.inputAmount.currency.isNative && sampleTrade.tradeType === TradeType.EXACT_OUTPUT\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative\n    // flags for whether funds should be send first to the router\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative\n    const routerMustCustody = outputIsNative || !!options.fee\n\n    const totalValue: CurrencyAmount<Currency> = inputIsNative\n      ? trades.reduce((sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)), ZERO_IN)\n      : ZERO_IN\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\n    }\n\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const deadline = toHex(options.deadline)\n\n    for (const trade of trades) {\n      for (const { route, inputAmount, outputAmount } of trade.swaps) {\n        const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n        const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n        // flag for whether the trade is single hop or not\n        const singleHop = route.pools.length === 1\n\n        if (singleHop) {\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n          } else {\n            const exactOutputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\n          }\n        } else {\n          invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n\n          const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n          } else {\n            const exactOutputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\n          }\n        }\n      }\n    }\n\n    // unwrap\n    if (routerMustCustody) {\n      if (!!options.fee) {\n        if (outputIsNative) {\n          calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient, options.fee))\n        } else {\n          calldatas.push(\n            Payments.encodeSweepToken(\n              sampleTrade.outputAmount.currency.wrapped,\n              totalAmountOut.quotient,\n              recipient,\n              options.fee\n            )\n          )\n        }\n      } else {\n        calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient))\n      }\n    }\n\n    // refund\n    if (mustRefund) {\n      calldatas.push(Payments.encodeRefundETH())\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(totalValue.quotient)\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["ChainId", "SUPPORTED_CHAINS", "MAINNET", "OPTIMISM", "OPTIMISM_GOERLI", "OPTIMISM_SEPOLIA", "ARBITRUM_ONE", "ARBITRUM_GOERLI", "ARBITRUM_SEPOLIA", "POLYGON", "POLYGON_MUMBAI", "GOERLI", "SEPOLIA", "CELO_ALFAJORES", "CELO", "BNB", "AVALANCHE", "BASE", "BASE_GOERLI", "ZORA", "ZORA_SEPOLIA", "ROOTSTOCK", "BLAST", "NativeCurrencyName", "DEFAULT_NETWORKS", "constructSameAddressMap", "address", "additionalNetworks", "concat", "reduce", "memo", "chainId", "UNI_ADDRESSES", "V2_FACTORY_ADDRESSES", "ChainId", "MAINNET", "GOERLI", "SEPOLIA", "OPTIMISM", "ARBITRUM_ONE", "AVALANCHE", "BASE", "BNB", "POLYGON", "CELO", "BLAST", "V2_ROUTER_ADDRESSES", "ChainId", "MAINNET", "GOERLI", "ARBITRUM_ONE", "OPTIMISM", "BASE", "AVALANCHE", "BNB", "POLYGON", "BLAST", "DEFAULT_ADDRESSES", "v3CoreFactoryAddress", "multicallAddress", "quoterAddress", "v3MigratorAddress", "nonfungiblePositionManagerAddress", "MAINNET_ADDRESSES", "v1MixedRouteQuoterAddress", "GOERLI_ADDRESSES", "OPTIMISM_ADDRESSES", "ARBITRUM_ONE_ADDRESSES", "tickLensAddress", "POLYGON_ADDRESSES", "CELO_ADDRESSES", "BNB_ADDRESSES", "swapRouter02Address", "OPTIMISM_GOERLI_ADDRESSES", "OPTIMISM_SEPOLIA_ADDRESSES", "ARBITRUM_GOERLI_ADDRESSES", "ARBITRUM_SEPOLIA_ADDRESSES", "SEPOLIA_ADDRESSES", "AVALANCHE_ADDRESSES", "BASE_ADDRESSES", "BASE_GOERLI_ADDRESSES", "ZORA_ADDRESSES", "ZORA_SEPOLIA_ADDRESSES", "ROOTSTOCK_ADDRESSES", "BLAST_ADDRESSES", "CHAIN_TO_ADDRESSES_MAP", "POLYGON_MUMBAI", "CELO", "CELO_ALFAJORES", "OPTIMISM_GOERLI", "OPTIMISM_SEPOLIA", "ARBITRUM_GOERLI", "ARBITRUM_SEPOLIA", "SEPOLIA", "BASE_GOERLI", "ZORA", "ZORA_SEPOLIA", "ROOTSTOCK", "V3_CORE_FACTORY_ADDRESSES", "SUPPORTED_CHAINS", "reduce", "memo", "chainId", "V3_MIGRATOR_ADDRESSES", "MULTICALL_ADDRESSES", "GOVERNANCE_ALPHA_V0_ADDRESSES", "constructSameAddressMap", "GOVERNANCE_ALPHA_V1_ADDRESSES", "GOVERNANCE_BRAVO_ADDRESSES", "TIMELOCK_ADDRESSES", "MERKLE_DISTRIBUTOR_ADDRESS", "ARGENT_WALLET_DETECTOR_ADDRESS", "QUOTER_ADDRESSES", "NONFUNGIBLE_POSITION_MANAGER_ADDRESSES", "ENS_REGISTRAR_ADDRESSES", "SOCKS_CONTROLLER_ADDRESSES", "TICK_LENS_ADDRESSES", "MIXED_ROUTE_QUOTER_V1_ADDRESSES", "TradeType", "Rounding", "MaxUint256", "JSBI", "BigInt", "Decimal", "toFormat", "_Decimal", "Big", "_Big", "toSignificantRounding", "ROUND_DOWN", "ROUND_HALF_UP", "ROUND_UP", "toFixedRounding", "Fraction", "numerator", "denominator", "tryParseFraction", "fractionish", "Error", "invert", "add", "other", "otherParsed", "equal", "multiply", "subtract", "lessThan", "equalTo", "greaterThan", "divide", "toSignificant", "significantDigits", "format", "rounding", "groupSeparator", "Number", "isInteger", "process", "invariant", "set", "precision", "quotient", "toString", "div", "toSignificantDigits", "decimalPlaces", "toFixed", "DP", "RM", "remainder", "CurrencyAmount", "currency", "lessThanOrEqual", "decimalScale", "exponentiate", "decimals", "fromRawAmount", "rawAmount", "fromFractionalAmount", "equals", "added", "subtracted", "multiplied", "divided", "toExact", "isToken", "wrapped", "ONE_HUNDRED", "toPercent", "fraction", "Percent", "Price", "baseCurrency", "quoteCurrency", "args", "length", "result", "quoteAmount", "baseAmount", "scalar", "quote", "currencyAmount", "adjustedForDecimals", "BaseCurrency", "chainId", "symbol", "name", "isSafeInteger", "NativeCurrency", "validateAndParseAddress", "address", "getAddress", "error", "startsWith0xLen42HexRegex", "checkValidAddress", "test", "Token", "bypassChecksum", "buyFeeBps", "sellFeeBps", "gte", "BigNumber", "from", "toLowerCase", "sortsBefore", "WETH9", "Ether", "onChain", "_etherCache", "isNative", "weth9", "sortedInsert", "items", "add", "maxSize", "comparator", "process", "invariant", "length", "push", "isFull", "lo", "hi", "mid", "splice", "pop", "MAX_SAFE_INTEGER", "JSBI", "BigInt", "Number", "ZERO", "ONE", "TWO", "sqrt", "value", "greaterThanOrEqual", "lessThan", "Math", "floor", "toNumber", "z", "x", "divide", "undefined", "value", "key", "next", "FACTORY_ADDRESS", "ADDRESS_ZERO", "POOL_INIT_CODE_HASH", "FeeAmount", "TICK_SPACINGS", "LOWEST", "LOW", "MEDIUM", "HIGH", "NEGATIVE_ONE", "JSBI", "BigInt", "ZERO", "ONE", "Q96", "exponentiate", "Q192", "computePoolAddress", "factoryAddress", "tokenA", "tokenB", "fee", "initCodeHashManualOverride", "sortsBefore", "token0", "token1", "getCreate2Address", "keccak256", "defaultAbiCoder", "encode", "address", "LiquidityMath", "addDelta", "x", "y", "lessThan", "subtract", "multiply", "add", "FullMath", "mulDivRoundingUp", "a", "b", "denominator", "product", "result", "divide", "notEqual", "remainder", "MaxUint160", "multiplyIn256", "bitwiseAnd", "MaxUint256", "addIn256", "sum", "SqrtPriceMath", "getAmount0Delta", "sqrtRatioAX96", "sqrtRatioBX96", "liquidity", "roundUp", "greaterThan", "numerator1", "leftShift", "numerator2", "getAmount1Delta", "getNextSqrtPriceFromInput", "sqrtPX96", "amountIn", "zeroForOne", "process", "invariant", "getNextSqrtPriceFromAmount0RoundingUp", "getNextSqrtPriceFromAmount1RoundingDown", "getNextSqrtPriceFromOutput", "amountOut", "amount", "equal", "greaterThanOrEqual", "quotient", "lessThanOrEqual", "MAX_FEE", "SwapMath", "computeSwapStep", "sqrtRatioCurrentX96", "sqrtRatioTargetX96", "amountRemaining", "feePips", "returnValues", "exactIn", "amountRemainingLessFee", "sqrtRatioNextX96", "max", "feeAmount", "TWO", "POWERS_OF_2", "map", "pow", "mostSignificantBit", "msb", "power", "min", "signedRightShift", "mulShift", "val", "mulBy", "Q32", "TickMath", "getSqrtRatioAtTick", "tick", "MIN_TICK", "MAX_TICK", "Number", "isInteger", "absTick", "ratio", "getTickAtSqrtRatio", "sqrtRatioX96", "MIN_SQRT_RATIO", "MAX_SQRT_RATIO", "sqrtRatioX128", "r", "log_2", "i", "f", "bitwiseOr", "log_sqrt10001", "tickLow", "toNumber", "tickHigh", "NoTickDataProvider", "getTick", "_tick", "Error", "ERROR_MESSAGE", "nextInitializedTickWithinOneWord", "_lte", "_tickSpacing", "isSorted", "list", "comparator", "length", "tickComparator", "index", "TickList", "validateList", "ticks", "tickSpacing", "every", "reduce", "accumulator", "liquidityNet", "isBelowSmallest", "isAtOrAboveLargest", "binarySearch", "l", "Math", "floor", "nextInitializedTick", "lte", "compressed", "wordPos", "minimum", "maximum", "toHex", "bigintIsh", "bigInt", "hex", "toString", "encodeRouteToPath", "route", "exactOutput", "firstInputToken", "input", "wrapped", "pools", "pool", "inputToken", "path", "types", "outputToken", "equals", "pack", "reverse", "encodeSqrtRatioX96", "amount1", "amount0", "numerator", "ratioX192", "sqrt", "maxLiquidityForAmount0Imprecise", "intermediate", "maxLiquidityForAmount0Precise", "maxLiquidityForAmount1", "maxLiquidityForAmounts", "useFullPrecision", "maxLiquidityForAmount0", "liquidity0", "liquidity1", "nearestUsableTick", "rounded", "round", "Q128", "PositionLibrary", "getTokensOwed", "feeGrowthInside0LastX128", "feeGrowthInside1LastX128", "feeGrowthInside0X128", "feeGrowthInside1X128", "tokensOwed0", "subIn256", "tokensOwed1", "tickToPrice", "baseToken", "quoteToken", "Price", "priceToClosestTick", "price", "sorted", "baseCurrency", "quoteCurrency", "nextTickPrice", "Q256", "difference", "TickLibrary", "getFeeGrowthInside", "feeGrowthOutsideLower", "feeGrowthOutsideUpper", "tickLower", "tickUpper", "tickCurrent", "feeGrowthGlobal0X128", "feeGrowthGlobal1X128", "feeGrowthBelow0X128", "feeGrowthBelow1X128", "feeGrowthOutside0X128", "feeGrowthOutside1X128", "feeGrowthAbove0X128", "feeGrowthAbove1X128", "Tick", "liquidityGross", "TickListDataProvider", "ticksMapped", "t", "NO_TICK_DATA_PROVIDER_DEFAULT", "Pool", "tickCurrentSqrtRatioX96", "nextTickSqrtRatioX96", "tickDataProvider", "Array", "isArray", "getAddress", "factoryAddressOverride", "involvesToken", "token", "priceOf", "token0Price", "token1Price", "getOutputAmount", "inputAmount", "sqrtPriceLimitX96", "currency", "swap", "outputAmount", "amountCalculated", "CurrencyAmount", "fromRawAmount", "getInputAmount", "isToken", "amountSpecified", "exactInput", "state", "amountSpecifiedRemaining", "sqrtPriceX96", "step", "sqrtPriceStartX96", "tickNext", "initialized", "sqrtPriceNextX96", "_createClass", "_token0Price", "_token1Price", "chainId", "Position", "ratiosAfterSlippage", "slippageTolerance", "priceLower", "asFraction", "Percent", "priceUpper", "sqrtRatioX96Lower", "sqrtRatioX96Upper", "mintAmountsWithSlippage", "poolLower", "poolUpper", "positionThatWillBeCreated", "fromAmounts", "_extends", "mintAmounts", "burnAmountsWithSlippage", "fromAmount0", "fromAmount1", "_token0Amount", "_token1Amount", "_mintAmounts", "Route", "output", "allOnSameChain", "wrappedInput", "tokenPath", "entries", "currentInputToken", "nextToken", "push", "_midPrice", "slice", "nextInput", "tradeComparator", "equalTo", "aHops", "swaps", "total", "cur", "bHops", "Trade", "routes", "tradeType", "inputCurrency", "outputCurrency", "numPools", "poolAddressSet", "Set", "size", "fromRoute", "TradeType", "EXACT_INPUT", "exactOut", "EXACT_OUTPUT", "amounts", "fromFractionalAmount", "fromRoutes", "populatedRoutes", "createUncheckedTrade", "constructorArguments", "createUncheckedTradeWithMultipleRoutes", "minimumAmountOut", "slippageAdjustedAmountOut", "Fraction", "invert", "maximumAmountIn", "slippageAdjustedAmountIn", "worstExecutionPrice", "bestTradeExactIn", "currencyAmountIn", "currencyOut", "currentPools", "nextAmountIn", "bestTrades", "maxNumResults", "maxHops", "tokenOut", "isInsufficientInputAmountError", "sortedInsert", "poolsExcludingThisPool", "concat", "bestTradeExactOut", "currencyIn", "currencyAmountOut", "nextAmountOut", "tokenIn", "isInsufficientReservesError", "_inputAmount", "totalInputFromRoutes", "_outputAmount", "totalOutputFromRoutes", "_executionPrice", "_priceImpact", "spotOutputAmount", "midPrice", "quote", "priceImpact", "Multicall", "encodeMulticall", "calldatas", "INTERFACE", "encodeFunctionData", "Interface", "IMulticall", "abi", "isAllowedPermit", "permitOptions", "SelfPermit", "encodePermit", "options", "nonce", "expiry", "v", "s", "deadline", "ISelfPermit", "Payments", "encodeFeeBips", "encodeUnwrapWETH9", "amountMinimum", "recipient", "feeOptions", "validateAndParseAddress", "feeBips", "feeRecipient", "encodeSweepToken", "encodeRefundETH", "IPeripheryPaymentsWithFee", "MaxUint128", "isMint", "Object", "keys", "some", "k", "NonfungiblePositionManager", "encodeCreate", "createCallParameters", "calldata", "addCallParameters", "position", "amount0Desired", "amount1Desired", "minimumAmounts", "amount0Min", "amount1Min", "createPool", "token0Permit", "token1Permit", "tokenId", "useNative", "wrappedValue", "encodeCollect", "involvesETH", "expectedCurrencyOwed0", "isNative", "expectedCurrencyOwed1", "amount0Max", "amount1Max", "ethAmount", "tokenAmount", "collectCallParameters", "removeCallParameters", "partialPosition", "liquidityPercentage", "permit", "spender", "collectOptions", "rest", "burnToken", "safeTransferFromParameters", "sender", "data", "INonfungiblePositionManager", "SwapQuoter", "quoteCallParameters", "singleHop", "quoteAmount", "swapInterface", "useQuoterV2", "V2INTERFACE", "V1INTERFACE", "baseQuoteParams", "v2QuoteParams", "v1QuoteParams", "tradeTypeFunctionName", "IQuoter", "IQuoterV2", "Staker", "encodeClaim", "incentiveKey", "_encodeIncentiveKey", "rewardToken", "collectRewards", "incentiveKeys", "withdrawToken", "withdrawOptions", "claimOptions", "owner", "encodeDeposit", "INCENTIVE_KEY_ABI", "refundee", "startTime", "endTime", "IUniswapV3Staker", "SwapRouter", "swapCallParameters", "trades", "sampleTrade", "trade", "ZERO_IN", "ZERO_OUT", "totalAmountOut", "mustRefund", "inputIsNative", "outputIsNative", "routerMustCustody", "totalValue", "inputTokenPermit", "exactInputSingleParams", "amountOutMinimum", "exactOutputSingleParams", "amountInMaximum", "exactInputParams", "exactOutputParams", "ISwapRouter"]
}
